
Soft_Rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006448  08006448  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000074  080064c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080064c4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001491b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed6  00000000  00000000  000349bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028796  00000000  00000000  00039880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140e1  00000000  00000000  00062016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1171  00000000  00000000  000760f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d98  00000000  00000000  001672bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800630c 	.word	0x0800630c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800630c 	.word	0x0800630c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <GetTouchPoint>:
/*
Notes:
I2C address 0x38

*/
void GetTouchPoint(I2C_HandleTypeDef* hi2c,uint8_t I2Caddr,uint8_t PointNR,uint16_t* TouchPointX,uint16_t* TouchPointY,uint8_t* TouchType,uint8_t* TouchPressure){
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	72fb      	strb	r3, [r7, #11]
 80005b6:	4613      	mov	r3, r2
 80005b8:	72bb      	strb	r3, [r7, #10]
    uint8_t I2CBuffer[5],I2CTransmit;
	I2CTransmit = TouchPointBaseAddr[PointNR-1];
 80005ba:	7abb      	ldrb	r3, [r7, #10]
 80005bc:	3b01      	subs	r3, #1
 80005be:	4a2b      	ldr	r2, [pc, #172]	; (800066c <GetTouchPoint+0xc4>)
 80005c0:	5cd3      	ldrb	r3, [r2, r3]
 80005c2:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(hi2c,I2Caddr*2,&I2CTransmit,1,100);
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	b299      	uxth	r1, r3
 80005cc:	f107 0217 	add.w	r2, r7, #23
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f001 fe24 	bl	8002224 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c,(I2Caddr*2)+1,&I2CBuffer,5,100);
 80005dc:	7afb      	ldrb	r3, [r7, #11]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b299      	uxth	r1, r3
 80005e8:	f107 0218 	add.w	r2, r7, #24
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2305      	movs	r3, #5
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f001 ff0a 	bl	800240c <HAL_I2C_Master_Receive>
	//Get Event Flag from Buffer
	*TouchType = (I2CBuffer[0] & 0xC0) >> 6;
 80005f8:	7e3b      	ldrb	r3, [r7, #24]
 80005fa:	099b      	lsrs	r3, r3, #6
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000600:	701a      	strb	r2, [r3, #0]
	*TouchPointX = ((I2CBuffer[0] & 0x0F) << 8) | I2CBuffer[1];
 8000602:	7e3b      	ldrb	r3, [r7, #24]
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	b21b      	sxth	r3, r3
 8000608:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800060c:	b21a      	sxth	r2, r3
 800060e:	7e7b      	ldrb	r3, [r7, #25]
 8000610:	b21b      	sxth	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b21b      	sxth	r3, r3
 8000616:	b29a      	uxth	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	801a      	strh	r2, [r3, #0]
	*TouchPointY = ((I2CBuffer[2] & 0x0F) << 8) | I2CBuffer[3];
 800061c:	7ebb      	ldrb	r3, [r7, #26]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21b      	sxth	r3, r3
 8000622:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000626:	b21a      	sxth	r2, r3
 8000628:	7efb      	ldrb	r3, [r7, #27]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	b29a      	uxth	r2, r3
 8000632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000634:	801a      	strh	r2, [r3, #0]
	*TouchPressure = I2CBuffer[3];
 8000636:	7efa      	ldrb	r2, [r7, #27]
 8000638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800063a:	701a      	strb	r2, [r3, #0]
	//Debug
	printf("TouchPoint:%d X:%d Y%d Type:%d Pressure:%d\n\r",PointNR,*TouchPointX,*TouchPointY,*TouchType,*TouchPressure);
 800063c:	7ab9      	ldrb	r1, [r7, #10]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	461c      	mov	r4, r3
 800064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	4623      	mov	r3, r4
 800065a:	4602      	mov	r2, r0
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <GetTouchPoint+0xc8>)
 800065e:	f004 fd2d 	bl	80050bc <iprintf>
}
 8000662:	bf00      	nop
 8000664:	3724      	adds	r7, #36	; 0x24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	08006384 	.word	0x08006384
 8000670:	08006324 	.word	0x08006324

08000674 <_write>:

#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d003      	beq.n	800068e <_write+0x1a>
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d015      	beq.n	80006b8 <_write+0x44>
 800068c:	e029      	b.n	80006e2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	b29a      	uxth	r2, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	481a      	ldr	r0, [pc, #104]	; (8000704 <_write+0x90>)
 800069a:	f003 ff6c 	bl	8004576 <HAL_UART_Transmit>
 800069e:	4603      	mov	r3, r0
 80006a0:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <_write+0x7e>
			errno = EIO;
 80006a8:	f004 fcd6 	bl	8005058 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2205      	movs	r2, #5
 80006b0:	601a      	str	r2, [r3, #0]
			return -1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e020      	b.n	80006fa <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <_write+0x90>)
 80006c4:	f003 ff57 	bl	8004576 <HAL_UART_Transmit>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d011      	beq.n	80006f6 <_write+0x82>
			errno = EIO;
 80006d2:	f004 fcc1 	bl	8005058 <__errno>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2205      	movs	r2, #5
 80006da:	601a      	str	r2, [r3, #0]
			return -1;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	e00b      	b.n	80006fa <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80006e2:	f004 fcb9 	bl	8005058 <__errno>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2209      	movs	r2, #9
 80006ea:	601a      	str	r2, [r3, #0]
        return -1;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	e003      	b.n	80006fa <_write+0x86>
        break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <_write+0x84>
        break;
 80006f6:	bf00      	nop
    }
    return len;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001c8 	.word	0x200001c8

08000708 <twiScan>:

void twiScan(void)
{
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b092      	sub	sp, #72	; 0x48
 800070c:	af00      	add	r7, sp, #0
uint8_t Buffer[25] = {0};
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	751a      	strb	r2, [r3, #20]
uint8_t Space[] = " - ";
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <twiScan+0xf0>)
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000728:	4b34      	ldr	r3, [pc, #208]	; (80007fc <twiScan+0xf4>)
 800072a:	f107 040c 	add.w	r4, r7, #12
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	c403      	stmia	r4!, {r0, r1}
 800073a:	8022      	strh	r2, [r4, #0]
uint8_t EndMSG[] = "Done! \r\n\r\n";
 800073c:	4a30      	ldr	r2, [pc, #192]	; (8000800 <twiScan+0xf8>)
 800073e:	463b      	mov	r3, r7
 8000740:	ca07      	ldmia	r2, {r0, r1, r2}
 8000742:	c303      	stmia	r3!, {r0, r1}
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	3302      	adds	r3, #2
 8000748:	0c12      	lsrs	r2, r2, #16
 800074a:	701a      	strb	r2, [r3, #0]

uint8_t i = 0, ret;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

HAL_Delay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f001 f83f 	bl	80017d8 <HAL_Delay>
/*-[ I2C Bus Scanning ]-*/
HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 800075a:	f107 010c 	add.w	r1, r7, #12
 800075e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000762:	221a      	movs	r2, #26
 8000764:	4827      	ldr	r0, [pc, #156]	; (8000804 <twiScan+0xfc>)
 8000766:	f003 ff06 	bl	8004576 <HAL_UART_Transmit>
for(i=1; i<128; i++)
 800076a:	2301      	movs	r3, #1
 800076c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000770:	e032      	b.n	80007d8 <twiScan+0xd0>
{
	ret = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i<<1), 3, 5);
 8000772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000776:	b29b      	uxth	r3, r3
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b299      	uxth	r1, r3
 800077c:	2305      	movs	r3, #5
 800077e:	2203      	movs	r2, #3
 8000780:	4821      	ldr	r0, [pc, #132]	; (8000808 <twiScan+0x100>)
 8000782:	f001 ff39 	bl	80025f8 <HAL_I2C_IsDeviceReady>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	if (ret != HAL_OK) /* No ACK Received At That Address */
 800078c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <twiScan+0x9e>
	{
	    HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 8000794:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000798:	f242 7310 	movw	r3, #10000	; 0x2710
 800079c:	2204      	movs	r2, #4
 800079e:	4819      	ldr	r0, [pc, #100]	; (8000804 <twiScan+0xfc>)
 80007a0:	f003 fee9 	bl	8004576 <HAL_UART_Transmit>
 80007a4:	e013      	b.n	80007ce <twiScan+0xc6>
    }
	else if(ret == HAL_OK)
 80007a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10f      	bne.n	80007ce <twiScan+0xc6>
	{
	    sprintf(Buffer, "0x%X", i);
 80007ae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80007b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b6:	4915      	ldr	r1, [pc, #84]	; (800080c <twiScan+0x104>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 fc97 	bl	80050ec <siprintf>
	    HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 80007be:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80007c6:	2219      	movs	r2, #25
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <twiScan+0xfc>)
 80007ca:	f003 fed4 	bl	8004576 <HAL_UART_Transmit>
for(i=1; i<128; i++)
 80007ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007d2:	3301      	adds	r3, #1
 80007d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dac8      	bge.n	8000772 <twiScan+0x6a>
	}
}
HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 80007e0:	4639      	mov	r1, r7
 80007e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e6:	220b      	movs	r2, #11
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <twiScan+0xfc>)
 80007ea:	f003 fec4 	bl	8004576 <HAL_UART_Transmit>
/*--[ Scanning Done ]--*/
}
 80007ee:	bf00      	nop
 80007f0:	3748      	adds	r7, #72	; 0x48
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	00202d20 	.word	0x00202d20
 80007fc:	0800635c 	.word	0x0800635c
 8000800:	08006378 	.word	0x08006378
 8000804:	200001c8 	.word	0x200001c8
 8000808:	200000b0 	.word	0x200000b0
 800080c:	08006354 	.word	0x08006354

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 ff82 	bl	800171e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f843 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 fa7f 	bl	8000d20 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000822:	f000 f975 	bl	8000b10 <MX_LTDC_Init>
  MX_FMC_Init();
 8000826:	f000 fa25 	bl	8000c74 <MX_FMC_Init>
  MX_DMA2D_Init();
 800082a:	f000 f8ff 	bl	8000a2c <MX_DMA2D_Init>
  MX_CRC_Init();
 800082e:	f000 f8db 	bl	80009e8 <MX_CRC_Init>
  MX_I2C3_Init();
 8000832:	f000 f92d 	bl	8000a90 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000836:	f000 f9ed 	bl	8000c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(300);
 800083a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800083e:	f000 ffcb 	bl	80017d8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_Baclight_GPIO_Port,LCD_Baclight_Pin,GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2108      	movs	r1, #8
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <main+0x88>)
 8000848:	f001 fc42 	bl	80020d0 <HAL_GPIO_WritePin>

  //Clear LCD buffer
  for(uint32_t i = 0;i < DisplayBufferLenght;i++){
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e009      	b.n	8000866 <main+0x56>
	 framebuffer[i] = 0;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0x8c>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]
  for(uint32_t i = 0;i < DisplayBufferLenght;i++){
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f5b3 1fe1 	cmp.w	r3, #1843200	; 0x1c2000
 800086c:	d3f1      	bcc.n	8000852 <main+0x42>
  }

  twiScan();
 800086e:	f7ff ff4b 	bl	8000708 <twiScan>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 GetTouchPoint(&hi2c3,0x38,1,&X,&Y,&Touch,&Pressure);
 8000872:	f107 020a 	add.w	r2, r7, #10
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	2201      	movs	r2, #1
 8000888:	2138      	movs	r1, #56	; 0x38
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <main+0x90>)
 800088c:	f7ff fe8c 	bl	80005a8 <GetTouchPoint>
  HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f000 ffa1 	bl	80017d8 <HAL_Delay>
  {
 8000896:	e7ec      	b.n	8000872 <main+0x62>
 8000898:	40022000 	.word	0x40022000
 800089c:	20000000 	.word	0x20000000
 80008a0:	200000b0 	.word	0x200000b0

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0b4      	sub	sp, #208	; 0xd0
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fbfa 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2284      	movs	r2, #132	; 0x84
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fbeb 	bl	80050ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d6:	f002 fcb7 	bl	8003248 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b40      	ldr	r3, [pc, #256]	; (80009dc <SystemClock_Config+0x138>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a3f      	ldr	r2, [pc, #252]	; (80009dc <SystemClock_Config+0x138>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <SystemClock_Config+0x138>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <SystemClock_Config+0x13c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <SystemClock_Config+0x13c>)
 80008f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <SystemClock_Config+0x13c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2310      	movs	r3, #16
 8000918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800092e:	23d8      	movs	r3, #216	; 0xd8
 8000930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fcdf 	bl	8003308 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000950:	f000 fb5e 	bl	8001010 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000954:	f002 fc88 	bl	8003268 <HAL_PWREx_EnableOverDrive>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800095e:	f000 fb57 	bl	8001010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000974:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000984:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000988:	2107      	movs	r1, #7
 800098a:	4618      	mov	r0, r3
 800098c:	f002 ff60 	bl	8003850 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000996:	f000 fb3b 	bl	8001010 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <SystemClock_Config+0x140>)
 800099c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 f91a 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80009ce:	f000 fb1f 	bl	8001010 <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	37d0      	adds	r7, #208	; 0xd0
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000
 80009e4:	00010048 	.word	0x00010048

080009e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_CRC_Init+0x3c>)
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <MX_CRC_Init+0x40>)
 80009f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_CRC_Init+0x3c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_CRC_Init+0x3c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_CRC_Init+0x3c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_CRC_Init+0x3c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_CRC_Init+0x3c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_CRC_Init+0x3c>)
 8000a12:	f000 ffeb 	bl	80019ec <HAL_CRC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a1c:	f000 faf8 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000fc 	.word	0x200000fc
 8000a28:	40023000 	.word	0x40023000

08000a2c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <MX_DMA2D_Init+0x60>)
 8000a34:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a62:	f001 f8ad 	bl	8001bc0 <HAL_DMA2D_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a6c:	f000 fad0 	bl	8001010 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a70:	2101      	movs	r1, #1
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_DMA2D_Init+0x5c>)
 8000a74:	f001 f8ee 	bl	8001c54 <HAL_DMA2D_ConfigLayer>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a7e:	f000 fac7 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000024c 	.word	0x2000024c
 8000a8c:	4002b000 	.word	0x4002b000

08000a90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C3_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_I2C3_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000acc:	f001 fb1a 	bl	8002104 <HAL_I2C_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ad6:	f000 fa9b 	bl	8001010 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000ade:	f002 f873 	bl	8002bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 fa92 	bl	8001010 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_I2C3_Init+0x74>)
 8000af0:	f002 f8b5 	bl	8002c5e <HAL_I2CEx_ConfigDigitalFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 fa89 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000b0 	.word	0x200000b0
 8000b08:	40005c00 	.word	0x40005c00
 8000b0c:	20404768 	.word	0x20404768

08000b10 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2234      	movs	r2, #52	; 0x34
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fac5 	bl	80050ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b24:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <MX_LTDC_Init+0x100>)
 8000b26:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b28:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b3a:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 15;
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b42:	220f      	movs	r2, #15
 8000b44:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 175;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b4e:	22af      	movs	r2, #175	; 0xaf
 8000b50:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 30;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b54:	221e      	movs	r2, #30
 8000b56:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1199;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b5a:	f240 42af 	movw	r2, #1199	; 0x4af
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 630;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b62:	f240 2276 	movw	r2, #630	; 0x276
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1359;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b6a:	f240 524f 	movw	r2, #1359	; 0x54f
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 642;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b72:	f240 2282 	movw	r2, #642	; 0x282
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b90:	481e      	ldr	r0, [pc, #120]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000b92:	f002 f8b1 	bl	8002cf8 <HAL_LTDC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b9c:	f000 fa38 	bl	8001010 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000bae:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000bb2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bb8:	23ff      	movs	r3, #255	; 0xff
 8000bba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000bd6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_LTDC_Init+0xfc>)
 8000bf6:	f002 f94f 	bl	8002e98 <HAL_LTDC_ConfigLayer>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000c00:	f000 fa06 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000120 	.word	0x20000120
 8000c10:	40016800 	.word	0x40016800

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART1_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c58:	f003 fc3f 	bl	80044da <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f9d5 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200001c8 	.word	0x200001c8
 8000c70:	40011000 	.word	0x40011000

08000c74 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_FMC_Init+0xa8>)
 8000c90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000cb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_FMC_Init+0xa4>)
 8000cf4:	f003 fb72 	bl	80043dc <HAL_SDRAM_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000cfe:	f000 f987 	bl	8001010 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  MX_SDRAM_InitSeqeunce(SDRAM_REFRESH_COUNT,SDRAM_TIMEOUT);
 8000d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d06:	f240 6003 	movw	r0, #1539	; 0x603
 8000d0a:	f000 f923 	bl	8000f54 <MX_SDRAM_InitSeqeunce>
  /* USER CODE END FMC_Init 2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000028c 	.word	0x2000028c
 8000d1c:	a0000140 	.word	0xa0000140

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d36:	4b81      	ldr	r3, [pc, #516]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a80      	ldr	r2, [pc, #512]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b7e      	ldr	r3, [pc, #504]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a7a      	ldr	r2, [pc, #488]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b75      	ldr	r3, [pc, #468]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a74      	ldr	r2, [pc, #464]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b72      	ldr	r3, [pc, #456]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7e:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b6c      	ldr	r3, [pc, #432]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a68      	ldr	r2, [pc, #416]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b66      	ldr	r3, [pc, #408]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	4b63      	ldr	r3, [pc, #396]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a62      	ldr	r2, [pc, #392]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b60      	ldr	r3, [pc, #384]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a56      	ldr	r2, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a50      	ldr	r2, [pc, #320]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b4e      	ldr	r3, [pc, #312]	; (8000f3c <MX_GPIO_Init+0x21c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_UPDN_GPIO_Port, LCD_UPDN_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2108      	movs	r1, #8
 8000e12:	484b      	ldr	r0, [pc, #300]	; (8000f40 <MX_GPIO_Init+0x220>)
 8000e14:	f001 f95c 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_SHLR_Pin|LCD_RESET_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000e1e:	4849      	ldr	r0, [pc, #292]	; (8000f44 <MX_GPIO_Init+0x224>)
 8000e20:	f001 f956 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DITHUB_GPIO_Port, LCD_DITHUB_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	4847      	ldr	r0, [pc, #284]	; (8000f48 <MX_GPIO_Init+0x228>)
 8000e2c:	f001 f950 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CT_RESET_GPIO_Port, LCD_CT_RESET_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4845      	ldr	r0, [pc, #276]	; (8000f4c <MX_GPIO_Init+0x22c>)
 8000e38:	f001 f94a 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Baclight_GPIO_Port, LCD_Baclight_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4840      	ldr	r0, [pc, #256]	; (8000f44 <MX_GPIO_Init+0x224>)
 8000e42:	f001 f945 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Mode_GPIO_Port, LCD_Mode_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	4841      	ldr	r0, [pc, #260]	; (8000f50 <MX_GPIO_Init+0x230>)
 8000e4c:	f001 f940 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_UPDN_Pin */
  GPIO_InitStruct.Pin = LCD_UPDN_Pin;
 8000e50:	2308      	movs	r3, #8
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_UPDN_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4836      	ldr	r0, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x220>)
 8000e68:	f000 ff86 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SHLR_Pin */
  GPIO_InitStruct.Pin = LCD_SHLR_Pin;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_SHLR_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	482f      	ldr	r0, [pc, #188]	; (8000f44 <MX_GPIO_Init+0x224>)
 8000e86:	f000 ff77 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DITHUB_Pin */
  GPIO_InitStruct.Pin = LCD_DITHUB_Pin;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DITHUB_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4829      	ldr	r0, [pc, #164]	; (8000f48 <MX_GPIO_Init+0x228>)
 8000ea4:	f000 ff68 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CT_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_CT_RESET_Pin;
 8000ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eae:	2311      	movs	r3, #17
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4822      	ldr	r0, [pc, #136]	; (8000f4c <MX_GPIO_Init+0x22c>)
 8000ec2:	f000 ff59 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x22c>)
 8000edc:	f000 ff4c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Baclight_Pin */
  GPIO_InitStruct.Pin = LCD_Baclight_Pin;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_Baclight_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x224>)
 8000ef8:	f000 ff3e 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Mode_Pin */
  GPIO_InitStruct.Pin = LCD_Mode_Pin;
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_Mode_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MX_GPIO_Init+0x230>)
 8000f14:	f000 ff30 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_GPIO_Init+0x224>)
 8000f30:	f000 ff22 	bl	8001d78 <HAL_GPIO_Init>

}
 8000f34:	bf00      	nop
 8000f36:	3738      	adds	r7, #56	; 0x38
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40022000 	.word	0x40022000
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <MX_SDRAM_InitSeqeunce>:

/* USER CODE BEGIN 4 */

void MX_SDRAM_InitSeqeunce(uint32_t RefreshCount,uint32_t timout){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	__IO uint32_t tmpmrd = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
	static FMC_SDRAM_CommandTypeDef Command;

	Command.CommandMode 			= FMC_SDRAM_CMD_CLK_ENABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4922      	ldr	r1, [pc, #136]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_SDRAM_InitSeqeunce+0xb8>)
 8000f80:	f003 fa60 	bl	8004444 <HAL_SDRAM_SendCommand>

	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fc27 	bl	80017d8 <HAL_Delay>

	Command.CommandMode 			= FMC_SDRAM_CMD_PALL;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4918      	ldr	r1, [pc, #96]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <MX_SDRAM_InitSeqeunce+0xb8>)
 8000fa8:	f003 fa4c 	bl	8004444 <HAL_SDRAM_SendCommand>

	Command.CommandMode 			= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 8;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4910      	ldr	r1, [pc, #64]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <MX_SDRAM_InitSeqeunce+0xb8>)
 8000fca:	f003 fa3b 	bl	8004444 <HAL_SDRAM_SendCommand>

    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000fce:	f240 2337 	movw	r3, #567	; 0x237
 8000fd2:	60fb      	str	r3, [r7, #12]
					   SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
					   SDRAM_MODEREG_CAS_LATENCY_3           |
					   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
					   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode 			= FMC_SDRAM_CMD_LOAD_MODE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= tmpmrd;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000fea:	60d3      	str	r3, [r2, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4906      	ldr	r1, [pc, #24]	; (8001008 <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_SDRAM_InitSeqeunce+0xb8>)
 8000ff2:	f003 fa27 	bl	8004444 <HAL_SDRAM_SendCommand>

	HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_SDRAM_InitSeqeunce+0xb8>)
 8000ffa:	f003 fa4e 	bl	800449a <HAL_SDRAM_ProgramRefreshRate>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000090 	.word	0x20000090
 800100c:	2000028c 	.word	0x2000028c

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	e7fe      	b.n	8001018 <Error_Handler+0x8>
	...

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_CRC_MspInit+0x38>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10b      	bne.n	800108e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_CRC_MspInit+0x3c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_CRC_MspInit+0x3c>)
 800107c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_CRC_MspInit+0x3c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023000 	.word	0x40023000
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_DMA2D_MspInit+0x38>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10b      	bne.n	80010ce <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_DMA2D_MspInit+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_DMA2D_MspInit+0x3c>)
 80010bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <HAL_DMA2D_MspInit+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	4002b000 	.word	0x4002b000
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_I2C_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d128      	bne.n	8001158 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_I2C_MspInit+0x80>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800111e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001130:	2304      	movs	r3, #4
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <HAL_I2C_MspInit+0x84>)
 800113c:	f000 fe1c 	bl	8001d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_I2C_MspInit+0x80>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40005c00 	.word	0x40005c00
 8001164:	40023800 	.word	0x40023800
 8001168:	40021c00 	.word	0x40021c00

0800116c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b090      	sub	sp, #64	; 0x40
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a7d      	ldr	r2, [pc, #500]	; (8001380 <HAL_LTDC_MspInit+0x214>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 80f3 	bne.w	8001376 <HAL_LTDC_MspInit+0x20a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001190:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	4a7b      	ldr	r2, [pc, #492]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800119a:	6453      	str	r3, [r2, #68]	; 0x44
 800119c:	4b79      	ldr	r3, [pc, #484]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a8:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b73      	ldr	r3, [pc, #460]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a6f      	ldr	r2, [pc, #444]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011de:	f043 0320 	orr.w	r3, r3, #32
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a5d      	ldr	r2, [pc, #372]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800120e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b55      	ldr	r3, [pc, #340]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001268:	2370      	movs	r3, #112	; 0x70
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001278:	230e      	movs	r3, #14
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001280:	4619      	mov	r1, r3
 8001282:	4841      	ldr	r0, [pc, #260]	; (8001388 <HAL_LTDC_MspInit+0x21c>)
 8001284:	f000 fd78 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001288:	f240 6337 	movw	r3, #1591	; 0x637
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800129a:	230e      	movs	r3, #14
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4619      	mov	r1, r3
 80012a4:	4839      	ldr	r0, [pc, #228]	; (800138c <HAL_LTDC_MspInit+0x220>)
 80012a6:	f000 fd67 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012bc:	230e      	movs	r3, #14
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4832      	ldr	r0, [pc, #200]	; (8001390 <HAL_LTDC_MspInit+0x224>)
 80012c8:	f000 fd56 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012cc:	f64e 6308 	movw	r3, #60936	; 0xee08
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012de:	230e      	movs	r3, #14
 80012e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <HAL_LTDC_MspInit+0x228>)
 80012ea:	f000 fd45 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 80012ee:	f44f 5373 	mov.w	r3, #15552	; 0x3cc0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	4823      	ldr	r0, [pc, #140]	; (8001398 <HAL_LTDC_MspInit+0x22c>)
 800130c:	f000 fd34 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001322:	230e      	movs	r3, #14
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <HAL_LTDC_MspInit+0x230>)
 800132e:	f000 fd23 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001344:	230e      	movs	r3, #14
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <HAL_LTDC_MspInit+0x234>)
 8001350:	f000 fd12 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001366:	230e      	movs	r3, #14
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <HAL_LTDC_MspInit+0x238>)
 8001372:	f000 fd01 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3740      	adds	r7, #64	; 0x40
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40016800 	.word	0x40016800
 8001384:	40023800 	.word	0x40023800
 8001388:	40021000 	.word	0x40021000
 800138c:	40022000 	.word	0x40022000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40021800 	.word	0x40021800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_UART_MspInit+0x7c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d128      	bne.n	800141c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_MspInit+0x80>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800140c:	2307      	movs	r3, #7
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_UART_MspInit+0x84>)
 8001418:	f000 fcae 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40011000 	.word	0x40011000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_FMC_MspInit+0xe4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d15e      	bne.n	800150a <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_FMC_MspInit+0xe4>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_FMC_MspInit+0xe8>)
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_FMC_MspInit+0xe8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6393      	str	r3, [r2, #56]	; 0x38
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_FMC_MspInit+0xe8>)
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800146a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800146e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147c:	230c      	movs	r3, #12
 800147e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	; (800151c <HAL_FMC_MspInit+0xec>)
 8001486:	f000 fc77 	bl	8001d78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800148a:	230d      	movs	r3, #13
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149a:	230c      	movs	r3, #12
 800149c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <HAL_FMC_MspInit+0xf0>)
 80014a4:	f000 fc68 	bl	8001d78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80014a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80014ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <HAL_FMC_MspInit+0xf4>)
 80014c4:	f000 fc58 	bl	8001d78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <HAL_FMC_MspInit+0xf8>)
 80014e4:	f000 fc48 	bl	8001d78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014e8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80014ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <HAL_FMC_MspInit+0xfc>)
 8001504:	f000 fc38 	bl	8001d78 <HAL_GPIO_Init>
 8001508:	e000      	b.n	800150c <HAL_FMC_MspInit+0xdc>
    return;
 800150a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000a0 	.word	0x200000a0
 8001518:	40023800 	.word	0x40023800
 800151c:	40021400 	.word	0x40021400
 8001520:	40020800 	.word	0x40020800
 8001524:	40021800 	.word	0x40021800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00

08001530 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001538:	f7ff ff7a 	bl	8001430 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f902 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
	}

return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fa:	605a      	str	r2, [r3, #4]
	return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_isatty>:

int _isatty(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f003 fcf4 	bl	8005058 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20050000 	.word	0x20050000
 800169c:	00000400 	.word	0x00000400
 80016a0:	200000a4 	.word	0x200000a4
 80016a4:	200002d8 	.word	0x200002d8

080016a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f6:	f7ff ffd7 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f003 fcb3 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff f887 	bl	8000810 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001710:	08006450 	.word	0x08006450
  ldr r2, =_sbss
 8001714:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001718:	200002d4 	.word	0x200002d4

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>

0800171e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f92e 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001728:	2000      	movs	r0, #0
 800172a:	f000 f805 	bl	8001738 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fc75 	bl	800101c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f93b 	bl	80019d2 <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f911 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000004 	.word	0x20000004
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	200002c0 	.word	0x200002c0

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200002c0 	.word	0x200002c0

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	05fa0000 	.word	0x05fa0000

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff47 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5c 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb0 	bl	8001940 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e054      	b.n	8001aa8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7f5b      	ldrb	r3, [r3, #29]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fb28 	bl	8001064 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_CRC_Init+0xc4>)
 8001a28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0218 	bic.w	r2, r2, #24
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	e00c      	b.n	8001a56 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f834 	bl	8001ab4 <HAL_CRCEx_Polynomial_Set>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e028      	b.n	8001aa8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f04f 32ff 	mov.w	r2, #4294967295
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	e004      	b.n	8001a74 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6912      	ldr	r2, [r2, #16]
 8001a72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	04c11db7 	.word	0x04c11db7

08001ab4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ac4:	231f      	movs	r3, #31
 8001ac6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ac8:	bf00      	nop
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	613a      	str	r2, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_CRCEx_Polynomial_Set+0x16>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d846      	bhi.n	8001b7c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b83 	.word	0x08001b83
 8001af8:	08001b7d 	.word	0x08001b7d
 8001afc:	08001b7d 	.word	0x08001b7d
 8001b00:	08001b7d 	.word	0x08001b7d
 8001b04:	08001b7d 	.word	0x08001b7d
 8001b08:	08001b7d 	.word	0x08001b7d
 8001b0c:	08001b7d 	.word	0x08001b7d
 8001b10:	08001b7d 	.word	0x08001b7d
 8001b14:	08001b71 	.word	0x08001b71
 8001b18:	08001b7d 	.word	0x08001b7d
 8001b1c:	08001b7d 	.word	0x08001b7d
 8001b20:	08001b7d 	.word	0x08001b7d
 8001b24:	08001b7d 	.word	0x08001b7d
 8001b28:	08001b7d 	.word	0x08001b7d
 8001b2c:	08001b7d 	.word	0x08001b7d
 8001b30:	08001b7d 	.word	0x08001b7d
 8001b34:	08001b65 	.word	0x08001b65
 8001b38:	08001b7d 	.word	0x08001b7d
 8001b3c:	08001b7d 	.word	0x08001b7d
 8001b40:	08001b7d 	.word	0x08001b7d
 8001b44:	08001b7d 	.word	0x08001b7d
 8001b48:	08001b7d 	.word	0x08001b7d
 8001b4c:	08001b7d 	.word	0x08001b7d
 8001b50:	08001b7d 	.word	0x08001b7d
 8001b54:	08001b59 	.word	0x08001b59
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d913      	bls.n	8001b86 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b62:	e010      	b.n	8001b86 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b07      	cmp	r3, #7
 8001b68:	d90f      	bls.n	8001b8a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b6e:	e00c      	b.n	8001b8a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d90b      	bls.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b7a:	e008      	b.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8001b80:	e006      	b.n	8001b90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b82:	bf00      	nop
 8001b84:	e004      	b.n	8001b90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b8e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 0118 	bic.w	r1, r3, #24
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e039      	b.n	8001c46 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fa5c 	bl	80010a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	f023 0107 	bic.w	r1, r3, #7
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_DMA2D_Init+0x90>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68d1      	ldr	r1, [r2, #12]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	ffffc000 	.word	0xffffc000

08001c54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA2D_ConfigLayer+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e079      	b.n	8001d68 <HAL_DMA2D_ConfigLayer+0x114>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	3318      	adds	r3, #24
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ca0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0a      	cmp	r3, #10
 8001ca8:	d003      	beq.n	8001cb2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	d107      	bne.n	8001cc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e005      	b.n	8001cce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d120      	bne.n	8001d16 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	ea02 0103 	and.w	r1, r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b0a      	cmp	r3, #10
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA2D_ConfigLayer+0xb2>
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b09      	cmp	r3, #9
 8001d04:	d127      	bne.n	8001d56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
 8001d14:	e01f      	b.n	8001d56 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	ea02 0103 	and.w	r1, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b0a      	cmp	r3, #10
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d106      	bne.n	8001d56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d54:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	ff03000f 	.word	0xff03000f

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e175      	b.n	8002084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8164 	bne.w	800207e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_GPIO_Init+0x5e>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dca:	2b11      	cmp	r3, #17
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d130      	bne.n	8001e38 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0201 	and.w	r2, r3, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x100>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80be 	beq.w	800207e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a56      	ldr	r2, [pc, #344]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f8e:	2309      	movs	r3, #9
 8001f90:	e012      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f92:	230a      	movs	r3, #10
 8001f94:	e010      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00e      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_GPIO_Init+0x354>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_GPIO_Init+0x354>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae86 	bls.w	8001d98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022400 	.word	0x40022400
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe ffda 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e006      	b.n	800218c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800218a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d104      	bne.n	800219e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_I2C_Init+0x11c>)
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69d9      	ldr	r1, [r3, #28]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	02008000 	.word	0x02008000

08002224 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	817b      	strh	r3, [r7, #10]
 8002234:	4613      	mov	r3, r2
 8002236:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	f040 80da 	bne.w	80023fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x30>
 8002250:	2302      	movs	r3, #2
 8002252:	e0d3      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225c:	f7ff fab0 	bl	80017c0 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2319      	movs	r3, #25
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 faee 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0be      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2221      	movs	r2, #33	; 0x21
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2210      	movs	r2, #16
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	893a      	ldrh	r2, [r7, #8]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2bff      	cmp	r3, #255	; 0xff
 80022ae:	d90e      	bls.n	80022ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_I2C_Master_Transmit+0x1e0>)
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fc50 	bl	8002b6c <I2C_TransferConfig>
 80022cc:	e06c      	b.n	80023a8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_I2C_Master_Transmit+0x1e0>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fc3f 	bl	8002b6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80022ee:	e05b      	b.n	80023a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6a39      	ldr	r1, [r7, #32]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 faeb 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e07b      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d034      	beq.n	80023a8 <HAL_I2C_Master_Transmit+0x184>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d130      	bne.n	80023a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fa7d 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04d      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d90e      	bls.n	8002388 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	b2da      	uxtb	r2, r3
 8002376:	8979      	ldrh	r1, [r7, #10]
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fbf3 	bl	8002b6c <I2C_TransferConfig>
 8002386:	e00f      	b.n	80023a8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	b2da      	uxtb	r2, r3
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	2300      	movs	r3, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fbe2 	bl	8002b6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d19e      	bne.n	80022f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 faca 	bl	8002950 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01a      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2220      	movs	r2, #32
 80023cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_I2C_Master_Transmit+0x1e4>)
 80023da:	400b      	ands	r3, r1
 80023dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	80002000 	.word	0x80002000
 8002408:	fe00e800 	.word	0xfe00e800

0800240c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c,uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	461a      	mov	r2, r3
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	4613      	mov	r3, r2
 800241e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b20      	cmp	r3, #32
 800242a:	f040 80db 	bne.w	80025e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Receive+0x30>
 8002438:	2302      	movs	r3, #2
 800243a:	e0d4      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002444:	f7ff f9bc 	bl	80017c0 <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f9fa 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0bf      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2222      	movs	r2, #34	; 0x22
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2210      	movs	r2, #16
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	893a      	ldrh	r2, [r7, #8]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2bff      	cmp	r3, #255	; 0xff
 8002496:	d90e      	bls.n	80024b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	22ff      	movs	r2, #255	; 0xff
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_I2C_Master_Receive+0x1e4>)
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb5c 	bl	8002b6c <I2C_TransferConfig>
 80024b4:	e06d      	b.n	8002592 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_I2C_Master_Receive+0x1e4>)
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fb4b 	bl	8002b6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024d6:	e05c      	b.n	8002592 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	6a39      	ldr	r1, [r7, #32]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fa73 	bl	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e07c      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d034      	beq.n	8002592 <HAL_I2C_Master_Receive+0x186>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d130      	bne.n	8002592 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2200      	movs	r2, #0
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f988 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e04d      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	2bff      	cmp	r3, #255	; 0xff
 8002552:	d90e      	bls.n	8002572 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	b2da      	uxtb	r2, r3
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	2300      	movs	r3, #0
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fafe 	bl	8002b6c <I2C_TransferConfig>
 8002570:	e00f      	b.n	8002592 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 faed 	bl	8002b6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d19d      	bne.n	80024d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	6a39      	ldr	r1, [r7, #32]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f9d5 	bl	8002950 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e01a      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2220      	movs	r2, #32
 80025b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_I2C_Master_Receive+0x1e8>)
 80025c4:	400b      	ands	r3, r1
 80025c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	80002400 	.word	0x80002400
 80025f4:	fe00e800 	.word	0xfe00e800

080025f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	460b      	mov	r3, r1
 8002606:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	f040 80ef 	bne.w	80027f8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002628:	d101      	bne.n	800262e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	e0e5      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_IsDeviceReady+0x44>
 8002638:	2302      	movs	r3, #2
 800263a:	e0de      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_I2C_IsDeviceReady+0x6e>
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_I2C_IsDeviceReady+0x20c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	e004      	b.n	8002670 <HAL_I2C_IsDeviceReady+0x78>
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002676:	f7ff f8a3 	bl	80017c0 <HAL_GetTick>
 800267a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b20      	cmp	r3, #32
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b10      	cmp	r3, #16
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026a8:	e034      	b.n	8002714 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d01a      	beq.n	80026e8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7ff f885 	bl	80017c0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <HAL_I2C_IsDeviceReady+0xd0>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e088      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b10      	cmp	r3, #16
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002714:	7ffb      	ldrb	r3, [r7, #31]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_I2C_IsDeviceReady+0x128>
 800271a:	7fbb      	ldrb	r3, [r7, #30]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0c4      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d01a      	beq.n	8002764 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	2120      	movs	r1, #32
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f889 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e058      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2220      	movs	r2, #32
 800274e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e04a      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2120      	movs	r1, #32
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f86e 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e03d      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2220      	movs	r2, #32
 800278c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d118      	bne.n	80027c8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2120      	movs	r1, #32
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f84d 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e01c      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2220      	movs	r2, #32
 80027c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3301      	adds	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	f63f af3d 	bhi.w	8002652 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	02002000 	.word	0x02002000

08002808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d103      	bne.n	8002826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d007      	beq.n	8002844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	619a      	str	r2, [r3, #24]
  }
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002860:	e022      	b.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d01e      	beq.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7fe ffa9 	bl	80017c0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e00f      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d0cd      	beq.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028dc:	e02c      	b.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8dc 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e02a      	b.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d01e      	beq.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe ff61 	bl	80017c0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d113      	bne.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d1cb      	bne.n	80028de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	e028      	b.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f89c 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e026      	b.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe ff25 	bl	80017c0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d1cf      	bne.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d4:	e055      	b.n	8002a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f860 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e053      	b.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d129      	bne.n	8002a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d105      	bne.n	8002a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e03f      	b.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2220      	movs	r2, #32
 8002a18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002a26:	400b      	ands	r3, r1
 8002a28:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e022      	b.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4c:	f7fe feb8 	bl	80017c0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d302      	bcc.n	8002a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e007      	b.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d1a2      	bne.n	80029d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	fe00e800 	.word	0xfe00e800

08002aa0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d151      	bne.n	8002b5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aba:	e022      	b.n	8002b02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d01e      	beq.n	8002b02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fe7c 	bl	80017c0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_IsAcknowledgeFailed+0x3a>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d113      	bne.n	8002b02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f043 0220 	orr.w	r2, r3, #32
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e02e      	b.n	8002b60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d1d5      	bne.n	8002abc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fe71 	bl	8002808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b32:	400b      	ands	r3, r1
 8002b34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	fe00e800 	.word	0xfe00e800

08002b6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	0d5b      	lsrs	r3, r3, #21
 8002b88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <I2C_TransferConfig+0x58>)
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	43db      	mvns	r3, r3
 8002b92:	ea02 0103 	and.w	r1, r2, r3
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b9c:	7a7b      	ldrb	r3, [r7, #9]
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	03ff63ff 	.word	0x03ff63ff

08002bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d138      	bne.n	8002c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e032      	b.n	8002c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d139      	bne.n	8002ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e033      	b.n	8002cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2224      	movs	r2, #36	; 0x24
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e000      	b.n	8002cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0bf      	b.n	8002e8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe fa24 	bl	800116c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002d3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_LTDC_Init+0x19c>)
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68d9      	ldr	r1, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_LTDC_Init+0x19c>)
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68d9      	ldr	r1, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_LTDC_Init+0x19c>)
 8002dc8:	400b      	ands	r3, r1
 8002dca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6919      	ldr	r1, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6959      	ldr	r1, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_LTDC_Init+0x19c>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0206 	orr.w	r2, r2, #6
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	f000f800 	.word	0xf000f800

08002e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e02c      	b.n	8002f0c <HAL_LTDC_ConfigLayer+0x74>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2134      	movs	r1, #52	; 0x34
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f811 	bl	8002f14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}

08002f14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	4413      	add	r3, r2
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	01db      	lsls	r3, r3, #7
 8002f40:	4413      	add	r3, r2
 8002f42:	3384      	adds	r3, #132	; 0x84
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	01d2      	lsls	r2, r2, #7
 8002f50:	440a      	add	r2, r1
 8002f52:	3284      	adds	r2, #132	; 0x84
 8002f54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	4413      	add	r3, r2
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	01db      	lsls	r3, r3, #7
 8002f78:	440b      	add	r3, r1
 8002f7a:	3384      	adds	r3, #132	; 0x84
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f92:	4413      	add	r3, r2
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	01db      	lsls	r3, r3, #7
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3384      	adds	r3, #132	; 0x84
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4611      	mov	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	01d2      	lsls	r2, r2, #7
 8002fb2:	440a      	add	r2, r1
 8002fb4:	3284      	adds	r2, #132	; 0x84
 8002fb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fca:	4413      	add	r3, r2
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	01db      	lsls	r3, r3, #7
 8002fd8:	440b      	add	r3, r1
 8002fda:	3384      	adds	r3, #132	; 0x84
 8002fdc:	4619      	mov	r1, r3
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	01db      	lsls	r3, r3, #7
 8002fee:	4413      	add	r3, r2
 8002ff0:	3384      	adds	r3, #132	; 0x84
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	01d2      	lsls	r2, r2, #7
 8002ffe:	440a      	add	r2, r1
 8003000:	3284      	adds	r2, #132	; 0x84
 8003002:	f023 0307 	bic.w	r3, r3, #7
 8003006:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	4413      	add	r3, r2
 8003014:	3384      	adds	r3, #132	; 0x84
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	01db      	lsls	r3, r3, #7
 8003044:	4413      	add	r3, r2
 8003046:	3384      	adds	r3, #132	; 0x84
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	01db      	lsls	r3, r3, #7
 8003054:	4413      	add	r3, r2
 8003056:	3384      	adds	r3, #132	; 0x84
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003064:	461a      	mov	r2, r3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	431a      	orrs	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	01db      	lsls	r3, r3, #7
 8003078:	440b      	add	r3, r1
 800307a:	3384      	adds	r3, #132	; 0x84
 800307c:	4619      	mov	r1, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	01db      	lsls	r3, r3, #7
 800308e:	4413      	add	r3, r2
 8003090:	3384      	adds	r3, #132	; 0x84
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	4611      	mov	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	01d2      	lsls	r2, r2, #7
 800309e:	440a      	add	r2, r1
 80030a0:	3284      	adds	r2, #132	; 0x84
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	4413      	add	r3, r2
 80030b4:	3384      	adds	r3, #132	; 0x84
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	01db      	lsls	r3, r3, #7
 80030c8:	4413      	add	r3, r2
 80030ca:	3384      	adds	r3, #132	; 0x84
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	01db      	lsls	r3, r3, #7
 80030d8:	440b      	add	r3, r1
 80030da:	3384      	adds	r3, #132	; 0x84
 80030dc:	4619      	mov	r1, r3
 80030de:	4b58      	ldr	r3, [pc, #352]	; (8003240 <LTDC_SetConfig+0x32c>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	6809      	ldr	r1, [r1, #0]
 80030f0:	4608      	mov	r0, r1
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	01c9      	lsls	r1, r1, #7
 80030f6:	4401      	add	r1, r0
 80030f8:	3184      	adds	r1, #132	; 0x84
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	01db      	lsls	r3, r3, #7
 8003108:	4413      	add	r3, r2
 800310a:	3384      	adds	r3, #132	; 0x84
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	01db      	lsls	r3, r3, #7
 8003118:	4413      	add	r3, r2
 800311a:	3384      	adds	r3, #132	; 0x84
 800311c:	461a      	mov	r2, r3
 800311e:	2300      	movs	r3, #0
 8003120:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	01db      	lsls	r3, r3, #7
 800312c:	4413      	add	r3, r2
 800312e:	3384      	adds	r3, #132	; 0x84
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003140:	2304      	movs	r3, #4
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e01b      	b.n	800317e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800314e:	2303      	movs	r3, #3
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e014      	b.n	800317e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00b      	beq.n	8003174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003160:	2b02      	cmp	r3, #2
 8003162:	d007      	beq.n	8003174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003168:	2b03      	cmp	r3, #3
 800316a:	d003      	beq.n	8003174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003170:	2b07      	cmp	r3, #7
 8003172:	d102      	bne.n	800317a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003174:	2302      	movs	r3, #2
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	e001      	b.n	800317e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800317a:	2301      	movs	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	01db      	lsls	r3, r3, #7
 8003188:	4413      	add	r3, r2
 800318a:	3384      	adds	r3, #132	; 0x84
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4611      	mov	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	01d2      	lsls	r2, r2, #7
 8003198:	440a      	add	r2, r1
 800319a:	3284      	adds	r2, #132	; 0x84
 800319c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80031a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1acb      	subs	r3, r1, r3
 80031b8:	69f9      	ldr	r1, [r7, #28]
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	3303      	adds	r3, #3
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	4608      	mov	r0, r1
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	01c9      	lsls	r1, r1, #7
 80031ca:	4401      	add	r1, r0
 80031cc:	3184      	adds	r1, #132	; 0x84
 80031ce:	4313      	orrs	r3, r2
 80031d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	4413      	add	r3, r2
 80031de:	3384      	adds	r3, #132	; 0x84
 80031e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	01db      	lsls	r3, r3, #7
 80031ec:	440b      	add	r3, r1
 80031ee:	3384      	adds	r3, #132	; 0x84
 80031f0:	4619      	mov	r1, r3
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <LTDC_SetConfig+0x330>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	01db      	lsls	r3, r3, #7
 8003202:	4413      	add	r3, r2
 8003204:	3384      	adds	r3, #132	; 0x84
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	01db      	lsls	r3, r3, #7
 8003218:	4413      	add	r3, r2
 800321a:	3384      	adds	r3, #132	; 0x84
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	4611      	mov	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	01d2      	lsls	r2, r2, #7
 8003228:	440a      	add	r2, r1
 800322a:	3284      	adds	r2, #132	; 0x84
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	fffff8f8 	.word	0xfffff8f8
 8003244:	fffff800 	.word	0xfffff800

08003248 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003296:	f7fe fa93 	bl	80017c0 <HAL_GetTick>
 800329a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800329c:	e009      	b.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800329e:	f7fe fa8f 	bl	80017c0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ac:	d901      	bls.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e022      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d1ee      	bne.n	800329e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7fe fa78 	bl	80017c0 <HAL_GetTick>
 80032d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d2:	e009      	b.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d4:	f7fe fa74 	bl	80017c0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e2:	d901      	bls.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e007      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f4:	d1ee      	bne.n	80032d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e291      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8087 	beq.w	800343a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332c:	4b96      	ldr	r3, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b04      	cmp	r3, #4
 8003336:	d00c      	beq.n	8003352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003338:	4b93      	ldr	r3, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d112      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d06c      	beq.n	8003438 <HAL_RCC_OscConfig+0x130>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d168      	bne.n	8003438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e26b      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x7a>
 8003374:	4b84      	ldr	r3, [pc, #528]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a83      	ldr	r2, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e02e      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x9c>
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7b      	ldr	r2, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6b      	ldr	r2, [pc, #428]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe f9ea 	bl	80017c0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe f9e6 	bl	80017c0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e21f      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f9d6 	bl	80017c0 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe f9d2 	bl	80017c0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e20b      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x110>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d069      	beq.n	800351a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1df      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	493d      	ldr	r1, [pc, #244]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e040      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a38      	ldr	r2, [pc, #224]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe f988 	bl	80017c0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe f984 	bl	80017c0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1bd      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f964 	bl	80017c0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fe f960 	bl	80017c0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e199      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d038      	beq.n	8003598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe f941 	bl	80017c0 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe f93d 	bl	80017c0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e176      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x23a>
 8003560:	e01a      	b.n	8003598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe f927 	bl	80017c0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe f923 	bl	80017c0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d903      	bls.n	800358c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e15c      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
 8003588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a4 	beq.w	80036ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4b82      	ldr	r3, [pc, #520]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035da:	4b7f      	ldr	r3, [pc, #508]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7e      	ldr	r2, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe f8eb 	bl	80017c0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fe f8e7 	bl	80017c0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b64      	cmp	r3, #100	; 0x64
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e120      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x31a>
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a6e      	ldr	r2, [pc, #440]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e02d      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x33c>
 800362a:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a69      	ldr	r2, [pc, #420]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a66      	ldr	r2, [pc, #408]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	e01c      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x35e>
 800364c:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a60      	ldr	r2, [pc, #384]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003666:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5a      	ldr	r2, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a57      	ldr	r2, [pc, #348]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d015      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe f89b 	bl	80017c0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe f897 	bl	80017c0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0ce      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCC_OscConfig+0x386>
 80036b0:	e014      	b.n	80036dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe f885 	bl	80017c0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fe f881 	bl	80017c0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a4 	beq.w	8003840 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f8:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d06b      	beq.n	80037dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d149      	bne.n	80037a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe f852 	bl	80017c0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe f84e 	bl	80017c0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e087      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	4313      	orrs	r3, r2
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800376a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe f822 	bl	80017c0 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fe f81e 	bl	80017c0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e057      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x478>
 800379e:	e04f      	b.n	8003840 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80037a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f808 	bl	80017c0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe f804 	bl	80017c0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03d      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4ac>
 80037d2:	e035      	b.n	8003840 <HAL_RCC_OscConfig+0x538>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x544>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d028      	beq.n	800383c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d121      	bne.n	800383c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d11a      	bne.n	800383c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003814:	4293      	cmp	r3, r2
 8003816:	d111      	bne.n	800383c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 020f 	bic.w	r2, r3, #15
 800387e:	4965      	ldr	r1, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4936      	ldr	r1, [pc, #216]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fd ff3c 	bl	80017c0 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fd ff38 	bl	80017c0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 020f 	bic.w	r2, r3, #15
 800398a:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1cc>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d0>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1d4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fe98 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023c00 	.word	0x40023c00
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08006390 	.word	0x08006390
 8003a20:	20000004 	.word	0x20000004
 8003a24:	20000008 	.word	0x20000008

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6079      	str	r1, [r7, #4]
 8003a32:	2100      	movs	r1, #0
 8003a34:	60f9      	str	r1, [r7, #12]
 8003a36:	2100      	movs	r1, #0
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3e:	4952      	ldr	r1, [pc, #328]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a40:	6889      	ldr	r1, [r1, #8]
 8003a42:	f001 010c 	and.w	r1, r1, #12
 8003a46:	2908      	cmp	r1, #8
 8003a48:	d00d      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x3e>
 8003a4a:	2908      	cmp	r1, #8
 8003a4c:	f200 8094 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x150>
 8003a50:	2900      	cmp	r1, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x32>
 8003a54:	2904      	cmp	r1, #4
 8003a56:	d003      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x38>
 8003a58:	e08e      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a5a:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003a5c:	60bb      	str	r3, [r7, #8]
      break;
 8003a5e:	e08e      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a62:	60bb      	str	r3, [r7, #8]
      break;
 8003a64:	e08b      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a66:	4948      	ldr	r1, [pc, #288]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a68:	6849      	ldr	r1, [r1, #4]
 8003a6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a6e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a70:	4945      	ldr	r1, [pc, #276]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a72:	6849      	ldr	r1, [r1, #4]
 8003a74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d024      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7c:	4942      	ldr	r1, [pc, #264]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7e:	6849      	ldr	r1, [r1, #4]
 8003a80:	0989      	lsrs	r1, r1, #6
 8003a82:	4608      	mov	r0, r1
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a8c:	f04f 0500 	mov.w	r5, #0
 8003a90:	ea00 0204 	and.w	r2, r0, r4
 8003a94:	ea01 0305 	and.w	r3, r1, r5
 8003a98:	493d      	ldr	r1, [pc, #244]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a9a:	fb01 f003 	mul.w	r0, r1, r3
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	fb01 f102 	mul.w	r1, r1, r2
 8003aa4:	1844      	adds	r4, r0, r1
 8003aa6:	493a      	ldr	r1, [pc, #232]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aa8:	fba2 0101 	umull	r0, r1, r2, r1
 8003aac:	1863      	adds	r3, r4, r1
 8003aae:	4619      	mov	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f7fc fbfa 	bl	80002b0 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e04a      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	ea02 0400 	and.w	r4, r2, r0
 8003ade:	ea03 0501 	and.w	r5, r3, r1
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af4:	0142      	lsls	r2, r0, #5
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	1b00      	subs	r0, r0, r4
 8003afc:	eb61 0105 	sbc.w	r1, r1, r5
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	018b      	lsls	r3, r1, #6
 8003b0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b0e:	0182      	lsls	r2, r0, #6
 8003b10:	1a12      	subs	r2, r2, r0
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	00d9      	lsls	r1, r3, #3
 8003b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b24:	00d0      	lsls	r0, r2, #3
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	1912      	adds	r2, r2, r4
 8003b2c:	eb45 0303 	adc.w	r3, r5, r3
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0299      	lsls	r1, r3, #10
 8003b3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b3e:	0290      	lsls	r0, r2, #10
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	f7fc fbae 	bl	80002b0 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003b7a:	60bb      	str	r3, [r7, #8]
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	017d7840 	.word	0x017d7840

08003b94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000004 	.word	0x20000004

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	080063a0 	.word	0x080063a0

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd8:	f7ff ffdc 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0b5b      	lsrs	r3, r3, #13
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	080063a0 	.word	0x080063a0

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d012      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c24:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c2e:	6093      	str	r3, [r2, #8]
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	4964      	ldr	r1, [pc, #400]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	4959      	ldr	r1, [pc, #356]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c92:	4b4e      	ldr	r3, [pc, #312]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	494a      	ldr	r1, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 808b 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	4a39      	ldr	r2, [pc, #228]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6413      	str	r3, [r2, #64]	; 0x40
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd fd5c 	bl	80017c0 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd fd58 	bl	80017c0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e357      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d2a:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d035      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d02e      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d114      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fd20 	bl	80017c0 <HAL_GetTick>
 8003d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fd fd1c 	bl	80017c0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e319      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ee      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	4901      	ldr	r1, [pc, #4]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	0ffffcff 	.word	0x0ffffcff
 8003dd8:	4bb1      	ldr	r3, [pc, #708]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4ab0      	ldr	r2, [pc, #704]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	4bae      	ldr	r3, [pc, #696]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	49ab      	ldr	r1, [pc, #684]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d010      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e02:	4ba7      	ldr	r3, [pc, #668]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e08:	4aa5      	ldr	r2, [pc, #660]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e12:	4ba3      	ldr	r3, [pc, #652]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	49a0      	ldr	r1, [pc, #640]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e30:	4b9b      	ldr	r3, [pc, #620]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	4998      	ldr	r1, [pc, #608]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e52:	4b93      	ldr	r3, [pc, #588]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	498f      	ldr	r1, [pc, #572]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e74:	4b8a      	ldr	r3, [pc, #552]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	4987      	ldr	r1, [pc, #540]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e96:	4b82      	ldr	r3, [pc, #520]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	497e      	ldr	r1, [pc, #504]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	4976      	ldr	r1, [pc, #472]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eda:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	f023 020c 	bic.w	r2, r3, #12
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	496d      	ldr	r1, [pc, #436]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003efc:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	4965      	ldr	r1, [pc, #404]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f1e:	4b60      	ldr	r3, [pc, #384]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	495c      	ldr	r1, [pc, #368]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f40:	4b57      	ldr	r3, [pc, #348]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4954      	ldr	r1, [pc, #336]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f62:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	494b      	ldr	r1, [pc, #300]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	4943      	ldr	r1, [pc, #268]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	493a      	ldr	r1, [pc, #232]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd6:	4932      	ldr	r1, [pc, #200]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fea:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	4929      	ldr	r1, [pc, #164]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004038:	4919      	ldr	r1, [pc, #100]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405c:	4910      	ldr	r1, [pc, #64]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d006      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d9 	beq.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800407e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004084:	f7fd fb9c 	bl	80017c0 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800408c:	f7fd fb98 	bl	80017c0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d904      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e197      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040a4:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ed      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040d2:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	0e1b      	lsrs	r3, r3, #24
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	019a      	lsls	r2, r3, #6
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	4957      	ldr	r1, [pc, #348]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02e      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412a:	d129      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800412c:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	0f1b      	lsrs	r3, r3, #28
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	019a      	lsls	r2, r3, #6
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	431a      	orrs	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	071b      	lsls	r3, r3, #28
 8004160:	493d      	ldr	r1, [pc, #244]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416e:	f023 021f 	bic.w	r2, r3, #31
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	3b01      	subs	r3, #1
 8004178:	4937      	ldr	r1, [pc, #220]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004192:	0e1b      	lsrs	r3, r3, #24
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	0f1b      	lsrs	r3, r3, #28
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	019a      	lsls	r2, r3, #6
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	071b      	lsls	r3, r3, #28
 80041c0:	4925      	ldr	r1, [pc, #148]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d011      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	019a      	lsls	r2, r3, #6
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	4919      	ldr	r1, [pc, #100]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a16      	ldr	r2, [pc, #88]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fd fadc 	bl	80017c0 <HAL_GetTick>
 8004208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800420c:	f7fd fad8 	bl	80017c0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0d7      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 80cd 	bne.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423e:	f7fd fabf 	bl	80017c0 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004246:	f7fd fabb 	bl	80017c0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d903      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0ba      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004258:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800425c:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004268:	d0ed      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02e      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d12a      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042a0:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	0f1b      	lsrs	r3, r3, #28
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	4944      	ldr	r1, [pc, #272]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042ce:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	3b01      	subs	r3, #1
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	493d      	ldr	r1, [pc, #244]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fc:	d11d      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	0e1b      	lsrs	r3, r3, #24
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	0f1b      	lsrs	r3, r3, #28
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	019a      	lsls	r2, r3, #6
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	071b      	lsls	r3, r3, #28
 8004332:	4929      	ldr	r1, [pc, #164]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d028      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	0e1b      	lsrs	r3, r3, #24
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004354:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	019a      	lsls	r2, r3, #6
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	4917      	ldr	r1, [pc, #92]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4911      	ldr	r1, [pc, #68]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a4:	f7fd fa0c 	bl	80017c0 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043ac:	f7fd fa08 	bl	80017c0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e007      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ca:	d1ef      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800

080043dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e025      	b.n	800443c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fd f893 	bl	8001530 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 fcf1 	bl	8004e04 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	461a      	mov	r2, r3
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	f000 fd5b 	bl	8004ee8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d101      	bne.n	8004460 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	e018      	b.n	8004492 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fdb9 	bl	8004fe8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d104      	bne.n	8004488 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2205      	movs	r2, #5
 8004482:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004486:	e003      	b.n	8004490 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d101      	bne.n	80044b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
 80044b2:	e00e      	b.n	80044d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fdb4 	bl	8005030 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e040      	b.n	800456e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc ff53 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2224      	movs	r2, #36	; 0x24
 8004506:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8bf 	bl	800469c <UART_SetConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e022      	b.n	800456e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb15 	bl	8004b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004544:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004554:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb9c 	bl	8004ca4 <UART_CheckIdleState>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 8081 	bne.w	8004692 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Transmit+0x26>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e079      	b.n	8004694 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Transmit+0x38>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e072      	b.n	8004694 <HAL_UART_Transmit+0x11e>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2221      	movs	r2, #33	; 0x21
 80045c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c4:	f7fd f8fc 	bl	80017c0 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e2:	d108      	bne.n	80045f6 <HAL_UART_Transmit+0x80>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e003      	b.n	80045fe <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004606:	e02c      	b.n	8004662 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fb79 	bl	8004d0a <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e038      	b.n	8004694 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	3302      	adds	r3, #2
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e007      	b.n	8004650 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3301      	adds	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1cc      	bne.n	8004608 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	2140      	movs	r1, #64	; 0x40
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fb46 	bl	8004d0a <UART_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e005      	b.n	8004694 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004692:	2302      	movs	r3, #2
  }
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4ba7      	ldr	r3, [pc, #668]	; (8004964 <UART_SetConfig+0x2c8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6979      	ldr	r1, [r7, #20]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a95      	ldr	r2, [pc, #596]	; (8004968 <UART_SetConfig+0x2cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d120      	bne.n	800475a <UART_SetConfig+0xbe>
 8004718:	4b94      	ldr	r3, [pc, #592]	; (800496c <UART_SetConfig+0x2d0>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b03      	cmp	r3, #3
 8004724:	d816      	bhi.n	8004754 <UART_SetConfig+0xb8>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0x90>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	0800473d 	.word	0x0800473d
 8004730:	08004749 	.word	0x08004749
 8004734:	08004743 	.word	0x08004743
 8004738:	0800474f 	.word	0x0800474f
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e14f      	b.n	80049e2 <UART_SetConfig+0x346>
 8004742:	2302      	movs	r3, #2
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e14c      	b.n	80049e2 <UART_SetConfig+0x346>
 8004748:	2304      	movs	r3, #4
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e149      	b.n	80049e2 <UART_SetConfig+0x346>
 800474e:	2308      	movs	r3, #8
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e146      	b.n	80049e2 <UART_SetConfig+0x346>
 8004754:	2310      	movs	r3, #16
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e143      	b.n	80049e2 <UART_SetConfig+0x346>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a84      	ldr	r2, [pc, #528]	; (8004970 <UART_SetConfig+0x2d4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d132      	bne.n	80047ca <UART_SetConfig+0x12e>
 8004764:	4b81      	ldr	r3, [pc, #516]	; (800496c <UART_SetConfig+0x2d0>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d828      	bhi.n	80047c4 <UART_SetConfig+0x128>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0xdc>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047c5 	.word	0x080047c5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047b9 	.word	0x080047b9
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047b3 	.word	0x080047b3
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047c5 	.word	0x080047c5
 80047a8:	080047bf 	.word	0x080047bf
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e117      	b.n	80049e2 <UART_SetConfig+0x346>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e114      	b.n	80049e2 <UART_SetConfig+0x346>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e111      	b.n	80049e2 <UART_SetConfig+0x346>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e10e      	b.n	80049e2 <UART_SetConfig+0x346>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e10b      	b.n	80049e2 <UART_SetConfig+0x346>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a69      	ldr	r2, [pc, #420]	; (8004974 <UART_SetConfig+0x2d8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d120      	bne.n	8004816 <UART_SetConfig+0x17a>
 80047d4:	4b65      	ldr	r3, [pc, #404]	; (800496c <UART_SetConfig+0x2d0>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	d013      	beq.n	800480a <UART_SetConfig+0x16e>
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d814      	bhi.n	8004810 <UART_SetConfig+0x174>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d009      	beq.n	80047fe <UART_SetConfig+0x162>
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d810      	bhi.n	8004810 <UART_SetConfig+0x174>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <UART_SetConfig+0x15c>
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d006      	beq.n	8004804 <UART_SetConfig+0x168>
 80047f6:	e00b      	b.n	8004810 <UART_SetConfig+0x174>
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e0f1      	b.n	80049e2 <UART_SetConfig+0x346>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e0ee      	b.n	80049e2 <UART_SetConfig+0x346>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0eb      	b.n	80049e2 <UART_SetConfig+0x346>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0e8      	b.n	80049e2 <UART_SetConfig+0x346>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0e5      	b.n	80049e2 <UART_SetConfig+0x346>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a57      	ldr	r2, [pc, #348]	; (8004978 <UART_SetConfig+0x2dc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d120      	bne.n	8004862 <UART_SetConfig+0x1c6>
 8004820:	4b52      	ldr	r3, [pc, #328]	; (800496c <UART_SetConfig+0x2d0>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800482a:	2bc0      	cmp	r3, #192	; 0xc0
 800482c:	d013      	beq.n	8004856 <UART_SetConfig+0x1ba>
 800482e:	2bc0      	cmp	r3, #192	; 0xc0
 8004830:	d814      	bhi.n	800485c <UART_SetConfig+0x1c0>
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d009      	beq.n	800484a <UART_SetConfig+0x1ae>
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d810      	bhi.n	800485c <UART_SetConfig+0x1c0>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <UART_SetConfig+0x1a8>
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d006      	beq.n	8004850 <UART_SetConfig+0x1b4>
 8004842:	e00b      	b.n	800485c <UART_SetConfig+0x1c0>
 8004844:	2300      	movs	r3, #0
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e0cb      	b.n	80049e2 <UART_SetConfig+0x346>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e0c8      	b.n	80049e2 <UART_SetConfig+0x346>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0c5      	b.n	80049e2 <UART_SetConfig+0x346>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0c2      	b.n	80049e2 <UART_SetConfig+0x346>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0bf      	b.n	80049e2 <UART_SetConfig+0x346>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a45      	ldr	r2, [pc, #276]	; (800497c <UART_SetConfig+0x2e0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d125      	bne.n	80048b8 <UART_SetConfig+0x21c>
 800486c:	4b3f      	ldr	r3, [pc, #252]	; (800496c <UART_SetConfig+0x2d0>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x210>
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d817      	bhi.n	80048b2 <UART_SetConfig+0x216>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x204>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488c:	d811      	bhi.n	80048b2 <UART_SetConfig+0x216>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x1fe>
 8004892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x20a>
 8004898:	e00b      	b.n	80048b2 <UART_SetConfig+0x216>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e0a0      	b.n	80049e2 <UART_SetConfig+0x346>
 80048a0:	2302      	movs	r3, #2
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e09d      	b.n	80049e2 <UART_SetConfig+0x346>
 80048a6:	2304      	movs	r3, #4
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e09a      	b.n	80049e2 <UART_SetConfig+0x346>
 80048ac:	2308      	movs	r3, #8
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e097      	b.n	80049e2 <UART_SetConfig+0x346>
 80048b2:	2310      	movs	r3, #16
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e094      	b.n	80049e2 <UART_SetConfig+0x346>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <UART_SetConfig+0x2e4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d125      	bne.n	800490e <UART_SetConfig+0x272>
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <UART_SetConfig+0x2d0>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d0:	d017      	beq.n	8004902 <UART_SetConfig+0x266>
 80048d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d6:	d817      	bhi.n	8004908 <UART_SetConfig+0x26c>
 80048d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048dc:	d00b      	beq.n	80048f6 <UART_SetConfig+0x25a>
 80048de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e2:	d811      	bhi.n	8004908 <UART_SetConfig+0x26c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <UART_SetConfig+0x254>
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ec:	d006      	beq.n	80048fc <UART_SetConfig+0x260>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x26c>
 80048f0:	2301      	movs	r3, #1
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e075      	b.n	80049e2 <UART_SetConfig+0x346>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e072      	b.n	80049e2 <UART_SetConfig+0x346>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e06f      	b.n	80049e2 <UART_SetConfig+0x346>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e06c      	b.n	80049e2 <UART_SetConfig+0x346>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e069      	b.n	80049e2 <UART_SetConfig+0x346>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <UART_SetConfig+0x2e8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d137      	bne.n	8004988 <UART_SetConfig+0x2ec>
 8004918:	4b14      	ldr	r3, [pc, #80]	; (800496c <UART_SetConfig+0x2d0>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004926:	d017      	beq.n	8004958 <UART_SetConfig+0x2bc>
 8004928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800492c:	d817      	bhi.n	800495e <UART_SetConfig+0x2c2>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	d00b      	beq.n	800494c <UART_SetConfig+0x2b0>
 8004934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004938:	d811      	bhi.n	800495e <UART_SetConfig+0x2c2>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <UART_SetConfig+0x2aa>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d006      	beq.n	8004952 <UART_SetConfig+0x2b6>
 8004944:	e00b      	b.n	800495e <UART_SetConfig+0x2c2>
 8004946:	2300      	movs	r3, #0
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e04a      	b.n	80049e2 <UART_SetConfig+0x346>
 800494c:	2302      	movs	r3, #2
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e047      	b.n	80049e2 <UART_SetConfig+0x346>
 8004952:	2304      	movs	r3, #4
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e044      	b.n	80049e2 <UART_SetConfig+0x346>
 8004958:	2308      	movs	r3, #8
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e041      	b.n	80049e2 <UART_SetConfig+0x346>
 800495e:	2310      	movs	r3, #16
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e03e      	b.n	80049e2 <UART_SetConfig+0x346>
 8004964:	efff69f3 	.word	0xefff69f3
 8004968:	40011000 	.word	0x40011000
 800496c:	40023800 	.word	0x40023800
 8004970:	40004400 	.word	0x40004400
 8004974:	40004800 	.word	0x40004800
 8004978:	40004c00 	.word	0x40004c00
 800497c:	40005000 	.word	0x40005000
 8004980:	40011400 	.word	0x40011400
 8004984:	40007800 	.word	0x40007800
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a71      	ldr	r2, [pc, #452]	; (8004b54 <UART_SetConfig+0x4b8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x342>
 8004992:	4b71      	ldr	r3, [pc, #452]	; (8004b58 <UART_SetConfig+0x4bc>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800499c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a0:	d017      	beq.n	80049d2 <UART_SetConfig+0x336>
 80049a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a6:	d817      	bhi.n	80049d8 <UART_SetConfig+0x33c>
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	d00b      	beq.n	80049c6 <UART_SetConfig+0x32a>
 80049ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b2:	d811      	bhi.n	80049d8 <UART_SetConfig+0x33c>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x324>
 80049b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049bc:	d006      	beq.n	80049cc <UART_SetConfig+0x330>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x33c>
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x346>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e00a      	b.n	80049e2 <UART_SetConfig+0x346>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e007      	b.n	80049e2 <UART_SetConfig+0x346>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e004      	b.n	80049e2 <UART_SetConfig+0x346>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e001      	b.n	80049e2 <UART_SetConfig+0x346>
 80049de:	2310      	movs	r3, #16
 80049e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d15b      	bne.n	8004aa4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80049ec:	7ffb      	ldrb	r3, [r7, #31]
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d827      	bhi.n	8004a42 <UART_SetConfig+0x3a6>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0x35c>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004a43 	.word	0x08004a43
 8004a08:	08004a33 	.word	0x08004a33
 8004a0c:	08004a43 	.word	0x08004a43
 8004a10:	08004a43 	.word	0x08004a43
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a3b 	.word	0x08004a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f7ff f8c6 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8004a20:	61b8      	str	r0, [r7, #24]
        break;
 8004a22:	e013      	b.n	8004a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7ff f8d6 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8004a28:	61b8      	str	r0, [r7, #24]
        break;
 8004a2a:	e00f      	b.n	8004a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <UART_SetConfig+0x4c0>)
 8004a2e:	61bb      	str	r3, [r7, #24]
        break;
 8004a30:	e00c      	b.n	8004a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe fff9 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8004a36:	61b8      	str	r0, [r7, #24]
        break;
 8004a38:	e008      	b.n	8004a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e004      	b.n	8004a4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	77bb      	strb	r3, [r7, #30]
        break;
 8004a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d074      	beq.n	8004b3c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	005a      	lsls	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d916      	bls.n	8004a9e <UART_SetConfig+0x402>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d212      	bcs.n	8004a9e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f023 030f 	bic.w	r3, r3, #15
 8004a80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	89fa      	ldrh	r2, [r7, #14]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e04e      	b.n	8004b3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	77bb      	strb	r3, [r7, #30]
 8004aa2:	e04b      	b.n	8004b3c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d827      	bhi.n	8004afa <UART_SetConfig+0x45e>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x414>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7ff f86a 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8004ad8:	61b8      	str	r0, [r7, #24]
        break;
 8004ada:	e013      	b.n	8004b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7ff f87a 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	61b8      	str	r0, [r7, #24]
        break;
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <UART_SetConfig+0x4c0>)
 8004ae6:	61bb      	str	r3, [r7, #24]
        break;
 8004ae8:	e00c      	b.n	8004b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe ff9d 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8004aee:	61b8      	str	r0, [r7, #24]
        break;
 8004af0:	e008      	b.n	8004b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e004      	b.n	8004b04 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	77bb      	strb	r3, [r7, #30]
        break;
 8004b02:	bf00      	nop
    }

    if (pclk != 0U)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	085a      	lsrs	r2, r3, #1
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d908      	bls.n	8004b38 <UART_SetConfig+0x49c>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d204      	bcs.n	8004b38 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	60da      	str	r2, [r3, #12]
 8004b36:	e001      	b.n	8004b3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40007c00 	.word	0x40007c00
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400

08004b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5e:	d10a      	bne.n	8004c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb4:	f7fc fd84 	bl	80017c0 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d10e      	bne.n	8004ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f817 	bl	8004d0a <UART_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e00d      	b.n	8004d02 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1a:	e05e      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d05a      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fc fd4c 	bl	80017c0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11b      	bne.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e043      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02c      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d124      	bne.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004da8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00f      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d091      	beq.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d027      	beq.n	8004e6e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <FMC_SDRAM_Init+0xe0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e34:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8004e3a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004e40:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004e46:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8004e4c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004e52:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004e58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004e5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e032      	b.n	8004ed4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004e8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <FMC_SDRAM_Init+0xe0>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ea8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8004eae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8004eb4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004eba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004ec0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	ffff8000 	.word	0xffff8000

08004ee8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d02e      	beq.n	8004f60 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f0e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004f28:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004f32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004f3c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004f46:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f50:	4313      	orrs	r3, r2
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	e039      	b.n	8004fd4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <FMC_SDRAM_Timing_Init+0xfc>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f92:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004fa2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004fac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004fb6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	ff0f0fff 	.word	0xff0f0fff

08004fe8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <FMC_SDRAM_SendCommand+0x44>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	6811      	ldr	r1, [r2, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	6852      	ldr	r2, [r2, #4]
 8005004:	4311      	orrs	r1, r2
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	3a01      	subs	r2, #1
 800500c:	0152      	lsls	r2, r2, #5
 800500e:	4311      	orrs	r1, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68d2      	ldr	r2, [r2, #12]
 8005014:	0252      	lsls	r2, r2, #9
 8005016:	430a      	orrs	r2, r1
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	ffc00000 	.word	0xffc00000

08005030 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000010 	.word	0x20000010

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f001 f948 	bl	800630c <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08006448 	.word	0x08006448
 80050a0:	08006448 	.word	0x08006448
 80050a4:	08006448 	.word	0x08006448
 80050a8:	0800644c 	.word	0x0800644c

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <iprintf>:
 80050bc:	b40f      	push	{r0, r1, r2, r3}
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <iprintf+0x2c>)
 80050c0:	b513      	push	{r0, r1, r4, lr}
 80050c2:	681c      	ldr	r4, [r3, #0]
 80050c4:	b124      	cbz	r4, 80050d0 <iprintf+0x14>
 80050c6:	69a3      	ldr	r3, [r4, #24]
 80050c8:	b913      	cbnz	r3, 80050d0 <iprintf+0x14>
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f886 	bl	80051dc <__sinit>
 80050d0:	ab05      	add	r3, sp, #20
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 faff 	bl	80056dc <_vfiprintf_r>
 80050de:	b002      	add	sp, #8
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr
 80050e8:	20000010 	.word	0x20000010

080050ec <siprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b500      	push	{lr}
 80050f0:	b09c      	sub	sp, #112	; 0x70
 80050f2:	ab1d      	add	r3, sp, #116	; 0x74
 80050f4:	9002      	str	r0, [sp, #8]
 80050f6:	9006      	str	r0, [sp, #24]
 80050f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050fc:	4809      	ldr	r0, [pc, #36]	; (8005124 <siprintf+0x38>)
 80050fe:	9107      	str	r1, [sp, #28]
 8005100:	9104      	str	r1, [sp, #16]
 8005102:	4909      	ldr	r1, [pc, #36]	; (8005128 <siprintf+0x3c>)
 8005104:	f853 2b04 	ldr.w	r2, [r3], #4
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	a902      	add	r1, sp, #8
 8005110:	f000 f9ba 	bl	8005488 <_svfiprintf_r>
 8005114:	9b02      	ldr	r3, [sp, #8]
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	b01c      	add	sp, #112	; 0x70
 800511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005120:	b003      	add	sp, #12
 8005122:	4770      	bx	lr
 8005124:	20000010 	.word	0x20000010
 8005128:	ffff0208 	.word	0xffff0208

0800512c <std>:
 800512c:	2300      	movs	r3, #0
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	e9c0 3300 	strd	r3, r3, [r0]
 8005136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800513a:	6083      	str	r3, [r0, #8]
 800513c:	8181      	strh	r1, [r0, #12]
 800513e:	6643      	str	r3, [r0, #100]	; 0x64
 8005140:	81c2      	strh	r2, [r0, #14]
 8005142:	6183      	str	r3, [r0, #24]
 8005144:	4619      	mov	r1, r3
 8005146:	2208      	movs	r2, #8
 8005148:	305c      	adds	r0, #92	; 0x5c
 800514a:	f7ff ffaf 	bl	80050ac <memset>
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <std+0x38>)
 8005150:	6263      	str	r3, [r4, #36]	; 0x24
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <std+0x3c>)
 8005154:	62a3      	str	r3, [r4, #40]	; 0x28
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <std+0x40>)
 8005158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <std+0x44>)
 800515c:	6224      	str	r4, [r4, #32]
 800515e:	6323      	str	r3, [r4, #48]	; 0x30
 8005160:	bd10      	pop	{r4, pc}
 8005162:	bf00      	nop
 8005164:	08005c85 	.word	0x08005c85
 8005168:	08005ca7 	.word	0x08005ca7
 800516c:	08005cdf 	.word	0x08005cdf
 8005170:	08005d03 	.word	0x08005d03

08005174 <_cleanup_r>:
 8005174:	4901      	ldr	r1, [pc, #4]	; (800517c <_cleanup_r+0x8>)
 8005176:	f000 b8af 	b.w	80052d8 <_fwalk_reent>
 800517a:	bf00      	nop
 800517c:	08005fdd 	.word	0x08005fdd

08005180 <__sfmoreglue>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	1e4a      	subs	r2, r1, #1
 8005184:	2568      	movs	r5, #104	; 0x68
 8005186:	4355      	muls	r5, r2
 8005188:	460e      	mov	r6, r1
 800518a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800518e:	f000 f8c5 	bl	800531c <_malloc_r>
 8005192:	4604      	mov	r4, r0
 8005194:	b140      	cbz	r0, 80051a8 <__sfmoreglue+0x28>
 8005196:	2100      	movs	r1, #0
 8005198:	e9c0 1600 	strd	r1, r6, [r0]
 800519c:	300c      	adds	r0, #12
 800519e:	60a0      	str	r0, [r4, #8]
 80051a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051a4:	f7ff ff82 	bl	80050ac <memset>
 80051a8:	4620      	mov	r0, r4
 80051aa:	bd70      	pop	{r4, r5, r6, pc}

080051ac <__sfp_lock_acquire>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__sfp_lock_acquire+0x8>)
 80051ae:	f000 b8b3 	b.w	8005318 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	200002cc 	.word	0x200002cc

080051b8 <__sfp_lock_release>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__sfp_lock_release+0x8>)
 80051ba:	f000 b8ae 	b.w	800531a <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	200002cc 	.word	0x200002cc

080051c4 <__sinit_lock_acquire>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__sinit_lock_acquire+0x8>)
 80051c6:	f000 b8a7 	b.w	8005318 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	200002c7 	.word	0x200002c7

080051d0 <__sinit_lock_release>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__sinit_lock_release+0x8>)
 80051d2:	f000 b8a2 	b.w	800531a <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	200002c7 	.word	0x200002c7

080051dc <__sinit>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	f7ff fff0 	bl	80051c4 <__sinit_lock_acquire>
 80051e4:	69a3      	ldr	r3, [r4, #24]
 80051e6:	b11b      	cbz	r3, 80051f0 <__sinit+0x14>
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f7ff bff0 	b.w	80051d0 <__sinit_lock_release>
 80051f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051f4:	6523      	str	r3, [r4, #80]	; 0x50
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <__sinit+0x68>)
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <__sinit+0x6c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80051fe:	42a3      	cmp	r3, r4
 8005200:	bf04      	itt	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	61a3      	streq	r3, [r4, #24]
 8005206:	4620      	mov	r0, r4
 8005208:	f000 f820 	bl	800524c <__sfp>
 800520c:	6060      	str	r0, [r4, #4]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f81c 	bl	800524c <__sfp>
 8005214:	60a0      	str	r0, [r4, #8]
 8005216:	4620      	mov	r0, r4
 8005218:	f000 f818 	bl	800524c <__sfp>
 800521c:	2200      	movs	r2, #0
 800521e:	60e0      	str	r0, [r4, #12]
 8005220:	2104      	movs	r1, #4
 8005222:	6860      	ldr	r0, [r4, #4]
 8005224:	f7ff ff82 	bl	800512c <std>
 8005228:	68a0      	ldr	r0, [r4, #8]
 800522a:	2201      	movs	r2, #1
 800522c:	2109      	movs	r1, #9
 800522e:	f7ff ff7d 	bl	800512c <std>
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	2112      	movs	r1, #18
 8005238:	f7ff ff78 	bl	800512c <std>
 800523c:	2301      	movs	r3, #1
 800523e:	61a3      	str	r3, [r4, #24]
 8005240:	e7d2      	b.n	80051e8 <__sinit+0xc>
 8005242:	bf00      	nop
 8005244:	080063a8 	.word	0x080063a8
 8005248:	08005175 	.word	0x08005175

0800524c <__sfp>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	4607      	mov	r7, r0
 8005250:	f7ff ffac 	bl	80051ac <__sfp_lock_acquire>
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <__sfp+0x84>)
 8005256:	681e      	ldr	r6, [r3, #0]
 8005258:	69b3      	ldr	r3, [r6, #24]
 800525a:	b913      	cbnz	r3, 8005262 <__sfp+0x16>
 800525c:	4630      	mov	r0, r6
 800525e:	f7ff ffbd 	bl	80051dc <__sinit>
 8005262:	3648      	adds	r6, #72	; 0x48
 8005264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005268:	3b01      	subs	r3, #1
 800526a:	d503      	bpl.n	8005274 <__sfp+0x28>
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	b30b      	cbz	r3, 80052b4 <__sfp+0x68>
 8005270:	6836      	ldr	r6, [r6, #0]
 8005272:	e7f7      	b.n	8005264 <__sfp+0x18>
 8005274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005278:	b9d5      	cbnz	r5, 80052b0 <__sfp+0x64>
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <__sfp+0x88>)
 800527c:	60e3      	str	r3, [r4, #12]
 800527e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005282:	6665      	str	r5, [r4, #100]	; 0x64
 8005284:	f000 f847 	bl	8005316 <__retarget_lock_init_recursive>
 8005288:	f7ff ff96 	bl	80051b8 <__sfp_lock_release>
 800528c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005294:	6025      	str	r5, [r4, #0]
 8005296:	61a5      	str	r5, [r4, #24]
 8005298:	2208      	movs	r2, #8
 800529a:	4629      	mov	r1, r5
 800529c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052a0:	f7ff ff04 	bl	80050ac <memset>
 80052a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052ac:	4620      	mov	r0, r4
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b0:	3468      	adds	r4, #104	; 0x68
 80052b2:	e7d9      	b.n	8005268 <__sfp+0x1c>
 80052b4:	2104      	movs	r1, #4
 80052b6:	4638      	mov	r0, r7
 80052b8:	f7ff ff62 	bl	8005180 <__sfmoreglue>
 80052bc:	4604      	mov	r4, r0
 80052be:	6030      	str	r0, [r6, #0]
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d1d5      	bne.n	8005270 <__sfp+0x24>
 80052c4:	f7ff ff78 	bl	80051b8 <__sfp_lock_release>
 80052c8:	230c      	movs	r3, #12
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	e7ee      	b.n	80052ac <__sfp+0x60>
 80052ce:	bf00      	nop
 80052d0:	080063a8 	.word	0x080063a8
 80052d4:	ffff0001 	.word	0xffff0001

080052d8 <_fwalk_reent>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	4688      	mov	r8, r1
 80052e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052e4:	2700      	movs	r7, #0
 80052e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ea:	f1b9 0901 	subs.w	r9, r9, #1
 80052ee:	d505      	bpl.n	80052fc <_fwalk_reent+0x24>
 80052f0:	6824      	ldr	r4, [r4, #0]
 80052f2:	2c00      	cmp	r4, #0
 80052f4:	d1f7      	bne.n	80052e6 <_fwalk_reent+0xe>
 80052f6:	4638      	mov	r0, r7
 80052f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fc:	89ab      	ldrh	r3, [r5, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d907      	bls.n	8005312 <_fwalk_reent+0x3a>
 8005302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005306:	3301      	adds	r3, #1
 8005308:	d003      	beq.n	8005312 <_fwalk_reent+0x3a>
 800530a:	4629      	mov	r1, r5
 800530c:	4630      	mov	r0, r6
 800530e:	47c0      	blx	r8
 8005310:	4307      	orrs	r7, r0
 8005312:	3568      	adds	r5, #104	; 0x68
 8005314:	e7e9      	b.n	80052ea <_fwalk_reent+0x12>

08005316 <__retarget_lock_init_recursive>:
 8005316:	4770      	bx	lr

08005318 <__retarget_lock_acquire_recursive>:
 8005318:	4770      	bx	lr

0800531a <__retarget_lock_release_recursive>:
 800531a:	4770      	bx	lr

0800531c <_malloc_r>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	1ccd      	adds	r5, r1, #3
 8005320:	f025 0503 	bic.w	r5, r5, #3
 8005324:	3508      	adds	r5, #8
 8005326:	2d0c      	cmp	r5, #12
 8005328:	bf38      	it	cc
 800532a:	250c      	movcc	r5, #12
 800532c:	2d00      	cmp	r5, #0
 800532e:	4606      	mov	r6, r0
 8005330:	db01      	blt.n	8005336 <_malloc_r+0x1a>
 8005332:	42a9      	cmp	r1, r5
 8005334:	d903      	bls.n	800533e <_malloc_r+0x22>
 8005336:	230c      	movs	r3, #12
 8005338:	6033      	str	r3, [r6, #0]
 800533a:	2000      	movs	r0, #0
 800533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800533e:	f000 ff27 	bl	8006190 <__malloc_lock>
 8005342:	4921      	ldr	r1, [pc, #132]	; (80053c8 <_malloc_r+0xac>)
 8005344:	680a      	ldr	r2, [r1, #0]
 8005346:	4614      	mov	r4, r2
 8005348:	b99c      	cbnz	r4, 8005372 <_malloc_r+0x56>
 800534a:	4f20      	ldr	r7, [pc, #128]	; (80053cc <_malloc_r+0xb0>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	b923      	cbnz	r3, 800535a <_malloc_r+0x3e>
 8005350:	4621      	mov	r1, r4
 8005352:	4630      	mov	r0, r6
 8005354:	f000 fc86 	bl	8005c64 <_sbrk_r>
 8005358:	6038      	str	r0, [r7, #0]
 800535a:	4629      	mov	r1, r5
 800535c:	4630      	mov	r0, r6
 800535e:	f000 fc81 	bl	8005c64 <_sbrk_r>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d123      	bne.n	80053ae <_malloc_r+0x92>
 8005366:	230c      	movs	r3, #12
 8005368:	6033      	str	r3, [r6, #0]
 800536a:	4630      	mov	r0, r6
 800536c:	f000 ff16 	bl	800619c <__malloc_unlock>
 8005370:	e7e3      	b.n	800533a <_malloc_r+0x1e>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	1b5b      	subs	r3, r3, r5
 8005376:	d417      	bmi.n	80053a8 <_malloc_r+0x8c>
 8005378:	2b0b      	cmp	r3, #11
 800537a:	d903      	bls.n	8005384 <_malloc_r+0x68>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	441c      	add	r4, r3
 8005380:	6025      	str	r5, [r4, #0]
 8005382:	e004      	b.n	800538e <_malloc_r+0x72>
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	42a2      	cmp	r2, r4
 8005388:	bf0c      	ite	eq
 800538a:	600b      	streq	r3, [r1, #0]
 800538c:	6053      	strne	r3, [r2, #4]
 800538e:	4630      	mov	r0, r6
 8005390:	f000 ff04 	bl	800619c <__malloc_unlock>
 8005394:	f104 000b 	add.w	r0, r4, #11
 8005398:	1d23      	adds	r3, r4, #4
 800539a:	f020 0007 	bic.w	r0, r0, #7
 800539e:	1ac2      	subs	r2, r0, r3
 80053a0:	d0cc      	beq.n	800533c <_malloc_r+0x20>
 80053a2:	1a1b      	subs	r3, r3, r0
 80053a4:	50a3      	str	r3, [r4, r2]
 80053a6:	e7c9      	b.n	800533c <_malloc_r+0x20>
 80053a8:	4622      	mov	r2, r4
 80053aa:	6864      	ldr	r4, [r4, #4]
 80053ac:	e7cc      	b.n	8005348 <_malloc_r+0x2c>
 80053ae:	1cc4      	adds	r4, r0, #3
 80053b0:	f024 0403 	bic.w	r4, r4, #3
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d0e3      	beq.n	8005380 <_malloc_r+0x64>
 80053b8:	1a21      	subs	r1, r4, r0
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 fc52 	bl	8005c64 <_sbrk_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d1dd      	bne.n	8005380 <_malloc_r+0x64>
 80053c4:	e7cf      	b.n	8005366 <_malloc_r+0x4a>
 80053c6:	bf00      	nop
 80053c8:	200000a8 	.word	0x200000a8
 80053cc:	200000ac 	.word	0x200000ac

080053d0 <__ssputs_r>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	688e      	ldr	r6, [r1, #8]
 80053d6:	429e      	cmp	r6, r3
 80053d8:	4682      	mov	sl, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4690      	mov	r8, r2
 80053de:	461f      	mov	r7, r3
 80053e0:	d838      	bhi.n	8005454 <__ssputs_r+0x84>
 80053e2:	898a      	ldrh	r2, [r1, #12]
 80053e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053e8:	d032      	beq.n	8005450 <__ssputs_r+0x80>
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	6909      	ldr	r1, [r1, #16]
 80053ee:	eba5 0901 	sub.w	r9, r5, r1
 80053f2:	6965      	ldr	r5, [r4, #20]
 80053f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053fc:	3301      	adds	r3, #1
 80053fe:	444b      	add	r3, r9
 8005400:	106d      	asrs	r5, r5, #1
 8005402:	429d      	cmp	r5, r3
 8005404:	bf38      	it	cc
 8005406:	461d      	movcc	r5, r3
 8005408:	0553      	lsls	r3, r2, #21
 800540a:	d531      	bpl.n	8005470 <__ssputs_r+0xa0>
 800540c:	4629      	mov	r1, r5
 800540e:	f7ff ff85 	bl	800531c <_malloc_r>
 8005412:	4606      	mov	r6, r0
 8005414:	b950      	cbnz	r0, 800542c <__ssputs_r+0x5c>
 8005416:	230c      	movs	r3, #12
 8005418:	f8ca 3000 	str.w	r3, [sl]
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	6921      	ldr	r1, [r4, #16]
 800542e:	464a      	mov	r2, r9
 8005430:	f000 fe86 	bl	8006140 <memcpy>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	6126      	str	r6, [r4, #16]
 8005442:	6165      	str	r5, [r4, #20]
 8005444:	444e      	add	r6, r9
 8005446:	eba5 0509 	sub.w	r5, r5, r9
 800544a:	6026      	str	r6, [r4, #0]
 800544c:	60a5      	str	r5, [r4, #8]
 800544e:	463e      	mov	r6, r7
 8005450:	42be      	cmp	r6, r7
 8005452:	d900      	bls.n	8005456 <__ssputs_r+0x86>
 8005454:	463e      	mov	r6, r7
 8005456:	4632      	mov	r2, r6
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	4641      	mov	r1, r8
 800545c:	f000 fe7e 	bl	800615c <memmove>
 8005460:	68a3      	ldr	r3, [r4, #8]
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	1b9b      	subs	r3, r3, r6
 8005466:	4432      	add	r2, r6
 8005468:	60a3      	str	r3, [r4, #8]
 800546a:	6022      	str	r2, [r4, #0]
 800546c:	2000      	movs	r0, #0
 800546e:	e7db      	b.n	8005428 <__ssputs_r+0x58>
 8005470:	462a      	mov	r2, r5
 8005472:	f000 fee9 	bl	8006248 <_realloc_r>
 8005476:	4606      	mov	r6, r0
 8005478:	2800      	cmp	r0, #0
 800547a:	d1e1      	bne.n	8005440 <__ssputs_r+0x70>
 800547c:	6921      	ldr	r1, [r4, #16]
 800547e:	4650      	mov	r0, sl
 8005480:	f000 fe92 	bl	80061a8 <_free_r>
 8005484:	e7c7      	b.n	8005416 <__ssputs_r+0x46>
	...

08005488 <_svfiprintf_r>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	4698      	mov	r8, r3
 800548e:	898b      	ldrh	r3, [r1, #12]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	b09d      	sub	sp, #116	; 0x74
 8005494:	4607      	mov	r7, r0
 8005496:	460d      	mov	r5, r1
 8005498:	4614      	mov	r4, r2
 800549a:	d50e      	bpl.n	80054ba <_svfiprintf_r+0x32>
 800549c:	690b      	ldr	r3, [r1, #16]
 800549e:	b963      	cbnz	r3, 80054ba <_svfiprintf_r+0x32>
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	f7ff ff3b 	bl	800531c <_malloc_r>
 80054a6:	6028      	str	r0, [r5, #0]
 80054a8:	6128      	str	r0, [r5, #16]
 80054aa:	b920      	cbnz	r0, 80054b6 <_svfiprintf_r+0x2e>
 80054ac:	230c      	movs	r3, #12
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e0d1      	b.n	800565a <_svfiprintf_r+0x1d2>
 80054b6:	2340      	movs	r3, #64	; 0x40
 80054b8:	616b      	str	r3, [r5, #20]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9309      	str	r3, [sp, #36]	; 0x24
 80054be:	2320      	movs	r3, #32
 80054c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c8:	2330      	movs	r3, #48	; 0x30
 80054ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005674 <_svfiprintf_r+0x1ec>
 80054ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054d2:	f04f 0901 	mov.w	r9, #1
 80054d6:	4623      	mov	r3, r4
 80054d8:	469a      	mov	sl, r3
 80054da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054de:	b10a      	cbz	r2, 80054e4 <_svfiprintf_r+0x5c>
 80054e0:	2a25      	cmp	r2, #37	; 0x25
 80054e2:	d1f9      	bne.n	80054d8 <_svfiprintf_r+0x50>
 80054e4:	ebba 0b04 	subs.w	fp, sl, r4
 80054e8:	d00b      	beq.n	8005502 <_svfiprintf_r+0x7a>
 80054ea:	465b      	mov	r3, fp
 80054ec:	4622      	mov	r2, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ff6d 	bl	80053d0 <__ssputs_r>
 80054f6:	3001      	adds	r0, #1
 80054f8:	f000 80aa 	beq.w	8005650 <_svfiprintf_r+0x1c8>
 80054fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054fe:	445a      	add	r2, fp
 8005500:	9209      	str	r2, [sp, #36]	; 0x24
 8005502:	f89a 3000 	ldrb.w	r3, [sl]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80a2 	beq.w	8005650 <_svfiprintf_r+0x1c8>
 800550c:	2300      	movs	r3, #0
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005516:	f10a 0a01 	add.w	sl, sl, #1
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	9307      	str	r3, [sp, #28]
 800551e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005522:	931a      	str	r3, [sp, #104]	; 0x68
 8005524:	4654      	mov	r4, sl
 8005526:	2205      	movs	r2, #5
 8005528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552c:	4851      	ldr	r0, [pc, #324]	; (8005674 <_svfiprintf_r+0x1ec>)
 800552e:	f7fa fe6f 	bl	8000210 <memchr>
 8005532:	9a04      	ldr	r2, [sp, #16]
 8005534:	b9d8      	cbnz	r0, 800556e <_svfiprintf_r+0xe6>
 8005536:	06d0      	lsls	r0, r2, #27
 8005538:	bf44      	itt	mi
 800553a:	2320      	movmi	r3, #32
 800553c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005540:	0711      	lsls	r1, r2, #28
 8005542:	bf44      	itt	mi
 8005544:	232b      	movmi	r3, #43	; 0x2b
 8005546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800554a:	f89a 3000 	ldrb.w	r3, [sl]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d015      	beq.n	800557e <_svfiprintf_r+0xf6>
 8005552:	9a07      	ldr	r2, [sp, #28]
 8005554:	4654      	mov	r4, sl
 8005556:	2000      	movs	r0, #0
 8005558:	f04f 0c0a 	mov.w	ip, #10
 800555c:	4621      	mov	r1, r4
 800555e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005562:	3b30      	subs	r3, #48	; 0x30
 8005564:	2b09      	cmp	r3, #9
 8005566:	d94e      	bls.n	8005606 <_svfiprintf_r+0x17e>
 8005568:	b1b0      	cbz	r0, 8005598 <_svfiprintf_r+0x110>
 800556a:	9207      	str	r2, [sp, #28]
 800556c:	e014      	b.n	8005598 <_svfiprintf_r+0x110>
 800556e:	eba0 0308 	sub.w	r3, r0, r8
 8005572:	fa09 f303 	lsl.w	r3, r9, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	9304      	str	r3, [sp, #16]
 800557a:	46a2      	mov	sl, r4
 800557c:	e7d2      	b.n	8005524 <_svfiprintf_r+0x9c>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	1d19      	adds	r1, r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	9103      	str	r1, [sp, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfbb      	ittet	lt
 800558a:	425b      	neglt	r3, r3
 800558c:	f042 0202 	orrlt.w	r2, r2, #2
 8005590:	9307      	strge	r3, [sp, #28]
 8005592:	9307      	strlt	r3, [sp, #28]
 8005594:	bfb8      	it	lt
 8005596:	9204      	strlt	r2, [sp, #16]
 8005598:	7823      	ldrb	r3, [r4, #0]
 800559a:	2b2e      	cmp	r3, #46	; 0x2e
 800559c:	d10c      	bne.n	80055b8 <_svfiprintf_r+0x130>
 800559e:	7863      	ldrb	r3, [r4, #1]
 80055a0:	2b2a      	cmp	r3, #42	; 0x2a
 80055a2:	d135      	bne.n	8005610 <_svfiprintf_r+0x188>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	9203      	str	r2, [sp, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfb8      	it	lt
 80055b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055b4:	3402      	adds	r4, #2
 80055b6:	9305      	str	r3, [sp, #20]
 80055b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005684 <_svfiprintf_r+0x1fc>
 80055bc:	7821      	ldrb	r1, [r4, #0]
 80055be:	2203      	movs	r2, #3
 80055c0:	4650      	mov	r0, sl
 80055c2:	f7fa fe25 	bl	8000210 <memchr>
 80055c6:	b140      	cbz	r0, 80055da <_svfiprintf_r+0x152>
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	eba0 000a 	sub.w	r0, r0, sl
 80055ce:	fa03 f000 	lsl.w	r0, r3, r0
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	4303      	orrs	r3, r0
 80055d6:	3401      	adds	r4, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055de:	4826      	ldr	r0, [pc, #152]	; (8005678 <_svfiprintf_r+0x1f0>)
 80055e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055e4:	2206      	movs	r2, #6
 80055e6:	f7fa fe13 	bl	8000210 <memchr>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d038      	beq.n	8005660 <_svfiprintf_r+0x1d8>
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <_svfiprintf_r+0x1f4>)
 80055f0:	bb1b      	cbnz	r3, 800563a <_svfiprintf_r+0x1b2>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	3307      	adds	r3, #7
 80055f6:	f023 0307 	bic.w	r3, r3, #7
 80055fa:	3308      	adds	r3, #8
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005600:	4433      	add	r3, r6
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	e767      	b.n	80054d6 <_svfiprintf_r+0x4e>
 8005606:	fb0c 3202 	mla	r2, ip, r2, r3
 800560a:	460c      	mov	r4, r1
 800560c:	2001      	movs	r0, #1
 800560e:	e7a5      	b.n	800555c <_svfiprintf_r+0xd4>
 8005610:	2300      	movs	r3, #0
 8005612:	3401      	adds	r4, #1
 8005614:	9305      	str	r3, [sp, #20]
 8005616:	4619      	mov	r1, r3
 8005618:	f04f 0c0a 	mov.w	ip, #10
 800561c:	4620      	mov	r0, r4
 800561e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005622:	3a30      	subs	r2, #48	; 0x30
 8005624:	2a09      	cmp	r2, #9
 8005626:	d903      	bls.n	8005630 <_svfiprintf_r+0x1a8>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0c5      	beq.n	80055b8 <_svfiprintf_r+0x130>
 800562c:	9105      	str	r1, [sp, #20]
 800562e:	e7c3      	b.n	80055b8 <_svfiprintf_r+0x130>
 8005630:	fb0c 2101 	mla	r1, ip, r1, r2
 8005634:	4604      	mov	r4, r0
 8005636:	2301      	movs	r3, #1
 8005638:	e7f0      	b.n	800561c <_svfiprintf_r+0x194>
 800563a:	ab03      	add	r3, sp, #12
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	462a      	mov	r2, r5
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <_svfiprintf_r+0x1f8>)
 8005642:	a904      	add	r1, sp, #16
 8005644:	4638      	mov	r0, r7
 8005646:	f3af 8000 	nop.w
 800564a:	1c42      	adds	r2, r0, #1
 800564c:	4606      	mov	r6, r0
 800564e:	d1d6      	bne.n	80055fe <_svfiprintf_r+0x176>
 8005650:	89ab      	ldrh	r3, [r5, #12]
 8005652:	065b      	lsls	r3, r3, #25
 8005654:	f53f af2c 	bmi.w	80054b0 <_svfiprintf_r+0x28>
 8005658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800565a:	b01d      	add	sp, #116	; 0x74
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <_svfiprintf_r+0x1f8>)
 8005668:	a904      	add	r1, sp, #16
 800566a:	4638      	mov	r0, r7
 800566c:	f000 f9d4 	bl	8005a18 <_printf_i>
 8005670:	e7eb      	b.n	800564a <_svfiprintf_r+0x1c2>
 8005672:	bf00      	nop
 8005674:	0800640c 	.word	0x0800640c
 8005678:	08006416 	.word	0x08006416
 800567c:	00000000 	.word	0x00000000
 8005680:	080053d1 	.word	0x080053d1
 8005684:	08006412 	.word	0x08006412

08005688 <__sfputc_r>:
 8005688:	6893      	ldr	r3, [r2, #8]
 800568a:	3b01      	subs	r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	b410      	push	{r4}
 8005690:	6093      	str	r3, [r2, #8]
 8005692:	da08      	bge.n	80056a6 <__sfputc_r+0x1e>
 8005694:	6994      	ldr	r4, [r2, #24]
 8005696:	42a3      	cmp	r3, r4
 8005698:	db01      	blt.n	800569e <__sfputc_r+0x16>
 800569a:	290a      	cmp	r1, #10
 800569c:	d103      	bne.n	80056a6 <__sfputc_r+0x1e>
 800569e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056a2:	f000 bb33 	b.w	8005d0c <__swbuf_r>
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	1c58      	adds	r0, r3, #1
 80056aa:	6010      	str	r0, [r2, #0]
 80056ac:	7019      	strb	r1, [r3, #0]
 80056ae:	4608      	mov	r0, r1
 80056b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <__sfputs_r>:
 80056b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	4614      	mov	r4, r2
 80056be:	18d5      	adds	r5, r2, r3
 80056c0:	42ac      	cmp	r4, r5
 80056c2:	d101      	bne.n	80056c8 <__sfputs_r+0x12>
 80056c4:	2000      	movs	r0, #0
 80056c6:	e007      	b.n	80056d8 <__sfputs_r+0x22>
 80056c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056cc:	463a      	mov	r2, r7
 80056ce:	4630      	mov	r0, r6
 80056d0:	f7ff ffda 	bl	8005688 <__sfputc_r>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d1f3      	bne.n	80056c0 <__sfputs_r+0xa>
 80056d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056dc <_vfiprintf_r>:
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	460d      	mov	r5, r1
 80056e2:	b09d      	sub	sp, #116	; 0x74
 80056e4:	4614      	mov	r4, r2
 80056e6:	4698      	mov	r8, r3
 80056e8:	4606      	mov	r6, r0
 80056ea:	b118      	cbz	r0, 80056f4 <_vfiprintf_r+0x18>
 80056ec:	6983      	ldr	r3, [r0, #24]
 80056ee:	b90b      	cbnz	r3, 80056f4 <_vfiprintf_r+0x18>
 80056f0:	f7ff fd74 	bl	80051dc <__sinit>
 80056f4:	4b89      	ldr	r3, [pc, #548]	; (800591c <_vfiprintf_r+0x240>)
 80056f6:	429d      	cmp	r5, r3
 80056f8:	d11b      	bne.n	8005732 <_vfiprintf_r+0x56>
 80056fa:	6875      	ldr	r5, [r6, #4]
 80056fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056fe:	07d9      	lsls	r1, r3, #31
 8005700:	d405      	bmi.n	800570e <_vfiprintf_r+0x32>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	059a      	lsls	r2, r3, #22
 8005706:	d402      	bmi.n	800570e <_vfiprintf_r+0x32>
 8005708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570a:	f7ff fe05 	bl	8005318 <__retarget_lock_acquire_recursive>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	d501      	bpl.n	8005718 <_vfiprintf_r+0x3c>
 8005714:	692b      	ldr	r3, [r5, #16]
 8005716:	b9eb      	cbnz	r3, 8005754 <_vfiprintf_r+0x78>
 8005718:	4629      	mov	r1, r5
 800571a:	4630      	mov	r0, r6
 800571c:	f000 fb5a 	bl	8005dd4 <__swsetup_r>
 8005720:	b1c0      	cbz	r0, 8005754 <_vfiprintf_r+0x78>
 8005722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005724:	07dc      	lsls	r4, r3, #31
 8005726:	d50e      	bpl.n	8005746 <_vfiprintf_r+0x6a>
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	b01d      	add	sp, #116	; 0x74
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	4b7b      	ldr	r3, [pc, #492]	; (8005920 <_vfiprintf_r+0x244>)
 8005734:	429d      	cmp	r5, r3
 8005736:	d101      	bne.n	800573c <_vfiprintf_r+0x60>
 8005738:	68b5      	ldr	r5, [r6, #8]
 800573a:	e7df      	b.n	80056fc <_vfiprintf_r+0x20>
 800573c:	4b79      	ldr	r3, [pc, #484]	; (8005924 <_vfiprintf_r+0x248>)
 800573e:	429d      	cmp	r5, r3
 8005740:	bf08      	it	eq
 8005742:	68f5      	ldreq	r5, [r6, #12]
 8005744:	e7da      	b.n	80056fc <_vfiprintf_r+0x20>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	0598      	lsls	r0, r3, #22
 800574a:	d4ed      	bmi.n	8005728 <_vfiprintf_r+0x4c>
 800574c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800574e:	f7ff fde4 	bl	800531a <__retarget_lock_release_recursive>
 8005752:	e7e9      	b.n	8005728 <_vfiprintf_r+0x4c>
 8005754:	2300      	movs	r3, #0
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	2320      	movs	r3, #32
 800575a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800575e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005762:	2330      	movs	r3, #48	; 0x30
 8005764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005928 <_vfiprintf_r+0x24c>
 8005768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800576c:	f04f 0901 	mov.w	r9, #1
 8005770:	4623      	mov	r3, r4
 8005772:	469a      	mov	sl, r3
 8005774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005778:	b10a      	cbz	r2, 800577e <_vfiprintf_r+0xa2>
 800577a:	2a25      	cmp	r2, #37	; 0x25
 800577c:	d1f9      	bne.n	8005772 <_vfiprintf_r+0x96>
 800577e:	ebba 0b04 	subs.w	fp, sl, r4
 8005782:	d00b      	beq.n	800579c <_vfiprintf_r+0xc0>
 8005784:	465b      	mov	r3, fp
 8005786:	4622      	mov	r2, r4
 8005788:	4629      	mov	r1, r5
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ff93 	bl	80056b6 <__sfputs_r>
 8005790:	3001      	adds	r0, #1
 8005792:	f000 80aa 	beq.w	80058ea <_vfiprintf_r+0x20e>
 8005796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005798:	445a      	add	r2, fp
 800579a:	9209      	str	r2, [sp, #36]	; 0x24
 800579c:	f89a 3000 	ldrb.w	r3, [sl]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a2 	beq.w	80058ea <_vfiprintf_r+0x20e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057b0:	f10a 0a01 	add.w	sl, sl, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	9307      	str	r3, [sp, #28]
 80057b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057bc:	931a      	str	r3, [sp, #104]	; 0x68
 80057be:	4654      	mov	r4, sl
 80057c0:	2205      	movs	r2, #5
 80057c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c6:	4858      	ldr	r0, [pc, #352]	; (8005928 <_vfiprintf_r+0x24c>)
 80057c8:	f7fa fd22 	bl	8000210 <memchr>
 80057cc:	9a04      	ldr	r2, [sp, #16]
 80057ce:	b9d8      	cbnz	r0, 8005808 <_vfiprintf_r+0x12c>
 80057d0:	06d1      	lsls	r1, r2, #27
 80057d2:	bf44      	itt	mi
 80057d4:	2320      	movmi	r3, #32
 80057d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057da:	0713      	lsls	r3, r2, #28
 80057dc:	bf44      	itt	mi
 80057de:	232b      	movmi	r3, #43	; 0x2b
 80057e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e4:	f89a 3000 	ldrb.w	r3, [sl]
 80057e8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ea:	d015      	beq.n	8005818 <_vfiprintf_r+0x13c>
 80057ec:	9a07      	ldr	r2, [sp, #28]
 80057ee:	4654      	mov	r4, sl
 80057f0:	2000      	movs	r0, #0
 80057f2:	f04f 0c0a 	mov.w	ip, #10
 80057f6:	4621      	mov	r1, r4
 80057f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057fc:	3b30      	subs	r3, #48	; 0x30
 80057fe:	2b09      	cmp	r3, #9
 8005800:	d94e      	bls.n	80058a0 <_vfiprintf_r+0x1c4>
 8005802:	b1b0      	cbz	r0, 8005832 <_vfiprintf_r+0x156>
 8005804:	9207      	str	r2, [sp, #28]
 8005806:	e014      	b.n	8005832 <_vfiprintf_r+0x156>
 8005808:	eba0 0308 	sub.w	r3, r0, r8
 800580c:	fa09 f303 	lsl.w	r3, r9, r3
 8005810:	4313      	orrs	r3, r2
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	46a2      	mov	sl, r4
 8005816:	e7d2      	b.n	80057be <_vfiprintf_r+0xe2>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	1d19      	adds	r1, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	9103      	str	r1, [sp, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfbb      	ittet	lt
 8005824:	425b      	neglt	r3, r3
 8005826:	f042 0202 	orrlt.w	r2, r2, #2
 800582a:	9307      	strge	r3, [sp, #28]
 800582c:	9307      	strlt	r3, [sp, #28]
 800582e:	bfb8      	it	lt
 8005830:	9204      	strlt	r2, [sp, #16]
 8005832:	7823      	ldrb	r3, [r4, #0]
 8005834:	2b2e      	cmp	r3, #46	; 0x2e
 8005836:	d10c      	bne.n	8005852 <_vfiprintf_r+0x176>
 8005838:	7863      	ldrb	r3, [r4, #1]
 800583a:	2b2a      	cmp	r3, #42	; 0x2a
 800583c:	d135      	bne.n	80058aa <_vfiprintf_r+0x1ce>
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	1d1a      	adds	r2, r3, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	9203      	str	r2, [sp, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfb8      	it	lt
 800584a:	f04f 33ff 	movlt.w	r3, #4294967295
 800584e:	3402      	adds	r4, #2
 8005850:	9305      	str	r3, [sp, #20]
 8005852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005938 <_vfiprintf_r+0x25c>
 8005856:	7821      	ldrb	r1, [r4, #0]
 8005858:	2203      	movs	r2, #3
 800585a:	4650      	mov	r0, sl
 800585c:	f7fa fcd8 	bl	8000210 <memchr>
 8005860:	b140      	cbz	r0, 8005874 <_vfiprintf_r+0x198>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	eba0 000a 	sub.w	r0, r0, sl
 8005868:	fa03 f000 	lsl.w	r0, r3, r0
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	4303      	orrs	r3, r0
 8005870:	3401      	adds	r4, #1
 8005872:	9304      	str	r3, [sp, #16]
 8005874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005878:	482c      	ldr	r0, [pc, #176]	; (800592c <_vfiprintf_r+0x250>)
 800587a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800587e:	2206      	movs	r2, #6
 8005880:	f7fa fcc6 	bl	8000210 <memchr>
 8005884:	2800      	cmp	r0, #0
 8005886:	d03f      	beq.n	8005908 <_vfiprintf_r+0x22c>
 8005888:	4b29      	ldr	r3, [pc, #164]	; (8005930 <_vfiprintf_r+0x254>)
 800588a:	bb1b      	cbnz	r3, 80058d4 <_vfiprintf_r+0x1f8>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	3307      	adds	r3, #7
 8005890:	f023 0307 	bic.w	r3, r3, #7
 8005894:	3308      	adds	r3, #8
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589a:	443b      	add	r3, r7
 800589c:	9309      	str	r3, [sp, #36]	; 0x24
 800589e:	e767      	b.n	8005770 <_vfiprintf_r+0x94>
 80058a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058a4:	460c      	mov	r4, r1
 80058a6:	2001      	movs	r0, #1
 80058a8:	e7a5      	b.n	80057f6 <_vfiprintf_r+0x11a>
 80058aa:	2300      	movs	r3, #0
 80058ac:	3401      	adds	r4, #1
 80058ae:	9305      	str	r3, [sp, #20]
 80058b0:	4619      	mov	r1, r3
 80058b2:	f04f 0c0a 	mov.w	ip, #10
 80058b6:	4620      	mov	r0, r4
 80058b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058bc:	3a30      	subs	r2, #48	; 0x30
 80058be:	2a09      	cmp	r2, #9
 80058c0:	d903      	bls.n	80058ca <_vfiprintf_r+0x1ee>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0c5      	beq.n	8005852 <_vfiprintf_r+0x176>
 80058c6:	9105      	str	r1, [sp, #20]
 80058c8:	e7c3      	b.n	8005852 <_vfiprintf_r+0x176>
 80058ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80058ce:	4604      	mov	r4, r0
 80058d0:	2301      	movs	r3, #1
 80058d2:	e7f0      	b.n	80058b6 <_vfiprintf_r+0x1da>
 80058d4:	ab03      	add	r3, sp, #12
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	462a      	mov	r2, r5
 80058da:	4b16      	ldr	r3, [pc, #88]	; (8005934 <_vfiprintf_r+0x258>)
 80058dc:	a904      	add	r1, sp, #16
 80058de:	4630      	mov	r0, r6
 80058e0:	f3af 8000 	nop.w
 80058e4:	4607      	mov	r7, r0
 80058e6:	1c78      	adds	r0, r7, #1
 80058e8:	d1d6      	bne.n	8005898 <_vfiprintf_r+0x1bc>
 80058ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ec:	07d9      	lsls	r1, r3, #31
 80058ee:	d405      	bmi.n	80058fc <_vfiprintf_r+0x220>
 80058f0:	89ab      	ldrh	r3, [r5, #12]
 80058f2:	059a      	lsls	r2, r3, #22
 80058f4:	d402      	bmi.n	80058fc <_vfiprintf_r+0x220>
 80058f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f8:	f7ff fd0f 	bl	800531a <__retarget_lock_release_recursive>
 80058fc:	89ab      	ldrh	r3, [r5, #12]
 80058fe:	065b      	lsls	r3, r3, #25
 8005900:	f53f af12 	bmi.w	8005728 <_vfiprintf_r+0x4c>
 8005904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005906:	e711      	b.n	800572c <_vfiprintf_r+0x50>
 8005908:	ab03      	add	r3, sp, #12
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	462a      	mov	r2, r5
 800590e:	4b09      	ldr	r3, [pc, #36]	; (8005934 <_vfiprintf_r+0x258>)
 8005910:	a904      	add	r1, sp, #16
 8005912:	4630      	mov	r0, r6
 8005914:	f000 f880 	bl	8005a18 <_printf_i>
 8005918:	e7e4      	b.n	80058e4 <_vfiprintf_r+0x208>
 800591a:	bf00      	nop
 800591c:	080063cc 	.word	0x080063cc
 8005920:	080063ec 	.word	0x080063ec
 8005924:	080063ac 	.word	0x080063ac
 8005928:	0800640c 	.word	0x0800640c
 800592c:	08006416 	.word	0x08006416
 8005930:	00000000 	.word	0x00000000
 8005934:	080056b7 	.word	0x080056b7
 8005938:	08006412 	.word	0x08006412

0800593c <_printf_common>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	4616      	mov	r6, r2
 8005942:	4699      	mov	r9, r3
 8005944:	688a      	ldr	r2, [r1, #8]
 8005946:	690b      	ldr	r3, [r1, #16]
 8005948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800594c:	4293      	cmp	r3, r2
 800594e:	bfb8      	it	lt
 8005950:	4613      	movlt	r3, r2
 8005952:	6033      	str	r3, [r6, #0]
 8005954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005958:	4607      	mov	r7, r0
 800595a:	460c      	mov	r4, r1
 800595c:	b10a      	cbz	r2, 8005962 <_printf_common+0x26>
 800595e:	3301      	adds	r3, #1
 8005960:	6033      	str	r3, [r6, #0]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	0699      	lsls	r1, r3, #26
 8005966:	bf42      	ittt	mi
 8005968:	6833      	ldrmi	r3, [r6, #0]
 800596a:	3302      	addmi	r3, #2
 800596c:	6033      	strmi	r3, [r6, #0]
 800596e:	6825      	ldr	r5, [r4, #0]
 8005970:	f015 0506 	ands.w	r5, r5, #6
 8005974:	d106      	bne.n	8005984 <_printf_common+0x48>
 8005976:	f104 0a19 	add.w	sl, r4, #25
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	6832      	ldr	r2, [r6, #0]
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	42ab      	cmp	r3, r5
 8005982:	dc26      	bgt.n	80059d2 <_printf_common+0x96>
 8005984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005988:	1e13      	subs	r3, r2, #0
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	bf18      	it	ne
 800598e:	2301      	movne	r3, #1
 8005990:	0692      	lsls	r2, r2, #26
 8005992:	d42b      	bmi.n	80059ec <_printf_common+0xb0>
 8005994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005998:	4649      	mov	r1, r9
 800599a:	4638      	mov	r0, r7
 800599c:	47c0      	blx	r8
 800599e:	3001      	adds	r0, #1
 80059a0:	d01e      	beq.n	80059e0 <_printf_common+0xa4>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	68e5      	ldr	r5, [r4, #12]
 80059a6:	6832      	ldr	r2, [r6, #0]
 80059a8:	f003 0306 	and.w	r3, r3, #6
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	bf08      	it	eq
 80059b0:	1aad      	subeq	r5, r5, r2
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	6922      	ldr	r2, [r4, #16]
 80059b6:	bf0c      	ite	eq
 80059b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059bc:	2500      	movne	r5, #0
 80059be:	4293      	cmp	r3, r2
 80059c0:	bfc4      	itt	gt
 80059c2:	1a9b      	subgt	r3, r3, r2
 80059c4:	18ed      	addgt	r5, r5, r3
 80059c6:	2600      	movs	r6, #0
 80059c8:	341a      	adds	r4, #26
 80059ca:	42b5      	cmp	r5, r6
 80059cc:	d11a      	bne.n	8005a04 <_printf_common+0xc8>
 80059ce:	2000      	movs	r0, #0
 80059d0:	e008      	b.n	80059e4 <_printf_common+0xa8>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4652      	mov	r2, sl
 80059d6:	4649      	mov	r1, r9
 80059d8:	4638      	mov	r0, r7
 80059da:	47c0      	blx	r8
 80059dc:	3001      	adds	r0, #1
 80059de:	d103      	bne.n	80059e8 <_printf_common+0xac>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e8:	3501      	adds	r5, #1
 80059ea:	e7c6      	b.n	800597a <_printf_common+0x3e>
 80059ec:	18e1      	adds	r1, r4, r3
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	2030      	movs	r0, #48	; 0x30
 80059f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059f6:	4422      	add	r2, r4
 80059f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a00:	3302      	adds	r3, #2
 8005a02:	e7c7      	b.n	8005994 <_printf_common+0x58>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4622      	mov	r2, r4
 8005a08:	4649      	mov	r1, r9
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	47c0      	blx	r8
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d0e6      	beq.n	80059e0 <_printf_common+0xa4>
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7d9      	b.n	80059ca <_printf_common+0x8e>
	...

08005a18 <_printf_i>:
 8005a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	4691      	mov	r9, r2
 8005a20:	7e27      	ldrb	r7, [r4, #24]
 8005a22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a24:	2f78      	cmp	r7, #120	; 0x78
 8005a26:	4680      	mov	r8, r0
 8005a28:	469a      	mov	sl, r3
 8005a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a2e:	d807      	bhi.n	8005a40 <_printf_i+0x28>
 8005a30:	2f62      	cmp	r7, #98	; 0x62
 8005a32:	d80a      	bhi.n	8005a4a <_printf_i+0x32>
 8005a34:	2f00      	cmp	r7, #0
 8005a36:	f000 80d8 	beq.w	8005bea <_printf_i+0x1d2>
 8005a3a:	2f58      	cmp	r7, #88	; 0x58
 8005a3c:	f000 80a3 	beq.w	8005b86 <_printf_i+0x16e>
 8005a40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a48:	e03a      	b.n	8005ac0 <_printf_i+0xa8>
 8005a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a4e:	2b15      	cmp	r3, #21
 8005a50:	d8f6      	bhi.n	8005a40 <_printf_i+0x28>
 8005a52:	a001      	add	r0, pc, #4	; (adr r0, 8005a58 <_printf_i+0x40>)
 8005a54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a58:	08005ab1 	.word	0x08005ab1
 8005a5c:	08005ac5 	.word	0x08005ac5
 8005a60:	08005a41 	.word	0x08005a41
 8005a64:	08005a41 	.word	0x08005a41
 8005a68:	08005a41 	.word	0x08005a41
 8005a6c:	08005a41 	.word	0x08005a41
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005a41 	.word	0x08005a41
 8005a78:	08005a41 	.word	0x08005a41
 8005a7c:	08005a41 	.word	0x08005a41
 8005a80:	08005a41 	.word	0x08005a41
 8005a84:	08005bd1 	.word	0x08005bd1
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005bb3 	.word	0x08005bb3
 8005a90:	08005a41 	.word	0x08005a41
 8005a94:	08005a41 	.word	0x08005a41
 8005a98:	08005bf3 	.word	0x08005bf3
 8005a9c:	08005a41 	.word	0x08005a41
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005a41 	.word	0x08005a41
 8005aa8:	08005a41 	.word	0x08005a41
 8005aac:	08005bbb 	.word	0x08005bbb
 8005ab0:	680b      	ldr	r3, [r1, #0]
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	600a      	str	r2, [r1, #0]
 8005ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0a3      	b.n	8005c0c <_printf_i+0x1f4>
 8005ac4:	6825      	ldr	r5, [r4, #0]
 8005ac6:	6808      	ldr	r0, [r1, #0]
 8005ac8:	062e      	lsls	r6, r5, #24
 8005aca:	f100 0304 	add.w	r3, r0, #4
 8005ace:	d50a      	bpl.n	8005ae6 <_printf_i+0xce>
 8005ad0:	6805      	ldr	r5, [r0, #0]
 8005ad2:	600b      	str	r3, [r1, #0]
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	da03      	bge.n	8005ae0 <_printf_i+0xc8>
 8005ad8:	232d      	movs	r3, #45	; 0x2d
 8005ada:	426d      	negs	r5, r5
 8005adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae0:	485e      	ldr	r0, [pc, #376]	; (8005c5c <_printf_i+0x244>)
 8005ae2:	230a      	movs	r3, #10
 8005ae4:	e019      	b.n	8005b1a <_printf_i+0x102>
 8005ae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aea:	6805      	ldr	r5, [r0, #0]
 8005aec:	600b      	str	r3, [r1, #0]
 8005aee:	bf18      	it	ne
 8005af0:	b22d      	sxthne	r5, r5
 8005af2:	e7ef      	b.n	8005ad4 <_printf_i+0xbc>
 8005af4:	680b      	ldr	r3, [r1, #0]
 8005af6:	6825      	ldr	r5, [r4, #0]
 8005af8:	1d18      	adds	r0, r3, #4
 8005afa:	6008      	str	r0, [r1, #0]
 8005afc:	0628      	lsls	r0, r5, #24
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0xec>
 8005b00:	681d      	ldr	r5, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <_printf_i+0xf2>
 8005b04:	0669      	lsls	r1, r5, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0xe8>
 8005b08:	881d      	ldrh	r5, [r3, #0]
 8005b0a:	4854      	ldr	r0, [pc, #336]	; (8005c5c <_printf_i+0x244>)
 8005b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b0e:	bf0c      	ite	eq
 8005b10:	2308      	moveq	r3, #8
 8005b12:	230a      	movne	r3, #10
 8005b14:	2100      	movs	r1, #0
 8005b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b1a:	6866      	ldr	r6, [r4, #4]
 8005b1c:	60a6      	str	r6, [r4, #8]
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	bfa2      	ittt	ge
 8005b22:	6821      	ldrge	r1, [r4, #0]
 8005b24:	f021 0104 	bicge.w	r1, r1, #4
 8005b28:	6021      	strge	r1, [r4, #0]
 8005b2a:	b90d      	cbnz	r5, 8005b30 <_printf_i+0x118>
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	d04d      	beq.n	8005bcc <_printf_i+0x1b4>
 8005b30:	4616      	mov	r6, r2
 8005b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b36:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3a:	5dc7      	ldrb	r7, [r0, r7]
 8005b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b40:	462f      	mov	r7, r5
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	460d      	mov	r5, r1
 8005b46:	d9f4      	bls.n	8005b32 <_printf_i+0x11a>
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d10b      	bne.n	8005b64 <_printf_i+0x14c>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07df      	lsls	r7, r3, #31
 8005b50:	d508      	bpl.n	8005b64 <_printf_i+0x14c>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6861      	ldr	r1, [r4, #4]
 8005b56:	4299      	cmp	r1, r3
 8005b58:	bfde      	ittt	le
 8005b5a:	2330      	movle	r3, #48	; 0x30
 8005b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b64:	1b92      	subs	r2, r2, r6
 8005b66:	6122      	str	r2, [r4, #16]
 8005b68:	f8cd a000 	str.w	sl, [sp]
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	aa03      	add	r2, sp, #12
 8005b70:	4621      	mov	r1, r4
 8005b72:	4640      	mov	r0, r8
 8005b74:	f7ff fee2 	bl	800593c <_printf_common>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d14c      	bne.n	8005c16 <_printf_i+0x1fe>
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	b004      	add	sp, #16
 8005b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b86:	4835      	ldr	r0, [pc, #212]	; (8005c5c <_printf_i+0x244>)
 8005b88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	680e      	ldr	r6, [r1, #0]
 8005b90:	061f      	lsls	r7, r3, #24
 8005b92:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b96:	600e      	str	r6, [r1, #0]
 8005b98:	d514      	bpl.n	8005bc4 <_printf_i+0x1ac>
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	bf44      	itt	mi
 8005b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005ba2:	6023      	strmi	r3, [r4, #0]
 8005ba4:	b91d      	cbnz	r5, 8005bae <_printf_i+0x196>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f023 0320 	bic.w	r3, r3, #32
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	2310      	movs	r3, #16
 8005bb0:	e7b0      	b.n	8005b14 <_printf_i+0xfc>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	2378      	movs	r3, #120	; 0x78
 8005bbc:	4828      	ldr	r0, [pc, #160]	; (8005c60 <_printf_i+0x248>)
 8005bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bc2:	e7e3      	b.n	8005b8c <_printf_i+0x174>
 8005bc4:	065e      	lsls	r6, r3, #25
 8005bc6:	bf48      	it	mi
 8005bc8:	b2ad      	uxthmi	r5, r5
 8005bca:	e7e6      	b.n	8005b9a <_printf_i+0x182>
 8005bcc:	4616      	mov	r6, r2
 8005bce:	e7bb      	b.n	8005b48 <_printf_i+0x130>
 8005bd0:	680b      	ldr	r3, [r1, #0]
 8005bd2:	6826      	ldr	r6, [r4, #0]
 8005bd4:	6960      	ldr	r0, [r4, #20]
 8005bd6:	1d1d      	adds	r5, r3, #4
 8005bd8:	600d      	str	r5, [r1, #0]
 8005bda:	0635      	lsls	r5, r6, #24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0x1cc>
 8005be0:	6018      	str	r0, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0x1d2>
 8005be4:	0671      	lsls	r1, r6, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0x1c8>
 8005be8:	8018      	strh	r0, [r3, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	4616      	mov	r6, r2
 8005bf0:	e7ba      	b.n	8005b68 <_printf_i+0x150>
 8005bf2:	680b      	ldr	r3, [r1, #0]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	600a      	str	r2, [r1, #0]
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7fa fb06 	bl	8000210 <memchr>
 8005c04:	b108      	cbz	r0, 8005c0a <_printf_i+0x1f2>
 8005c06:	1b80      	subs	r0, r0, r6
 8005c08:	6060      	str	r0, [r4, #4]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c14:	e7a8      	b.n	8005b68 <_printf_i+0x150>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	47d0      	blx	sl
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0ab      	beq.n	8005b7c <_printf_i+0x164>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d413      	bmi.n	8005c52 <_printf_i+0x23a>
 8005c2a:	68e0      	ldr	r0, [r4, #12]
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	bfb8      	it	lt
 8005c32:	4618      	movlt	r0, r3
 8005c34:	e7a4      	b.n	8005b80 <_printf_i+0x168>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d09b      	beq.n	8005b7c <_printf_i+0x164>
 8005c44:	3501      	adds	r5, #1
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	9903      	ldr	r1, [sp, #12]
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dcf2      	bgt.n	8005c36 <_printf_i+0x21e>
 8005c50:	e7eb      	b.n	8005c2a <_printf_i+0x212>
 8005c52:	2500      	movs	r5, #0
 8005c54:	f104 0619 	add.w	r6, r4, #25
 8005c58:	e7f5      	b.n	8005c46 <_printf_i+0x22e>
 8005c5a:	bf00      	nop
 8005c5c:	0800641d 	.word	0x0800641d
 8005c60:	0800642e 	.word	0x0800642e

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	; (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb fce4 	bl	800163c <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	200002d0 	.word	0x200002d0

08005c84 <__sread>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	f000 fb02 	bl	8006294 <_read_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bfab      	itete	ge
 8005c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c96:	89a3      	ldrhlt	r3, [r4, #12]
 8005c98:	181b      	addge	r3, r3, r0
 8005c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9e:	bfac      	ite	ge
 8005ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ca2:	81a3      	strhlt	r3, [r4, #12]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__swrite>:
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	d505      	bpl.n	8005cc4 <__swrite+0x1e>
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f9c8 	bl	8006054 <_lseek_r>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	f000 b869 	b.w	8005db0 <_write_r>

08005cde <__sseek>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 f9b5 	bl	8006054 <_lseek_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	bf15      	itete	ne
 8005cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strheq	r3, [r4, #12]
 8005cfc:	bf18      	it	ne
 8005cfe:	81a3      	strhne	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__sclose>:
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 b8d3 	b.w	8005eb0 <_close_r>
	...

08005d0c <__swbuf_r>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	460e      	mov	r6, r1
 8005d10:	4614      	mov	r4, r2
 8005d12:	4605      	mov	r5, r0
 8005d14:	b118      	cbz	r0, 8005d1e <__swbuf_r+0x12>
 8005d16:	6983      	ldr	r3, [r0, #24]
 8005d18:	b90b      	cbnz	r3, 8005d1e <__swbuf_r+0x12>
 8005d1a:	f7ff fa5f 	bl	80051dc <__sinit>
 8005d1e:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <__swbuf_r+0x98>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d12b      	bne.n	8005d7c <__swbuf_r+0x70>
 8005d24:	686c      	ldr	r4, [r5, #4]
 8005d26:	69a3      	ldr	r3, [r4, #24]
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	071a      	lsls	r2, r3, #28
 8005d2e:	d52f      	bpl.n	8005d90 <__swbuf_r+0x84>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	b36b      	cbz	r3, 8005d90 <__swbuf_r+0x84>
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	1ac0      	subs	r0, r0, r3
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	b2f6      	uxtb	r6, r6
 8005d3e:	4283      	cmp	r3, r0
 8005d40:	4637      	mov	r7, r6
 8005d42:	dc04      	bgt.n	8005d4e <__swbuf_r+0x42>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f948 	bl	8005fdc <_fflush_r>
 8005d4c:	bb30      	cbnz	r0, 8005d9c <__swbuf_r+0x90>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	6022      	str	r2, [r4, #0]
 8005d5a:	701e      	strb	r6, [r3, #0]
 8005d5c:	6963      	ldr	r3, [r4, #20]
 8005d5e:	3001      	adds	r0, #1
 8005d60:	4283      	cmp	r3, r0
 8005d62:	d004      	beq.n	8005d6e <__swbuf_r+0x62>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	07db      	lsls	r3, r3, #31
 8005d68:	d506      	bpl.n	8005d78 <__swbuf_r+0x6c>
 8005d6a:	2e0a      	cmp	r6, #10
 8005d6c:	d104      	bne.n	8005d78 <__swbuf_r+0x6c>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f933 	bl	8005fdc <_fflush_r>
 8005d76:	b988      	cbnz	r0, 8005d9c <__swbuf_r+0x90>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <__swbuf_r+0x9c>)
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d101      	bne.n	8005d86 <__swbuf_r+0x7a>
 8005d82:	68ac      	ldr	r4, [r5, #8]
 8005d84:	e7cf      	b.n	8005d26 <__swbuf_r+0x1a>
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <__swbuf_r+0xa0>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	bf08      	it	eq
 8005d8c:	68ec      	ldreq	r4, [r5, #12]
 8005d8e:	e7ca      	b.n	8005d26 <__swbuf_r+0x1a>
 8005d90:	4621      	mov	r1, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f81e 	bl	8005dd4 <__swsetup_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d0cb      	beq.n	8005d34 <__swbuf_r+0x28>
 8005d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8005da0:	e7ea      	b.n	8005d78 <__swbuf_r+0x6c>
 8005da2:	bf00      	nop
 8005da4:	080063cc 	.word	0x080063cc
 8005da8:	080063ec 	.word	0x080063ec
 8005dac:	080063ac 	.word	0x080063ac

08005db0 <_write_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_write_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fa fc58 	bl	8000674 <_write>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_write_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_write_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	200002d0 	.word	0x200002d0

08005dd4 <__swsetup_r>:
 8005dd4:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <__swsetup_r+0xcc>)
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	b125      	cbz	r5, 8005dea <__swsetup_r+0x16>
 8005de0:	69ab      	ldr	r3, [r5, #24]
 8005de2:	b913      	cbnz	r3, 8005dea <__swsetup_r+0x16>
 8005de4:	4628      	mov	r0, r5
 8005de6:	f7ff f9f9 	bl	80051dc <__sinit>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <__swsetup_r+0xd0>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d10f      	bne.n	8005e10 <__swsetup_r+0x3c>
 8005df0:	686c      	ldr	r4, [r5, #4]
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005df8:	0719      	lsls	r1, r3, #28
 8005dfa:	d42c      	bmi.n	8005e56 <__swsetup_r+0x82>
 8005dfc:	06dd      	lsls	r5, r3, #27
 8005dfe:	d411      	bmi.n	8005e24 <__swsetup_r+0x50>
 8005e00:	2309      	movs	r3, #9
 8005e02:	6033      	str	r3, [r6, #0]
 8005e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	e03e      	b.n	8005e8e <__swsetup_r+0xba>
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <__swsetup_r+0xd4>)
 8005e12:	429c      	cmp	r4, r3
 8005e14:	d101      	bne.n	8005e1a <__swsetup_r+0x46>
 8005e16:	68ac      	ldr	r4, [r5, #8]
 8005e18:	e7eb      	b.n	8005df2 <__swsetup_r+0x1e>
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <__swsetup_r+0xd8>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	bf08      	it	eq
 8005e20:	68ec      	ldreq	r4, [r5, #12]
 8005e22:	e7e6      	b.n	8005df2 <__swsetup_r+0x1e>
 8005e24:	0758      	lsls	r0, r3, #29
 8005e26:	d512      	bpl.n	8005e4e <__swsetup_r+0x7a>
 8005e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2a:	b141      	cbz	r1, 8005e3e <__swsetup_r+0x6a>
 8005e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e30:	4299      	cmp	r1, r3
 8005e32:	d002      	beq.n	8005e3a <__swsetup_r+0x66>
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 f9b7 	bl	80061a8 <_free_r>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	2300      	movs	r3, #0
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	b94b      	cbnz	r3, 8005e6e <__swsetup_r+0x9a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e64:	d003      	beq.n	8005e6e <__swsetup_r+0x9a>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f929 	bl	80060c0 <__smakebuf_r>
 8005e6e:	89a0      	ldrh	r0, [r4, #12]
 8005e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e74:	f010 0301 	ands.w	r3, r0, #1
 8005e78:	d00a      	beq.n	8005e90 <__swsetup_r+0xbc>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	425b      	negs	r3, r3
 8005e82:	61a3      	str	r3, [r4, #24]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b943      	cbnz	r3, 8005e9a <__swsetup_r+0xc6>
 8005e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e8c:	d1ba      	bne.n	8005e04 <__swsetup_r+0x30>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	0781      	lsls	r1, r0, #30
 8005e92:	bf58      	it	pl
 8005e94:	6963      	ldrpl	r3, [r4, #20]
 8005e96:	60a3      	str	r3, [r4, #8]
 8005e98:	e7f4      	b.n	8005e84 <__swsetup_r+0xb0>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7f7      	b.n	8005e8e <__swsetup_r+0xba>
 8005e9e:	bf00      	nop
 8005ea0:	20000010 	.word	0x20000010
 8005ea4:	080063cc 	.word	0x080063cc
 8005ea8:	080063ec 	.word	0x080063ec
 8005eac:	080063ac 	.word	0x080063ac

08005eb0 <_close_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_close_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb fb89 	bl	80015d2 <_close>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_close_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_close_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200002d0 	.word	0x200002d0

08005ed0 <__sflush_r>:
 8005ed0:	898a      	ldrh	r2, [r1, #12]
 8005ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	0710      	lsls	r0, r2, #28
 8005eda:	460c      	mov	r4, r1
 8005edc:	d458      	bmi.n	8005f90 <__sflush_r+0xc0>
 8005ede:	684b      	ldr	r3, [r1, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dc05      	bgt.n	8005ef0 <__sflush_r+0x20>
 8005ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dc02      	bgt.n	8005ef0 <__sflush_r+0x20>
 8005eea:	2000      	movs	r0, #0
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d0f9      	beq.n	8005eea <__sflush_r+0x1a>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005efc:	682f      	ldr	r7, [r5, #0]
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	d032      	beq.n	8005f68 <__sflush_r+0x98>
 8005f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	075a      	lsls	r2, r3, #29
 8005f08:	d505      	bpl.n	8005f16 <__sflush_r+0x46>
 8005f0a:	6863      	ldr	r3, [r4, #4]
 8005f0c:	1ac0      	subs	r0, r0, r3
 8005f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f10:	b10b      	cbz	r3, 8005f16 <__sflush_r+0x46>
 8005f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f14:	1ac0      	subs	r0, r0, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b0      	blx	r6
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	d106      	bne.n	8005f36 <__sflush_r+0x66>
 8005f28:	6829      	ldr	r1, [r5, #0]
 8005f2a:	291d      	cmp	r1, #29
 8005f2c:	d82c      	bhi.n	8005f88 <__sflush_r+0xb8>
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <__sflush_r+0x108>)
 8005f30:	40ca      	lsrs	r2, r1
 8005f32:	07d6      	lsls	r6, r2, #31
 8005f34:	d528      	bpl.n	8005f88 <__sflush_r+0xb8>
 8005f36:	2200      	movs	r2, #0
 8005f38:	6062      	str	r2, [r4, #4]
 8005f3a:	04d9      	lsls	r1, r3, #19
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	6022      	str	r2, [r4, #0]
 8005f40:	d504      	bpl.n	8005f4c <__sflush_r+0x7c>
 8005f42:	1c42      	adds	r2, r0, #1
 8005f44:	d101      	bne.n	8005f4a <__sflush_r+0x7a>
 8005f46:	682b      	ldr	r3, [r5, #0]
 8005f48:	b903      	cbnz	r3, 8005f4c <__sflush_r+0x7c>
 8005f4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4e:	602f      	str	r7, [r5, #0]
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d0ca      	beq.n	8005eea <__sflush_r+0x1a>
 8005f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d002      	beq.n	8005f62 <__sflush_r+0x92>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f923 	bl	80061a8 <_free_r>
 8005f62:	2000      	movs	r0, #0
 8005f64:	6360      	str	r0, [r4, #52]	; 0x34
 8005f66:	e7c1      	b.n	8005eec <__sflush_r+0x1c>
 8005f68:	6a21      	ldr	r1, [r4, #32]
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b0      	blx	r6
 8005f70:	1c41      	adds	r1, r0, #1
 8005f72:	d1c7      	bne.n	8005f04 <__sflush_r+0x34>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0c4      	beq.n	8005f04 <__sflush_r+0x34>
 8005f7a:	2b1d      	cmp	r3, #29
 8005f7c:	d001      	beq.n	8005f82 <__sflush_r+0xb2>
 8005f7e:	2b16      	cmp	r3, #22
 8005f80:	d101      	bne.n	8005f86 <__sflush_r+0xb6>
 8005f82:	602f      	str	r7, [r5, #0]
 8005f84:	e7b1      	b.n	8005eea <__sflush_r+0x1a>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	e7ad      	b.n	8005eec <__sflush_r+0x1c>
 8005f90:	690f      	ldr	r7, [r1, #16]
 8005f92:	2f00      	cmp	r7, #0
 8005f94:	d0a9      	beq.n	8005eea <__sflush_r+0x1a>
 8005f96:	0793      	lsls	r3, r2, #30
 8005f98:	680e      	ldr	r6, [r1, #0]
 8005f9a:	bf08      	it	eq
 8005f9c:	694b      	ldreq	r3, [r1, #20]
 8005f9e:	600f      	str	r7, [r1, #0]
 8005fa0:	bf18      	it	ne
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	eba6 0807 	sub.w	r8, r6, r7
 8005fa8:	608b      	str	r3, [r1, #8]
 8005faa:	f1b8 0f00 	cmp.w	r8, #0
 8005fae:	dd9c      	ble.n	8005eea <__sflush_r+0x1a>
 8005fb0:	6a21      	ldr	r1, [r4, #32]
 8005fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b0      	blx	r6
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	dc06      	bgt.n	8005fce <__sflush_r+0xfe>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e78e      	b.n	8005eec <__sflush_r+0x1c>
 8005fce:	4407      	add	r7, r0
 8005fd0:	eba8 0800 	sub.w	r8, r8, r0
 8005fd4:	e7e9      	b.n	8005faa <__sflush_r+0xda>
 8005fd6:	bf00      	nop
 8005fd8:	20400001 	.word	0x20400001

08005fdc <_fflush_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b913      	cbnz	r3, 8005fec <_fflush_r+0x10>
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	4628      	mov	r0, r5
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	b118      	cbz	r0, 8005ff6 <_fflush_r+0x1a>
 8005fee:	6983      	ldr	r3, [r0, #24]
 8005ff0:	b90b      	cbnz	r3, 8005ff6 <_fflush_r+0x1a>
 8005ff2:	f7ff f8f3 	bl	80051dc <__sinit>
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <_fflush_r+0x6c>)
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d11b      	bne.n	8006034 <_fflush_r+0x58>
 8005ffc:	686c      	ldr	r4, [r5, #4]
 8005ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ef      	beq.n	8005fe6 <_fflush_r+0xa>
 8006006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006008:	07d0      	lsls	r0, r2, #31
 800600a:	d404      	bmi.n	8006016 <_fflush_r+0x3a>
 800600c:	0599      	lsls	r1, r3, #22
 800600e:	d402      	bmi.n	8006016 <_fflush_r+0x3a>
 8006010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006012:	f7ff f981 	bl	8005318 <__retarget_lock_acquire_recursive>
 8006016:	4628      	mov	r0, r5
 8006018:	4621      	mov	r1, r4
 800601a:	f7ff ff59 	bl	8005ed0 <__sflush_r>
 800601e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006020:	07da      	lsls	r2, r3, #31
 8006022:	4605      	mov	r5, r0
 8006024:	d4e0      	bmi.n	8005fe8 <_fflush_r+0xc>
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	059b      	lsls	r3, r3, #22
 800602a:	d4dd      	bmi.n	8005fe8 <_fflush_r+0xc>
 800602c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602e:	f7ff f974 	bl	800531a <__retarget_lock_release_recursive>
 8006032:	e7d9      	b.n	8005fe8 <_fflush_r+0xc>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_fflush_r+0x70>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d101      	bne.n	800603e <_fflush_r+0x62>
 800603a:	68ac      	ldr	r4, [r5, #8]
 800603c:	e7df      	b.n	8005ffe <_fflush_r+0x22>
 800603e:	4b04      	ldr	r3, [pc, #16]	; (8006050 <_fflush_r+0x74>)
 8006040:	429c      	cmp	r4, r3
 8006042:	bf08      	it	eq
 8006044:	68ec      	ldreq	r4, [r5, #12]
 8006046:	e7da      	b.n	8005ffe <_fflush_r+0x22>
 8006048:	080063cc 	.word	0x080063cc
 800604c:	080063ec 	.word	0x080063ec
 8006050:	080063ac 	.word	0x080063ac

08006054 <_lseek_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d07      	ldr	r5, [pc, #28]	; (8006074 <_lseek_r+0x20>)
 8006058:	4604      	mov	r4, r0
 800605a:	4608      	mov	r0, r1
 800605c:	4611      	mov	r1, r2
 800605e:	2200      	movs	r2, #0
 8006060:	602a      	str	r2, [r5, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	f7fb fadc 	bl	8001620 <_lseek>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_lseek_r+0x1e>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_lseek_r+0x1e>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	200002d0 	.word	0x200002d0

08006078 <__swhatbuf_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	460e      	mov	r6, r1
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2900      	cmp	r1, #0
 8006082:	b096      	sub	sp, #88	; 0x58
 8006084:	4614      	mov	r4, r2
 8006086:	461d      	mov	r5, r3
 8006088:	da07      	bge.n	800609a <__swhatbuf_r+0x22>
 800608a:	2300      	movs	r3, #0
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	89b3      	ldrh	r3, [r6, #12]
 8006090:	061a      	lsls	r2, r3, #24
 8006092:	d410      	bmi.n	80060b6 <__swhatbuf_r+0x3e>
 8006094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006098:	e00e      	b.n	80060b8 <__swhatbuf_r+0x40>
 800609a:	466a      	mov	r2, sp
 800609c:	f000 f90c 	bl	80062b8 <_fstat_r>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	dbf2      	blt.n	800608a <__swhatbuf_r+0x12>
 80060a4:	9a01      	ldr	r2, [sp, #4]
 80060a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060ae:	425a      	negs	r2, r3
 80060b0:	415a      	adcs	r2, r3
 80060b2:	602a      	str	r2, [r5, #0]
 80060b4:	e7ee      	b.n	8006094 <__swhatbuf_r+0x1c>
 80060b6:	2340      	movs	r3, #64	; 0x40
 80060b8:	2000      	movs	r0, #0
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	b016      	add	sp, #88	; 0x58
 80060be:	bd70      	pop	{r4, r5, r6, pc}

080060c0 <__smakebuf_r>:
 80060c0:	898b      	ldrh	r3, [r1, #12]
 80060c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060c4:	079d      	lsls	r5, r3, #30
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	d507      	bpl.n	80060dc <__smakebuf_r+0x1c>
 80060cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	2301      	movs	r3, #1
 80060d6:	6163      	str	r3, [r4, #20]
 80060d8:	b002      	add	sp, #8
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	ab01      	add	r3, sp, #4
 80060de:	466a      	mov	r2, sp
 80060e0:	f7ff ffca 	bl	8006078 <__swhatbuf_r>
 80060e4:	9900      	ldr	r1, [sp, #0]
 80060e6:	4605      	mov	r5, r0
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff f917 	bl	800531c <_malloc_r>
 80060ee:	b948      	cbnz	r0, 8006104 <__smakebuf_r+0x44>
 80060f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f4:	059a      	lsls	r2, r3, #22
 80060f6:	d4ef      	bmi.n	80060d8 <__smakebuf_r+0x18>
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	e7e3      	b.n	80060cc <__smakebuf_r+0xc>
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <__smakebuf_r+0x7c>)
 8006106:	62b3      	str	r3, [r6, #40]	; 0x28
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	6020      	str	r0, [r4, #0]
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	9b00      	ldr	r3, [sp, #0]
 8006114:	6163      	str	r3, [r4, #20]
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	6120      	str	r0, [r4, #16]
 800611a:	b15b      	cbz	r3, 8006134 <__smakebuf_r+0x74>
 800611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f8db 	bl	80062dc <_isatty_r>
 8006126:	b128      	cbz	r0, 8006134 <__smakebuf_r+0x74>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	89a0      	ldrh	r0, [r4, #12]
 8006136:	4305      	orrs	r5, r0
 8006138:	81a5      	strh	r5, [r4, #12]
 800613a:	e7cd      	b.n	80060d8 <__smakebuf_r+0x18>
 800613c:	08005175 	.word	0x08005175

08006140 <memcpy>:
 8006140:	440a      	add	r2, r1
 8006142:	4291      	cmp	r1, r2
 8006144:	f100 33ff 	add.w	r3, r0, #4294967295
 8006148:	d100      	bne.n	800614c <memcpy+0xc>
 800614a:	4770      	bx	lr
 800614c:	b510      	push	{r4, lr}
 800614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006156:	4291      	cmp	r1, r2
 8006158:	d1f9      	bne.n	800614e <memcpy+0xe>
 800615a:	bd10      	pop	{r4, pc}

0800615c <memmove>:
 800615c:	4288      	cmp	r0, r1
 800615e:	b510      	push	{r4, lr}
 8006160:	eb01 0402 	add.w	r4, r1, r2
 8006164:	d902      	bls.n	800616c <memmove+0x10>
 8006166:	4284      	cmp	r4, r0
 8006168:	4623      	mov	r3, r4
 800616a:	d807      	bhi.n	800617c <memmove+0x20>
 800616c:	1e43      	subs	r3, r0, #1
 800616e:	42a1      	cmp	r1, r4
 8006170:	d008      	beq.n	8006184 <memmove+0x28>
 8006172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800617a:	e7f8      	b.n	800616e <memmove+0x12>
 800617c:	4402      	add	r2, r0
 800617e:	4601      	mov	r1, r0
 8006180:	428a      	cmp	r2, r1
 8006182:	d100      	bne.n	8006186 <memmove+0x2a>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800618a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800618e:	e7f7      	b.n	8006180 <memmove+0x24>

08006190 <__malloc_lock>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__malloc_lock+0x8>)
 8006192:	f7ff b8c1 	b.w	8005318 <__retarget_lock_acquire_recursive>
 8006196:	bf00      	nop
 8006198:	200002c8 	.word	0x200002c8

0800619c <__malloc_unlock>:
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <__malloc_unlock+0x8>)
 800619e:	f7ff b8bc 	b.w	800531a <__retarget_lock_release_recursive>
 80061a2:	bf00      	nop
 80061a4:	200002c8 	.word	0x200002c8

080061a8 <_free_r>:
 80061a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061aa:	2900      	cmp	r1, #0
 80061ac:	d048      	beq.n	8006240 <_free_r+0x98>
 80061ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b2:	9001      	str	r0, [sp, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f1a1 0404 	sub.w	r4, r1, #4
 80061ba:	bfb8      	it	lt
 80061bc:	18e4      	addlt	r4, r4, r3
 80061be:	f7ff ffe7 	bl	8006190 <__malloc_lock>
 80061c2:	4a20      	ldr	r2, [pc, #128]	; (8006244 <_free_r+0x9c>)
 80061c4:	9801      	ldr	r0, [sp, #4]
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	4615      	mov	r5, r2
 80061ca:	b933      	cbnz	r3, 80061da <_free_r+0x32>
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	6014      	str	r4, [r2, #0]
 80061d0:	b003      	add	sp, #12
 80061d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061d6:	f7ff bfe1 	b.w	800619c <__malloc_unlock>
 80061da:	42a3      	cmp	r3, r4
 80061dc:	d90b      	bls.n	80061f6 <_free_r+0x4e>
 80061de:	6821      	ldr	r1, [r4, #0]
 80061e0:	1862      	adds	r2, r4, r1
 80061e2:	4293      	cmp	r3, r2
 80061e4:	bf04      	itt	eq
 80061e6:	681a      	ldreq	r2, [r3, #0]
 80061e8:	685b      	ldreq	r3, [r3, #4]
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	bf04      	itt	eq
 80061ee:	1852      	addeq	r2, r2, r1
 80061f0:	6022      	streq	r2, [r4, #0]
 80061f2:	602c      	str	r4, [r5, #0]
 80061f4:	e7ec      	b.n	80061d0 <_free_r+0x28>
 80061f6:	461a      	mov	r2, r3
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	b10b      	cbz	r3, 8006200 <_free_r+0x58>
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d9fa      	bls.n	80061f6 <_free_r+0x4e>
 8006200:	6811      	ldr	r1, [r2, #0]
 8006202:	1855      	adds	r5, r2, r1
 8006204:	42a5      	cmp	r5, r4
 8006206:	d10b      	bne.n	8006220 <_free_r+0x78>
 8006208:	6824      	ldr	r4, [r4, #0]
 800620a:	4421      	add	r1, r4
 800620c:	1854      	adds	r4, r2, r1
 800620e:	42a3      	cmp	r3, r4
 8006210:	6011      	str	r1, [r2, #0]
 8006212:	d1dd      	bne.n	80061d0 <_free_r+0x28>
 8006214:	681c      	ldr	r4, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	6053      	str	r3, [r2, #4]
 800621a:	4421      	add	r1, r4
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	e7d7      	b.n	80061d0 <_free_r+0x28>
 8006220:	d902      	bls.n	8006228 <_free_r+0x80>
 8006222:	230c      	movs	r3, #12
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	e7d3      	b.n	80061d0 <_free_r+0x28>
 8006228:	6825      	ldr	r5, [r4, #0]
 800622a:	1961      	adds	r1, r4, r5
 800622c:	428b      	cmp	r3, r1
 800622e:	bf04      	itt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	bf04      	itt	eq
 8006238:	1949      	addeq	r1, r1, r5
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	6054      	str	r4, [r2, #4]
 800623e:	e7c7      	b.n	80061d0 <_free_r+0x28>
 8006240:	b003      	add	sp, #12
 8006242:	bd30      	pop	{r4, r5, pc}
 8006244:	200000a8 	.word	0x200000a8

08006248 <_realloc_r>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	4607      	mov	r7, r0
 800624c:	4614      	mov	r4, r2
 800624e:	460e      	mov	r6, r1
 8006250:	b921      	cbnz	r1, 800625c <_realloc_r+0x14>
 8006252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006256:	4611      	mov	r1, r2
 8006258:	f7ff b860 	b.w	800531c <_malloc_r>
 800625c:	b922      	cbnz	r2, 8006268 <_realloc_r+0x20>
 800625e:	f7ff ffa3 	bl	80061a8 <_free_r>
 8006262:	4625      	mov	r5, r4
 8006264:	4628      	mov	r0, r5
 8006266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006268:	f000 f848 	bl	80062fc <_malloc_usable_size_r>
 800626c:	42a0      	cmp	r0, r4
 800626e:	d20f      	bcs.n	8006290 <_realloc_r+0x48>
 8006270:	4621      	mov	r1, r4
 8006272:	4638      	mov	r0, r7
 8006274:	f7ff f852 	bl	800531c <_malloc_r>
 8006278:	4605      	mov	r5, r0
 800627a:	2800      	cmp	r0, #0
 800627c:	d0f2      	beq.n	8006264 <_realloc_r+0x1c>
 800627e:	4631      	mov	r1, r6
 8006280:	4622      	mov	r2, r4
 8006282:	f7ff ff5d 	bl	8006140 <memcpy>
 8006286:	4631      	mov	r1, r6
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff ff8d 	bl	80061a8 <_free_r>
 800628e:	e7e9      	b.n	8006264 <_realloc_r+0x1c>
 8006290:	4635      	mov	r5, r6
 8006292:	e7e7      	b.n	8006264 <_realloc_r+0x1c>

08006294 <_read_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d07      	ldr	r5, [pc, #28]	; (80062b4 <_read_r+0x20>)
 8006298:	4604      	mov	r4, r0
 800629a:	4608      	mov	r0, r1
 800629c:	4611      	mov	r1, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f7fb f978 	bl	8001598 <_read>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_read_r+0x1e>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_read_r+0x1e>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	200002d0 	.word	0x200002d0

080062b8 <_fstat_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	; (80062d8 <_fstat_r+0x20>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	4611      	mov	r1, r2
 80062c4:	602b      	str	r3, [r5, #0]
 80062c6:	f7fb f990 	bl	80015ea <_fstat>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d102      	bne.n	80062d4 <_fstat_r+0x1c>
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	b103      	cbz	r3, 80062d4 <_fstat_r+0x1c>
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	bd38      	pop	{r3, r4, r5, pc}
 80062d6:	bf00      	nop
 80062d8:	200002d0 	.word	0x200002d0

080062dc <_isatty_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_isatty_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb f98f 	bl	800160a <_isatty>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_isatty_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_isatty_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200002d0 	.word	0x200002d0

080062fc <_malloc_usable_size_r>:
 80062fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006300:	1f18      	subs	r0, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfbc      	itt	lt
 8006306:	580b      	ldrlt	r3, [r1, r0]
 8006308:	18c0      	addlt	r0, r0, r3
 800630a:	4770      	bx	lr

0800630c <_init>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr

08006318 <_fini>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr
