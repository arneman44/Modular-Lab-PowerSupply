
Soft_Rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b6d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000579c  0802b8a0  0802b8a0  0003b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00005b66  0803103c  0803103c  0004103c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000130  08036ba4  08036ba4  00046ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00028e20  08036cd4  08036cd4  00046cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 000000fc  0805faf4  0805faf4  0006faf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0805fbf0  0805fbf0  000700fc  2**0
                  CONTENTS
  8 .ARM          00000008  0805fbf0  0805fbf0  0006fbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0805fbf8  0805fbf8  000700fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0805fbf8  0805fbf8  0006fbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0805fc0c  0805fc0c  0006fc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  0805fc14  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00014ff8  200000fc  0805fd10  000700fc  2**2
                  ALLOC
 14 ._user_heap_stack 0000f404  200150f4  0805fd10  000750f4  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000700fc  2**0
                  CONTENTS, READONLY
 16 .debug_info   0012d60b  00000000  00000000  0007012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001ad47  00000000  00000000  0019d737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00006a30  00000000  00000000  001b8480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00006348  00000000  00000000  001beeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001558b  00000000  00000000  001c51f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005d6e4  00000000  00000000  001da783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00125c5c  00000000  00000000  00237e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0035dac3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0001d4fc  00000000  00000000  0035db98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b888 	.word	0x0802b888

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	0802b888 	.word	0x0802b888

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SCB_EnableDCache+0x84>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <SCB_EnableDCache+0x84>)
 80005d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005da:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005e4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005ee:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	015a      	lsls	r2, r3, #5
 80005f4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005f8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005fe:	4911      	ldr	r1, [pc, #68]	; (8000644 <SCB_EnableDCache+0x84>)
 8000600:	4313      	orrs	r3, r2
 8000602:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	60ba      	str	r2, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1ef      	bne.n	80005f0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	60fa      	str	r2, [r7, #12]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1e5      	bne.n	80005e6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800061a:	f3bf 8f4f 	dsb	sy
}
 800061e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <SCB_EnableDCache+0x84>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <SCB_EnableDCache+0x84>)
 8000626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800062c:	f3bf 8f4f 	dsb	sy
}
 8000630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000632:	f3bf 8f6f 	isb	sy
}
 8000636:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <_write>:

#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d003      	beq.n	8000662 <_write+0x1a>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d015      	beq.n	800068c <_write+0x44>
 8000660:	e029      	b.n	80006b6 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	b29a      	uxth	r2, r3
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <_write+0x90>)
 800066e:	f004 fb0b 	bl	8004c88 <HAL_UART_Transmit>
 8000672:	4603      	mov	r3, r0
 8000674:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d024      	beq.n	80006c6 <_write+0x7e>
			errno = EIO;
 800067c:	f02a f8bc 	bl	802a7f8 <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	2205      	movs	r2, #5
 8000684:	601a      	str	r2, [r3, #0]
			return -1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e020      	b.n	80006ce <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b29a      	uxth	r2, r3
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <_write+0x90>)
 8000698:	f004 faf6 	bl	8004c88 <HAL_UART_Transmit>
 800069c:	4603      	mov	r3, r0
 800069e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d011      	beq.n	80006ca <_write+0x82>
			errno = EIO;
 80006a6:	f02a f8a7 	bl	802a7f8 <__errno>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2205      	movs	r2, #5
 80006ae:	601a      	str	r2, [r3, #0]
			return -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	e00b      	b.n	80006ce <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80006b6:	f02a f89f 	bl	802a7f8 <__errno>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2209      	movs	r2, #9
 80006be:	601a      	str	r2, [r3, #0]
        return -1;
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	e003      	b.n	80006ce <_write+0x86>
        break;
 80006c6:	bf00      	nop
 80006c8:	e000      	b.n	80006cc <_write+0x84>
        break;
 80006ca:	bf00      	nop
    }
    return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20014f58 	.word	0x20014f58

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006e0:	f7ff ff6e 	bl	80005c0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f8bf 	bl	8001866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f842 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fac2 	bl	8000c74 <MX_GPIO_Init>
  MX_LTDC_Init();
 80006f0:	f000 f9b8 	bl	8000a64 <MX_LTDC_Init>
  MX_FMC_Init();
 80006f4:	f000 fa68 	bl	8000bc8 <MX_FMC_Init>
  MX_DMA2D_Init();
 80006f8:	f000 f900 	bl	80008fc <MX_DMA2D_Init>
  MX_CRC_Init();
 80006fc:	f000 f8dc 	bl	80008b8 <MX_CRC_Init>
  MX_I2C3_Init();
 8000700:	f000 f92e 	bl	8000960 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000704:	f000 fa30 	bl	8000b68 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 8000708:	f000 f96c 	bl	80009e4 <MX_I2C4_Init>
  MX_TouchGFX_Init();
 800070c:	f008 fd36 	bl	800917c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(300);
 8000710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000714:	f001 f8d4 	bl	80018c0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_Baclight_GPIO_Port,LCD_Baclight_Pin,GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2108      	movs	r1, #8
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <main+0x78>)
 800071e:	f001 fd47 	bl	80021b0 <HAL_GPIO_WritePin>
  //Clear LCD buffer
  //for(uint32_t i = 0;i < 160000;i++){
  //	 framebuffer[i] = i;
  //	HAL_Delay(1);
  //}
  HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f001 f8cb 	bl	80018c0 <HAL_Delay>
  uint16_t X,Y;
  uint8_t Pressure,Touch;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800072a:	f005 f825 	bl	8005778 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HardwareTask */
  HardwareTaskHandle = osThreadNew(StartHardwareTask, NULL, &HardwareTask_attributes);
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <main+0x7c>)
 8000730:	2100      	movs	r1, #0
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0x80>)
 8000734:	f005 f88a 	bl	800584c <osThreadNew>
 8000738:	4603      	mov	r3, r0
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <main+0x84>)
 800073c:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(StartGFXTask, NULL, &TouchGFXTask_attributes);
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <main+0x88>)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <main+0x8c>)
 8000744:	f005 f882 	bl	800584c <osThreadNew>
 8000748:	4603      	mov	r3, r0
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <main+0x90>)
 800074c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074e:	f005 f847 	bl	80057e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x76>
 8000754:	40022000 	.word	0x40022000
 8000758:	0802c710 	.word	0x0802c710
 800075c:	08000f65 	.word	0x08000f65
 8000760:	20014fdc 	.word	0x20014fdc
 8000764:	0802c734 	.word	0x0802c734
 8000768:	08000f75 	.word	0x08000f75
 800076c:	20014f54 	.word	0x20014f54

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0b4      	sub	sp, #208	; 0xd0
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f02a f894 	bl	802a8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2284      	movs	r2, #132	; 0x84
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f02a f885 	bl	802a8ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a2:	f002 fdc9 	bl	8003338 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <SystemClock_Config+0x13c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a40      	ldr	r2, [pc, #256]	; (80008ac <SystemClock_Config+0x13c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <SystemClock_Config+0x13c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <SystemClock_Config+0x140>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <SystemClock_Config+0x140>)
 80007c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <SystemClock_Config+0x140>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007fa:	23d8      	movs	r3, #216	; 0xd8
 80007fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fdf1 	bl	80033f8 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800081c:	f000 fbc6 	bl	8000fac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f002 fd9a 	bl	8003358 <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800082a:	f000 fbbf 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000850:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000854:	2107      	movs	r1, #7
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f872 	bl	8003940 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000862:	f000 fba3 	bl	8000fac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <SystemClock_Config+0x144>)
 8000868:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000882:	2300      	movs	r3, #0
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000886:	2300      	movs	r3, #0
 8000888:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800088a:	2300      	movs	r3, #0
 800088c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fa5c 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800089e:	f000 fb85 	bl	8000fac <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	37d0      	adds	r7, #208	; 0xd0
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000
 80008b4:	00030048 	.word	0x00030048

080008b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <MX_CRC_Init+0x40>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008dc:	2201      	movs	r2, #1
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_CRC_Init+0x3c>)
 80008e2:	f001 f8f3 	bl	8001acc <HAL_CRC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008ec:	f000 fb5e 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20014e88 	.word	0x20014e88
 80008f8:	40023000 	.word	0x40023000

080008fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <MX_DMA2D_Init+0x60>)
 8000904:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_DMA2D_Init+0x5c>)
 800090e:	2202      	movs	r2, #2
 8000910:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_DMA2D_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000920:	2202      	movs	r2, #2
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_DMA2D_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000932:	f001 f9b5 	bl	8001ca0 <HAL_DMA2D_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800093c:	f000 fb36 	bl	8000fac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000940:	2101      	movs	r1, #1
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_DMA2D_Init+0x5c>)
 8000944:	f001 f9f6 	bl	8001d34 <HAL_DMA2D_ConfigLayer>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800094e:	f000 fb2d 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20014fe0 	.word	0x20014fe0
 800095c:	4002b000 	.word	0x4002b000

08000960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000966:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <MX_I2C3_Init+0x7c>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00200D6F;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_I2C3_Init+0x78>)
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <MX_I2C3_Init+0x80>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_I2C3_Init+0x78>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_I2C3_Init+0x78>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <MX_I2C3_Init+0x78>)
 800099c:	f001 fc22 	bl	80021e4 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 fb01 	bl	8000fac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <MX_I2C3_Init+0x78>)
 80009ae:	f002 f873 	bl	8002a98 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 faf8 	bl	8000fac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_I2C3_Init+0x78>)
 80009c0:	f002 f8b5 	bl	8002b2e <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 faef 	bl	8000fac <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80009ce:	2004      	movs	r0, #4
 80009d0:	f002 f8fa 	bl	8002bc8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20014df0 	.word	0x20014df0
 80009dc:	40005c00 	.word	0x40005c00
 80009e0:	00200d6f 	.word	0x00200d6f

080009e4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C4_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C4_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C4_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C4_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C4_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C4_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a20:	f001 fbe0 	bl	80021e4 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fabf 	bl	8000fac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a32:	f002 f831 	bl	8002a98 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fab6 	bl	8000fac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C4_Init+0x74>)
 8000a44:	f002 f873 	bl	8002b2e <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 faad 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20014e3c 	.word	0x20014e3c
 8000a5c:	40006000 	.word	0x40006000
 8000a60:	20404768 	.word	0x20404768

08000a64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2234      	movs	r2, #52	; 0x34
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f029 ff1b 	bl	802a8ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a78:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <MX_LTDC_Init+0x100>)
 8000a7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 15;
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a96:	220f      	movs	r2, #15
 8000a98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 175;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aa2:	22af      	movs	r2, #175	; 0xaf
 8000aa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 30;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aa8:	221e      	movs	r2, #30
 8000aaa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1199;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aae:	f240 42af 	movw	r2, #1199	; 0x4af
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 630;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ab6:	f240 2276 	movw	r2, #630	; 0x276
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1359;
 8000abc:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000abe:	f240 524f 	movw	r2, #1359	; 0x54f
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 642;
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ac6:	f240 2282 	movw	r2, #642	; 0x282
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ae4:	481e      	ldr	r0, [pc, #120]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ae6:	f002 f88f 	bl	8002c08 <HAL_LTDC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000af0:	f000 fa5c 	bl	8000fac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000b02:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000b06:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b18:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8000b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000b2a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000b4a:	f002 f9e5 	bl	8002f18 <HAL_LTDC_ConfigLayer>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b54:	f000 fa2a 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3738      	adds	r7, #56	; 0x38
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20014eac 	.word	0x20014eac
 8000b64:	40016800 	.word	0x40016800

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_USART1_UART_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000bac:	f004 f81e 	bl	8004bec <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f9f9 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20014f58 	.word	0x20014f58
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_FMC_Init+0xa8>)
 8000be4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c00:	2240      	movs	r2, #64	; 0x40
 8000c02:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c06:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c0a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c18:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c32:	2307      	movs	r3, #7
 8000c34:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c36:	2303      	movs	r3, #3
 8000c38:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_FMC_Init+0xa4>)
 8000c48:	f003 fc72 	bl	8004530 <HAL_SDRAM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000c52:	f000 f9ab 	bl	8000fac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  MX_SDRAM_InitSeqeunce(SDRAM_REFRESH_COUNT,SDRAM_TIMEOUT);
 8000c56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c5a:	f240 6003 	movw	r0, #1539	; 0x603
 8000c5e:	f000 f923 	bl	8000ea8 <MX_SDRAM_InitSeqeunce>
  /* USER CODE END FMC_Init 2 */
}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20015020 	.word	0x20015020
 8000c70:	a0000140 	.word	0xa0000140

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a80      	ldr	r2, [pc, #512]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	623b      	str	r3, [r7, #32]
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a74      	ldr	r2, [pc, #464]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd2:	4b6f      	ldr	r3, [pc, #444]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a6e      	ldr	r2, [pc, #440]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a68      	ldr	r2, [pc, #416]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b66      	ldr	r3, [pc, #408]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a62      	ldr	r2, [pc, #392]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a5c      	ldr	r2, [pc, #368]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b51      	ldr	r3, [pc, #324]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <MX_GPIO_Init+0x21c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_UPDN_GPIO_Port, LCD_UPDN_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	484b      	ldr	r0, [pc, #300]	; (8000e94 <MX_GPIO_Init+0x220>)
 8000d68:	f001 fa22 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_SHLR_Pin|LCD_RESET_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000d72:	4849      	ldr	r0, [pc, #292]	; (8000e98 <MX_GPIO_Init+0x224>)
 8000d74:	f001 fa1c 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DITHUB_GPIO_Port, LCD_DITHUB_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4847      	ldr	r0, [pc, #284]	; (8000e9c <MX_GPIO_Init+0x228>)
 8000d80:	f001 fa16 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CT_RESET_GPIO_Port, LCD_CT_RESET_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4845      	ldr	r0, [pc, #276]	; (8000ea0 <MX_GPIO_Init+0x22c>)
 8000d8c:	f001 fa10 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Baclight_GPIO_Port, LCD_Baclight_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	4840      	ldr	r0, [pc, #256]	; (8000e98 <MX_GPIO_Init+0x224>)
 8000d96:	f001 fa0b 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Mode_GPIO_Port, LCD_Mode_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	4841      	ldr	r0, [pc, #260]	; (8000ea4 <MX_GPIO_Init+0x230>)
 8000da0:	f001 fa06 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_UPDN_Pin */
  GPIO_InitStruct.Pin = LCD_UPDN_Pin;
 8000da4:	2308      	movs	r3, #8
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_UPDN_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4836      	ldr	r0, [pc, #216]	; (8000e94 <MX_GPIO_Init+0x220>)
 8000dbc:	f001 f84c 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SHLR_Pin */
  GPIO_InitStruct.Pin = LCD_SHLR_Pin;
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_SHLR_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482f      	ldr	r0, [pc, #188]	; (8000e98 <MX_GPIO_Init+0x224>)
 8000dda:	f001 f83d 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DITHUB_Pin */
  GPIO_InitStruct.Pin = LCD_DITHUB_Pin;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DITHUB_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4829      	ldr	r0, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x228>)
 8000df8:	f001 f82e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CT_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_CT_RESET_Pin;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e02:	2311      	movs	r3, #17
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0x22c>)
 8000e16:	f001 f81f 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <MX_GPIO_Init+0x22c>)
 8000e30:	f001 f812 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Baclight_Pin */
  GPIO_InitStruct.Pin = LCD_Baclight_Pin;
 8000e34:	2308      	movs	r3, #8
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_Baclight_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_GPIO_Init+0x224>)
 8000e4c:	f001 f804 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Mode_Pin */
  GPIO_InitStruct.Pin = LCD_Mode_Pin;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_Mode_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <MX_GPIO_Init+0x230>)
 8000e68:	f000 fff6 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0x224>)
 8000e84:	f000 ffe8 	bl	8001e58 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <MX_SDRAM_InitSeqeunce>:

/* USER CODE BEGIN 4 */

void MX_SDRAM_InitSeqeunce(uint32_t RefreshCount,uint32_t timout){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	__IO uint32_t tmpmrd = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
	static FMC_SDRAM_CommandTypeDef Command;

	Command.CommandMode 			= FMC_SDRAM_CMD_CLK_ENABLE;
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4922      	ldr	r1, [pc, #136]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ed2:	4823      	ldr	r0, [pc, #140]	; (8000f60 <MX_SDRAM_InitSeqeunce+0xb8>)
 8000ed4:	f003 fb60 	bl	8004598 <HAL_SDRAM_SendCommand>

	HAL_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fcf1 	bl	80018c0 <HAL_Delay>

	Command.CommandMode 			= FMC_SDRAM_CMD_PALL;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	4918      	ldr	r1, [pc, #96]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000efa:	4819      	ldr	r0, [pc, #100]	; (8000f60 <MX_SDRAM_InitSeqeunce+0xb8>)
 8000efc:	f003 fb4c 	bl	8004598 <HAL_SDRAM_SendCommand>

	Command.CommandMode 			= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 8;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= 0;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4910      	ldr	r1, [pc, #64]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f1c:	4810      	ldr	r0, [pc, #64]	; (8000f60 <MX_SDRAM_InitSeqeunce+0xb8>)
 8000f1e:	f003 fb3b 	bl	8004598 <HAL_SDRAM_SendCommand>

    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000f22:	f240 2337 	movw	r3, #567	; 0x237
 8000f26:	60fb      	str	r3, [r7, #12]
					   SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
					   SDRAM_MODEREG_CAS_LATENCY_3           |
					   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode 			= FMC_SDRAM_CMD_LOAD_MODE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	601a      	str	r2, [r3, #0]
	Command.CommandTarget  			= FMC_SDRAM_CMD_TARGET_BANK1;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f30:	2210      	movs	r2, #16
 8000f32:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber		= 1;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition 	= tmpmrd;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f3e:	60d3      	str	r3, [r2, #12]

	HAL_SDRAM_SendCommand(&hsdram1, &Command, timout);
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4906      	ldr	r1, [pc, #24]	; (8000f5c <MX_SDRAM_InitSeqeunce+0xb4>)
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MX_SDRAM_InitSeqeunce+0xb8>)
 8000f46:	f003 fb27 	bl	8004598 <HAL_SDRAM_SendCommand>

	HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_SDRAM_InitSeqeunce+0xb8>)
 8000f4e:	f003 fb4e 	bl	80045ee <HAL_SDRAM_ProgramRefreshRate>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000118 	.word	0x20000118
 8000f60:	20015020 	.word	0x20015020

08000f64 <StartHardwareTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f004 fd13 	bl	8005998 <osDelay>
 8000f72:	e7fb      	b.n	8000f6c <StartHardwareTask+0x8>

08000f74 <StartGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGFXTask */
void StartGFXTask(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGFXTask */

  MX_TouchGFX_Process();
 8000f7c:	f008 f904 	bl	8009188 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f004 fd09 	bl	8005998 <osDelay>
 8000f86:	e7fb      	b.n	8000f80 <StartGFXTask+0xc>

08000f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f9a:	f000 fc71 	bl	8001880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40001000 	.word	0x40001000

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	f06f 0001 	mvn.w	r0, #1
 8000ff6:	f000 fd3f 	bl	8001a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_CRC_MspInit+0x38>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10b      	bne.n	8001032 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_CRC_MspInit+0x3c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_CRC_MspInit+0x3c>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_CRC_MspInit+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023000 	.word	0x40023000
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_DMA2D_MspInit+0x38>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10b      	bne.n	8001072 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_DMA2D_MspInit+0x3c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_DMA2D_MspInit+0x3c>)
 8001060:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_DMA2D_MspInit+0x3c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	4002b000 	.word	0x4002b000
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a3d      	ldr	r2, [pc, #244]	; (800119c <HAL_I2C_MspInit+0x114>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d129      	bne.n	80010fe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010d4:	2304      	movs	r3, #4
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4831      	ldr	r0, [pc, #196]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010e0:	f000 feba 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80010fc:	e04a      	b.n	8001194 <HAL_I2C_MspInit+0x10c>
  else if(hi2c->Instance==I2C4)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_I2C_MspInit+0x120>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d145      	bne.n	8001194 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113e:	2312      	movs	r3, #18
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001142:	2301      	movs	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800114a:	2304      	movs	r3, #4
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001156:	f000 fe7f 	bl	8001e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800116c:	2304      	movs	r3, #4
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <HAL_I2C_MspInit+0x124>)
 8001178:	f000 fe6e 	bl	8001e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 8001182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40005c00 	.word	0x40005c00
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021c00 	.word	0x40021c00
 80011a8:	40006000 	.word	0x40006000
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a81      	ldr	r2, [pc, #516]	; (80013d4 <HAL_LTDC_MspInit+0x224>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	f040 80fb 	bne.w	80013ca <HAL_LTDC_MspInit+0x21a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011d4:	4b80      	ldr	r3, [pc, #512]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	4a7f      	ldr	r2, [pc, #508]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011de:	6453      	str	r3, [r2, #68]	; 0x44
 80011e0:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ec:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001204:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a73      	ldr	r2, [pc, #460]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800121c:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a6d      	ldr	r2, [pc, #436]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a67      	ldr	r2, [pc, #412]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800123a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a61      	ldr	r2, [pc, #388]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a55      	ldr	r2, [pc, #340]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <HAL_LTDC_MspInit+0x228>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012ac:	2370      	movs	r3, #112	; 0x70
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012bc:	230e      	movs	r3, #14
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4845      	ldr	r0, [pc, #276]	; (80013dc <HAL_LTDC_MspInit+0x22c>)
 80012c8:	f000 fdc6 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80012cc:	f240 6337 	movw	r3, #1591	; 0x637
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012de:	230e      	movs	r3, #14
 80012e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	483d      	ldr	r0, [pc, #244]	; (80013e0 <HAL_LTDC_MspInit+0x230>)
 80012ea:	f000 fdb5 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	4836      	ldr	r0, [pc, #216]	; (80013e4 <HAL_LTDC_MspInit+0x234>)
 800130c:	f000 fda4 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001310:	f64e 6308 	movw	r3, #60936	; 0xee08
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001322:	230e      	movs	r3, #14
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <HAL_LTDC_MspInit+0x238>)
 800132e:	f000 fd93 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8001332:	f44f 5373 	mov.w	r3, #15552	; 0x3cc0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001344:	230e      	movs	r3, #14
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <HAL_LTDC_MspInit+0x23c>)
 8001350:	f000 fd82 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001366:	230e      	movs	r3, #14
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	481f      	ldr	r0, [pc, #124]	; (80013f0 <HAL_LTDC_MspInit+0x240>)
 8001372:	f000 fd71 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001388:	230e      	movs	r3, #14
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001390:	4619      	mov	r1, r3
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <HAL_LTDC_MspInit+0x244>)
 8001394:	f000 fd60 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013aa:	230e      	movs	r3, #14
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <HAL_LTDC_MspInit+0x248>)
 80013b6:	f000 fd4f 	bl	8001e58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2105      	movs	r1, #5
 80013be:	2058      	movs	r0, #88	; 0x58
 80013c0:	f000 fb5a 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013c4:	2058      	movs	r0, #88	; 0x58
 80013c6:	f000 fb73 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3740      	adds	r7, #64	; 0x40
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40016800 	.word	0x40016800
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_UART_MspInit+0x80>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_UART_MspInit+0x80>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_UART_MspInit+0x80>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_UART_MspInit+0x80>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_UART_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_UART_MspInit+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001460:	2307      	movs	r3, #7
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_UART_MspInit+0x84>)
 800146c:	f000 fcf4 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40011000 	.word	0x40011000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_FMC_MspInit+0xe4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d15e      	bne.n	800155e <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_FMC_MspInit+0xe4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_FMC_MspInit+0xe8>)
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <HAL_FMC_MspInit+0xe8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6393      	str	r3, [r2, #56]	; 0x38
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_FMC_MspInit+0xe8>)
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d0:	230c      	movs	r3, #12
 80014d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <HAL_FMC_MspInit+0xec>)
 80014da:	f000 fcbd 	bl	8001e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80014de:	230d      	movs	r3, #13
 80014e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	481f      	ldr	r0, [pc, #124]	; (8001574 <HAL_FMC_MspInit+0xf0>)
 80014f8:	f000 fcae 	bl	8001e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80014fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001500:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4818      	ldr	r0, [pc, #96]	; (8001578 <HAL_FMC_MspInit+0xf4>)
 8001518:	f000 fc9e 	bl	8001e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800151c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001520:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <HAL_FMC_MspInit+0xf8>)
 8001538:	f000 fc8e 	bl	8001e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800153c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001540:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <HAL_FMC_MspInit+0xfc>)
 8001558:	f000 fc7e 	bl	8001e58 <HAL_GPIO_Init>
 800155c:	e000      	b.n	8001560 <HAL_FMC_MspInit+0xdc>
    return;
 800155e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000128 	.word	0x20000128
 800156c:	40023800 	.word	0x40023800
 8001570:	40021400 	.word	0x40021400
 8001574:	40020800 	.word	0x40020800
 8001578:	40021800 	.word	0x40021800
 800157c:	40021000 	.word	0x40021000
 8001580:	40020c00 	.word	0x40020c00

08001584 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800158c:	f7ff ff7a 	bl	8001484 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	2036      	movs	r0, #54	; 0x36
 80015ae:	f000 fa63 	bl	8001a78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b2:	2036      	movs	r0, #54	; 0x36
 80015b4:	f000 fa7c 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_InitTick+0xa0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <HAL_InitTick+0xa0>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_InitTick+0xa0>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d0:	f107 0210 	add.w	r2, r7, #16
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fb86 	bl	8003cec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015e0:	f002 fb5c 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80015e4:	4603      	mov	r3, r0
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_InitTick+0xa4>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3b01      	subs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_InitTick+0xa8>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_InitTick+0xac>)
 80015fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_InitTick+0xa8>)
 8001600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001604:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_InitTick+0xa8>)
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_InitTick+0xa8>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_InitTick+0xa8>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_InitTick+0xa8>)
 800161a:	f003 f808 	bl	800462e <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <HAL_InitTick+0xa8>)
 8001626:	f003 f863 	bl	80046f0 <HAL_TIM_Base_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3730      	adds	r7, #48	; 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	431bde83 	.word	0x431bde83
 8001640:	20015054 	.word	0x20015054
 8001644:	40001000 	.word	0x40001000

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM6_DAC_IRQHandler+0x10>)
 800167a:	f003 f8b1 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20015054 	.word	0x20015054

08001688 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <LTDC_IRQHandler+0x10>)
 800168e:	f001 fb8b 	bl	8002da8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20014eac 	.word	0x20014eac

0800169c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_kill>:

int _kill(int pid, int sig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b6:	f029 f89f 	bl	802a7f8 <__errno>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
	return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_exit>:

void _exit (int status)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe7 	bl	80016ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80016de:	e7fe      	b.n	80016de <_exit+0x12>

080016e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00a      	b.n	8001708 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f2:	f3af 8000 	nop.w
 80016f6:	4601      	mov	r1, r0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf0      	blt.n	80016f2 <_read+0x12>
	}

return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_close>:
	}
	return len;
}

int _close(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001742:	605a      	str	r2, [r3, #4]
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_isatty>:

int _isatty(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return 1;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f029 f820 	bl	802a7f8 <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20050000 	.word	0x20050000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	2000012c 	.word	0x2000012c
 80017ec:	200150f8 	.word	0x200150f8

080017f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001830:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183e:	f7ff ffd7 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f028 fff1 	bl	802a828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7fe ff49 	bl	80006dc <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001858:	0805fc14 	.word	0x0805fc14
  ldr r2, =_sbss
 800185c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001860:	200150f4 	.word	0x200150f4

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>

08001866 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f000 f8f9 	bl	8001a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fe91 	bl	8001598 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fb9f 	bl	8000fb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	200150a0 	.word	0x200150a0

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200150a0 	.word	0x200150a0

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000000c 	.word	0x2000000c

08001908 <__NVIC_SetPriorityGrouping>:
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0000 	.word	0x05fa0000

08001950 <__NVIC_GetPriorityGrouping>:
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff4c 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8a:	f7ff ff61 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	6978      	ldr	r0, [r7, #20]
 8001a96:	f7ff ffb1 	bl	80019fc <NVIC_EncodePriority>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff80 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff54 	bl	800196c <__NVIC_EnableIRQ>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e054      	b.n	8001b88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7f5b      	ldrb	r3, [r3, #29]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fa8a 	bl	8001008 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_CRC_Init+0xc4>)
 8001b08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0218 	bic.w	r2, r2, #24
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	e00c      	b.n	8001b36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f834 	bl	8001b94 <HAL_CRCEx_Polynomial_Set>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e028      	b.n	8001b88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	795b      	ldrb	r3, [r3, #5]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	e004      	b.n	8001b54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6912      	ldr	r2, [r2, #16]
 8001b52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	04c11db7 	.word	0x04c11db7

08001b94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ba4:	231f      	movs	r3, #31
 8001ba6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ba8:	bf00      	nop
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	613a      	str	r2, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d009      	beq.n	8001bc8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_CRCEx_Polynomial_Set+0x16>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d846      	bhi.n	8001c5c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001bce:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c5d 	.word	0x08001c5d
 8001bdc:	08001c5d 	.word	0x08001c5d
 8001be0:	08001c5d 	.word	0x08001c5d
 8001be4:	08001c5d 	.word	0x08001c5d
 8001be8:	08001c5d 	.word	0x08001c5d
 8001bec:	08001c5d 	.word	0x08001c5d
 8001bf0:	08001c5d 	.word	0x08001c5d
 8001bf4:	08001c51 	.word	0x08001c51
 8001bf8:	08001c5d 	.word	0x08001c5d
 8001bfc:	08001c5d 	.word	0x08001c5d
 8001c00:	08001c5d 	.word	0x08001c5d
 8001c04:	08001c5d 	.word	0x08001c5d
 8001c08:	08001c5d 	.word	0x08001c5d
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c5d 	.word	0x08001c5d
 8001c14:	08001c45 	.word	0x08001c45
 8001c18:	08001c5d 	.word	0x08001c5d
 8001c1c:	08001c5d 	.word	0x08001c5d
 8001c20:	08001c5d 	.word	0x08001c5d
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001c5d 	.word	0x08001c5d
 8001c30:	08001c5d 	.word	0x08001c5d
 8001c34:	08001c39 	.word	0x08001c39
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d913      	bls.n	8001c66 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c42:	e010      	b.n	8001c66 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d90f      	bls.n	8001c6a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c4e:	e00c      	b.n	8001c6a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	d90b      	bls.n	8001c6e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c5a:	e008      	b.n	8001c6e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c60:	e006      	b.n	8001c70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c62:	bf00      	nop
 8001c64:	e004      	b.n	8001c70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c66:	bf00      	nop
 8001c68:	e002      	b.n	8001c70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c6a:	bf00      	nop
 8001c6c:	e000      	b.n	8001c70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c6e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 0118 	bic.w	r1, r3, #24
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e039      	b.n	8001d26 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff f9be 	bl	8001048 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	f023 0107 	bic.w	r1, r3, #7
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_DMA2D_Init+0x90>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68d1      	ldr	r1, [r2, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	ffffc000 	.word	0xffffc000

08001d34 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA2D_ConfigLayer+0x20>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e079      	b.n	8001e48 <HAL_DMA2D_ConfigLayer+0x114>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	3318      	adds	r3, #24
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_DMA2D_ConfigLayer+0x120>)
 8001d80:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d003      	beq.n	8001d92 <HAL_DMA2D_ConfigLayer+0x5e>
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	d107      	bne.n	8001da2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e005      	b.n	8001dae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d120      	bne.n	8001df6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	ea02 0103 	and.w	r1, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA2D_ConfigLayer+0xb2>
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d127      	bne.n	8001e36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
 8001df4:	e01f      	b.n	8001e36 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	ea02 0103 	and.w	r1, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b0a      	cmp	r3, #10
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d106      	bne.n	8001e36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e34:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	ff03000f 	.word	0xff03000f

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e175      	b.n	8002164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8164 	bne.w	800215e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_GPIO_Init+0x5e>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d007      	beq.n	8001eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eaa:	2b11      	cmp	r3, #17
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x100>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80be 	beq.w	800215e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_GPIO_Init+0x324>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_GPIO_Init+0x324>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_GPIO_Init+0x324>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ffa:	4a61      	ldr	r2, [pc, #388]	; (8002180 <HAL_GPIO_Init+0x328>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d037      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_GPIO_Init+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_GPIO_Init+0x23a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_GPIO_Init+0x334>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_Init+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a55      	ldr	r2, [pc, #340]	; (8002190 <HAL_GPIO_Init+0x338>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x232>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_GPIO_Init+0x33c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a53      	ldr	r2, [pc, #332]	; (8002198 <HAL_GPIO_Init+0x340>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x22a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_GPIO_Init+0x344>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <HAL_GPIO_Init+0x348>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x21a>
 800206e:	2309      	movs	r3, #9
 8002070:	e012      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002072:	230a      	movs	r3, #10
 8002074:	e010      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002076:	2308      	movs	r3, #8
 8002078:	e00e      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207a:	2307      	movs	r3, #7
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207e:	2306      	movs	r3, #6
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_GPIO_Init+0x328>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020da:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_GPIO_Init+0x354>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_GPIO_Init+0x354>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae86 	bls.w	8001e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40021400 	.word	0x40021400
 800219c:	40021800 	.word	0x40021800
 80021a0:	40021c00 	.word	0x40021c00
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40022400 	.word	0x40022400
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe ff3c 	bl	8001088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e006      	b.n	800226c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800226a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d104      	bne.n	800227e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_I2C_Init+0x11c>)
 800228a:	430b      	orrs	r3, r1
 800228c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800229c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	ea42 0103 	orr.w	r1, r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	02008000 	.word	0x02008000

08002304 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	f040 80da 	bne.w	80024da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2C_Master_Transmit+0x30>
 8002330:	2302      	movs	r3, #2
 8002332:	e0d3      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800233c:	f7ff fab4 	bl	80018a8 <HAL_GetTick>
 8002340:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2319      	movs	r3, #25
 8002348:	2201      	movs	r2, #1
 800234a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f9e6 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0be      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2221      	movs	r2, #33	; 0x21
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2210      	movs	r2, #16
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	893a      	ldrh	r2, [r7, #8]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	2bff      	cmp	r3, #255	; 0xff
 800238e:	d90e      	bls.n	80023ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2da      	uxtb	r2, r3
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb48 	bl	8002a3c <I2C_TransferConfig>
 80023ac:	e06c      	b.n	8002488 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fb37 	bl	8002a3c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80023ce:	e05b      	b.n	8002488 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f9e3 	bl	80027a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e07b      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d034      	beq.n	8002488 <HAL_I2C_Master_Transmit+0x184>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d130      	bne.n	8002488 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f975 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e04d      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d90e      	bls.n	8002468 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 faeb 	bl	8002a3c <I2C_TransferConfig>
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fada 	bl	8002a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d19e      	bne.n	80023d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	6a39      	ldr	r1, [r7, #32]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f9c2 	bl	8002820 <I2C_WaitOnSTOPFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01a      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	80002000 	.word	0x80002000
 80024e8:	fe00e800 	.word	0xfe00e800

080024ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	f040 80db 	bne.w	80026c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2C_Master_Receive+0x30>
 8002518:	2302      	movs	r3, #2
 800251a:	e0d4      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002524:	f7ff f9c0 	bl	80018a8 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8f2 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0bf      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2222      	movs	r2, #34	; 0x22
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2210      	movs	r2, #16
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	2bff      	cmp	r3, #255	; 0xff
 8002576:	d90e      	bls.n	8002596 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	22ff      	movs	r2, #255	; 0xff
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	b2da      	uxtb	r2, r3
 8002584:	8979      	ldrh	r1, [r7, #10]
 8002586:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa54 	bl	8002a3c <I2C_TransferConfig>
 8002594:	e06d      	b.n	8002672 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_I2C_Master_Receive+0x1e4>)
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fa43 	bl	8002a3c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80025b6:	e05c      	b.n	8002672 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	6a39      	ldr	r1, [r7, #32]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f96b 	bl	8002898 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e07c      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d034      	beq.n	8002672 <HAL_I2C_Master_Receive+0x186>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d130      	bne.n	8002672 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f880 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04d      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2bff      	cmp	r3, #255	; 0xff
 8002632:	d90e      	bls.n	8002652 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9f6 	bl	8002a3c <I2C_TransferConfig>
 8002650:	e00f      	b.n	8002672 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f9e5 	bl	8002a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d19d      	bne.n	80025b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f8cd 	bl	8002820 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01a      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_I2C_Master_Receive+0x1e8>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	80002400 	.word	0x80002400
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d103      	bne.n	80026f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d007      	beq.n	8002714 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	619a      	str	r2, [r3, #24]
  }
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002730:	e022      	b.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d01e      	beq.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f8b5 	bl	80018a8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d113      	bne.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00f      	b.n	8002798 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	429a      	cmp	r2, r3
 8002794:	d0cd      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ac:	e02c      	b.n	8002808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8dc 	bl	8002970 <I2C_IsAcknowledgeFailed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e02a      	b.n	8002818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d01e      	beq.n	8002808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7ff f86d 	bl	80018a8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d1cb      	bne.n	80027ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800282c:	e028      	b.n	8002880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f89c 	bl	8002970 <I2C_IsAcknowledgeFailed>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e026      	b.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7ff f831 	bl	80018a8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b20      	cmp	r3, #32
 800288c:	d1cf      	bne.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028a4:	e055      	b.n	8002952 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f860 	bl	8002970 <I2C_IsAcknowledgeFailed>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e053      	b.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d129      	bne.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d105      	bne.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e03f      	b.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2220      	movs	r2, #32
 80028e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e022      	b.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe ffc4 	bl	80018a8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e007      	b.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d1a2      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	fe00e800 	.word	0xfe00e800

08002970 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b10      	cmp	r3, #16
 8002988:	d151      	bne.n	8002a2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800298a:	e022      	b.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d01e      	beq.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002994:	f7fe ff88 	bl	80018a8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d302      	bcc.n	80029aa <I2C_IsAcknowledgeFailed+0x3a>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d113      	bne.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02e      	b.n	8002a30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d1d5      	bne.n	800298c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fe71 	bl	80026d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a02:	400b      	ands	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	0d5b      	lsrs	r3, r3, #21
 8002a58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <I2C_TransferConfig+0x58>)
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	43db      	mvns	r3, r3
 8002a62:	ea02 0103 	and.w	r1, r2, r3
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a6c:	7a7b      	ldrb	r3, [r7, #9]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	03ff63ff 	.word	0x03ff63ff

08002a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d138      	bne.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e032      	b.n	8002b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d139      	bne.n	8002bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e033      	b.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bda:	6453      	str	r3, [r2, #68]	; 0x44
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4905      	ldr	r1, [pc, #20]	; (8002c04 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800

08002c08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0bf      	b.n	8002d9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fabe 	bl	80011b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_LTDC_Init+0x19c>)
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68d9      	ldr	r1, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_LTDC_Init+0x19c>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68d9      	ldr	r1, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6919      	ldr	r1, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_LTDC_Init+0x19c>)
 8002cd8:	400b      	ands	r3, r1
 8002cda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6959      	ldr	r1, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_LTDC_Init+0x19c>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6959      	ldr	r1, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0206 	orr.w	r2, r2, #6
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	f000f800 	.word	0xf000f800

08002da8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d023      	beq.n	8002e12 <HAL_LTDC_IRQHandler+0x6a>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01e      	beq.n	8002e12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2204      	movs	r2, #4
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f86f 	bl	8002ef0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d023      	beq.n	8002e64 <HAL_LTDC_IRQHandler+0xbc>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01e      	beq.n	8002e64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0202 	bic.w	r2, r2, #2
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f846 	bl	8002ef0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01b      	beq.n	8002ea6 <HAL_LTDC_IRQHandler+0xfe>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f012 fa6f 	bl	8015384 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01b      	beq.n	8002ee8 <HAL_LTDC_IRQHandler+0x140>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2208      	movs	r2, #8
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f80e 	bl	8002f04 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_LTDC_ConfigLayer+0x1a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e02c      	b.n	8002f8c <HAL_LTDC_ConfigLayer+0x74>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2134      	movs	r1, #52	; 0x34
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4614      	mov	r4, r2
 8002f56:	461d      	mov	r5, r3
 8002f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f849 	bl	8003004 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bdb0      	pop	{r4, r5, r7, pc}

08002f94 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_LTDC_ProgramLineEvent+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e023      	b.n	8002ff4 <HAL_LTDC_ProgramLineEvent+0x60>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002fcc:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40016800 	.word	0x40016800

08003004 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	4413      	add	r3, r2
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	4413      	add	r3, r2
 8003032:	3384      	adds	r3, #132	; 0x84
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4611      	mov	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	01d2      	lsls	r2, r2, #7
 8003040:	440a      	add	r2, r1
 8003042:	3284      	adds	r2, #132	; 0x84
 8003044:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003048:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305a:	4413      	add	r3, r2
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	01db      	lsls	r3, r3, #7
 8003068:	440b      	add	r3, r1
 800306a:	3384      	adds	r3, #132	; 0x84
 800306c:	4619      	mov	r1, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003082:	4413      	add	r3, r2
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	01db      	lsls	r3, r3, #7
 8003092:	4413      	add	r3, r2
 8003094:	3384      	adds	r3, #132	; 0x84
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	4611      	mov	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	01d2      	lsls	r2, r2, #7
 80030a2:	440a      	add	r2, r1
 80030a4:	3284      	adds	r2, #132	; 0x84
 80030a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80030aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ba:	4413      	add	r3, r2
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	01db      	lsls	r3, r3, #7
 80030c8:	440b      	add	r3, r1
 80030ca:	3384      	adds	r3, #132	; 0x84
 80030cc:	4619      	mov	r1, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	01db      	lsls	r3, r3, #7
 80030de:	4413      	add	r3, r2
 80030e0:	3384      	adds	r3, #132	; 0x84
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	4611      	mov	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	01d2      	lsls	r2, r2, #7
 80030ee:	440a      	add	r2, r1
 80030f0:	3284      	adds	r2, #132	; 0x84
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	01db      	lsls	r3, r3, #7
 8003102:	4413      	add	r3, r2
 8003104:	3384      	adds	r3, #132	; 0x84
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4413      	add	r3, r2
 8003136:	3384      	adds	r3, #132	; 0x84
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	01db      	lsls	r3, r3, #7
 8003144:	4413      	add	r3, r2
 8003146:	3384      	adds	r3, #132	; 0x84
 8003148:	461a      	mov	r2, r3
 800314a:	2300      	movs	r3, #0
 800314c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003154:	461a      	mov	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	431a      	orrs	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	440b      	add	r3, r1
 800316a:	3384      	adds	r3, #132	; 0x84
 800316c:	4619      	mov	r1, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4413      	add	r3, r2
 8003180:	3384      	adds	r3, #132	; 0x84
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	4611      	mov	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	01d2      	lsls	r2, r2, #7
 800318e:	440a      	add	r2, r1
 8003190:	3284      	adds	r2, #132	; 0x84
 8003192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003196:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	4413      	add	r3, r2
 80031a4:	3384      	adds	r3, #132	; 0x84
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	01db      	lsls	r3, r3, #7
 80031b8:	4413      	add	r3, r2
 80031ba:	3384      	adds	r3, #132	; 0x84
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	01db      	lsls	r3, r3, #7
 80031c8:	440b      	add	r3, r1
 80031ca:	3384      	adds	r3, #132	; 0x84
 80031cc:	4619      	mov	r1, r3
 80031ce:	4b58      	ldr	r3, [pc, #352]	; (8003330 <LTDC_SetConfig+0x32c>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	6809      	ldr	r1, [r1, #0]
 80031e0:	4608      	mov	r0, r1
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	01c9      	lsls	r1, r1, #7
 80031e6:	4401      	add	r1, r0
 80031e8:	3184      	adds	r1, #132	; 0x84
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	01db      	lsls	r3, r3, #7
 80031f8:	4413      	add	r3, r2
 80031fa:	3384      	adds	r3, #132	; 0x84
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	01db      	lsls	r3, r3, #7
 8003208:	4413      	add	r3, r2
 800320a:	3384      	adds	r3, #132	; 0x84
 800320c:	461a      	mov	r2, r3
 800320e:	2300      	movs	r3, #0
 8003210:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4413      	add	r3, r2
 800321e:	3384      	adds	r3, #132	; 0x84
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003230:	2304      	movs	r3, #4
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e01b      	b.n	800326e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d102      	bne.n	8003244 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800323e:	2303      	movs	r3, #3
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e014      	b.n	800326e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00b      	beq.n	8003264 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003250:	2b02      	cmp	r3, #2
 8003252:	d007      	beq.n	8003264 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003260:	2b07      	cmp	r3, #7
 8003262:	d102      	bne.n	800326a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003264:	2302      	movs	r3, #2
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e001      	b.n	800326e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	01db      	lsls	r3, r3, #7
 8003278:	4413      	add	r3, r2
 800327a:	3384      	adds	r3, #132	; 0x84
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	4611      	mov	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	01d2      	lsls	r2, r2, #7
 8003288:	440a      	add	r2, r1
 800328a:	3284      	adds	r2, #132	; 0x84
 800328c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003290:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	1acb      	subs	r3, r1, r3
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	3303      	adds	r3, #3
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4608      	mov	r0, r1
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	01c9      	lsls	r1, r1, #7
 80032ba:	4401      	add	r1, r0
 80032bc:	3184      	adds	r1, #132	; 0x84
 80032be:	4313      	orrs	r3, r2
 80032c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	4413      	add	r3, r2
 80032ce:	3384      	adds	r3, #132	; 0x84
 80032d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	01db      	lsls	r3, r3, #7
 80032dc:	440b      	add	r3, r1
 80032de:	3384      	adds	r3, #132	; 0x84
 80032e0:	4619      	mov	r1, r3
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <LTDC_SetConfig+0x330>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	01db      	lsls	r3, r3, #7
 80032f2:	4413      	add	r3, r2
 80032f4:	3384      	adds	r3, #132	; 0x84
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	4413      	add	r3, r2
 800330a:	3384      	adds	r3, #132	; 0x84
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4611      	mov	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	01d2      	lsls	r2, r2, #7
 8003318:	440a      	add	r2, r1
 800331a:	3284      	adds	r2, #132	; 0x84
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6013      	str	r3, [r2, #0]
}
 8003322:	bf00      	nop
 8003324:	3724      	adds	r7, #36	; 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	fffff8f8 	.word	0xfffff8f8
 8003334:	fffff800 	.word	0xfffff800

08003338 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003386:	f7fe fa8f 	bl	80018a8 <HAL_GetTick>
 800338a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800338c:	e009      	b.n	80033a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800338e:	f7fe fa8b 	bl	80018a8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339c:	d901      	bls.n	80033a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e022      	b.n	80033e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d1ee      	bne.n	800338e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7fe fa74 	bl	80018a8 <HAL_GetTick>
 80033c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c2:	e009      	b.n	80033d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c4:	f7fe fa70 	bl	80018a8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d2:	d901      	bls.n	80033d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e007      	b.n	80033e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e4:	d1ee      	bne.n	80033c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e291      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8087 	beq.w	800352a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800341c:	4b96      	ldr	r3, [pc, #600]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b04      	cmp	r3, #4
 8003426:	d00c      	beq.n	8003442 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003428:	4b93      	ldr	r3, [pc, #588]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d112      	bne.n	800345a <HAL_RCC_OscConfig+0x62>
 8003434:	4b90      	ldr	r3, [pc, #576]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003440:	d10b      	bne.n	800345a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003442:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d06c      	beq.n	8003528 <HAL_RCC_OscConfig+0x130>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d168      	bne.n	8003528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e26b      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x7a>
 8003464:	4b84      	ldr	r3, [pc, #528]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a83      	ldr	r2, [pc, #524]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800346a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e02e      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x9c>
 800347a:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7e      	ldr	r2, [pc, #504]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b7c      	ldr	r3, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7b      	ldr	r2, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800348c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01d      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a72      	ldr	r2, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe f9e6 	bl	80018a8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe f9e2 	bl	80018a8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e21f      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b61      	ldr	r3, [pc, #388]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f9d2 	bl	80018a8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe f9ce 	bl	80018a8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e20b      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x110>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d069      	beq.n	800360a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003536:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d11c      	bne.n	8003588 <HAL_RCC_OscConfig+0x190>
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d116      	bne.n	8003588 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_RCC_OscConfig+0x17a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1df      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	493d      	ldr	r1, [pc, #244]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	e040      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f984 	bl	80018a8 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe f980 	bl	80018a8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1bd      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4929      	ldr	r1, [pc, #164]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f960 	bl	80018a8 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe f95c 	bl	80018a8 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e199      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d038      	beq.n	8003688 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe f93d 	bl	80018a8 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe f939 	bl	80018a8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e176      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x23a>
 8003650:	e01a      	b.n	8003688 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_RCC_OscConfig+0x280>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe f923 	bl	80018a8 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe f91f 	bl	80018a8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d903      	bls.n	800367c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e15c      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
 8003678:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b91      	ldr	r3, [pc, #580]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a4 	beq.w	80037de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b8b      	ldr	r3, [pc, #556]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a87      	ldr	r2, [pc, #540]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036ca:	4b7f      	ldr	r3, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7e      	ldr	r2, [pc, #504]	; (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fe f8e7 	bl	80018a8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fe f8e3 	bl	80018a8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	; 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e120      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f0:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x31a>
 8003704:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a6e      	ldr	r2, [pc, #440]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e02d      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x33c>
 800371a:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a69      	ldr	r2, [pc, #420]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a66      	ldr	r2, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	e01c      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d10c      	bne.n	8003756 <HAL_RCC_OscConfig+0x35e>
 800373c:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a60      	ldr	r2, [pc, #384]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
 8003748:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	e00b      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a5a      	ldr	r2, [pc, #360]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
 8003762:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d015      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe f897 	bl	80018a8 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe f893 	bl	80018a8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0ce      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCC_OscConfig+0x386>
 80037a0:	e014      	b.n	80037cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe f881 	bl	80018a8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe f87d 	bl	80018a8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ee      	bne.n	80037aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d105      	bne.n	80037de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a4 	beq.w	8003930 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d06b      	beq.n	80038cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d149      	bne.n	8003890 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f84e 	bl	80018a8 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe f84a 	bl	80018a8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e087      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	4313      	orrs	r3, r2
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800385a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe f81e 	bl	80018a8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe f81a 	bl	80018a8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e057      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x478>
 800388e:	e04f      	b.n	8003930 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f804 	bl	80018a8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe f800 	bl	80018a8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03d      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4ac>
 80038c2:	e035      	b.n	8003930 <HAL_RCC_OscConfig+0x538>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x544>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d028      	beq.n	800392c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d121      	bne.n	800392c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d11a      	bne.n	800392c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003902:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003904:	4293      	cmp	r3, r2
 8003906:	d111      	bne.n	800392c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d107      	bne.n	800392c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0d0      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b67      	ldr	r3, [pc, #412]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	4965      	ldr	r1, [pc, #404]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0b8      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b8:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a52      	ldr	r2, [pc, #328]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c4:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	494d      	ldr	r1, [pc, #308]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d040      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d115      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e073      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06b      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 0203 	bic.w	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4936      	ldr	r1, [pc, #216]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd ff38 	bl	80018a8 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fd ff34 	bl	80018a8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e053      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 020c 	and.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1eb      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d210      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020f 	bic.w	r2, r3, #15
 8003a7a:	4922      	ldr	r1, [pc, #136]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e032      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4916      	ldr	r1, [pc, #88]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ad2:	f000 f821 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_RCC_ClockConfig+0x1d0>)
 8003aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_ClockConfig+0x1d4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fd50 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	0802c758 	.word	0x0802c758
 8003b10:	20000004 	.word	0x20000004
 8003b14:	20000008 	.word	0x20000008

08003b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b1e:	2100      	movs	r1, #0
 8003b20:	6079      	str	r1, [r7, #4]
 8003b22:	2100      	movs	r1, #0
 8003b24:	60f9      	str	r1, [r7, #12]
 8003b26:	2100      	movs	r1, #0
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2e:	4952      	ldr	r1, [pc, #328]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b30:	6889      	ldr	r1, [r1, #8]
 8003b32:	f001 010c 	and.w	r1, r1, #12
 8003b36:	2908      	cmp	r1, #8
 8003b38:	d00d      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b3a:	2908      	cmp	r1, #8
 8003b3c:	f200 8094 	bhi.w	8003c68 <HAL_RCC_GetSysClockFreq+0x150>
 8003b40:	2900      	cmp	r1, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x32>
 8003b44:	2904      	cmp	r1, #4
 8003b46:	d003      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x38>
 8003b48:	e08e      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b4a:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x164>)
 8003b4c:	60bb      	str	r3, [r7, #8]
      break;
 8003b4e:	e08e      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b52:	60bb      	str	r3, [r7, #8]
      break;
 8003b54:	e08b      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b56:	4948      	ldr	r1, [pc, #288]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b58:	6849      	ldr	r1, [r1, #4]
 8003b5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b5e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b60:	4945      	ldr	r1, [pc, #276]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b62:	6849      	ldr	r1, [r1, #4]
 8003b64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d024      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6c:	4942      	ldr	r1, [pc, #264]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b6e:	6849      	ldr	r1, [r1, #4]
 8003b70:	0989      	lsrs	r1, r1, #6
 8003b72:	4608      	mov	r0, r1
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b7c:	f04f 0500 	mov.w	r5, #0
 8003b80:	ea00 0204 	and.w	r2, r0, r4
 8003b84:	ea01 0305 	and.w	r3, r1, r5
 8003b88:	493d      	ldr	r1, [pc, #244]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b8a:	fb01 f003 	mul.w	r0, r1, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	fb01 f102 	mul.w	r1, r1, r2
 8003b94:	1844      	adds	r4, r0, r1
 8003b96:	493a      	ldr	r1, [pc, #232]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b98:	fba2 0101 	umull	r0, r1, r2, r1
 8003b9c:	1863      	adds	r3, r4, r1
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	f7fc fb82 	bl	80002b0 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e04a      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	ea02 0400 	and.w	r4, r2, r0
 8003bce:	ea03 0501 	and.w	r5, r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	014b      	lsls	r3, r1, #5
 8003be0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003be4:	0142      	lsls	r2, r0, #5
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	1b00      	subs	r0, r0, r4
 8003bec:	eb61 0105 	sbc.w	r1, r1, r5
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	018b      	lsls	r3, r1, #6
 8003bfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bfe:	0182      	lsls	r2, r0, #6
 8003c00:	1a12      	subs	r2, r2, r0
 8003c02:	eb63 0301 	sbc.w	r3, r3, r1
 8003c06:	f04f 0000 	mov.w	r0, #0
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	00d9      	lsls	r1, r3, #3
 8003c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c14:	00d0      	lsls	r0, r2, #3
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	1912      	adds	r2, r2, r4
 8003c1c:	eb45 0303 	adc.w	r3, r5, r3
 8003c20:	f04f 0000 	mov.w	r0, #0
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	0299      	lsls	r1, r3, #10
 8003c2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c2e:	0290      	lsls	r0, r2, #10
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	f7fc fb36 	bl	80002b0 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	60bb      	str	r3, [r7, #8]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c6a:	60bb      	str	r3, [r7, #8]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdb0      	pop	{r4, r5, r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	017d7840 	.word	0x017d7840

08003c84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000004 	.word	0x20000004

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a9b      	lsrs	r3, r3, #10
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	0802c768 	.word	0x0802c768

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc8:	f7ff ffdc 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0b5b      	lsrs	r3, r3, #13
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0802c768 	.word	0x0802c768

08003cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCC_GetClockConfig+0x60>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d78:	4b69      	ldr	r3, [pc, #420]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a68      	ldr	r2, [pc, #416]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	4964      	ldr	r1, [pc, #400]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	4959      	ldr	r1, [pc, #356]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de6:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	494a      	ldr	r1, [pc, #296]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 808b 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b3a      	ldr	r3, [pc, #232]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	4a39      	ldr	r2, [pc, #228]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e58:	f7fd fd26 	bl	80018a8 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd fd22 	bl	80018a8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e357      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d035      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d02e      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e9c:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d114      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fcea 	bl	80018a8 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fce6 	bl	80018a8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e319      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ee      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d111      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	4901      	ldr	r1, [pc, #4]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40007000 	.word	0x40007000
 8003f28:	0ffffcff 	.word	0x0ffffcff
 8003f2c:	4bb1      	ldr	r3, [pc, #708]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4ab0      	ldr	r2, [pc, #704]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	4bae      	ldr	r3, [pc, #696]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	49ab      	ldr	r1, [pc, #684]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f56:	4ba7      	ldr	r3, [pc, #668]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	4aa5      	ldr	r2, [pc, #660]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f66:	4ba3      	ldr	r3, [pc, #652]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	49a0      	ldr	r1, [pc, #640]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b9b      	ldr	r3, [pc, #620]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f92:	4998      	ldr	r1, [pc, #608]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b93      	ldr	r3, [pc, #588]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb4:	498f      	ldr	r1, [pc, #572]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc8:	4b8a      	ldr	r3, [pc, #552]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	4987      	ldr	r1, [pc, #540]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fea:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	497e      	ldr	r1, [pc, #504]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b79      	ldr	r3, [pc, #484]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4976      	ldr	r1, [pc, #472]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402e:	4b71      	ldr	r3, [pc, #452]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f023 020c 	bic.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	496d      	ldr	r1, [pc, #436]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004050:	4b68      	ldr	r3, [pc, #416]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	4965      	ldr	r1, [pc, #404]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004072:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	495c      	ldr	r1, [pc, #368]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004094:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	4954      	ldr	r1, [pc, #336]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040b6:	4b4f      	ldr	r3, [pc, #316]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	494b      	ldr	r1, [pc, #300]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040d8:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	4943      	ldr	r1, [pc, #268]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040fa:	4b3e      	ldr	r3, [pc, #248]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	493a      	ldr	r1, [pc, #232]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412a:	4932      	ldr	r1, [pc, #200]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800413e:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	4929      	ldr	r1, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418c:	4919      	ldr	r1, [pc, #100]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b0:	4910      	ldr	r1, [pc, #64]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d006      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80d9 	beq.w	800437e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd fb66 	bl	80018a8 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041de:	e00b      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e0:	f7fd fb62 	bl	80018a8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d904      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e197      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ed      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d021      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11d      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	071b      	lsls	r3, r3, #28
 800424c:	4957      	ldr	r1, [pc, #348]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02e      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427e:	d129      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004294:	0f1b      	lsrs	r3, r3, #28
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	019a      	lsls	r2, r3, #6
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	493d      	ldr	r1, [pc, #244]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f023 021f 	bic.w	r2, r3, #31
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	3b01      	subs	r3, #1
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01d      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	0f1b      	lsrs	r3, r3, #28
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	019a      	lsls	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	071b      	lsls	r3, r3, #28
 8004314:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	019a      	lsls	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	071b      	lsls	r3, r3, #28
 8004344:	4919      	ldr	r1, [pc, #100]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434c:	4b17      	ldr	r3, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fd faa6 	bl	80018a8 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004360:	f7fd faa2 	bl	80018a8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0d7      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 80cd 	bne.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a08      	ldr	r2, [pc, #32]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fd fa89 	bl	80018a8 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800439a:	f7fd fa85 	bl	80018a8 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	; 0x64
 80043a6:	d903      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0ba      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b0:	4b5e      	ldr	r3, [pc, #376]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043bc:	d0ed      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d02e      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d12a      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	0f1b      	lsrs	r3, r3, #28
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	019a      	lsls	r2, r3, #6
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	4944      	ldr	r1, [pc, #272]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004422:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	3b01      	subs	r3, #1
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	493d      	ldr	r1, [pc, #244]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d022      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004450:	d11d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	0f1b      	lsrs	r3, r3, #28
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	4929      	ldr	r1, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d028      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	019a      	lsls	r2, r3, #6
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	4917      	ldr	r1, [pc, #92]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4911      	ldr	r1, [pc, #68]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fd f9d6 	bl	80018a8 <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004500:	f7fd f9d2 	bl	80018a8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e007      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451e:	d1ef      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e025      	b.n	8004590 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fd f813 	bl	8001584 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 ffd1 	bl	8005518 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	461a      	mov	r2, r3
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	f001 f83b 	bl	80055fc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d101      	bne.n	80045b4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
 80045b2:	e018      	b.n	80045e6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f899 	bl	80056fc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d104      	bne.n	80045dc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2205      	movs	r2, #5
 80045d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80045da:	e003      	b.n	80045e4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d101      	bne.n	8004608 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
 8004606:	e00e      	b.n	8004626 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f001 f894 	bl	8005744 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e049      	b.n	80046d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f841 	bl	80046dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 f9ff 	bl	8004a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d001      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e054      	b.n	80047b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d01d      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_TIM_Base_Start_IT+0xdc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x80>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d115      	bne.n	800479c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_TIM_Base_Start_IT+0xec>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d015      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0xbe>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d011      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	e008      	b.n	80047ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40010400 	.word	0x40010400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40001800 	.word	0x40001800
 80047dc:	00010007 	.word	0x00010007

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f905 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8f7 	bl	8004a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f908 	bl	8004a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8db 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8cd 	bl	8004a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8de 	bl	8004a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8b1 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8a3 	bl	8004a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8b4 	bl	8004a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f887 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f879 	bl	8004a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f88a 	bl	8004a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fb12 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f91a 	bl	8004bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	d10e      	bne.n	80049be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d107      	bne.n	80049be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f90d 	bl	8004bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d10e      	bne.n	80049ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f838 	bl	8004a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0220 	mvn.w	r2, #32
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8cd 	bl	8004bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a40      	ldr	r2, [pc, #256]	; (8004b84 <TIM_Base_SetConfig+0x114>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3d      	ldr	r2, [pc, #244]	; (8004b88 <TIM_Base_SetConfig+0x118>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3c      	ldr	r2, [pc, #240]	; (8004b8c <TIM_Base_SetConfig+0x11c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <TIM_Base_SetConfig+0x120>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3a      	ldr	r2, [pc, #232]	; (8004b94 <TIM_Base_SetConfig+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <TIM_Base_SetConfig+0x114>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02b      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d027      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2c      	ldr	r2, [pc, #176]	; (8004b88 <TIM_Base_SetConfig+0x118>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d023      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <TIM_Base_SetConfig+0x11c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01f      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <TIM_Base_SetConfig+0x120>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01b      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a29      	ldr	r2, [pc, #164]	; (8004b94 <TIM_Base_SetConfig+0x124>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d017      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <TIM_Base_SetConfig+0x128>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <TIM_Base_SetConfig+0x12c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00f      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <TIM_Base_SetConfig+0x130>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00b      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <TIM_Base_SetConfig+0x134>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <TIM_Base_SetConfig+0x138>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d003      	beq.n	8004b22 <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a23      	ldr	r2, [pc, #140]	; (8004bac <TIM_Base_SetConfig+0x13c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <TIM_Base_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0xf8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d103      	bne.n	8004b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	615a      	str	r2, [r3, #20]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40010400 	.word	0x40010400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800
 8004ba4:	40001800 	.word	0x40001800
 8004ba8:	40001c00 	.word	0x40001c00
 8004bac:	40002000 	.word	0x40002000

08004bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e040      	b.n	8004c80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fbf4 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8c0 	bl	8004db0 <UART_SetConfig>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e022      	b.n	8004c80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb16 	bl	8005274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb9d 	bl	80053b8 <UART_CheckIdleState>
 8004c7e:	4603      	mov	r3, r0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	f040 8081 	bne.w	8004da4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_UART_Transmit+0x26>
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e079      	b.n	8004da6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_UART_Transmit+0x38>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e072      	b.n	8004da6 <HAL_UART_Transmit+0x11e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	; 0x21
 8004cd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fde7 	bl	80018a8 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d108      	bne.n	8004d08 <HAL_UART_Transmit+0x80>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d18:	e02c      	b.n	8004d74 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fb7a 	bl	800541e <UART_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e038      	b.n	8004da6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e007      	b.n	8004d62 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1cc      	bne.n	8004d1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb47 	bl	800541e <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e005      	b.n	8004da6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4ba7      	ldr	r3, [pc, #668]	; (8005078 <UART_SetConfig+0x2c8>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a95      	ldr	r2, [pc, #596]	; (800507c <UART_SetConfig+0x2cc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d120      	bne.n	8004e6e <UART_SetConfig+0xbe>
 8004e2c:	4b94      	ldr	r3, [pc, #592]	; (8005080 <UART_SetConfig+0x2d0>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d816      	bhi.n	8004e68 <UART_SetConfig+0xb8>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0x90>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004e57 	.word	0x08004e57
 8004e4c:	08004e63 	.word	0x08004e63
 8004e50:	2301      	movs	r3, #1
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e14f      	b.n	80050f6 <UART_SetConfig+0x346>
 8004e56:	2302      	movs	r3, #2
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e14c      	b.n	80050f6 <UART_SetConfig+0x346>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e149      	b.n	80050f6 <UART_SetConfig+0x346>
 8004e62:	2308      	movs	r3, #8
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e146      	b.n	80050f6 <UART_SetConfig+0x346>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e143      	b.n	80050f6 <UART_SetConfig+0x346>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a84      	ldr	r2, [pc, #528]	; (8005084 <UART_SetConfig+0x2d4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d132      	bne.n	8004ede <UART_SetConfig+0x12e>
 8004e78:	4b81      	ldr	r3, [pc, #516]	; (8005080 <UART_SetConfig+0x2d0>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d828      	bhi.n	8004ed8 <UART_SetConfig+0x128>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0xdc>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004ed9 	.word	0x08004ed9
 8004e94:	08004ed9 	.word	0x08004ed9
 8004e98:	08004ed9 	.word	0x08004ed9
 8004e9c:	08004ecd 	.word	0x08004ecd
 8004ea0:	08004ed9 	.word	0x08004ed9
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ec7 	.word	0x08004ec7
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ed9 	.word	0x08004ed9
 8004ebc:	08004ed3 	.word	0x08004ed3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e117      	b.n	80050f6 <UART_SetConfig+0x346>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e114      	b.n	80050f6 <UART_SetConfig+0x346>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e111      	b.n	80050f6 <UART_SetConfig+0x346>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e10e      	b.n	80050f6 <UART_SetConfig+0x346>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e10b      	b.n	80050f6 <UART_SetConfig+0x346>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a69      	ldr	r2, [pc, #420]	; (8005088 <UART_SetConfig+0x2d8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d120      	bne.n	8004f2a <UART_SetConfig+0x17a>
 8004ee8:	4b65      	ldr	r3, [pc, #404]	; (8005080 <UART_SetConfig+0x2d0>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ef2:	2b30      	cmp	r3, #48	; 0x30
 8004ef4:	d013      	beq.n	8004f1e <UART_SetConfig+0x16e>
 8004ef6:	2b30      	cmp	r3, #48	; 0x30
 8004ef8:	d814      	bhi.n	8004f24 <UART_SetConfig+0x174>
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d009      	beq.n	8004f12 <UART_SetConfig+0x162>
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d810      	bhi.n	8004f24 <UART_SetConfig+0x174>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <UART_SetConfig+0x15c>
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d006      	beq.n	8004f18 <UART_SetConfig+0x168>
 8004f0a:	e00b      	b.n	8004f24 <UART_SetConfig+0x174>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e0f1      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e0ee      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e0eb      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e0e8      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e0e5      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a57      	ldr	r2, [pc, #348]	; (800508c <UART_SetConfig+0x2dc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d120      	bne.n	8004f76 <UART_SetConfig+0x1c6>
 8004f34:	4b52      	ldr	r3, [pc, #328]	; (8005080 <UART_SetConfig+0x2d0>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f40:	d013      	beq.n	8004f6a <UART_SetConfig+0x1ba>
 8004f42:	2bc0      	cmp	r3, #192	; 0xc0
 8004f44:	d814      	bhi.n	8004f70 <UART_SetConfig+0x1c0>
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d009      	beq.n	8004f5e <UART_SetConfig+0x1ae>
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	d810      	bhi.n	8004f70 <UART_SetConfig+0x1c0>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <UART_SetConfig+0x1a8>
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d006      	beq.n	8004f64 <UART_SetConfig+0x1b4>
 8004f56:	e00b      	b.n	8004f70 <UART_SetConfig+0x1c0>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e0cb      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e0c8      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f64:	2304      	movs	r3, #4
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e0c5      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e0c2      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f70:	2310      	movs	r3, #16
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e0bf      	b.n	80050f6 <UART_SetConfig+0x346>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a45      	ldr	r2, [pc, #276]	; (8005090 <UART_SetConfig+0x2e0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d125      	bne.n	8004fcc <UART_SetConfig+0x21c>
 8004f80:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <UART_SetConfig+0x2d0>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d017      	beq.n	8004fc0 <UART_SetConfig+0x210>
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d817      	bhi.n	8004fc6 <UART_SetConfig+0x216>
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d00b      	beq.n	8004fb4 <UART_SetConfig+0x204>
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d811      	bhi.n	8004fc6 <UART_SetConfig+0x216>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <UART_SetConfig+0x1fe>
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d006      	beq.n	8004fba <UART_SetConfig+0x20a>
 8004fac:	e00b      	b.n	8004fc6 <UART_SetConfig+0x216>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e0a0      	b.n	80050f6 <UART_SetConfig+0x346>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e09d      	b.n	80050f6 <UART_SetConfig+0x346>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e09a      	b.n	80050f6 <UART_SetConfig+0x346>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e097      	b.n	80050f6 <UART_SetConfig+0x346>
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e094      	b.n	80050f6 <UART_SetConfig+0x346>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	; (8005094 <UART_SetConfig+0x2e4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d125      	bne.n	8005022 <UART_SetConfig+0x272>
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <UART_SetConfig+0x2d0>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe4:	d017      	beq.n	8005016 <UART_SetConfig+0x266>
 8004fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fea:	d817      	bhi.n	800501c <UART_SetConfig+0x26c>
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d00b      	beq.n	800500a <UART_SetConfig+0x25a>
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d811      	bhi.n	800501c <UART_SetConfig+0x26c>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <UART_SetConfig+0x254>
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	d006      	beq.n	8005010 <UART_SetConfig+0x260>
 8005002:	e00b      	b.n	800501c <UART_SetConfig+0x26c>
 8005004:	2301      	movs	r3, #1
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e075      	b.n	80050f6 <UART_SetConfig+0x346>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e072      	b.n	80050f6 <UART_SetConfig+0x346>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e06f      	b.n	80050f6 <UART_SetConfig+0x346>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e06c      	b.n	80050f6 <UART_SetConfig+0x346>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e069      	b.n	80050f6 <UART_SetConfig+0x346>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <UART_SetConfig+0x2e8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d137      	bne.n	800509c <UART_SetConfig+0x2ec>
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <UART_SetConfig+0x2d0>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005036:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800503a:	d017      	beq.n	800506c <UART_SetConfig+0x2bc>
 800503c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005040:	d817      	bhi.n	8005072 <UART_SetConfig+0x2c2>
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005046:	d00b      	beq.n	8005060 <UART_SetConfig+0x2b0>
 8005048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504c:	d811      	bhi.n	8005072 <UART_SetConfig+0x2c2>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <UART_SetConfig+0x2aa>
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d006      	beq.n	8005066 <UART_SetConfig+0x2b6>
 8005058:	e00b      	b.n	8005072 <UART_SetConfig+0x2c2>
 800505a:	2300      	movs	r3, #0
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e04a      	b.n	80050f6 <UART_SetConfig+0x346>
 8005060:	2302      	movs	r3, #2
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e047      	b.n	80050f6 <UART_SetConfig+0x346>
 8005066:	2304      	movs	r3, #4
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e044      	b.n	80050f6 <UART_SetConfig+0x346>
 800506c:	2308      	movs	r3, #8
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e041      	b.n	80050f6 <UART_SetConfig+0x346>
 8005072:	2310      	movs	r3, #16
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e03e      	b.n	80050f6 <UART_SetConfig+0x346>
 8005078:	efff69f3 	.word	0xefff69f3
 800507c:	40011000 	.word	0x40011000
 8005080:	40023800 	.word	0x40023800
 8005084:	40004400 	.word	0x40004400
 8005088:	40004800 	.word	0x40004800
 800508c:	40004c00 	.word	0x40004c00
 8005090:	40005000 	.word	0x40005000
 8005094:	40011400 	.word	0x40011400
 8005098:	40007800 	.word	0x40007800
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a71      	ldr	r2, [pc, #452]	; (8005268 <UART_SetConfig+0x4b8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d125      	bne.n	80050f2 <UART_SetConfig+0x342>
 80050a6:	4b71      	ldr	r3, [pc, #452]	; (800526c <UART_SetConfig+0x4bc>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050b4:	d017      	beq.n	80050e6 <UART_SetConfig+0x336>
 80050b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050ba:	d817      	bhi.n	80050ec <UART_SetConfig+0x33c>
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d00b      	beq.n	80050da <UART_SetConfig+0x32a>
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c6:	d811      	bhi.n	80050ec <UART_SetConfig+0x33c>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x324>
 80050cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x330>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x33c>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x346>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e00a      	b.n	80050f6 <UART_SetConfig+0x346>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e007      	b.n	80050f6 <UART_SetConfig+0x346>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e004      	b.n	80050f6 <UART_SetConfig+0x346>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e001      	b.n	80050f6 <UART_SetConfig+0x346>
 80050f2:	2310      	movs	r3, #16
 80050f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fe:	d15b      	bne.n	80051b8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d827      	bhi.n	8005156 <UART_SetConfig+0x3a6>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x35c>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fe fdb4 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8005134:	61b8      	str	r0, [r7, #24]
        break;
 8005136:	e013      	b.n	8005160 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fe fdc4 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e00f      	b.n	8005160 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b4b      	ldr	r3, [pc, #300]	; (8005270 <UART_SetConfig+0x4c0>)
 8005142:	61bb      	str	r3, [r7, #24]
        break;
 8005144:	e00c      	b.n	8005160 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fe fce7 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 800514a:	61b8      	str	r0, [r7, #24]
        break;
 800514c:	e008      	b.n	8005160 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e004      	b.n	8005160 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77bb      	strb	r3, [r7, #30]
        break;
 800515e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d074      	beq.n	8005250 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	005a      	lsls	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	441a      	add	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d916      	bls.n	80051b2 <UART_SetConfig+0x402>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d212      	bcs.n	80051b2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f023 030f 	bic.w	r3, r3, #15
 8005194:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	89fa      	ldrh	r2, [r7, #14]
 80051ae:	60da      	str	r2, [r3, #12]
 80051b0:	e04e      	b.n	8005250 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	77bb      	strb	r3, [r7, #30]
 80051b6:	e04b      	b.n	8005250 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d827      	bhi.n	800520e <UART_SetConfig+0x45e>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x414>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	0800520f 	.word	0x0800520f
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe fd58 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80051ec:	61b8      	str	r0, [r7, #24]
        break;
 80051ee:	e013      	b.n	8005218 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fe fd68 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 80051f4:	61b8      	str	r0, [r7, #24]
        break;
 80051f6:	e00f      	b.n	8005218 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <UART_SetConfig+0x4c0>)
 80051fa:	61bb      	str	r3, [r7, #24]
        break;
 80051fc:	e00c      	b.n	8005218 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe fc8b 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8005202:	61b8      	str	r0, [r7, #24]
        break;
 8005204:	e008      	b.n	8005218 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	61bb      	str	r3, [r7, #24]
        break;
 800520c:	e004      	b.n	8005218 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	77bb      	strb	r3, [r7, #30]
        break;
 8005216:	bf00      	nop
    }

    if (pclk != 0U)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	085a      	lsrs	r2, r3, #1
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	441a      	add	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	b29b      	uxth	r3, r3
 8005232:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d908      	bls.n	800524c <UART_SetConfig+0x49c>
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d204      	bcs.n	800524c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	e001      	b.n	8005250 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800525c:	7fbb      	ldrb	r3, [r7, #30]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40007c00 	.word	0x40007c00
 800526c:	40023800 	.word	0x40023800
 8005270:	00f42400 	.word	0x00f42400

08005274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01a      	beq.n	800538a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005372:	d10a      	bne.n	800538a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c8:	f7fc fa6e 	bl	80018a8 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10e      	bne.n	80053fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f817 	bl	800541e <UART_WaitOnFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e00d      	b.n	8005416 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	e05e      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d05a      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005438:	f7fc fa36 	bl	80018a8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	429a      	cmp	r2, r3
 8005446:	d302      	bcc.n	800544e <UART_WaitOnFlagUntilTimeout+0x30>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11b      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800545c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e043      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02c      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a2:	d124      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d091      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d027      	beq.n	8005582 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4b2f      	ldr	r3, [pc, #188]	; (80055f8 <FMC_SDRAM_Init+0xe0>)
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005548:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800554e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005554:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800555a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005560:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005566:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800556c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005572:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e032      	b.n	80055e8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005598:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800559e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <FMC_SDRAM_Init+0xe0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80055c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80055c8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80055ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80055d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	ffff8000 	.word	0xffff8000

080055fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d02e      	beq.n	8005674 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005622:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	3b01      	subs	r3, #1
 8005630:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005632:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	3b01      	subs	r3, #1
 800563a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800563c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005646:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	3b01      	subs	r3, #1
 800564e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005650:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	3b01      	subs	r3, #1
 8005658:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800565a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	3b01      	subs	r3, #1
 8005662:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005664:	4313      	orrs	r3, r2
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	e039      	b.n	80056e8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <FMC_SDRAM_Timing_Init+0xfc>)
 800567e:	4013      	ands	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	3b01      	subs	r3, #1
 8005688:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	3b01      	subs	r3, #1
 8005690:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056a6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80056b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	3b01      	subs	r3, #1
 80056be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80056c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80056ca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80056d4:	4313      	orrs	r3, r2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	ff0f0fff 	.word	0xff0f0fff

080056fc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <FMC_SDRAM_SendCommand+0x44>)
 800570e:	4013      	ands	r3, r2
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	6811      	ldr	r1, [r2, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	4311      	orrs	r1, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	3a01      	subs	r2, #1
 8005720:	0152      	lsls	r2, r2, #5
 8005722:	4311      	orrs	r1, r2
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	68d2      	ldr	r2, [r2, #12]
 8005728:	0252      	lsls	r2, r2, #9
 800572a:	430a      	orrs	r2, r1
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	ffc00000 	.word	0xffc00000

08005744 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577e:	f3ef 8305 	mrs	r3, IPSR
 8005782:	60bb      	str	r3, [r7, #8]
  return(result);
 8005784:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578a:	f3ef 8310 	mrs	r3, PRIMASK
 800578e:	607b      	str	r3, [r7, #4]
  return(result);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d105      	bne.n	80057a2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005796:	f3ef 8311 	mrs	r3, BASEPRI
 800579a:	603b      	str	r3, [r7, #0]
  return(result);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <osKernelInitialize+0x3a>
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <osKernelInitialize+0x64>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d103      	bne.n	80057b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80057aa:	f06f 0305 	mvn.w	r3, #5
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e00c      	b.n	80057cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057b2:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <osKernelInitialize+0x64>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d105      	bne.n	80057c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <osKernelInitialize+0x64>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057cc:	68fb      	ldr	r3, [r7, #12]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000130 	.word	0x20000130

080057e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e6:	f3ef 8305 	mrs	r3, IPSR
 80057ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8310 	mrs	r3, PRIMASK
 80057f6:	607b      	str	r3, [r7, #4]
  return(result);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d105      	bne.n	800580a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005802:	603b      	str	r3, [r7, #0]
  return(result);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <osKernelStart+0x3a>
 800580a:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <osKernelStart+0x68>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d103      	bne.n	800581a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005812:	f06f 0305 	mvn.w	r3, #5
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	e010      	b.n	800583c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <osKernelStart+0x68>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d109      	bne.n	8005836 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005822:	f7ff ffa2 	bl	800576a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <osKernelStart+0x68>)
 8005828:	2202      	movs	r2, #2
 800582a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800582c:	f001 fec6 	bl	80075bc <vTaskStartScheduler>
      stat = osOK;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e002      	b.n	800583c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000130 	.word	0x20000130

0800584c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	; 0x40
 8005850:	af04      	add	r7, sp, #16
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	61fb      	str	r3, [r7, #28]
  return(result);
 8005862:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 808f 	bne.w	8005988 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	617b      	str	r3, [r7, #20]
  return(result);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <osThreadNew+0x3e>
 8005882:	4b44      	ldr	r3, [pc, #272]	; (8005994 <osThreadNew+0x148>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d07e      	beq.n	8005988 <osThreadNew+0x13c>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d07b      	beq.n	8005988 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005890:	23fe      	movs	r3, #254	; 0xfe
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005894:	2318      	movs	r3, #24
 8005896:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d045      	beq.n	8005934 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <osThreadNew+0x6a>
        name = attr->name;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <osThreadNew+0x90>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	2b38      	cmp	r3, #56	; 0x38
 80058ce:	d805      	bhi.n	80058dc <osThreadNew+0x90>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <osThreadNew+0x94>
        return (NULL);
 80058dc:	2300      	movs	r3, #0
 80058de:	e054      	b.n	800598a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00e      	beq.n	8005916 <osThreadNew+0xca>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b5b      	cmp	r3, #91	; 0x5b
 80058fe:	d90a      	bls.n	8005916 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <osThreadNew+0xca>
        mem = 1;
 8005910:	2301      	movs	r3, #1
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	e010      	b.n	8005938 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <osThreadNew+0xec>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <osThreadNew+0xec>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <osThreadNew+0xec>
          mem = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	623b      	str	r3, [r7, #32]
 8005932:	e001      	b.n	8005938 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d110      	bne.n	8005960 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 fc51 	bl	80071fc <xTaskCreateStatic>
 800595a:	4603      	mov	r3, r0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e013      	b.n	8005988 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	b29a      	uxth	r2, r3
 800596a:	f107 0310 	add.w	r3, r7, #16
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f001 fca2 	bl	80072c2 <xTaskCreate>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <osThreadNew+0x13c>
          hTask = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005988:	693b      	ldr	r3, [r7, #16]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000130 	.word	0x20000130

08005998 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a0:	f3ef 8305 	mrs	r3, IPSR
 80059a4:	613b      	str	r3, [r7, #16]
  return(result);
 80059a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10f      	bne.n	80059cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ac:	f3ef 8310 	mrs	r3, PRIMASK
 80059b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059b8:	f3ef 8311 	mrs	r3, BASEPRI
 80059bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <osDelay+0x3c>
 80059c4:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <osDelay+0x58>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d103      	bne.n	80059d4 <osDelay+0x3c>
    stat = osErrorISR;
 80059cc:	f06f 0305 	mvn.w	r3, #5
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e007      	b.n	80059e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fdb6 	bl	8007550 <vTaskDelay>
    }
  }

  return (stat);
 80059e4:	697b      	ldr	r3, [r7, #20]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000130 	.word	0x20000130

080059f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a04:	f3ef 8305 	mrs	r3, IPSR
 8005a08:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a0a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 8086 	bne.w	8005b1e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a12:	f3ef 8310 	mrs	r3, PRIMASK
 8005a16:	617b      	str	r3, [r7, #20]
  return(result);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a22:	613b      	str	r3, [r7, #16]
  return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <osSemaphoreNew+0x3e>
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <osSemaphoreNew+0x134>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d075      	beq.n	8005b1e <osSemaphoreNew+0x12a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d072      	beq.n	8005b1e <osSemaphoreNew+0x12a>
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d86e      	bhi.n	8005b1e <osSemaphoreNew+0x12a>
    mem = -1;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <osSemaphoreNew+0x6e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b4f      	cmp	r3, #79	; 0x4f
 8005a5a:	d902      	bls.n	8005a62 <osSemaphoreNew+0x6e>
        mem = 1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	e00c      	b.n	8005a7c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <osSemaphoreNew+0x88>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <osSemaphoreNew+0x88>
          mem = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e001      	b.n	8005a7c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d04c      	beq.n	8005b1e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d128      	bne.n	8005adc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10a      	bne.n	8005aa6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2203      	movs	r2, #3
 8005a96:	9200      	str	r2, [sp, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 fbc1 	bl	8006224 <xQueueGenericCreateStatic>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8005aa4:	e005      	b.n	8005ab2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f000 fc3c 	bl	8006328 <xQueueGenericCreate>
 8005ab0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d022      	beq.n	8005afe <osSemaphoreNew+0x10a>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01f      	beq.n	8005afe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ac6:	f000 fd07 	bl	80064d8 <xQueueGenericSend>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d016      	beq.n	8005afe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ad2:	f001 f9bd 	bl	8006e50 <vQueueDelete>
            hSemaphore = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	e010      	b.n	8005afe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d108      	bne.n	8005af4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fc81 	bl	80063f2 <xQueueCreateCountingSemaphoreStatic>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24
 8005af2:	e004      	b.n	8005afe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fcb6 	bl	8006468 <xQueueCreateCountingSemaphore>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osSemaphoreNew+0x11e>
          name = attr->name;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	e001      	b.n	8005b16 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b16:	69f9      	ldr	r1, [r7, #28]
 8005b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1a:	f001 fae7 	bl	80070ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000130 	.word	0x20000130

08005b2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b44:	f06f 0303 	mvn.w	r3, #3
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e04b      	b.n	8005be4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4c:	f3ef 8305 	mrs	r3, IPSR
 8005b50:	617b      	str	r3, [r7, #20]
  return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10f      	bne.n	8005b78 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b58:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b64:	f3ef 8311 	mrs	r3, BASEPRI
 8005b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d026      	beq.n	8005bbe <osSemaphoreAcquire+0x92>
 8005b70:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <osSemaphoreAcquire+0xc4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d122      	bne.n	8005bbe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005b7e:	f06f 0303 	mvn.w	r3, #3
 8005b82:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005b84:	e02d      	b.n	8005be2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b8a:	f107 0308 	add.w	r3, r7, #8
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2100      	movs	r1, #0
 8005b92:	69b8      	ldr	r0, [r7, #24]
 8005b94:	f001 f8d6 	bl	8006d44 <xQueueReceiveFromISR>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d003      	beq.n	8005ba6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005b9e:	f06f 0302 	mvn.w	r3, #2
 8005ba2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005ba4:	e01d      	b.n	8005be2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01a      	beq.n	8005be2 <osSemaphoreAcquire+0xb6>
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <osSemaphoreAcquire+0xc8>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005bbc:	e011      	b.n	8005be2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	69b8      	ldr	r0, [r7, #24]
 8005bc2:	f000 ffab 	bl	8006b1c <xQueueSemaphoreTake>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d00b      	beq.n	8005be4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005bd2:	f06f 0301 	mvn.w	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e004      	b.n	8005be4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005bda:	f06f 0302 	mvn.w	r3, #2
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e000      	b.n	8005be4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005be2:	bf00      	nop
      }
    }
  }

  return (stat);
 8005be4:	69fb      	ldr	r3, [r7, #28]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000130 	.word	0x20000130
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005c0e:	f06f 0303 	mvn.w	r3, #3
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	e03e      	b.n	8005c94 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c16:	f3ef 8305 	mrs	r3, IPSR
 8005c1a:	617b      	str	r3, [r7, #20]
  return(result);
 8005c1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10f      	bne.n	8005c42 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c22:	f3ef 8310 	mrs	r3, PRIMASK
 8005c26:	613b      	str	r3, [r7, #16]
  return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c32:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01e      	beq.n	8005c78 <osSemaphoreRelease+0x80>
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <osSemaphoreRelease+0xa8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d11a      	bne.n	8005c78 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	69b8      	ldr	r0, [r7, #24]
 8005c4e:	f000 fde9 	bl	8006824 <xQueueGiveFromISR>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d003      	beq.n	8005c60 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005c58:	f06f 0302 	mvn.w	r3, #2
 8005c5c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c5e:	e018      	b.n	8005c92 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d015      	beq.n	8005c92 <osSemaphoreRelease+0x9a>
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <osSemaphoreRelease+0xac>)
 8005c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c76:	e00c      	b.n	8005c92 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	69b8      	ldr	r0, [r7, #24]
 8005c80:	f000 fc2a 	bl	80064d8 <xQueueGenericSend>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d004      	beq.n	8005c94 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005c8a:	f06f 0302 	mvn.w	r3, #2
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	e000      	b.n	8005c94 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c92:	bf00      	nop
    }
  }

  return (stat);
 8005c94:	69fb      	ldr	r3, [r7, #28]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000130 	.word	0x20000130
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	; 0x30
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d16f      	bne.n	8005da4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <osMessageQueueNew+0x3c>
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <osMessageQueueNew+0x108>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d05f      	beq.n	8005da4 <osMessageQueueNew+0xfc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d05c      	beq.n	8005da4 <osMessageQueueNew+0xfc>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d059      	beq.n	8005da4 <osMessageQueueNew+0xfc>
    mem = -1;
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d029      	beq.n	8005d50 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d012      	beq.n	8005d2a <osMessageQueueNew+0x82>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b4f      	cmp	r3, #79	; 0x4f
 8005d0a:	d90e      	bls.n	8005d2a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <osMessageQueueNew+0x82>
        mem = 1;
 8005d24:	2301      	movs	r3, #1
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	e014      	b.n	8005d54 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <osMessageQueueNew+0xac>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <osMessageQueueNew+0xac>
          mem = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e001      	b.n	8005d54 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10b      	bne.n	8005d72 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2100      	movs	r1, #0
 8005d64:	9100      	str	r1, [sp, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fa5b 	bl	8006224 <xQueueGenericCreateStatic>
 8005d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d70:	e008      	b.n	8005d84 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fad3 	bl	8006328 <xQueueGenericCreate>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e001      	b.n	8005d9c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005da0:	f001 f9a4 	bl	80070ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	; 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000130 	.word	0x20000130

08005db4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dcc:	f3ef 8305 	mrs	r3, IPSR
 8005dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dd2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10f      	bne.n	8005df8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ddc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02c      	beq.n	8005e4a <osMessageQueuePut+0x96>
 8005df0:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <osMessageQueuePut+0xe0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d128      	bne.n	8005e4a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <osMessageQueuePut+0x56>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <osMessageQueuePut+0x56>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005e0a:	f06f 0303 	mvn.w	r3, #3
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e10:	e039      	b.n	8005e86 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e16:	f107 0210 	add.w	r2, r7, #16
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	6a38      	ldr	r0, [r7, #32]
 8005e20:	f000 fc60 	bl	80066e4 <xQueueGenericSendFromISR>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d003      	beq.n	8005e32 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005e2a:	f06f 0302 	mvn.w	r3, #2
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e30:	e029      	b.n	8005e86 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d026      	beq.n	8005e86 <osMessageQueuePut+0xd2>
 8005e38:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <osMessageQueuePut+0xe4>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e48:	e01d      	b.n	8005e86 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <osMessageQueuePut+0xa2>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005e56:	f06f 0303 	mvn.w	r3, #3
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5c:	e014      	b.n	8005e88 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e5e:	2300      	movs	r3, #0
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	6a38      	ldr	r0, [r7, #32]
 8005e66:	f000 fb37 	bl	80064d8 <xQueueGenericSend>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d00b      	beq.n	8005e88 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005e76:	f06f 0301 	mvn.w	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	e004      	b.n	8005e88 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005e7e:	f06f 0302 	mvn.w	r3, #2
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
 8005e84:	e000      	b.n	8005e88 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e86:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000130 	.word	0x20000130
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb2:	f3ef 8305 	mrs	r3, IPSR
 8005eb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eb8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eca:	f3ef 8311 	mrs	r3, BASEPRI
 8005ece:	617b      	str	r3, [r7, #20]
  return(result);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d02c      	beq.n	8005f30 <osMessageQueueGet+0x94>
 8005ed6:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <osMessageQueueGet+0xdc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d128      	bne.n	8005f30 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <osMessageQueueGet+0x54>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <osMessageQueueGet+0x54>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005ef0:	f06f 0303 	mvn.w	r3, #3
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ef6:	e038      	b.n	8005f6a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	461a      	mov	r2, r3
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	6a38      	ldr	r0, [r7, #32]
 8005f06:	f000 ff1d 	bl	8006d44 <xQueueReceiveFromISR>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d003      	beq.n	8005f18 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005f10:	f06f 0302 	mvn.w	r3, #2
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f16:	e028      	b.n	8005f6a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d025      	beq.n	8005f6a <osMessageQueueGet+0xce>
 8005f1e:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <osMessageQueueGet+0xe0>)
 8005f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f2e:	e01c      	b.n	8005f6a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osMessageQueueGet+0xa0>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005f3c:	f06f 0303 	mvn.w	r3, #3
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	e013      	b.n	8005f6c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6a38      	ldr	r0, [r7, #32]
 8005f4a:	f000 fd01 	bl	8006950 <xQueueReceive>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d00b      	beq.n	8005f6c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005f5a:	f06f 0301 	mvn.w	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	e004      	b.n	8005f6c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005f62:	f06f 0302 	mvn.w	r3, #2
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
 8005f68:	e000      	b.n	8005f6c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000130 	.word	0x20000130
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <vApplicationGetIdleTaskMemory+0x2c>)
 8005f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4a06      	ldr	r2, [pc, #24]	; (8005fb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	22fe      	movs	r2, #254	; 0xfe
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000134 	.word	0x20000134
 8005fb0:	20000190 	.word	0x20000190

08005fb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4a06      	ldr	r2, [pc, #24]	; (8005fe4 <vApplicationGetTimerTaskMemory+0x30>)
 8005fca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000588 	.word	0x20000588
 8005fe4:	200005e4 	.word	0x200005e4

08005fe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f103 0208 	add.w	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d103      	bne.n	80060aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e00c      	b.n	80060c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3308      	adds	r3, #8
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e002      	b.n	80060b8 <vListInsert+0x2e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d2f6      	bcs.n	80060b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6892      	ldr	r2, [r2, #8]
 8006112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d103      	bne.n	8006130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10c      	bne.n	800617e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	b672      	cpsid	i
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	b662      	cpsie	i
 8006178:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800617e:	f002 fced 	bl	8008b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	3b01      	subs	r3, #1
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	22ff      	movs	r2, #255	; 0xff
 80061ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d114      	bne.n	80061fe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01a      	beq.n	8006212 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3310      	adds	r3, #16
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fca7 	bl	8007b34 <xTaskRemoveFromEventList>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d012      	beq.n	8006212 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <xQueueGenericReset+0xd0>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	e009      	b.n	8006212 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3310      	adds	r3, #16
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fef0 	bl	8005fe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff feeb 	bl	8005fe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006212:	f002 fcd7 	bl	8008bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006216:	2301      	movs	r3, #1
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	; 0x38
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	b672      	cpsid	i
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	b662      	cpsie	i
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <xQueueGenericCreateStatic+0x5a>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <xQueueGenericCreateStatic+0x5e>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueGenericCreateStatic+0x60>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	b672      	cpsid	i
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	b662      	cpsie	i
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <xQueueGenericCreateStatic+0x8a>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <xQueueGenericCreateStatic+0x8e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueGenericCreateStatic+0x90>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10c      	bne.n	80062d2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	b672      	cpsid	i
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	b662      	cpsie	i
 80062cc:	61fb      	str	r3, [r7, #28]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062d2:	2350      	movs	r3, #80	; 0x50
 80062d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d00c      	beq.n	80062f6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	b672      	cpsid	i
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	b662      	cpsie	i
 80062f0:	61bb      	str	r3, [r7, #24]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800630a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f847 	bl	80063ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3730      	adds	r7, #48	; 0x30
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10c      	bne.n	8006356 <xQueueGenericCreate+0x2e>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	b672      	cpsid	i
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	b662      	cpsie	i
 8006350:	613b      	str	r3, [r7, #16]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800635c:	2300      	movs	r3, #0
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	e004      	b.n	800636c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	fb02 f303 	mul.w	r3, r2, r3
 800636a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	3350      	adds	r3, #80	; 0x50
 8006370:	4618      	mov	r0, r3
 8006372:	f002 fd1f 	bl	8008db4 <pvPortMalloc>
 8006376:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d011      	beq.n	80063a2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3350      	adds	r3, #80	; 0x50
 8006386:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006390:	79fa      	ldrb	r2, [r7, #7]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f805 	bl	80063ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063a2:	69bb      	ldr	r3, [r7, #24]
	}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e002      	b.n	80063ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063da:	2101      	movs	r1, #1
 80063dc:	69b8      	ldr	r0, [r7, #24]
 80063de:	f7ff feb7 	bl	8006150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b08a      	sub	sp, #40	; 0x28
 80063f6:	af02      	add	r7, sp, #8
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10c      	bne.n	800641e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	b672      	cpsid	i
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	b662      	cpsie	i
 8006418:	61bb      	str	r3, [r7, #24]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	d90c      	bls.n	8006440 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	617b      	str	r3, [r7, #20]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006440:	2302      	movs	r3, #2
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff feea 	bl	8006224 <xQueueGenericCreateStatic>
 8006450:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800645e:	69fb      	ldr	r3, [r7, #28]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10c      	bne.n	8006492 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	613b      	str	r3, [r7, #16]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d90c      	bls.n	80064b4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	b672      	cpsid	i
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	b662      	cpsie	i
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064b4:	2202      	movs	r2, #2
 80064b6:	2100      	movs	r1, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff35 	bl	8006328 <xQueueGenericCreate>
 80064be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064cc:	697b      	ldr	r3, [r7, #20]
	}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08e      	sub	sp, #56	; 0x38
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10c      	bne.n	800650e <xQueueGenericSend+0x36>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <xQueueGenericSend+0x44>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <xQueueGenericSend+0x48>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <xQueueGenericSend+0x4a>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <xQueueGenericSend+0x68>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	b672      	cpsid	i
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	b662      	cpsie	i
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d103      	bne.n	800654e <xQueueGenericSend+0x76>
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <xQueueGenericSend+0x7a>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <xQueueGenericSend+0x7c>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <xQueueGenericSend+0x9a>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	b672      	cpsid	i
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	b662      	cpsie	i
 800656c:	623b      	str	r3, [r7, #32]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006572:	f001 fca5 	bl	8007ec0 <xTaskGetSchedulerState>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <xQueueGenericSend+0xaa>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0xae>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0xb0>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <xQueueGenericSend+0xce>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	b672      	cpsid	i
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	b662      	cpsie	i
 80065a0:	61fb      	str	r3, [r7, #28]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065a6:	f002 fad9 	bl	8008b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <xQueueGenericSend+0xe4>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d129      	bne.n	8006610 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c2:	f000 fc82 	bl	8006eca <prvCopyDataToQueue>
 80065c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 faad 	bl	8007b34 <xTaskRemoveFromEventList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e0:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <xQueueGenericSend+0x208>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	e00a      	b.n	8006608 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065f8:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <xQueueGenericSend+0x208>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006608:	f002 fadc 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 800660c:	2301      	movs	r3, #1
 800660e:	e063      	b.n	80066d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006616:	f002 fad5 	bl	8008bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800661a:	2300      	movs	r3, #0
 800661c:	e05c      	b.n	80066d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fae9 	bl	8007c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662e:	2301      	movs	r3, #1
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006632:	f002 fac7 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006636:	f001 f82b 	bl	8007690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800663a:	f002 fa8f 	bl	8008b5c <vPortEnterCritical>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006644:	b25b      	sxtb	r3, r3
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d103      	bne.n	8006654 <xQueueGenericSend+0x17c>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d103      	bne.n	800666a <xQueueGenericSend+0x192>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800666a:	f002 faab 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666e:	1d3a      	adds	r2, r7, #4
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f001 fad8 	bl	8007c2c <xTaskCheckForTimeOut>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d124      	bne.n	80066cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006684:	f000 fd19 	bl	80070ba <prvIsQueueFull>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d018      	beq.n	80066c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	3310      	adds	r3, #16
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f001 f9f8 	bl	8007a8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800669c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669e:	f000 fca4 	bl	8006fea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066a2:	f001 f803 	bl	80076ac <xTaskResumeAll>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f47f af7c 	bne.w	80065a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <xQueueGenericSend+0x208>)
 80066b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	e772      	b.n	80065a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fc92 	bl	8006fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066c6:	f000 fff1 	bl	80076ac <xTaskResumeAll>
 80066ca:	e76c      	b.n	80065a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ce:	f000 fc8c 	bl	8006fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d2:	f000 ffeb 	bl	80076ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3738      	adds	r7, #56	; 0x38
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08e      	sub	sp, #56	; 0x38
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	b672      	cpsid	i
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	b662      	cpsie	i
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <xQueueGenericSendFromISR+0x40>
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueGenericSendFromISR+0x44>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueGenericSendFromISR+0x46>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10c      	bne.n	8006748 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	b672      	cpsid	i
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	b662      	cpsie	i
 8006742:	623b      	str	r3, [r7, #32]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d103      	bne.n	8006756 <xQueueGenericSendFromISR+0x72>
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <xQueueGenericSendFromISR+0x76>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueGenericSendFromISR+0x78>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10c      	bne.n	800677a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	61fb      	str	r3, [r7, #28]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677a:	f002 fad7 	bl	8008d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800677e:	f3ef 8211 	mrs	r2, BASEPRI
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	61ba      	str	r2, [r7, #24]
 8006798:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800679a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <xQueueGenericSendFromISR+0xcc>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d12c      	bne.n	800680a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c0:	f000 fb83 	bl	8006eca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d112      	bne.n	80067f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	3324      	adds	r3, #36	; 0x24
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f9aa 	bl	8007b34 <xTaskRemoveFromEventList>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e007      	b.n	8006804 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067f8:	3301      	adds	r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	b25a      	sxtb	r2, r3
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006804:	2301      	movs	r3, #1
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006808:	e001      	b.n	800680e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006818:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800681c:	4618      	mov	r0, r3
 800681e:	3738      	adds	r7, #56	; 0x38
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	; 0x38
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	b672      	cpsid	i
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	b662      	cpsie	i
 800684c:	623b      	str	r3, [r7, #32]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <xQueueGiveFromISR+0x50>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	b672      	cpsid	i
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	b662      	cpsie	i
 800686e:	61fb      	str	r3, [r7, #28]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <xQueueGiveFromISR+0x60>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <xQueueGiveFromISR+0x64>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <xQueueGiveFromISR+0x66>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	b672      	cpsid	i
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	b662      	cpsie	i
 80068a2:	61bb      	str	r3, [r7, #24]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a8:	f002 fa40 	bl	8008d2c <vPortValidateInterruptPriority>
	__asm volatile
 80068ac:	f3ef 8211 	mrs	r2, BASEPRI
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	b672      	cpsid	i
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	b662      	cpsie	i
 80068c4:	617a      	str	r2, [r7, #20]
 80068c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d8:	429a      	cmp	r2, r3
 80068da:	d22b      	bcs.n	8006934 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d112      	bne.n	800691e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d016      	beq.n	800692e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f915 	bl	8007b34 <xTaskRemoveFromEventList>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00e      	beq.n	800692e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e007      	b.n	800692e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800691e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006922:	3301      	adds	r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	b25a      	sxtb	r2, r3
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800692e:	2301      	movs	r3, #1
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
 8006932:	e001      	b.n	8006938 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006934:	2300      	movs	r3, #0
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f383 8811 	msr	BASEPRI, r3
}
 8006942:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006946:	4618      	mov	r0, r3
 8006948:	3738      	adds	r7, #56	; 0x38
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10c      	bne.n	8006984 <xQueueReceive+0x34>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	b672      	cpsid	i
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	b662      	cpsie	i
 800697e:	623b      	str	r3, [r7, #32]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <xQueueReceive+0x42>
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <xQueueReceive+0x46>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <xQueueReceive+0x48>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <xQueueReceive+0x66>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	b672      	cpsid	i
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	b662      	cpsie	i
 80069b0:	61fb      	str	r3, [r7, #28]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b6:	f001 fa83 	bl	8007ec0 <xTaskGetSchedulerState>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <xQueueReceive+0x76>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueReceive+0x7a>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueReceive+0x7c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <xQueueReceive+0x9a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	b672      	cpsid	i
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	b662      	cpsie	i
 80069e4:	61bb      	str	r3, [r7, #24]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ea:	f002 f8b7 	bl	8008b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01f      	beq.n	8006a3a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	f000 face 	bl	8006f9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	3310      	adds	r3, #16
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 f88c 	bl	8007b34 <xTaskRemoveFromEventList>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <xQueueReceive+0x1c8>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a32:	f002 f8c7 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e069      	b.n	8006b0e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a40:	f002 f8c0 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e062      	b.n	8006b0e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4e:	f107 0310 	add.w	r3, r7, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 f8d4 	bl	8007c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a5c:	f002 f8b2 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a60:	f000 fe16 	bl	8007690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a64:	f002 f87a 	bl	8008b5c <vPortEnterCritical>
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d103      	bne.n	8006a7e <xQueueReceive+0x12e>
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d103      	bne.n	8006a94 <xQueueReceive+0x144>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a94:	f002 f896 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a98:	1d3a      	adds	r2, r7, #4
 8006a9a:	f107 0310 	add.w	r3, r7, #16
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f8c3 	bl	8007c2c <xTaskCheckForTimeOut>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d123      	bne.n	8006af4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aae:	f000 faee 	bl	800708e <prvIsQueueEmpty>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ffe3 	bl	8007a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac8:	f000 fa8f 	bl	8006fea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006acc:	f000 fdee 	bl	80076ac <xTaskResumeAll>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d189      	bne.n	80069ea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <xQueueReceive+0x1c8>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	e780      	b.n	80069ea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aea:	f000 fa7e 	bl	8006fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aee:	f000 fddd 	bl	80076ac <xTaskResumeAll>
 8006af2:	e77a      	b.n	80069ea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af6:	f000 fa78 	bl	8006fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006afa:	f000 fdd7 	bl	80076ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b00:	f000 fac5 	bl	800708e <prvIsQueueEmpty>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f43f af6f 	beq.w	80069ea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	; 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10c      	bne.n	8006b52 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	b672      	cpsid	i
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	b662      	cpsie	i
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	b672      	cpsid	i
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	b662      	cpsie	i
 8006b6e:	61fb      	str	r3, [r7, #28]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b74:	f001 f9a4 	bl	8007ec0 <xTaskGetSchedulerState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <xQueueSemaphoreTake+0x68>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueSemaphoreTake+0x6c>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueSemaphoreTake+0x6e>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10c      	bne.n	8006ba8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	61bb      	str	r3, [r7, #24]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba8:	f001 ffd8 	bl	8008b5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d024      	beq.n	8006c02 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bc8:	f001 faf8 	bl	80081bc <pvTaskIncrementMutexHeldCount>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00f      	beq.n	8006bfa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	3310      	adds	r3, #16
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 ffa8 	bl	8007b34 <xTaskRemoveFromEventList>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bea:	4b55      	ldr	r3, [pc, #340]	; (8006d40 <xQueueSemaphoreTake+0x224>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bfa:	f001 ffe3 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e099      	b.n	8006d36 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d113      	bne.n	8006c30 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	b672      	cpsid	i
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	b662      	cpsie	i
 8006c22:	617b      	str	r3, [r7, #20]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c28:	f001 ffcc 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e082      	b.n	8006d36 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 ffe0 	bl	8007c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c44:	f001 ffbe 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c48:	f000 fd22 	bl	8007690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c4c:	f001 ff86 	bl	8008b5c <vPortEnterCritical>
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d103      	bne.n	8006c66 <xQueueSemaphoreTake+0x14a>
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d103      	bne.n	8006c7c <xQueueSemaphoreTake+0x160>
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c7c:	f001 ffa2 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c80:	463a      	mov	r2, r7
 8006c82:	f107 030c 	add.w	r3, r7, #12
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 ffcf 	bl	8007c2c <xTaskCheckForTimeOut>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d132      	bne.n	8006cfa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c96:	f000 f9fa 	bl	800708e <prvIsQueueEmpty>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d026      	beq.n	8006cee <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006ca8:	f001 ff58 	bl	8008b5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f923 	bl	8007efc <xTaskPriorityInherit>
 8006cb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006cb8:	f001 ff84 	bl	8008bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	3324      	adds	r3, #36	; 0x24
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fee1 	bl	8007a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ccc:	f000 f98d 	bl	8006fea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cd0:	f000 fcec 	bl	80076ac <xTaskResumeAll>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f47f af66 	bne.w	8006ba8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006cdc:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <xQueueSemaphoreTake+0x224>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	e75c      	b.n	8006ba8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf0:	f000 f97b 	bl	8006fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf4:	f000 fcda 	bl	80076ac <xTaskResumeAll>
 8006cf8:	e756      	b.n	8006ba8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cfc:	f000 f975 	bl	8006fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d00:	f000 fcd4 	bl	80076ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d06:	f000 f9c2 	bl	800708e <prvIsQueueEmpty>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f43f af4b 	beq.w	8006ba8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006d18:	f001 ff20 	bl	8008b5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d1e:	f000 f8bc 	bl	8006e9a <prvGetDisinheritPriorityAfterTimeout>
 8006d22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f9c0 	bl	80080b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d30:	f001 ff48 	bl	8008bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3738      	adds	r7, #56	; 0x38
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08e      	sub	sp, #56	; 0x38
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10c      	bne.n	8006d74 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	b672      	cpsid	i
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	b662      	cpsie	i
 8006d6e:	623b      	str	r3, [r7, #32]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueReceiveFromISR+0x3e>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <xQueueReceiveFromISR+0x42>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <xQueueReceiveFromISR+0x44>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10c      	bne.n	8006da6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	b672      	cpsid	i
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	b662      	cpsie	i
 8006da0:	61fb      	str	r3, [r7, #28]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da6:	f001 ffc1 	bl	8008d2c <vPortValidateInterruptPriority>
	__asm volatile
 8006daa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	b672      	cpsid	i
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	b662      	cpsie	i
 8006dc2:	61ba      	str	r2, [r7, #24]
 8006dc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006dc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02f      	beq.n	8006e36 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de4:	f000 f8db 	bl	8006f9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d112      	bne.n	8006e20 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	3310      	adds	r3, #16
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fe94 	bl	8007b34 <xTaskRemoveFromEventList>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e007      	b.n	8006e30 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e24:	3301      	adds	r3, #1
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	b25a      	sxtb	r2, r3
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e30:	2301      	movs	r3, #1
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
 8006e34:	e001      	b.n	8006e3a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f383 8811 	msr	BASEPRI, r3
}
 8006e44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3738      	adds	r7, #56	; 0x38
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10c      	bne.n	8006e7c <vQueueDelete+0x2c>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	b672      	cpsid	i
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	b662      	cpsie	i
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f95f 	bl	8007140 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f002 f85b 	bl	8008f48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d006      	beq.n	8006eb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e001      	b.n	8006ebc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
	}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d14d      	bne.n	8006f8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f869 	bl	8007fcc <xTaskPriorityDisinherit>
 8006efa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
 8006f02:	e043      	b.n	8006f8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6858      	ldr	r0, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	461a      	mov	r2, r3
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	f023 fcbb 	bl	802a890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	441a      	add	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d32b      	bcc.n	8006f8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	605a      	str	r2, [r3, #4]
 8006f3c:	e026      	b.n	8006f8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68d8      	ldr	r0, [r3, #12]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	461a      	mov	r2, r3
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	f023 fca1 	bl	802a890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	425b      	negs	r3, r3
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d207      	bcs.n	8006f7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	425b      	negs	r3, r3
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d105      	bne.n	8006f8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d018      	beq.n	8006fe2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	441a      	add	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d303      	bcc.n	8006fd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68d9      	ldr	r1, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6838      	ldr	r0, [r7, #0]
 8006fde:	f023 fc57 	bl	802a890 <memcpy>
	}
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ff2:	f001 fdb3 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ffc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ffe:	e011      	b.n	8007024 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d012      	beq.n	800702e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3324      	adds	r3, #36	; 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fd91 	bl	8007b34 <xTaskRemoveFromEventList>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007018:	f000 fe6e 	bl	8007cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	3b01      	subs	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dce9      	bgt.n	8007000 <prvUnlockQueue+0x16>
 800702c:	e000      	b.n	8007030 <prvUnlockQueue+0x46>
					break;
 800702e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	22ff      	movs	r2, #255	; 0xff
 8007034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007038:	f001 fdc4 	bl	8008bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800703c:	f001 fd8e 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007048:	e011      	b.n	800706e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d012      	beq.n	8007078 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3310      	adds	r3, #16
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fd6c 	bl	8007b34 <xTaskRemoveFromEventList>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007062:	f000 fe49 	bl	8007cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	3b01      	subs	r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800706e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dce9      	bgt.n	800704a <prvUnlockQueue+0x60>
 8007076:	e000      	b.n	800707a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007082:	f001 fd9f 	bl	8008bc4 <vPortExitCritical>
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007096:	f001 fd61 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e001      	b.n	80070ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ac:	f001 fd8a 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 80070b0:	68fb      	ldr	r3, [r7, #12]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c2:	f001 fd4b 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e001      	b.n	80070dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070dc:	f001 fd72 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	e014      	b.n	8007126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070fc:	4a0f      	ldr	r2, [pc, #60]	; (800713c <vQueueAddToRegistry+0x50>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10b      	bne.n	8007120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007108:	490c      	ldr	r1, [pc, #48]	; (800713c <vQueueAddToRegistry+0x50>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007112:	4a0a      	ldr	r2, [pc, #40]	; (800713c <vQueueAddToRegistry+0x50>)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4413      	add	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800711e:	e006      	b.n	800712e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b07      	cmp	r3, #7
 800712a:	d9e7      	bls.n	80070fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	200150a4 	.word	0x200150a4

08007140 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	e016      	b.n	800717c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <vQueueUnregisterQueue+0x50>)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	429a      	cmp	r2, r3
 800715c:	d10b      	bne.n	8007176 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800715e:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <vQueueUnregisterQueue+0x50>)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2100      	movs	r1, #0
 8007164:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <vQueueUnregisterQueue+0x50>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	605a      	str	r2, [r3, #4]
				break;
 8007174:	e006      	b.n	8007184 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b07      	cmp	r3, #7
 8007180:	d9e5      	bls.n	800714e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	200150a4 	.word	0x200150a4

08007194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071a4:	f001 fcda 	bl	8008b5c <vPortEnterCritical>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ae:	b25b      	sxtb	r3, r3
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d103      	bne.n	80071be <vQueueWaitForMessageRestricted+0x2a>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071c4:	b25b      	sxtb	r3, r3
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d103      	bne.n	80071d4 <vQueueWaitForMessageRestricted+0x40>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d4:	f001 fcf6 	bl	8008bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fc75 	bl	8007ad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f7ff fefb 	bl	8006fea <prvUnlockQueue>
	}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	; 0x38
 8007200:	af04      	add	r7, sp, #16
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10c      	bne.n	800722a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	b672      	cpsid	i
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	b662      	cpsie	i
 8007224:	623b      	str	r3, [r7, #32]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10c      	bne.n	800724a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	61fb      	str	r3, [r7, #28]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800724a:	235c      	movs	r3, #92	; 0x5c
 800724c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b5c      	cmp	r3, #92	; 0x5c
 8007252:	d00c      	beq.n	800726e <xTaskCreateStatic+0x72>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	61bb      	str	r3, [r7, #24]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800726e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01e      	beq.n	80072b4 <xTaskCreateStatic+0xb8>
 8007276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01b      	beq.n	80072b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007284:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	2202      	movs	r2, #2
 800728a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800728e:	2300      	movs	r3, #0
 8007290:	9303      	str	r3, [sp, #12]
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f850 	bl	800734c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ae:	f000 f8df 	bl	8007470 <prvAddNewTaskToReadyList>
 80072b2:	e001      	b.n	80072b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072b8:	697b      	ldr	r3, [r7, #20]
	}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3728      	adds	r7, #40	; 0x28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b08c      	sub	sp, #48	; 0x30
 80072c6:	af04      	add	r7, sp, #16
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	603b      	str	r3, [r7, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 fd6c 	bl	8008db4 <pvPortMalloc>
 80072dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072e4:	205c      	movs	r0, #92	; 0x5c
 80072e6:	f001 fd65 	bl	8008db4 <pvPortMalloc>
 80072ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
 80072f8:	e005      	b.n	8007306 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072fa:	6978      	ldr	r0, [r7, #20]
 80072fc:	f001 fe24 	bl	8008f48 <vPortFree>
 8007300:	e001      	b.n	8007306 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d017      	beq.n	800733c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	2300      	movs	r3, #0
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f80e 	bl	800734c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007330:	69f8      	ldr	r0, [r7, #28]
 8007332:	f000 f89d 	bl	8007470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007336:	2301      	movs	r3, #1
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	e002      	b.n	8007342 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007342:	69bb      	ldr	r3, [r7, #24]
	}
 8007344:	4618      	mov	r0, r3
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	461a      	mov	r2, r3
 8007364:	21a5      	movs	r1, #165	; 0xa5
 8007366:	f023 faa1 	bl	802a8ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007374:	440b      	add	r3, r1
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	b672      	cpsid	i
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	b662      	cpsie	i
 80073a2:	617b      	str	r3, [r7, #20]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01f      	beq.n	80073ee <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e012      	b.n	80073da <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	7819      	ldrb	r1, [r3, #0]
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	3334      	adds	r3, #52	; 0x34
 80073c4:	460a      	mov	r2, r1
 80073c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b0f      	cmp	r3, #15
 80073de:	d9e9      	bls.n	80073b4 <prvInitialiseNewTask+0x68>
 80073e0:	e000      	b.n	80073e4 <prvInitialiseNewTask+0x98>
			{
				break;
 80073e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073ec:	e003      	b.n	80073f6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	2b37      	cmp	r3, #55	; 0x37
 80073fa:	d901      	bls.n	8007400 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073fc:	2337      	movs	r3, #55	; 0x37
 80073fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007404:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	2200      	movs	r2, #0
 8007410:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	3304      	adds	r3, #4
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fe06 	bl	8006028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	3318      	adds	r3, #24
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe01 	bl	8006028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	2200      	movs	r2, #0
 8007440:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	69b8      	ldr	r0, [r7, #24]
 8007450:	f001 fa78 	bl	8008944 <pxPortInitialiseStack>
 8007454:	4602      	mov	r2, r0
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007466:	bf00      	nop
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007478:	f001 fb70 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800747c:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a2c      	ldr	r2, [pc, #176]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 8007484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007486:	4b2c      	ldr	r3, [pc, #176]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007494:	4b27      	ldr	r3, [pc, #156]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d110      	bne.n	80074be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800749c:	f000 fc50 	bl	8007d40 <prvInitialiseTaskLists>
 80074a0:	e00d      	b.n	80074be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074a2:	4b26      	ldr	r3, [pc, #152]	; (800753c <prvAddNewTaskToReadyList+0xcc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d802      	bhi.n	80074be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074b8:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074be:	4b20      	ldr	r3, [pc, #128]	; (8007540 <prvAddNewTaskToReadyList+0xd0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <prvAddNewTaskToReadyList+0xd0>)
 80074c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <prvAddNewTaskToReadyList+0xd0>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <prvAddNewTaskToReadyList+0xd4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <prvAddNewTaskToReadyList+0x74>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a18      	ldr	r2, [pc, #96]	; (8007544 <prvAddNewTaskToReadyList+0xd4>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a15      	ldr	r2, [pc, #84]	; (8007548 <prvAddNewTaskToReadyList+0xd8>)
 80074f2:	441a      	add	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fe fda1 	bl	8006042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007500:	f001 fb60 	bl	8008bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <prvAddNewTaskToReadyList+0xcc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	429a      	cmp	r2, r3
 8007518:	d207      	bcs.n	800752a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800751a:	4b0c      	ldr	r3, [pc, #48]	; (800754c <prvAddNewTaskToReadyList+0xdc>)
 800751c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200012a8 	.word	0x200012a8
 8007538:	20000dd4 	.word	0x20000dd4
 800753c:	200012b4 	.word	0x200012b4
 8007540:	200012c4 	.word	0x200012c4
 8007544:	200012b0 	.word	0x200012b0
 8007548:	20000dd8 	.word	0x20000dd8
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d019      	beq.n	8007596 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007562:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <vTaskDelay+0x64>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <vTaskDelay+0x34>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	60bb      	str	r3, [r7, #8]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007584:	f000 f884 	bl	8007690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fe2a 	bl	80081e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007590:	f000 f88c 	bl	80076ac <xTaskResumeAll>
 8007594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d107      	bne.n	80075ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <vTaskDelay+0x68>)
 800759e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	200012d0 	.word	0x200012d0
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	; 0x28
 80075c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ca:	463a      	mov	r2, r7
 80075cc:	1d39      	adds	r1, r7, #4
 80075ce:	f107 0308 	add.w	r3, r7, #8
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fcd4 	bl	8005f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	9202      	str	r2, [sp, #8]
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	2300      	movs	r3, #0
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	460a      	mov	r2, r1
 80075ea:	4923      	ldr	r1, [pc, #140]	; (8007678 <vTaskStartScheduler+0xbc>)
 80075ec:	4823      	ldr	r0, [pc, #140]	; (800767c <vTaskStartScheduler+0xc0>)
 80075ee:	f7ff fe05 	bl	80071fc <xTaskCreateStatic>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4a22      	ldr	r2, [pc, #136]	; (8007680 <vTaskStartScheduler+0xc4>)
 80075f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075f8:	4b21      	ldr	r3, [pc, #132]	; (8007680 <vTaskStartScheduler+0xc4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e001      	b.n	800760a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d102      	bne.n	8007616 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007610:	f000 fe3c 	bl	800828c <xTimerCreateTimerTask>
 8007614:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d118      	bne.n	800764e <vTaskStartScheduler+0x92>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	b672      	cpsid	i
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	b662      	cpsie	i
 8007630:	613b      	str	r3, [r7, #16]
}
 8007632:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <vTaskStartScheduler+0xc8>)
 8007636:	f04f 32ff 	mov.w	r2, #4294967295
 800763a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800763c:	4b12      	ldr	r3, [pc, #72]	; (8007688 <vTaskStartScheduler+0xcc>)
 800763e:	2201      	movs	r2, #1
 8007640:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007642:	4b12      	ldr	r3, [pc, #72]	; (800768c <vTaskStartScheduler+0xd0>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007648:	f001 fa0a 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800764c:	e010      	b.n	8007670 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d10c      	bne.n	8007670 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	60fb      	str	r3, [r7, #12]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <vTaskStartScheduler+0xb2>
}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	0802b8f0 	.word	0x0802b8f0
 800767c:	08007d11 	.word	0x08007d11
 8007680:	200012cc 	.word	0x200012cc
 8007684:	200012c8 	.word	0x200012c8
 8007688:	200012b4 	.word	0x200012b4
 800768c:	200012ac 	.word	0x200012ac

08007690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <vTaskSuspendAll+0x18>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	4a03      	ldr	r2, [pc, #12]	; (80076a8 <vTaskSuspendAll+0x18>)
 800769c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	200012d0 	.word	0x200012d0

080076ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ba:	4b43      	ldr	r3, [pc, #268]	; (80077c8 <xTaskResumeAll+0x11c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10c      	bne.n	80076dc <xTaskResumeAll+0x30>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	603b      	str	r3, [r7, #0]
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076dc:	f001 fa3e 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076e0:	4b39      	ldr	r3, [pc, #228]	; (80077c8 <xTaskResumeAll+0x11c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4a38      	ldr	r2, [pc, #224]	; (80077c8 <xTaskResumeAll+0x11c>)
 80076e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ea:	4b37      	ldr	r3, [pc, #220]	; (80077c8 <xTaskResumeAll+0x11c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d162      	bne.n	80077b8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076f2:	4b36      	ldr	r3, [pc, #216]	; (80077cc <xTaskResumeAll+0x120>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d05e      	beq.n	80077b8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076fa:	e02f      	b.n	800775c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fc:	4b34      	ldr	r3, [pc, #208]	; (80077d0 <xTaskResumeAll+0x124>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3318      	adds	r3, #24
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fcf7 	bl	80060fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fcf2 	bl	80060fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <xTaskResumeAll+0x128>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <xTaskResumeAll+0x80>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <xTaskResumeAll+0x128>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4a27      	ldr	r2, [pc, #156]	; (80077d8 <xTaskResumeAll+0x12c>)
 800773a:	441a      	add	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f7fe fc7d 	bl	8006042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	4b23      	ldr	r3, [pc, #140]	; (80077dc <xTaskResumeAll+0x130>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007756:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <xTaskResumeAll+0x134>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <xTaskResumeAll+0x124>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1cb      	bne.n	80076fc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800776a:	f000 fb89 	bl	8007e80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800776e:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <xTaskResumeAll+0x138>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d010      	beq.n	800779c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800777a:	f000 f847 	bl	800780c <xTaskIncrementTick>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007784:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <xTaskResumeAll+0x134>)
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3b01      	subs	r3, #1
 800778e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f1      	bne.n	800777a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <xTaskResumeAll+0x138>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <xTaskResumeAll+0x134>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <xTaskResumeAll+0x13c>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077b8:	f001 fa04 	bl	8008bc4 <vPortExitCritical>

	return xAlreadyYielded;
 80077bc:	68bb      	ldr	r3, [r7, #8]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200012d0 	.word	0x200012d0
 80077cc:	200012a8 	.word	0x200012a8
 80077d0:	20001268 	.word	0x20001268
 80077d4:	200012b0 	.word	0x200012b0
 80077d8:	20000dd8 	.word	0x20000dd8
 80077dc:	20000dd4 	.word	0x20000dd4
 80077e0:	200012bc 	.word	0x200012bc
 80077e4:	200012b8 	.word	0x200012b8
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <xTaskGetTickCount+0x1c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077f8:	687b      	ldr	r3, [r7, #4]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	200012ac 	.word	0x200012ac

0800780c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007816:	4b50      	ldr	r3, [pc, #320]	; (8007958 <xTaskIncrementTick+0x14c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 808b 	bne.w	8007936 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007820:	4b4e      	ldr	r3, [pc, #312]	; (800795c <xTaskIncrementTick+0x150>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007828:	4a4c      	ldr	r2, [pc, #304]	; (800795c <xTaskIncrementTick+0x150>)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d122      	bne.n	800787a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007834:	4b4a      	ldr	r3, [pc, #296]	; (8007960 <xTaskIncrementTick+0x154>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <xTaskIncrementTick+0x4c>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	b672      	cpsid	i
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	b662      	cpsie	i
 8007852:	603b      	str	r3, [r7, #0]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <xTaskIncrementTick+0x4a>
 8007858:	4b41      	ldr	r3, [pc, #260]	; (8007960 <xTaskIncrementTick+0x154>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	4b41      	ldr	r3, [pc, #260]	; (8007964 <xTaskIncrementTick+0x158>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a3f      	ldr	r2, [pc, #252]	; (8007960 <xTaskIncrementTick+0x154>)
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	4a3f      	ldr	r2, [pc, #252]	; (8007964 <xTaskIncrementTick+0x158>)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b3e      	ldr	r3, [pc, #248]	; (8007968 <xTaskIncrementTick+0x15c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	4a3d      	ldr	r2, [pc, #244]	; (8007968 <xTaskIncrementTick+0x15c>)
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	f000 fb03 	bl	8007e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800787a:	4b3c      	ldr	r3, [pc, #240]	; (800796c <xTaskIncrementTick+0x160>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	429a      	cmp	r2, r3
 8007882:	d349      	bcc.n	8007918 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007884:	4b36      	ldr	r3, [pc, #216]	; (8007960 <xTaskIncrementTick+0x154>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788e:	4b37      	ldr	r3, [pc, #220]	; (800796c <xTaskIncrementTick+0x160>)
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	601a      	str	r2, [r3, #0]
					break;
 8007896:	e03f      	b.n	8007918 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007898:	4b31      	ldr	r3, [pc, #196]	; (8007960 <xTaskIncrementTick+0x154>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d203      	bcs.n	80078b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078b0:	4a2e      	ldr	r2, [pc, #184]	; (800796c <xTaskIncrementTick+0x160>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078b6:	e02f      	b.n	8007918 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fc1d 	bl	80060fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d004      	beq.n	80078d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	3318      	adds	r3, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fc14 	bl	80060fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <xTaskIncrementTick+0x164>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d903      	bls.n	80078e8 <xTaskIncrementTick+0xdc>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a22      	ldr	r2, [pc, #136]	; (8007970 <xTaskIncrementTick+0x164>)
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <xTaskIncrementTick+0x168>)
 80078f6:	441a      	add	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fe fb9f 	bl	8006042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007908:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <xTaskIncrementTick+0x16c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790e:	429a      	cmp	r2, r3
 8007910:	d3b8      	bcc.n	8007884 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007912:	2301      	movs	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007916:	e7b5      	b.n	8007884 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007918:	4b17      	ldr	r3, [pc, #92]	; (8007978 <xTaskIncrementTick+0x16c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	4915      	ldr	r1, [pc, #84]	; (8007974 <xTaskIncrementTick+0x168>)
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d907      	bls.n	8007940 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e004      	b.n	8007940 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <xTaskIncrementTick+0x170>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	4a0f      	ldr	r2, [pc, #60]	; (800797c <xTaskIncrementTick+0x170>)
 800793e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <xTaskIncrementTick+0x174>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800794c:	697b      	ldr	r3, [r7, #20]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200012d0 	.word	0x200012d0
 800795c:	200012ac 	.word	0x200012ac
 8007960:	20001260 	.word	0x20001260
 8007964:	20001264 	.word	0x20001264
 8007968:	200012c0 	.word	0x200012c0
 800796c:	200012c8 	.word	0x200012c8
 8007970:	200012b0 	.word	0x200012b0
 8007974:	20000dd8 	.word	0x20000dd8
 8007978:	20000dd4 	.word	0x20000dd4
 800797c:	200012b8 	.word	0x200012b8
 8007980:	200012bc 	.word	0x200012bc

08007984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800798a:	4b3b      	ldr	r3, [pc, #236]	; (8007a78 <vTaskSwitchContext+0xf4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <vTaskSwitchContext+0xf8>)
 8007994:	2201      	movs	r2, #1
 8007996:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007998:	e06a      	b.n	8007a70 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 800799a:	4b38      	ldr	r3, [pc, #224]	; (8007a7c <vTaskSwitchContext+0xf8>)
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80079a0:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <vTaskSwitchContext+0xfc>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d111      	bne.n	80079dc <vTaskSwitchContext+0x58>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3304      	adds	r3, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d10b      	bne.n	80079dc <vTaskSwitchContext+0x58>
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	3308      	adds	r3, #8
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d105      	bne.n	80079dc <vTaskSwitchContext+0x58>
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	330c      	adds	r3, #12
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d008      	beq.n	80079ee <vTaskSwitchContext+0x6a>
 80079dc:	4b28      	ldr	r3, [pc, #160]	; (8007a80 <vTaskSwitchContext+0xfc>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <vTaskSwitchContext+0xfc>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3334      	adds	r3, #52	; 0x34
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7f8 fddd 	bl	80005a8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ee:	4b25      	ldr	r3, [pc, #148]	; (8007a84 <vTaskSwitchContext+0x100>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e012      	b.n	8007a1c <vTaskSwitchContext+0x98>
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10c      	bne.n	8007a16 <vTaskSwitchContext+0x92>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	b672      	cpsid	i
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	b662      	cpsie	i
 8007a10:	607b      	str	r3, [r7, #4]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <vTaskSwitchContext+0x90>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	491a      	ldr	r1, [pc, #104]	; (8007a88 <vTaskSwitchContext+0x104>)
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0e2      	beq.n	80079f6 <vTaskSwitchContext+0x72>
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <vTaskSwitchContext+0x104>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3308      	adds	r3, #8
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d104      	bne.n	8007a60 <vTaskSwitchContext+0xdc>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <vTaskSwitchContext+0xfc>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4a06      	ldr	r2, [pc, #24]	; (8007a84 <vTaskSwitchContext+0x100>)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6013      	str	r3, [r2, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200012d0 	.word	0x200012d0
 8007a7c:	200012bc 	.word	0x200012bc
 8007a80:	20000dd4 	.word	0x20000dd4
 8007a84:	200012b0 	.word	0x200012b0
 8007a88:	20000dd8 	.word	0x20000dd8

08007a8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10c      	bne.n	8007ab6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	b672      	cpsid	i
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	b662      	cpsie	i
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <vTaskPlaceOnEventList+0x48>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3318      	adds	r3, #24
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fe fae3 	bl	800608a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	6838      	ldr	r0, [r7, #0]
 8007ac8:	f000 fb8c 	bl	80081e4 <prvAddCurrentTaskToDelayedList>
}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000dd4 	.word	0x20000dd4

08007ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10c      	bne.n	8007b04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	b672      	cpsid	i
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	b662      	cpsie	i
 8007afe:	617b      	str	r3, [r7, #20]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <vTaskPlaceOnEventListRestricted+0x58>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7fe fa98 	bl	8006042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007b18:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	68b8      	ldr	r0, [r7, #8]
 8007b22:	f000 fb5f 	bl	80081e4 <prvAddCurrentTaskToDelayedList>
	}
 8007b26:	bf00      	nop
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000dd4 	.word	0x20000dd4

08007b34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10c      	bne.n	8007b64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	b672      	cpsid	i
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	b662      	cpsie	i
 8007b5e:	60fb      	str	r3, [r7, #12]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	3318      	adds	r3, #24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fac7 	bl	80060fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <xTaskRemoveFromEventList+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d11d      	bne.n	8007bb2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fabe 	bl	80060fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4b19      	ldr	r3, [pc, #100]	; (8007bec <xTaskRemoveFromEventList+0xb8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d903      	bls.n	8007b94 <xTaskRemoveFromEventList+0x60>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4a16      	ldr	r2, [pc, #88]	; (8007bec <xTaskRemoveFromEventList+0xb8>)
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <xTaskRemoveFromEventList+0xbc>)
 8007ba2:	441a      	add	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f7fe fa49 	bl	8006042 <vListInsertEnd>
 8007bb0:	e005      	b.n	8007bbe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	480e      	ldr	r0, [pc, #56]	; (8007bf4 <xTaskRemoveFromEventList+0xc0>)
 8007bba:	f7fe fa42 	bl	8006042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <xTaskRemoveFromEventList+0xc4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d905      	bls.n	8007bd8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <xTaskRemoveFromEventList+0xc8>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e001      	b.n	8007bdc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bdc:	697b      	ldr	r3, [r7, #20]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200012d0 	.word	0x200012d0
 8007bec:	200012b0 	.word	0x200012b0
 8007bf0:	20000dd8 	.word	0x20000dd8
 8007bf4:	20001268 	.word	0x20001268
 8007bf8:	20000dd4 	.word	0x20000dd4
 8007bfc:	200012bc 	.word	0x200012bc

08007c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c08:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <vTaskInternalSetTimeOutState+0x24>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <vTaskInternalSetTimeOutState+0x28>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	200012c0 	.word	0x200012c0
 8007c28:	200012ac 	.word	0x200012ac

08007c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10c      	bne.n	8007c56 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	b672      	cpsid	i
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	b662      	cpsie	i
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10c      	bne.n	8007c76 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007c76:	f000 ff71 	bl	8008b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <xTaskCheckForTimeOut+0xc4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d102      	bne.n	8007c9a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e023      	b.n	8007ce2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <xTaskCheckForTimeOut+0xc8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d007      	beq.n	8007cb6 <xTaskCheckForTimeOut+0x8a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d302      	bcc.n	8007cb6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	e015      	b.n	8007ce2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d20b      	bcs.n	8007cd8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff97 	bl	8007c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	e004      	b.n	8007ce2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ce2:	f000 ff6f 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200012ac 	.word	0x200012ac
 8007cf4:	200012c0 	.word	0x200012c0

08007cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cfc:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <vTaskMissedYield+0x14>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
}
 8007d02:	bf00      	nop
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	200012bc 	.word	0x200012bc

08007d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d18:	f000 f852 	bl	8007dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d1c:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <prvIdleTask+0x28>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d9f9      	bls.n	8007d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <prvIdleTask+0x2c>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d34:	e7f0      	b.n	8007d18 <prvIdleTask+0x8>
 8007d36:	bf00      	nop
 8007d38:	20000dd8 	.word	0x20000dd8
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
 8007d4a:	e00c      	b.n	8007d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4a12      	ldr	r2, [pc, #72]	; (8007da0 <prvInitialiseTaskLists+0x60>)
 8007d58:	4413      	add	r3, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe f944 	bl	8005fe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3301      	adds	r3, #1
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b37      	cmp	r3, #55	; 0x37
 8007d6a:	d9ef      	bls.n	8007d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d6c:	480d      	ldr	r0, [pc, #52]	; (8007da4 <prvInitialiseTaskLists+0x64>)
 8007d6e:	f7fe f93b 	bl	8005fe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d72:	480d      	ldr	r0, [pc, #52]	; (8007da8 <prvInitialiseTaskLists+0x68>)
 8007d74:	f7fe f938 	bl	8005fe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d78:	480c      	ldr	r0, [pc, #48]	; (8007dac <prvInitialiseTaskLists+0x6c>)
 8007d7a:	f7fe f935 	bl	8005fe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d7e:	480c      	ldr	r0, [pc, #48]	; (8007db0 <prvInitialiseTaskLists+0x70>)
 8007d80:	f7fe f932 	bl	8005fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d84:	480b      	ldr	r0, [pc, #44]	; (8007db4 <prvInitialiseTaskLists+0x74>)
 8007d86:	f7fe f92f 	bl	8005fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <prvInitialiseTaskLists+0x78>)
 8007d8c:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <prvInitialiseTaskLists+0x64>)
 8007d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvInitialiseTaskLists+0x7c>)
 8007d92:	4a05      	ldr	r2, [pc, #20]	; (8007da8 <prvInitialiseTaskLists+0x68>)
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000dd8 	.word	0x20000dd8
 8007da4:	20001238 	.word	0x20001238
 8007da8:	2000124c 	.word	0x2000124c
 8007dac:	20001268 	.word	0x20001268
 8007db0:	2000127c 	.word	0x2000127c
 8007db4:	20001294 	.word	0x20001294
 8007db8:	20001260 	.word	0x20001260
 8007dbc:	20001264 	.word	0x20001264

08007dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dc6:	e019      	b.n	8007dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dc8:	f000 fec8 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <prvCheckTasksWaitingTermination+0x50>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe f98f 	bl	80060fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <prvCheckTasksWaitingTermination+0x54>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	4a0b      	ldr	r2, [pc, #44]	; (8007e14 <prvCheckTasksWaitingTermination+0x54>)
 8007de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4a0a      	ldr	r2, [pc, #40]	; (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007df2:	f000 fee7 	bl	8008bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f810 	bl	8007e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dfc:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e1      	bne.n	8007dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	2000127c 	.word	0x2000127c
 8007e14:	200012a8 	.word	0x200012a8
 8007e18:	20001290 	.word	0x20001290

08007e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d108      	bne.n	8007e40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 f888 	bl	8008f48 <vPortFree>
				vPortFree( pxTCB );
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f885 	bl	8008f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e3e:	e01a      	b.n	8007e76 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d103      	bne.n	8007e52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 f87c 	bl	8008f48 <vPortFree>
	}
 8007e50:	e011      	b.n	8007e76 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d00c      	beq.n	8007e76 <prvDeleteTCB+0x5a>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	b672      	cpsid	i
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	b662      	cpsie	i
 8007e70:	60fb      	str	r3, [r7, #12]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <prvDeleteTCB+0x58>
	}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvResetNextTaskUnblockTime+0x38>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <prvResetNextTaskUnblockTime+0x3c>)
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e98:	e008      	b.n	8007eac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <prvResetNextTaskUnblockTime+0x38>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4a04      	ldr	r2, [pc, #16]	; (8007ebc <prvResetNextTaskUnblockTime+0x3c>)
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20001260 	.word	0x20001260
 8007ebc:	200012c8 	.word	0x200012c8

08007ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <xTaskGetSchedulerState+0x34>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	e008      	b.n	8007ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed4:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <xTaskGetSchedulerState+0x38>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007edc:	2302      	movs	r3, #2
 8007ede:	607b      	str	r3, [r7, #4]
 8007ee0:	e001      	b.n	8007ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ee6:	687b      	ldr	r3, [r7, #4]
	}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	200012b4 	.word	0x200012b4
 8007ef8:	200012d0 	.word	0x200012d0

08007efc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d051      	beq.n	8007fb6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d241      	bcs.n	8007fa4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db06      	blt.n	8007f36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f28:	4b25      	ldr	r3, [pc, #148]	; (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6959      	ldr	r1, [r3, #20]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <xTaskPriorityInherit+0xc8>)
 8007f48:	4413      	add	r3, r2
 8007f4a:	4299      	cmp	r1, r3
 8007f4c:	d122      	bne.n	8007f94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe f8d2 	bl	80060fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f58:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f66:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <xTaskPriorityInherit+0xcc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <xTaskPriorityInherit+0x7a>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <xTaskPriorityInherit+0xcc>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <xTaskPriorityInherit+0xc8>)
 8007f84:	441a      	add	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7fe f858 	bl	8006042 <vListInsertEnd>
 8007f92:	e004      	b.n	8007f9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f94:	4b0a      	ldr	r3, [pc, #40]	; (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e008      	b.n	8007fb6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d201      	bcs.n	8007fb6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000dd4 	.word	0x20000dd4
 8007fc4:	20000dd8 	.word	0x20000dd8
 8007fc8:	200012b0 	.word	0x200012b0

08007fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d05a      	beq.n	8008098 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fe2:	4b30      	ldr	r3, [pc, #192]	; (80080a4 <xTaskPriorityDisinherit+0xd8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d00c      	beq.n	8008006 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	b672      	cpsid	i
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	b662      	cpsie	i
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10c      	bne.n	8008028 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	b672      	cpsid	i
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	b662      	cpsie	i
 8008022:	60bb      	str	r3, [r7, #8]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802c:	1e5a      	subs	r2, r3, #1
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	429a      	cmp	r2, r3
 800803c:	d02c      	beq.n	8008098 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d128      	bne.n	8008098 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3304      	adds	r3, #4
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe f856 	bl	80060fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <xTaskPriorityDisinherit+0xdc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <xTaskPriorityDisinherit+0xac>
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <xTaskPriorityDisinherit+0xdc>)
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4a09      	ldr	r2, [pc, #36]	; (80080ac <xTaskPriorityDisinherit+0xe0>)
 8008086:	441a      	add	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fd ffd7 	bl	8006042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008098:	697b      	ldr	r3, [r7, #20]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000dd4 	.word	0x20000dd4
 80080a8:	200012b0 	.word	0x200012b0
 80080ac:	20000dd8 	.word	0x20000dd8

080080b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d06e      	beq.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10c      	bne.n	80080ea <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	b672      	cpsid	i
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	b662      	cpsie	i
 80080e4:	60fb      	str	r3, [r7, #12]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d902      	bls.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e002      	b.n	8008100 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	429a      	cmp	r2, r3
 8008108:	d04d      	beq.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	429a      	cmp	r2, r3
 8008112:	d148      	bne.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008114:	4b26      	ldr	r3, [pc, #152]	; (80081b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	429a      	cmp	r2, r3
 800811c:	d10c      	bne.n	8008138 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	b672      	cpsid	i
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	b662      	cpsie	i
 8008132:	60bb      	str	r3, [r7, #8]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db04      	blt.n	8008156 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	6959      	ldr	r1, [r3, #20]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4a13      	ldr	r2, [pc, #76]	; (80081b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008166:	4413      	add	r3, r2
 8008168:	4299      	cmp	r1, r3
 800816a:	d11c      	bne.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	3304      	adds	r3, #4
 8008170:	4618      	mov	r0, r3
 8008172:	f7fd ffc3 	bl	80060fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d903      	bls.n	800818a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	4a0c      	ldr	r2, [pc, #48]	; (80081b8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4a07      	ldr	r2, [pc, #28]	; (80081b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008198:	441a      	add	r2, r3
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	3304      	adds	r3, #4
 800819e:	4619      	mov	r1, r3
 80081a0:	4610      	mov	r0, r2
 80081a2:	f7fd ff4e 	bl	8006042 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a6:	bf00      	nop
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000dd4 	.word	0x20000dd4
 80081b4:	20000dd8 	.word	0x20000dd8
 80081b8:	200012b0 	.word	0x200012b0

080081bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ce:	3201      	adds	r2, #1
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081d4:	681b      	ldr	r3, [r3, #0]
	}
 80081d6:	4618      	mov	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	20000dd4 	.word	0x20000dd4

080081e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ee:	4b21      	ldr	r3, [pc, #132]	; (8008274 <prvAddCurrentTaskToDelayedList+0x90>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fd ff7e 	bl	80060fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	d10a      	bne.n	800821e <prvAddCurrentTaskToDelayedList+0x3a>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820e:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <prvAddCurrentTaskToDelayedList+0x94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4819      	ldr	r0, [pc, #100]	; (800827c <prvAddCurrentTaskToDelayedList+0x98>)
 8008218:	f7fd ff13 	bl	8006042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800821c:	e026      	b.n	800826c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008226:	4b14      	ldr	r3, [pc, #80]	; (8008278 <prvAddCurrentTaskToDelayedList+0x94>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	429a      	cmp	r2, r3
 8008234:	d209      	bcs.n	800824a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008236:	4b12      	ldr	r3, [pc, #72]	; (8008280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <prvAddCurrentTaskToDelayedList+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fd ff21 	bl	800608a <vListInsert>
}
 8008248:	e010      	b.n	800826c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824a:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvAddCurrentTaskToDelayedList+0x94>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3304      	adds	r3, #4
 8008254:	4619      	mov	r1, r3
 8008256:	4610      	mov	r0, r2
 8008258:	f7fd ff17 	bl	800608a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	429a      	cmp	r2, r3
 8008264:	d202      	bcs.n	800826c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008266:	4a08      	ldr	r2, [pc, #32]	; (8008288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6013      	str	r3, [r2, #0]
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200012ac 	.word	0x200012ac
 8008278:	20000dd4 	.word	0x20000dd4
 800827c:	20001294 	.word	0x20001294
 8008280:	20001264 	.word	0x20001264
 8008284:	20001260 	.word	0x20001260
 8008288:	200012c8 	.word	0x200012c8

0800828c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008296:	f000 fb15 	bl	80088c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800829a:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <xTimerCreateTimerTask+0x84>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d021      	beq.n	80082e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082aa:	1d3a      	adds	r2, r7, #4
 80082ac:	f107 0108 	add.w	r1, r7, #8
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fd fe7d 	bl	8005fb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	9202      	str	r2, [sp, #8]
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	2302      	movs	r3, #2
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	460a      	mov	r2, r1
 80082cc:	4911      	ldr	r1, [pc, #68]	; (8008314 <xTimerCreateTimerTask+0x88>)
 80082ce:	4812      	ldr	r0, [pc, #72]	; (8008318 <xTimerCreateTimerTask+0x8c>)
 80082d0:	f7fe ff94 	bl	80071fc <xTaskCreateStatic>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4a11      	ldr	r2, [pc, #68]	; (800831c <xTimerCreateTimerTask+0x90>)
 80082d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <xTimerCreateTimerTask+0x90>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082e2:	2301      	movs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	b672      	cpsid	i
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	b662      	cpsie	i
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008306:	697b      	ldr	r3, [r7, #20]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20001304 	.word	0x20001304
 8008314:	0802b8f8 	.word	0x0802b8f8
 8008318:	0800845d 	.word	0x0800845d
 800831c:	20001308 	.word	0x20001308

08008320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800832e:	2300      	movs	r3, #0
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <xTimerGenericCommand+0x32>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	b672      	cpsid	i
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	b662      	cpsie	i
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008352:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <xTimerGenericCommand+0x9c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02a      	beq.n	80083b0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b05      	cmp	r3, #5
 800836a:	dc18      	bgt.n	800839e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800836c:	f7ff fda8 	bl	8007ec0 <xTaskGetSchedulerState>
 8008370:	4603      	mov	r3, r0
 8008372:	2b02      	cmp	r3, #2
 8008374:	d109      	bne.n	800838a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <xTimerGenericCommand+0x9c>)
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	f107 0110 	add.w	r1, r7, #16
 800837e:	2300      	movs	r3, #0
 8008380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008382:	f7fe f8a9 	bl	80064d8 <xQueueGenericSend>
 8008386:	6278      	str	r0, [r7, #36]	; 0x24
 8008388:	e012      	b.n	80083b0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <xTimerGenericCommand+0x9c>)
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	f107 0110 	add.w	r1, r7, #16
 8008392:	2300      	movs	r3, #0
 8008394:	2200      	movs	r2, #0
 8008396:	f7fe f89f 	bl	80064d8 <xQueueGenericSend>
 800839a:	6278      	str	r0, [r7, #36]	; 0x24
 800839c:	e008      	b.n	80083b0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <xTimerGenericCommand+0x9c>)
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	f107 0110 	add.w	r1, r7, #16
 80083a6:	2300      	movs	r3, #0
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	f7fe f99b 	bl	80066e4 <xQueueGenericSendFromISR>
 80083ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3728      	adds	r7, #40	; 0x28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20001304 	.word	0x20001304

080083c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ca:	4b23      	ldr	r3, [pc, #140]	; (8008458 <prvProcessExpiredTimer+0x98>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fe8f 	bl	80060fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d024      	beq.n	8008436 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	18d1      	adds	r1, r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	6978      	ldr	r0, [r7, #20]
 80083fa:	f000 f8d3 	bl	80085a4 <prvInsertTimerInActiveList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d021      	beq.n	8008448 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	2100      	movs	r1, #0
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff86 	bl	8008320 <xTimerGenericCommand>
 8008414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d115      	bne.n	8008448 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	b672      	cpsid	i
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	b662      	cpsie	i
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843c:	f023 0301 	bic.w	r3, r3, #1
 8008440:	b2da      	uxtb	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	6978      	ldr	r0, [r7, #20]
 800844e:	4798      	blx	r3
}
 8008450:	bf00      	nop
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200012fc 	.word	0x200012fc

0800845c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008464:	f107 0308 	add.w	r3, r7, #8
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f857 	bl	800851c <prvGetNextExpireTime>
 800846e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f803 	bl	8008480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800847a:	f000 f8d5 	bl	8008628 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800847e:	e7f1      	b.n	8008464 <prvTimerTask+0x8>

08008480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800848a:	f7ff f901 	bl	8007690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f866 	bl	8008564 <prvSampleTimeNow>
 8008498:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d130      	bne.n	8008502 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <prvProcessTimerOrBlockTask+0x3c>
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d806      	bhi.n	80084bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ae:	f7ff f8fd 	bl	80076ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff83 	bl	80083c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084ba:	e024      	b.n	8008506 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d008      	beq.n	80084d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084c2:	4b13      	ldr	r3, [pc, #76]	; (8008510 <prvProcessTimerOrBlockTask+0x90>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <prvProcessTimerOrBlockTask+0x50>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <prvProcessTimerOrBlockTask+0x52>
 80084d0:	2300      	movs	r3, #0
 80084d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084d4:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <prvProcessTimerOrBlockTask+0x94>)
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4619      	mov	r1, r3
 80084e2:	f7fe fe57 	bl	8007194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084e6:	f7ff f8e1 	bl	80076ac <xTaskResumeAll>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <prvProcessTimerOrBlockTask+0x98>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
}
 8008500:	e001      	b.n	8008506 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008502:	f7ff f8d3 	bl	80076ac <xTaskResumeAll>
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20001300 	.word	0x20001300
 8008514:	20001304 	.word	0x20001304
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <prvGetNextExpireTime+0x44>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <prvGetNextExpireTime+0x16>
 800852e:	2201      	movs	r2, #1
 8008530:	e000      	b.n	8008534 <prvGetNextExpireTime+0x18>
 8008532:	2200      	movs	r2, #0
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <prvGetNextExpireTime+0x44>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	e001      	b.n	8008550 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008550:	68fb      	ldr	r3, [r7, #12]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	200012fc 	.word	0x200012fc

08008564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800856c:	f7ff f93e 	bl	80077ec <xTaskGetTickCount>
 8008570:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <prvSampleTimeNow+0x3c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	429a      	cmp	r2, r3
 800857a:	d205      	bcs.n	8008588 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800857c:	f000 f93c 	bl	80087f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	e002      	b.n	800858e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <prvSampleTimeNow+0x3c>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008594:	68fb      	ldr	r3, [r7, #12]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	2000130c 	.word	0x2000130c

080085a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d812      	bhi.n	80085f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d302      	bcc.n	80085de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e01b      	b.n	8008616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <prvInsertTimerInActiveList+0x7c>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7fd fd4e 	bl	800608a <vListInsert>
 80085ee:	e012      	b.n	8008616 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d206      	bcs.n	8008606 <prvInsertTimerInActiveList+0x62>
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d302      	bcc.n	8008606 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	e007      	b.n	8008616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <prvInsertTimerInActiveList+0x80>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fd fd3a 	bl	800608a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008616:	697b      	ldr	r3, [r7, #20]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20001300 	.word	0x20001300
 8008624:	200012fc 	.word	0x200012fc

08008628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800862e:	e0d0      	b.n	80087d2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	da1a      	bge.n	800866c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	3304      	adds	r3, #4
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10c      	bne.n	800865c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	b672      	cpsid	i
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	b662      	cpsie	i
 8008656:	61fb      	str	r3, [r7, #28]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008662:	6850      	ldr	r0, [r2, #4]
 8008664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008666:	6892      	ldr	r2, [r2, #8]
 8008668:	4611      	mov	r1, r2
 800866a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f2c0 80ae 	blt.w	80087d0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd fd39 	bl	80060fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800868a:	463b      	mov	r3, r7
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff ff69 	bl	8008564 <prvSampleTimeNow>
 8008692:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b09      	cmp	r3, #9
 8008698:	f200 809b 	bhi.w	80087d2 <prvProcessReceivedCommands+0x1aa>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <prvProcessReceivedCommands+0x7c>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	08008745 	.word	0x08008745
 80086b4:	08008759 	.word	0x08008759
 80086b8:	080087a7 	.word	0x080087a7
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086cd 	.word	0x080086cd
 80086c4:	08008745 	.word	0x08008745
 80086c8:	08008759 	.word	0x08008759
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	18d1      	adds	r1, r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ec:	f7ff ff5a 	bl	80085a4 <prvInsertTimerInActiveList>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d06d      	beq.n	80087d2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d062      	beq.n	80087d2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	441a      	add	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800871e:	f7ff fdff 	bl	8008320 <xTimerGenericCommand>
 8008722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d153      	bne.n	80087d2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	b672      	cpsid	i
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	b662      	cpsie	i
 800873e:	61bb      	str	r3, [r7, #24]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	b2da      	uxtb	r2, r3
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008756:	e03c      	b.n	80087d2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	b2da      	uxtb	r2, r3
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10c      	bne.n	8008792 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	b672      	cpsid	i
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	b662      	cpsie	i
 800878c:	617b      	str	r3, [r7, #20]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	18d1      	adds	r1, r2, r3
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a0:	f7ff ff00 	bl	80085a4 <prvInsertTimerInActiveList>
					break;
 80087a4:	e015      	b.n	80087d2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d103      	bne.n	80087bc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 fbc7 	bl	8008f48 <vPortFree>
 80087ba:	e00a      	b.n	80087d2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087ce:	e000      	b.n	80087d2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <prvProcessReceivedCommands+0x1cc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	1d39      	adds	r1, r7, #4
 80087d8:	2200      	movs	r2, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f8b8 	bl	8006950 <xQueueReceive>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f47f af24 	bne.w	8008630 <prvProcessReceivedCommands+0x8>
	}
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3730      	adds	r7, #48	; 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20001304 	.word	0x20001304

080087f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087fe:	e04a      	b.n	8008896 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008800:	4b2e      	ldr	r3, [pc, #184]	; (80088bc <prvSwitchTimerLists+0xc4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b2c      	ldr	r3, [pc, #176]	; (80088bc <prvSwitchTimerLists+0xc4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3304      	adds	r3, #4
 8008818:	4618      	mov	r0, r3
 800881a:	f7fd fc6f 	bl	80060fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d030      	beq.n	8008896 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90e      	bls.n	8008864 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008852:	4b1a      	ldr	r3, [pc, #104]	; (80088bc <prvSwitchTimerLists+0xc4>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fd fc14 	bl	800608a <vListInsert>
 8008862:	e018      	b.n	8008896 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008864:	2300      	movs	r3, #0
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2300      	movs	r3, #0
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fd56 	bl	8008320 <xTimerGenericCommand>
 8008874:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10c      	bne.n	8008896 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	603b      	str	r3, [r7, #0]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <prvSwitchTimerLists+0xc4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1af      	bne.n	8008800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088a0:	4b06      	ldr	r3, [pc, #24]	; (80088bc <prvSwitchTimerLists+0xc4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088a6:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <prvSwitchTimerLists+0xc8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a04      	ldr	r2, [pc, #16]	; (80088bc <prvSwitchTimerLists+0xc4>)
 80088ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088ae:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <prvSwitchTimerLists+0xc8>)
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6013      	str	r3, [r2, #0]
}
 80088b4:	bf00      	nop
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	200012fc 	.word	0x200012fc
 80088c0:	20001300 	.word	0x20001300

080088c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ca:	f000 f947 	bl	8008b5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <prvCheckForValidListAndQueue+0x60>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d120      	bne.n	8008918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088d6:	4814      	ldr	r0, [pc, #80]	; (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088d8:	f7fd fb86 	bl	8005fe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088dc:	4813      	ldr	r0, [pc, #76]	; (800892c <prvCheckForValidListAndQueue+0x68>)
 80088de:	f7fd fb83 	bl	8005fe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <prvCheckForValidListAndQueue+0x6c>)
 80088e4:	4a10      	ldr	r2, [pc, #64]	; (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088e8:	4b12      	ldr	r3, [pc, #72]	; (8008934 <prvCheckForValidListAndQueue+0x70>)
 80088ea:	4a10      	ldr	r2, [pc, #64]	; (800892c <prvCheckForValidListAndQueue+0x68>)
 80088ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <prvCheckForValidListAndQueue+0x74>)
 80088f4:	4a11      	ldr	r2, [pc, #68]	; (800893c <prvCheckForValidListAndQueue+0x78>)
 80088f6:	2110      	movs	r1, #16
 80088f8:	200a      	movs	r0, #10
 80088fa:	f7fd fc93 	bl	8006224 <xQueueGenericCreateStatic>
 80088fe:	4603      	mov	r3, r0
 8008900:	4a08      	ldr	r2, [pc, #32]	; (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008904:	4b07      	ldr	r3, [pc, #28]	; (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <prvCheckForValidListAndQueue+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	490b      	ldr	r1, [pc, #44]	; (8008940 <prvCheckForValidListAndQueue+0x7c>)
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fbea 	bl	80070ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008918:	f000 f954 	bl	8008bc4 <vPortExitCritical>
}
 800891c:	bf00      	nop
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20001304 	.word	0x20001304
 8008928:	200012d4 	.word	0x200012d4
 800892c:	200012e8 	.word	0x200012e8
 8008930:	200012fc 	.word	0x200012fc
 8008934:	20001300 	.word	0x20001300
 8008938:	200013b0 	.word	0x200013b0
 800893c:	20001310 	.word	0x20001310
 8008940:	0802b900 	.word	0x0802b900

08008944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b04      	subs	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0201 	bic.w	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b04      	subs	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008974:	4a0c      	ldr	r2, [pc, #48]	; (80089a8 <pxPortInitialiseStack+0x64>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b14      	subs	r3, #20
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f06f 0202 	mvn.w	r2, #2
 8008992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3b20      	subs	r3, #32
 8008998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	080089ad 	.word	0x080089ad

080089ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <prvTaskExitError+0x5c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d00c      	beq.n	80089da <prvTaskExitError+0x2e>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	b672      	cpsid	i
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	b662      	cpsie	i
 80089d4:	60fb      	str	r3, [r7, #12]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <prvTaskExitError+0x2c>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	b672      	cpsid	i
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	b662      	cpsie	i
 80089ee:	60bb      	str	r3, [r7, #8]
}
 80089f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089f2:	bf00      	nop
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0fc      	beq.n	80089f4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20000010 	.word	0x20000010
 8008a0c:	00000000 	.word	0x00000000

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20000dd4 	.word	0x20000dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a66:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <xPortStartScheduler+0xe4>)
 8008a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	; (8008b48 <xPortStartScheduler+0xe8>)
 8008a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a94:	e009      	b.n	8008aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a96:	4b2d      	ldr	r3, [pc, #180]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a2b      	ldr	r2, [pc, #172]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b80      	cmp	r3, #128	; 0x80
 8008ab4:	d0ef      	beq.n	8008a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab6:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f1c3 0307 	rsb	r3, r3, #7
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d00c      	beq.n	8008adc <xPortStartScheduler+0x7c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aee:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <xPortStartScheduler+0xec>)
 8008af0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b12:	f000 f8dd 	bl	8008cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <xPortStartScheduler+0xf4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b1c:	f000 f8fc 	bl	8008d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b20:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0c      	ldr	r2, [pc, #48]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b2c:	f7ff ff84 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b30:	f7fe ff28 	bl	8007984 <vTaskSwitchContext>
	prvTaskExitError();
 8008b34:	f7ff ff3a 	bl	80089ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	e000e400 	.word	0xe000e400
 8008b48:	20001400 	.word	0x20001400
 8008b4c:	20001404 	.word	0x20001404
 8008b50:	e000ed20 	.word	0xe000ed20
 8008b54:	20000010 	.word	0x20000010
 8008b58:	e000ef34 	.word	0xe000ef34

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	607b      	str	r3, [r7, #4]
}
 8008b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0e      	ldr	r2, [pc, #56]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d111      	bne.n	8008bb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <vPortEnterCritical+0x64>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <vPortEnterCritical+0x54>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortEnterCritical+0x52>
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000010 	.word	0x20000010
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <vPortExitCritical+0x54>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10c      	bne.n	8008bec <vPortExitCritical+0x28>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	b672      	cpsid	i
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	b662      	cpsie	i
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <vPortExitCritical+0x54>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bf6:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <vPortExitCritical+0x46>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f383 8811 	msr	BASEPRI, r3
}
 8008c08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010
 8008c1c:	00000000 	.word	0x00000000

08008c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c20:	f3ef 8009 	mrs	r0, PSP
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <pxCurrentTCBConst>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f01e 0f10 	tst.w	lr, #16
 8008c30:	bf08      	it	eq
 8008c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c44:	b672      	cpsid	i
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	b662      	cpsie	i
 8008c54:	f7fe fe96 	bl	8007984 <vTaskSwitchContext>
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	f380 8811 	msr	BASEPRI, r0
 8008c60:	bc09      	pop	{r0, r3}
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f01e 0f10 	tst.w	lr, #16
 8008c6e:	bf08      	it	eq
 8008c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c74:	f380 8809 	msr	PSP, r0
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <pxCurrentTCBConst>:
 8008c80:	20000dd4 	.word	0x20000dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	b672      	cpsid	i
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	b662      	cpsie	i
 8008ca2:	607b      	str	r3, [r7, #4]
}
 8008ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca6:	f7fe fdb1 	bl	800780c <xTaskIncrementTick>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <SysTick_Handler+0x44>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	f383 8811 	msr	BASEPRI, r3
}
 8008cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <vPortSetupTimerInterrupt+0x38>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <vPortSetupTimerInterrupt+0x3c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <vPortSetupTimerInterrupt+0x40>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	099b      	lsrs	r3, r3, #6
 8008cec:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <vPortSetupTimerInterrupt+0x44>)
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cf2:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cf4:	2207      	movs	r2, #7
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	e000e010 	.word	0xe000e010
 8008d08:	e000e018 	.word	0xe000e018
 8008d0c:	20000004 	.word	0x20000004
 8008d10:	10624dd3 	.word	0x10624dd3
 8008d14:	e000e014 	.word	0xe000e014

08008d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d28 <vPortEnableVFP+0x10>
 8008d1c:	6801      	ldr	r1, [r0, #0]
 8008d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d22:	6001      	str	r1, [r0, #0]
 8008d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d26:	bf00      	nop
 8008d28:	e000ed88 	.word	0xe000ed88

08008d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d32:	f3ef 8305 	mrs	r3, IPSR
 8008d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b0f      	cmp	r3, #15
 8008d3c:	d916      	bls.n	8008d6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d3e:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <vPortValidateInterruptPriority+0x78>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d48:	4b17      	ldr	r3, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x7c>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	7afa      	ldrb	r2, [r7, #11]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d20c      	bcs.n	8008d6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	607b      	str	r3, [r7, #4]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <vPortValidateInterruptPriority+0x80>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x84>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d90c      	bls.n	8008d96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	603b      	str	r3, [r7, #0]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <vPortValidateInterruptPriority+0x68>
	}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	e000e3f0 	.word	0xe000e3f0
 8008da8:	20001400 	.word	0x20001400
 8008dac:	e000ed0c 	.word	0xe000ed0c
 8008db0:	20001404 	.word	0x20001404

08008db4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dc0:	f7fe fc66 	bl	8007690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dc4:	4b5b      	ldr	r3, [pc, #364]	; (8008f34 <pvPortMalloc+0x180>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dcc:	f000 f91a 	bl	8009004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dd0:	4b59      	ldr	r3, [pc, #356]	; (8008f38 <pvPortMalloc+0x184>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8092 	bne.w	8008f02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01f      	beq.n	8008e24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008de4:	2208      	movs	r2, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f023 0307 	bic.w	r3, r3, #7
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <pvPortMalloc+0x70>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	617b      	str	r3, [r7, #20]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06b      	beq.n	8008f02 <pvPortMalloc+0x14e>
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <pvPortMalloc+0x188>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d866      	bhi.n	8008f02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e34:	4b42      	ldr	r3, [pc, #264]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e38:	4b41      	ldr	r3, [pc, #260]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	e004      	b.n	8008e4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <pvPortMalloc+0xa8>
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <pvPortMalloc+0x180>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d04d      	beq.n	8008f02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d921      	bls.n	8008ecc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <pvPortMalloc+0x100>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	b672      	cpsid	i
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	b662      	cpsie	i
 8008eae:	613b      	str	r3, [r7, #16]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1ad2      	subs	r2, r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ec6:	69b8      	ldr	r0, [r7, #24]
 8008ec8:	f000 f8fe 	bl	80090c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <pvPortMalloc+0x188>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <pvPortMalloc+0x188>)
 8008ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <pvPortMalloc+0x188>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <pvPortMalloc+0x190>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d203      	bcs.n	8008eee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <pvPortMalloc+0x188>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a16      	ldr	r2, [pc, #88]	; (8008f44 <pvPortMalloc+0x190>)
 8008eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <pvPortMalloc+0x184>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f02:	f7fe fbd3 	bl	80076ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <pvPortMalloc+0x176>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	b672      	cpsid	i
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	b662      	cpsie	i
 8008f24:	60fb      	str	r3, [r7, #12]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <pvPortMalloc+0x174>
	return pvReturn;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	2000d760 	.word	0x2000d760
 8008f38:	2000d76c 	.word	0x2000d76c
 8008f3c:	2000d764 	.word	0x2000d764
 8008f40:	2000d758 	.word	0x2000d758
 8008f44:	2000d768 	.word	0x2000d768

08008f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04c      	beq.n	8008ff4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <vPortFree+0xb4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <vPortFree+0x48>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <vPortFree+0x6a>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	60bb      	str	r3, [r7, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <vPortFree+0xb4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d019      	beq.n	8008ff4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vPortFree+0xb4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd8:	f7fe fb5a 	bl	8007690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <vPortFree+0xb8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4a06      	ldr	r2, [pc, #24]	; (8009000 <vPortFree+0xb8>)
 8008fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	6938      	ldr	r0, [r7, #16]
 8008fec:	f000 f86c 	bl	80090c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ff0:	f7fe fb5c 	bl	80076ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	2000d76c 	.word	0x2000d76c
 8009000:	2000d764 	.word	0x2000d764

08009004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800900a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800900e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <prvHeapInit+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <prvHeapInit+0xac>)
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <prvHeapInit+0xb0>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <prvHeapInit+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009050:	2208      	movs	r2, #8
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <prvHeapInit+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <prvHeapInit+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <prvHeapInit+0xb4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <prvHeapInit+0xb4>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvHeapInit+0xb8>)
 8009092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <prvHeapInit+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <prvHeapInit+0xc0>)
 800909e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20001408 	.word	0x20001408
 80090b4:	2000d758 	.word	0x2000d758
 80090b8:	2000d760 	.word	0x2000d760
 80090bc:	2000d768 	.word	0x2000d768
 80090c0:	2000d764 	.word	0x2000d764
 80090c4:	2000d76c 	.word	0x2000d76c

080090c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090d0:	4b28      	ldr	r3, [pc, #160]	; (8009174 <prvInsertBlockIntoFreeList+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <prvInsertBlockIntoFreeList+0x14>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d8f7      	bhi.n	80090d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d118      	bne.n	8009150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d00d      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e008      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e003      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d002      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	2000d758 	.word	0x2000d758
 8009178:	2000d760 	.word	0x2000d760

0800917c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009180:	f00b fcbe 	bl	8014b00 <touchgfx_init>
}
 8009184:	bf00      	nop
 8009186:	bd80      	pop	{r7, pc}

08009188 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800918c:	f00b fce2 	bl	8014b54 <touchgfx_taskEntry>
}
 8009190:	bf00      	nop
 8009192:	bd80      	pop	{r7, pc}

08009194 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    {
 800919c:	4a04      	ldr	r2, [pc, #16]	; (80091b0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
    }
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	0802c78c 	.word	0x0802c78c

080091b4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    }
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff ffe9 	bl	8009194 <_ZN8touchgfx12FontProviderD1Ev>
 80091c2:	2104      	movs	r1, #4
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f021 fab6 	bl	802a736 <_ZdlPvj>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80091e0:	887b      	ldrh	r3, [r7, #2]
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d81e      	bhi.n	8009224 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	080091fd 	.word	0x080091fd
 80091f0:	08009207 	.word	0x08009207
 80091f4:	08009211 	.word	0x08009211
 80091f8:	0800921b 	.word	0x0800921b
    {
    case Typography::DEFAULT:
        // arial_20_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80091fc:	f009 fe24 	bl	8012e48 <_ZN17TypedTextDatabase8getFontsEv>
 8009200:	4603      	mov	r3, r0
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	e00f      	b.n	8009226 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // arial_30_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8009206:	f009 fe1f 	bl	8012e48 <_ZN17TypedTextDatabase8getFontsEv>
 800920a:	4603      	mov	r3, r0
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	e00a      	b.n	8009226 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // arial_10_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009210:	f009 fe1a 	bl	8012e48 <_ZN17TypedTextDatabase8getFontsEv>
 8009214:	4603      	mov	r3, r0
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	e005      	b.n	8009226 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::BIG:
        // arial_70_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800921a:	f009 fe15 	bl	8012e48 <_ZN17TypedTextDatabase8getFontsEv>
 800921e:	4603      	mov	r3, r0
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	e000      	b.n	8009226 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8009224:	2300      	movs	r3, #0
    }
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop

08009230 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // arial_10_2bpp
    static const touchgfx::FontId BIG = 3;     // arial_70_2bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	4a05      	ldr	r2, [pc, #20]	; (8009250 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff ffa7 	bl	8009194 <_ZN8touchgfx12FontProviderD1Ev>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	0802c778 	.word	0x0802c778

08009254 <_ZN23ApplicationFontProviderD0Ev>:
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff ffe7 	bl	8009230 <_ZN23ApplicationFontProviderD1Ev>
 8009262:	2104      	movs	r1, #4
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f021 fa66 	bl	802a736 <_ZdlPvj>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    {
 800927c:	4a04      	ldr	r2, [pc, #16]	; (8009290 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
    }
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	0802d824 	.word	0x0802d824

08009294 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
    }
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff ffe9 	bl	8009274 <_ZN8touchgfx4FontD1Ev>
 80092a2:	2110      	movs	r1, #16
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f021 fa46 	bl	802a736 <_ZdlPvj>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80092b4:	b590      	push	{r4, r7, lr}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80092c0:	887b      	ldrh	r3, [r7, #2]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e010      	b.n	80092ec <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	681c      	ldr	r4, [r3, #0]
 80092da:	f107 030f 	add.w	r3, r7, #15
 80092de:	f107 0210 	add.w	r2, r7, #16
 80092e2:	8879      	ldrh	r1, [r7, #2]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	47a0      	blx	r4
 80092e8:	6178      	str	r0, [r7, #20]
        return glyph;
 80092ea:	697b      	ldr	r3, [r7, #20]
    }
 80092ec:	4618      	mov	r0, r3
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	895b      	ldrh	r3, [r3, #10]
    }
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	899b      	ldrh	r3, [r3, #12]
    }
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	889b      	ldrh	r3, [r3, #4]
    }
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	889a      	ldrh	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	799b      	ldrb	r3, [r3, #6]
 800934c:	b29b      	uxth	r3, r3
 800934e:	4413      	add	r3, r2
 8009350:	b29b      	uxth	r3, r3
    }
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	79db      	ldrb	r3, [r3, #7]
 800936a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800936e:	b2db      	uxtb	r3, r3
    }
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	79db      	ldrb	r3, [r3, #7]
 8009388:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800938c:	b2db      	uxtb	r3, r3
    }
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	4a05      	ldr	r2, [pc, #20]	; (80093bc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff ff61 	bl	8009274 <_ZN8touchgfx4FontD1Ev>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	0802f9a8 	.word	0x0802f9a8

080093c0 <_ZN8touchgfx9ConstFontD0Ev>:
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff ffe7 	bl	800939c <_ZN8touchgfx9ConstFontD1Ev>
 80093ce:	2118      	movs	r1, #24
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f021 f9b0 	bl	802a736 <_ZdlPvj>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	4a05      	ldr	r2, [pc, #20]	; (8009400 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff ffd3 	bl	800939c <_ZN8touchgfx9ConstFontD1Ev>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	0802c7b0 	.word	0x0802c7b0

08009404 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff ffe7 	bl	80093e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009412:	2124      	movs	r1, #36	; 0x24
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f021 f98e 	bl	802a736 <_ZdlPvj>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
    {
 800942c:	4a04      	ldr	r2, [pc, #16]	; (8009440 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	601a      	str	r2, [r3, #0]
    }
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	0802c7a0 	.word	0x0802c7a0

08009444 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    }
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff ffe9 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
 8009452:	2108      	movs	r1, #8
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f021 f96e 	bl	802a736 <_ZdlPvj>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	4a07      	ldr	r2, [pc, #28]	; (800948c <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	889a      	ldrh	r2, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	809a      	strh	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	0802c7a0 	.word	0x0802c7a0

08009490 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
    }
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	; 0x30
 80094ac:	af08      	add	r7, sp, #32
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4611      	mov	r1, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	460b      	mov	r3, r1
 80094b8:	80fb      	strh	r3, [r7, #6]
 80094ba:	4613      	mov	r3, r2
 80094bc:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	88b9      	ldrh	r1, [r7, #4]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094c6:	9306      	str	r3, [sp, #24]
 80094c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094d6:	9303      	str	r3, [sp, #12]
 80094d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	7f3b      	ldrb	r3, [r7, #28]
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	7e3b      	ldrb	r3, [r7, #24]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	460b      	mov	r3, r1
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	f011 fe9f 	bl	801b22c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80094ee:	4a08      	ldr	r2, [pc, #32]	; (8009510 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f8:	619a      	str	r2, [r3, #24]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fe:	61da      	str	r2, [r3, #28]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009504:	621a      	str	r2, [r3, #32]
{
}
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	0802c7b0 	.word	0x0802c7b0

08009514 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	889b      	ldrh	r3, [r3, #4]
 8009528:	0adb      	lsrs	r3, r3, #11
 800952a:	b29b      	uxth	r3, r3
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4413      	add	r3, r2
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009546:	b480      	push	{r7}
 8009548:	b089      	sub	sp, #36	; 0x24
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	460b      	mov	r3, r1
 8009550:	607a      	str	r2, [r7, #4]
 8009552:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	7b1b      	ldrb	r3, [r3, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009562:	2300      	movs	r3, #0
 8009564:	e030      	b.n	80095c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	69da      	ldr	r2, [r3, #28]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	7b5b      	ldrb	r3, [r3, #13]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	b21b      	sxth	r3, r3
 8009576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800957a:	b219      	sxth	r1, r3
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	7adb      	ldrb	r3, [r3, #11]
 8009580:	b21b      	sxth	r3, r3
 8009582:	430b      	orrs	r3, r1
 8009584:	b21b      	sxth	r3, r3
 8009586:	b29b      	uxth	r3, r3
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7b1b      	ldrb	r3, [r3, #12]
 8009592:	837b      	strh	r3, [r7, #26]
 8009594:	8b7b      	ldrh	r3, [r7, #26]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d015      	beq.n	80095c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	897a      	ldrh	r2, [r7, #10]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d103      	bne.n	80095ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80095aa:	e00d      	b.n	80095c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	897a      	ldrh	r2, [r7, #10]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d306      	bcc.n	80095c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80095b6:	8b7b      	ldrh	r3, [r7, #26]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	837b      	strh	r3, [r7, #26]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	3304      	adds	r3, #4
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	e7e7      	b.n	8009594 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80095c4:	bf00      	nop
        }
    }
    return 0;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3724      	adds	r7, #36	; 0x24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_10_2bpp();

touchgfx::GeneratedFont& getFont_arial_10_2bpp()
{
    static touchgfx::GeneratedFont arial_10_2bpp(glyphs_arial_10_2bpp, 1, 10, 0, 2, 0, 0, 0, unicodes_arial_10_2bpp, kerning_arial_10_2bpp, 63, 0, 0);
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__tcf_0+0xc>)
 80095da:	f7ff ff01 	bl	80093e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	2000d770 	.word	0x2000d770

080095e4 <_Z21getFont_arial_10_2bppv>:
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont arial_10_2bpp(glyphs_arial_10_2bpp, 1, 10, 0, 2, 0, 0, 0, unicodes_arial_10_2bpp, kerning_arial_10_2bpp, 63, 0, 0);
 80095ea:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <_Z21getFont_arial_10_2bppv+0x80>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f3bf 8f5b 	dmb	ish
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02a      	beq.n	800965c <_Z21getFont_arial_10_2bppv+0x78>
 8009606:	4817      	ldr	r0, [pc, #92]	; (8009664 <_Z21getFont_arial_10_2bppv+0x80>)
 8009608:	f021 f897 	bl	802a73a <__cxa_guard_acquire>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	bf14      	ite	ne
 8009612:	2301      	movne	r3, #1
 8009614:	2300      	moveq	r3, #0
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01f      	beq.n	800965c <_Z21getFont_arial_10_2bppv+0x78>
 800961c:	2300      	movs	r3, #0
 800961e:	9309      	str	r3, [sp, #36]	; 0x24
 8009620:	2300      	movs	r3, #0
 8009622:	9308      	str	r3, [sp, #32]
 8009624:	233f      	movs	r3, #63	; 0x3f
 8009626:	9307      	str	r3, [sp, #28]
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <_Z21getFont_arial_10_2bppv+0x84>)
 800962a:	9306      	str	r3, [sp, #24]
 800962c:	4b0f      	ldr	r3, [pc, #60]	; (800966c <_Z21getFont_arial_10_2bppv+0x88>)
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	2300      	movs	r3, #0
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	2300      	movs	r3, #0
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	2300      	movs	r3, #0
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	2302      	movs	r3, #2
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	230a      	movs	r3, #10
 8009646:	2201      	movs	r2, #1
 8009648:	4909      	ldr	r1, [pc, #36]	; (8009670 <_Z21getFont_arial_10_2bppv+0x8c>)
 800964a:	480a      	ldr	r0, [pc, #40]	; (8009674 <_Z21getFont_arial_10_2bppv+0x90>)
 800964c:	f7ff ff2c 	bl	80094a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009650:	4804      	ldr	r0, [pc, #16]	; (8009664 <_Z21getFont_arial_10_2bppv+0x80>)
 8009652:	f021 f87e 	bl	802a752 <__cxa_guard_release>
 8009656:	4808      	ldr	r0, [pc, #32]	; (8009678 <_Z21getFont_arial_10_2bppv+0x94>)
 8009658:	f021 f8ba 	bl	802a7d0 <atexit>
    return arial_10_2bpp;
 800965c:	4b05      	ldr	r3, [pc, #20]	; (8009674 <_Z21getFont_arial_10_2bppv+0x90>)
}
 800965e:	4618      	mov	r0, r3
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	2000d794 	.word	0x2000d794
 8009668:	08036ba4 	.word	0x08036ba4
 800966c:	0802c7fc 	.word	0x0802c7fc
 8009670:	08036694 	.word	0x08036694
 8009674:	2000d770 	.word	0x2000d770
 8009678:	080095d5 	.word	0x080095d5

0800967c <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_20_2bpp();

touchgfx::GeneratedFont& getFont_arial_20_2bpp()
{
    static touchgfx::GeneratedFont arial_20_2bpp(glyphs_arial_20_2bpp, 13, 20, 3, 2, 0, 0, 1, unicodes_arial_20_2bpp, kerning_arial_20_2bpp, 63, 0, 0);
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__tcf_0+0xc>)
 8009682:	f7ff fead 	bl	80093e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009686:	bd80      	pop	{r7, pc}
 8009688:	2000d798 	.word	0x2000d798

0800968c <_Z21getFont_arial_20_2bppv>:
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont arial_20_2bpp(glyphs_arial_20_2bpp, 13, 20, 3, 2, 0, 0, 1, unicodes_arial_20_2bpp, kerning_arial_20_2bpp, 63, 0, 0);
 8009692:	4b1e      	ldr	r3, [pc, #120]	; (800970c <_Z21getFont_arial_20_2bppv+0x80>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f3bf 8f5b 	dmb	ish
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bf0c      	ite	eq
 80096a4:	2301      	moveq	r3, #1
 80096a6:	2300      	movne	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d02a      	beq.n	8009704 <_Z21getFont_arial_20_2bppv+0x78>
 80096ae:	4817      	ldr	r0, [pc, #92]	; (800970c <_Z21getFont_arial_20_2bppv+0x80>)
 80096b0:	f021 f843 	bl	802a73a <__cxa_guard_acquire>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bf14      	ite	ne
 80096ba:	2301      	movne	r3, #1
 80096bc:	2300      	moveq	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d01f      	beq.n	8009704 <_Z21getFont_arial_20_2bppv+0x78>
 80096c4:	2300      	movs	r3, #0
 80096c6:	9309      	str	r3, [sp, #36]	; 0x24
 80096c8:	2300      	movs	r3, #0
 80096ca:	9308      	str	r3, [sp, #32]
 80096cc:	233f      	movs	r3, #63	; 0x3f
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <_Z21getFont_arial_20_2bppv+0x84>)
 80096d2:	9306      	str	r3, [sp, #24]
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <_Z21getFont_arial_20_2bppv+0x88>)
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	2301      	movs	r3, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	2300      	movs	r3, #0
 80096de:	9303      	str	r3, [sp, #12]
 80096e0:	2300      	movs	r3, #0
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	2302      	movs	r3, #2
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2303      	movs	r3, #3
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2314      	movs	r3, #20
 80096ee:	220d      	movs	r2, #13
 80096f0:	4909      	ldr	r1, [pc, #36]	; (8009718 <_Z21getFont_arial_20_2bppv+0x8c>)
 80096f2:	480a      	ldr	r0, [pc, #40]	; (800971c <_Z21getFont_arial_20_2bppv+0x90>)
 80096f4:	f7ff fed8 	bl	80094a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80096f8:	4804      	ldr	r0, [pc, #16]	; (800970c <_Z21getFont_arial_20_2bppv+0x80>)
 80096fa:	f021 f82a 	bl	802a752 <__cxa_guard_release>
 80096fe:	4808      	ldr	r0, [pc, #32]	; (8009720 <_Z21getFont_arial_20_2bppv+0x94>)
 8009700:	f021 f866 	bl	802a7d0 <atexit>
    return arial_20_2bpp;
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <_Z21getFont_arial_20_2bppv+0x90>)
}
 8009706:	4618      	mov	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	2000d7bc 	.word	0x2000d7bc
 8009710:	08036ba8 	.word	0x08036ba8
 8009714:	0802c800 	.word	0x0802c800
 8009718:	080366a4 	.word	0x080366a4
 800971c:	2000d798 	.word	0x2000d798
 8009720:	0800967d 	.word	0x0800967d

08009724 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_30_2bpp();

touchgfx::GeneratedFont& getFont_arial_30_2bpp()
{
    static touchgfx::GeneratedFont arial_30_2bpp(glyphs_arial_30_2bpp, 39, 30, 4, 2, 0, 0, 0, unicodes_arial_30_2bpp, kerning_arial_30_2bpp, 63, 0, 0);
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__tcf_0+0xc>)
 800972a:	f7ff fe59 	bl	80093e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800972e:	bd80      	pop	{r7, pc}
 8009730:	2000d7c0 	.word	0x2000d7c0

08009734 <_Z21getFont_arial_30_2bppv>:
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont arial_30_2bpp(glyphs_arial_30_2bpp, 39, 30, 4, 2, 0, 0, 0, unicodes_arial_30_2bpp, kerning_arial_30_2bpp, 63, 0, 0);
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <_Z21getFont_arial_30_2bppv+0x80>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	f3bf 8f5b 	dmb	ish
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf0c      	ite	eq
 800974c:	2301      	moveq	r3, #1
 800974e:	2300      	movne	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d02a      	beq.n	80097ac <_Z21getFont_arial_30_2bppv+0x78>
 8009756:	4817      	ldr	r0, [pc, #92]	; (80097b4 <_Z21getFont_arial_30_2bppv+0x80>)
 8009758:	f020 ffef 	bl	802a73a <__cxa_guard_acquire>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf14      	ite	ne
 8009762:	2301      	movne	r3, #1
 8009764:	2300      	moveq	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01f      	beq.n	80097ac <_Z21getFont_arial_30_2bppv+0x78>
 800976c:	2300      	movs	r3, #0
 800976e:	9309      	str	r3, [sp, #36]	; 0x24
 8009770:	2300      	movs	r3, #0
 8009772:	9308      	str	r3, [sp, #32]
 8009774:	233f      	movs	r3, #63	; 0x3f
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	4b0f      	ldr	r3, [pc, #60]	; (80097b8 <_Z21getFont_arial_30_2bppv+0x84>)
 800977a:	9306      	str	r3, [sp, #24]
 800977c:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <_Z21getFont_arial_30_2bppv+0x88>)
 800977e:	9305      	str	r3, [sp, #20]
 8009780:	2300      	movs	r3, #0
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	2300      	movs	r3, #0
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	2300      	movs	r3, #0
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	2302      	movs	r3, #2
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	2304      	movs	r3, #4
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	231e      	movs	r3, #30
 8009796:	2227      	movs	r2, #39	; 0x27
 8009798:	4909      	ldr	r1, [pc, #36]	; (80097c0 <_Z21getFont_arial_30_2bppv+0x8c>)
 800979a:	480a      	ldr	r0, [pc, #40]	; (80097c4 <_Z21getFont_arial_30_2bppv+0x90>)
 800979c:	f7ff fe84 	bl	80094a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80097a0:	4804      	ldr	r0, [pc, #16]	; (80097b4 <_Z21getFont_arial_30_2bppv+0x80>)
 80097a2:	f020 ffd6 	bl	802a752 <__cxa_guard_release>
 80097a6:	4808      	ldr	r0, [pc, #32]	; (80097c8 <_Z21getFont_arial_30_2bppv+0x94>)
 80097a8:	f021 f812 	bl	802a7d0 <atexit>
    return arial_30_2bpp;
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <_Z21getFont_arial_30_2bppv+0x90>)
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000d7e4 	.word	0x2000d7e4
 80097b8:	08036be4 	.word	0x08036be4
 80097bc:	0802c804 	.word	0x0802c804
 80097c0:	0803675c 	.word	0x0803675c
 80097c4:	2000d7c0 	.word	0x2000d7c0
 80097c8:	08009725 	.word	0x08009725

080097cc <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_70_2bpp();

touchgfx::GeneratedFont& getFont_arial_70_2bpp()
{
    static touchgfx::GeneratedFont arial_70_2bpp(glyphs_arial_70_2bpp, 39, 70, 10, 2, 0, 0, 0, unicodes_arial_70_2bpp, kerning_arial_70_2bpp, 63, 0, 0);
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__tcf_0+0xc>)
 80097d2:	f7ff fe05 	bl	80093e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	2000d7e8 	.word	0x2000d7e8

080097dc <_Z21getFont_arial_70_2bppv>:
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont arial_70_2bpp(glyphs_arial_70_2bpp, 39, 70, 10, 2, 0, 0, 0, unicodes_arial_70_2bpp, kerning_arial_70_2bpp, 63, 0, 0);
 80097e2:	4b1e      	ldr	r3, [pc, #120]	; (800985c <_Z21getFont_arial_70_2bppv+0x80>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f3bf 8f5b 	dmb	ish
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bf0c      	ite	eq
 80097f4:	2301      	moveq	r3, #1
 80097f6:	2300      	movne	r3, #0
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02a      	beq.n	8009854 <_Z21getFont_arial_70_2bppv+0x78>
 80097fe:	4817      	ldr	r0, [pc, #92]	; (800985c <_Z21getFont_arial_70_2bppv+0x80>)
 8009800:	f020 ff9b 	bl	802a73a <__cxa_guard_acquire>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf14      	ite	ne
 800980a:	2301      	movne	r3, #1
 800980c:	2300      	moveq	r3, #0
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01f      	beq.n	8009854 <_Z21getFont_arial_70_2bppv+0x78>
 8009814:	2300      	movs	r3, #0
 8009816:	9309      	str	r3, [sp, #36]	; 0x24
 8009818:	2300      	movs	r3, #0
 800981a:	9308      	str	r3, [sp, #32]
 800981c:	233f      	movs	r3, #63	; 0x3f
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <_Z21getFont_arial_70_2bppv+0x84>)
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <_Z21getFont_arial_70_2bppv+0x88>)
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	2300      	movs	r3, #0
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	2300      	movs	r3, #0
 800982e:	9303      	str	r3, [sp, #12]
 8009830:	2300      	movs	r3, #0
 8009832:	9302      	str	r3, [sp, #8]
 8009834:	2302      	movs	r3, #2
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	230a      	movs	r3, #10
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	2346      	movs	r3, #70	; 0x46
 800983e:	2227      	movs	r2, #39	; 0x27
 8009840:	4909      	ldr	r1, [pc, #36]	; (8009868 <_Z21getFont_arial_70_2bppv+0x8c>)
 8009842:	480a      	ldr	r0, [pc, #40]	; (800986c <_Z21getFont_arial_70_2bppv+0x90>)
 8009844:	f7ff fe30 	bl	80094a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009848:	4804      	ldr	r0, [pc, #16]	; (800985c <_Z21getFont_arial_70_2bppv+0x80>)
 800984a:	f020 ff82 	bl	802a752 <__cxa_guard_release>
 800984e:	4808      	ldr	r0, [pc, #32]	; (8009870 <_Z21getFont_arial_70_2bppv+0x94>)
 8009850:	f020 ffbe 	bl	802a7d0 <atexit>
    return arial_70_2bpp;
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <_Z21getFont_arial_70_2bppv+0x90>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	2000d80c 	.word	0x2000d80c
 8009860:	08036c5c 	.word	0x08036c5c
 8009864:	0802c808 	.word	0x0802c808
 8009868:	08036980 	.word	0x08036980
 800986c:	2000d7e8 	.word	0x2000d7e8
 8009870:	080097cd 	.word	0x080097cd

08009874 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
    {
    }
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
    {
    }
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
    {
    }
 80098c2:	bf00      	nop
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
    {
    }
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
    {
    }
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
    {
    }
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    {
 8009918:	4a04      	ldr	r2, [pc, #16]	; (800992c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
    }
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	0802c914 	.word	0x0802c914

08009930 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
    }
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ffe9 	bl	8009910 <_ZN8touchgfx15UIEventListenerD1Ev>
 800993e:	2104      	movs	r1, #4
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f020 fef8 	bl	802a736 <_ZdlPvj>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800997a:	6810      	ldr	r0, [r2, #0]
 800997c:	6851      	ldr	r1, [r2, #4]
 800997e:	c303      	stmia	r3!, {r0, r1}
    };
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
    {
 8009994:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	601a      	str	r2, [r3, #0]
    }
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	0802c8fc 	.word	0x0802c8fc

080099ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
    }
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff ffe9 	bl	800998c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80099ba:	2104      	movs	r1, #4
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f020 feba 	bl	802a736 <_ZdlPvj>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
    {
        return instance;
 80099d0:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80099d2:	681b      	ldr	r3, [r3, #0]
    }
 80099d4:	4618      	mov	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20014b34 	.word	0x20014b34

080099e4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80099e8:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d008      	beq.n	8009a06 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80099f4:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80099fe:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a04:	e002      	b.n	8009a0c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8009a06:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
        }
    }
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20014b34 	.word	0x20014b34

08009a1c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009a24:	4a07      	ldr	r2, [pc, #28]	; (8009a44 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	605a      	str	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	721a      	strb	r2, [r3, #8]
    {
    }
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	0802c8d8 	.word	0x0802c8d8

08009a48 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
    {
 8009a50:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]
    }
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	0802c8d8 	.word	0x0802c8d8

08009a68 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
    }
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ffe9 	bl	8009a48 <_ZN8touchgfx10TransitionD1Ev>
 8009a76:	210c      	movs	r1, #12
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f020 fe5c 	bl	802a736 <_ZdlPvj>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    {
    }
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
    {
    }
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
    {
    }
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8009acc:	f010 fb90 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	3230      	adds	r2, #48	; 0x30
 8009ad6:	6812      	ldr	r2, [r2, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	4790      	blx	r2
    }
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	605a      	str	r2, [r3, #4]
    }
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fefd 	bl	8009910 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	0802f854 	.word	0x0802f854

08009b24 <_ZN8touchgfx11ApplicationD0Ev>:
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff ffe7 	bl	8009b00 <_ZN8touchgfx11ApplicationD1Ev>
 8009b32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f020 fdfd 	bl	802a736 <_ZdlPvj>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f010 fb6e 	bl	801a234 <_ZN8touchgfx11ApplicationC1Ev>
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8009b72:	6013      	str	r3, [r2, #0]
    }
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	0802c894 	.word	0x0802c894
 8009b84:	20014ba0 	.word	0x20014ba0

08009b88 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f804 	bl	8009b9e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00f      	beq.n	8009bd0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4798      	blx	r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e000      	b.n	8009bd2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00e      	beq.n	8009bf4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]
    }
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	4a05      	ldr	r2, [pc, #20]	; (8009c38 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff ff69 	bl	8009b00 <_ZN8touchgfx11ApplicationD1Ev>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	0802c894 	.word	0x0802c894

08009c3c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff ffe7 	bl	8009c18 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009c4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f020 fd71 	bl	802a736 <_ZdlPvj>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	4a08      	ldr	r2, [pc, #32]	; (8009c8c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 fded 	bl	800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff ffcb 	bl	8009c18 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	0802c838 	.word	0x0802c838

08009c90 <_ZN23FrontendApplicationBaseD0Ev>:
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff ffe1 	bl	8009c60 <_ZN23FrontendApplicationBaseD1Ev>
 8009c9e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f020 fd47 	bl	802a736 <_ZdlPvj>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	721a      	strb	r2, [r3, #8]
    }
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	605a      	str	r2, [r3, #4]
    }
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/settingschannel_screen/SettingsChannelView.hpp>
#include <gui/settingschannel_screen/SettingsChannelPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff ff26 	bl	8009b48 <_ZN8touchgfx14MVPApplicationC1Ev>
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f92b 	bl	8009f64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8009d1e:	f7ff fe55 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 8009d22:	4603      	mov	r3, r0
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	3208      	adds	r2, #8
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8009d30:	2000      	movs	r0, #0
 8009d32:	f009 f811 	bl	8012d58 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009d36:	f7ff fe55 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f017 ffde 	bl	8021cfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	0802c838 	.word	0x0802c838

08009d50 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff ffe9 	bl	8009d50 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	3208      	adds	r2, #8
 8009d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d92:	e883 0003 	stmia.w	r3, {r0, r1}
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <_ZN23FrontendApplicationBase29gotoLayout2ScreenNoTransitionEv>:
 */

// Layout2

void FrontendApplicationBase::gotoLayout2ScreenNoTransition()
{
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b089      	sub	sp, #36	; 0x24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLayout2ScreenNoTransitionImpl);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8009dae:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <_ZN23FrontendApplicationBase29gotoLayout2ScreenNoTransitionEv+0x50>)
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	2300      	movs	r3, #0
 8009db4:	61fb      	str	r3, [r7, #28]
 8009db6:	f107 0008 	add.w	r0, r7, #8
 8009dba:	f107 0318 	add.w	r3, r7, #24
 8009dbe:	cb0c      	ldmia	r3, {r2, r3}
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	f000 f8eb 	bl	8009f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7ff ffcb 	bl	8009d68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fd3c 	bl	800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8009de8:	bf00      	nop
 8009dea:	3724      	adds	r7, #36	; 0x24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd90      	pop	{r4, r7, pc}
 8009df0:	08009df5 	.word	0x08009df5

08009df4 <_ZN23FrontendApplicationBase33gotoLayout2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoLayout2ScreenNoTransitionImpl()
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Layout2View, Layout2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <_ZN23FrontendApplicationBase33gotoLayout2ScreenNoTransitionImplEv+0x30>)
 8009e14:	4804      	ldr	r0, [pc, #16]	; (8009e28 <_ZN23FrontendApplicationBase33gotoLayout2ScreenNoTransitionImplEv+0x34>)
 8009e16:	f000 f8f3 	bl	800a000 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20014b94 	.word	0x20014b94
 8009e28:	20014b90 	.word	0x20014b90

08009e2c <_ZN23FrontendApplicationBase29gotoLayout4ScreenNoTransitionEv>:

// Layout4

void FrontendApplicationBase::gotoLayout4ScreenNoTransition()
{
 8009e2c:	b590      	push	{r4, r7, lr}
 8009e2e:	b089      	sub	sp, #36	; 0x24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLayout4ScreenNoTransitionImpl);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <_ZN23FrontendApplicationBase29gotoLayout4ScreenNoTransitionEv+0x50>)
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	f107 0008 	add.w	r0, r7, #8
 8009e46:	f107 0318 	add.w	r3, r7, #24
 8009e4a:	cb0c      	ldmia	r3, {r2, r3}
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	f000 f8a5 	bl	8009f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4619      	mov	r1, r3
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7ff ff85 	bl	8009d68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009e5e:	f107 0308 	add.w	r3, r7, #8
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fcf6 	bl	800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8009e74:	bf00      	nop
 8009e76:	3724      	adds	r7, #36	; 0x24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}
 8009e7c:	08009e81 	.word	0x08009e81

08009e80 <_ZN23FrontendApplicationBase33gotoLayout4ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoLayout4ScreenNoTransitionImpl()
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Layout4View, Layout4Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009e94:	461a      	mov	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <_ZN23FrontendApplicationBase33gotoLayout4ScreenNoTransitionImplEv+0x30>)
 8009ea0:	4804      	ldr	r0, [pc, #16]	; (8009eb4 <_ZN23FrontendApplicationBase33gotoLayout4ScreenNoTransitionImplEv+0x34>)
 8009ea2:	f000 f9cb 	bl	800a23c <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20014b94 	.word	0x20014b94
 8009eb4:	20014b90 	.word	0x20014b90

08009eb8 <_ZN23FrontendApplicationBase37gotoLayoutSelectionScreenNoTransitionEv>:

// LayoutSelection

void FrontendApplicationBase::gotoLayoutSelectionScreenNoTransition()
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b089      	sub	sp, #36	; 0x24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLayoutSelectionScreenNoTransitionImpl);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8009ec6:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <_ZN23FrontendApplicationBase37gotoLayoutSelectionScreenNoTransitionEv+0x50>)
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	f107 0008 	add.w	r0, r7, #8
 8009ed2:	f107 0318 	add.w	r3, r7, #24
 8009ed6:	cb0c      	ldmia	r3, {r2, r3}
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	f000 f85f 	bl	8009f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff ff3f 	bl	8009d68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009eea:	f107 0308 	add.w	r3, r7, #8
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fcb0 	bl	800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8009f00:	bf00      	nop
 8009f02:	3724      	adds	r7, #36	; 0x24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd90      	pop	{r4, r7, pc}
 8009f08:	08009f0d 	.word	0x08009f0d

08009f0c <_ZN23FrontendApplicationBase41gotoLayoutSelectionScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoLayoutSelectionScreenNoTransitionImpl()
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<LayoutSelectionView, LayoutSelectionPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009f20:	461a      	mov	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <_ZN23FrontendApplicationBase41gotoLayoutSelectionScreenNoTransitionImplEv+0x30>)
 8009f2c:	4804      	ldr	r0, [pc, #16]	; (8009f40 <_ZN23FrontendApplicationBase41gotoLayoutSelectionScreenNoTransitionImplEv+0x34>)
 8009f2e:	f000 faa3 	bl	800a478 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20014b94 	.word	0x20014b94
 8009f40:	20014b90 	.word	0x20014b90

08009f44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	0802c8fc 	.word	0x0802c8fc

08009f64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ffe8 	bl	8009f44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009f74:	4a08      	ldr	r2, [pc, #32]	; (8009f98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	605a      	str	r2, [r3, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	609a      	str	r2, [r3, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60da      	str	r2, [r3, #12]
    {
    }
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	0802c87c 	.word	0x0802c87c

08009f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff ffc8 	bl	8009f44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009fb4:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	463a      	mov	r2, r7
 8009fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	0802c87c 	.word	0x0802c87c

08009fdc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fd18 	bl	8009a1c <_ZN8touchgfx10TransitionC1Ev>
 8009fec:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	0802c814 	.word	0x0802c814

0800a000 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b08f      	sub	sp, #60	; 0x3c
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3320      	adds	r3, #32
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
 800a020:	4603      	mov	r3, r0
 800a022:	f246 4227 	movw	r2, #25639	; 0x6427
 800a026:	4293      	cmp	r3, r2
 800a028:	d805      	bhi.n	800a036 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800a02a:	4b7f      	ldr	r3, [pc, #508]	; (800a228 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a02c:	4a7f      	ldr	r2, [pc, #508]	; (800a22c <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a02e:	21a7      	movs	r1, #167	; 0xa7
 800a030:	487f      	ldr	r0, [pc, #508]	; (800a230 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a032:	f020 fbaf 	bl	802a794 <__assert_func>
 800a036:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3320      	adds	r3, #32
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4610      	mov	r0, r2
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b0f      	cmp	r3, #15
 800a04e:	d805      	bhi.n	800a05c <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800a050:	4b78      	ldr	r3, [pc, #480]	; (800a234 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800a052:	4a76      	ldr	r2, [pc, #472]	; (800a22c <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a054:	21a8      	movs	r1, #168	; 0xa8
 800a056:	4876      	ldr	r0, [pc, #472]	; (800a230 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a058:	f020 fb9c 	bl	802a794 <__assert_func>
 800a05c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3320      	adds	r3, #32
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4610      	mov	r0, r2
 800a06e:	4798      	blx	r3
 800a070:	4603      	mov	r3, r0
 800a072:	2b0b      	cmp	r3, #11
 800a074:	d805      	bhi.n	800a082 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800a076:	4b70      	ldr	r3, [pc, #448]	; (800a238 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800a078:	4a6c      	ldr	r2, [pc, #432]	; (800a22c <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a07a:	21a9      	movs	r1, #169	; 0xa9
 800a07c:	486c      	ldr	r0, [pc, #432]	; (800a230 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a07e:	f020 fb89 	bl	802a794 <__assert_func>
 800a082:	bf00      	nop
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a090:	f010 f8ae 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 800a094:	4603      	mov	r3, r0
 800a096:	4618      	mov	r0, r3
 800a098:	f010 f8b0 	bl	801a1fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4798      	blx	r3
    if (*currentTrans)
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4798      	blx	r3
    if (*currentScreen)
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3314      	adds	r3, #20
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
    if (*currentPresenter)
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d008      	beq.n	800a102 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4610      	mov	r0, r2
 800a100:	4798      	blx	r3
    if (*currentScreen)
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4610      	mov	r0, r2
 800a118:	4798      	blx	r3
    if (*currentPresenter)
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
}
 800a134:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2100      	movs	r1, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fab7 	bl	800a6b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a142:	4603      	mov	r3, r0
 800a144:	4619      	mov	r1, r3
 800a146:	200c      	movs	r0, #12
 800a148:	f7ff fb94 	bl	8009874 <_ZnwjPv>
 800a14c:	4604      	mov	r4, r0
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff ff44 	bl	8009fdc <_ZN8touchgfx12NoTransitionC1Ev>
 800a154:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2100      	movs	r1, #0
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 faba 	bl	800a6d6 <_ZN8touchgfx17AbstractPartition2atI11Layout2ViewEERT_t>
 800a162:	4603      	mov	r3, r0
 800a164:	4619      	mov	r1, r3
 800a166:	f246 4028 	movw	r0, #25640	; 0x6428
 800a16a:	f7ff fb83 	bl	8009874 <_ZnwjPv>
 800a16e:	4604      	mov	r4, r0
 800a170:	4620      	mov	r0, r4
 800a172:	f009 f87b 	bl	801326c <_ZN11Layout2ViewC1Ev>
 800a176:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fabc 	bl	800a6fc <_ZN8touchgfx17AbstractPartition2atI16Layout2PresenterEERT_t>
 800a184:	4603      	mov	r3, r0
 800a186:	4619      	mov	r1, r3
 800a188:	2010      	movs	r0, #16
 800a18a:	f7ff fb73 	bl	8009874 <_ZnwjPv>
 800a18e:	4604      	mov	r4, r0
 800a190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a192:	4620      	mov	r0, r4
 800a194:	f009 f812 	bl	80131bc <_ZN16Layout2PresenterC1ER11Layout2View>
 800a198:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a19e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1aa:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	e000      	b.n	800a1ba <_ZN8touchgfx14makeTransitionI11Layout2View16Layout2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a1be:	f7ff fd1d 	bl	8009bfc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fd7f 	bl	8009ccc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 faa5 	bl	800a722 <_ZN8touchgfx4ViewI16Layout2PresenterE4bindERS1_>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	61fb      	str	r3, [r7, #28]
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	61bb      	str	r3, [r7, #24]
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69f8      	ldr	r0, [r7, #28]
 800a1ee:	4798      	blx	r3
    newPresenter->activate();
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69b8      	ldr	r0, [r7, #24]
 800a1f8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a1fa:	6979      	ldr	r1, [r7, #20]
 800a1fc:	69f8      	ldr	r0, [r7, #28]
 800a1fe:	f011 fcba 	bl	801bb76 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3310      	adds	r3, #16
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	4798      	blx	r3
    newTransition->invalidate();
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	4798      	blx	r3
}
 800a21a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a21e:	4618      	mov	r0, r3
 800a220:	373c      	adds	r7, #60	; 0x3c
 800a222:	46bd      	mov	sp, r7
 800a224:	bd90      	pop	{r4, r7, pc}
 800a226:	bf00      	nop
 800a228:	0802b908 	.word	0x0802b908
 800a22c:	0802b998 	.word	0x0802b998
 800a230:	0802ba9c 	.word	0x0802ba9c
 800a234:	0802bae0 	.word	0x0802bae0
 800a238:	0802bb84 	.word	0x0802bb84

0800a23c <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a23c:	b590      	push	{r4, r7, lr}
 800a23e:	b08f      	sub	sp, #60	; 0x3c
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3320      	adds	r3, #32
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	4603      	mov	r3, r0
 800a25e:	f246 12bf 	movw	r2, #25023	; 0x61bf
 800a262:	4293      	cmp	r3, r2
 800a264:	d805      	bhi.n	800a272 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800a266:	4b7f      	ldr	r3, [pc, #508]	; (800a464 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a268:	4a7f      	ldr	r2, [pc, #508]	; (800a468 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a26a:	21a7      	movs	r1, #167	; 0xa7
 800a26c:	487f      	ldr	r0, [pc, #508]	; (800a46c <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a26e:	f020 fa91 	bl	802a794 <__assert_func>
 800a272:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3320      	adds	r3, #32
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4610      	mov	r0, r2
 800a284:	4798      	blx	r3
 800a286:	4603      	mov	r3, r0
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d805      	bhi.n	800a298 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800a28c:	4b78      	ldr	r3, [pc, #480]	; (800a470 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800a28e:	4a76      	ldr	r2, [pc, #472]	; (800a468 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a290:	21a8      	movs	r1, #168	; 0xa8
 800a292:	4876      	ldr	r0, [pc, #472]	; (800a46c <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a294:	f020 fa7e 	bl	802a794 <__assert_func>
 800a298:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3320      	adds	r3, #32
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b0b      	cmp	r3, #11
 800a2b0:	d805      	bhi.n	800a2be <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800a2b2:	4b70      	ldr	r3, [pc, #448]	; (800a474 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800a2b4:	4a6c      	ldr	r2, [pc, #432]	; (800a468 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a2b6:	21a9      	movs	r1, #169	; 0xa9
 800a2b8:	486c      	ldr	r0, [pc, #432]	; (800a46c <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a2ba:	f020 fa6b 	bl	802a794 <__assert_func>
 800a2be:	bf00      	nop
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a2cc:	f00f ff90 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f00f ff92 	bl	801a1fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d008      	beq.n	800a2f2 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	330c      	adds	r3, #12
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4798      	blx	r3
    if (*currentTrans)
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4610      	mov	r0, r2
 800a308:	4798      	blx	r3
    if (*currentScreen)
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d008      	beq.n	800a324 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3314      	adds	r3, #20
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4610      	mov	r0, r2
 800a322:	4798      	blx	r3
    if (*currentPresenter)
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d008      	beq.n	800a33e <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3304      	adds	r3, #4
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4610      	mov	r0, r2
 800a33c:	4798      	blx	r3
    if (*currentScreen)
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d007      	beq.n	800a356 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
    if (*currentPresenter)
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d008      	beq.n	800a370 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
}
 800a370:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2100      	movs	r1, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 f999 	bl	800a6b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a37e:	4603      	mov	r3, r0
 800a380:	4619      	mov	r1, r3
 800a382:	200c      	movs	r0, #12
 800a384:	f7ff fa76 	bl	8009874 <_ZnwjPv>
 800a388:	4604      	mov	r4, r0
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff fe26 	bl	8009fdc <_ZN8touchgfx12NoTransitionC1Ev>
 800a390:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f9d0 	bl	800a73e <_ZN8touchgfx17AbstractPartition2atI11Layout4ViewEERT_t>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f246 10c0 	movw	r0, #25024	; 0x61c0
 800a3a6:	f7ff fa65 	bl	8009874 <_ZnwjPv>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f009 f813 	bl	80133d8 <_ZN11Layout4ViewC1Ev>
 800a3b2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f9d2 	bl	800a764 <_ZN8touchgfx17AbstractPartition2atI16Layout4PresenterEERT_t>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f7ff fa55 	bl	8009874 <_ZnwjPv>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f008 ffaa 	bl	8013328 <_ZN16Layout4PresenterC1ER11Layout4View>
 800a3d4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3da:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3e0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	e000      	b.n	800a3f6 <_ZN8touchgfx14makeTransitionI11Layout4View16Layout4PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a3fa:	f7ff fbff 	bl	8009bfc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	3304      	adds	r3, #4
 800a402:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff fc61 	bl	8009ccc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f9bb 	bl	800a78a <_ZN8touchgfx4ViewI16Layout4PresenterE4bindERS1_>
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	61fb      	str	r3, [r7, #28]
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	61bb      	str	r3, [r7, #24]
 800a41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	330c      	adds	r3, #12
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	69f8      	ldr	r0, [r7, #28]
 800a42a:	4798      	blx	r3
    newPresenter->activate();
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69b8      	ldr	r0, [r7, #24]
 800a434:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a436:	6979      	ldr	r1, [r7, #20]
 800a438:	69f8      	ldr	r0, [r7, #28]
 800a43a:	f011 fb9c 	bl	801bb76 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3310      	adds	r3, #16
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	4798      	blx	r3
    newTransition->invalidate();
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3314      	adds	r3, #20
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	4798      	blx	r3
}
 800a456:	bf00      	nop
    return newPresenter;
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	373c      	adds	r7, #60	; 0x3c
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd90      	pop	{r4, r7, pc}
 800a462:	bf00      	nop
 800a464:	0802b908 	.word	0x0802b908
 800a468:	0802bc28 	.word	0x0802bc28
 800a46c:	0802ba9c 	.word	0x0802ba9c
 800a470:	0802bae0 	.word	0x0802bae0
 800a474:	0802bb84 	.word	0x0802bb84

0800a478 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b08f      	sub	sp, #60	; 0x3c
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3320      	adds	r3, #32
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
 800a498:	4603      	mov	r3, r0
 800a49a:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800a49e:	d205      	bcs.n	800a4ac <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800a4a0:	4b7e      	ldr	r3, [pc, #504]	; (800a69c <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a4a2:	4a7f      	ldr	r2, [pc, #508]	; (800a6a0 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a4a4:	21a7      	movs	r1, #167	; 0xa7
 800a4a6:	487f      	ldr	r0, [pc, #508]	; (800a6a4 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a4a8:	f020 f974 	bl	802a794 <__assert_func>
 800a4ac:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3320      	adds	r3, #32
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4798      	blx	r3
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	d805      	bhi.n	800a4d2 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800a4c6:	4b78      	ldr	r3, [pc, #480]	; (800a6a8 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a4c8:	4a75      	ldr	r2, [pc, #468]	; (800a6a0 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a4ca:	21a8      	movs	r1, #168	; 0xa8
 800a4cc:	4875      	ldr	r0, [pc, #468]	; (800a6a4 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a4ce:	f020 f961 	bl	802a794 <__assert_func>
 800a4d2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3320      	adds	r3, #32
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b0b      	cmp	r3, #11
 800a4ea:	d805      	bhi.n	800a4f8 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800a4ec:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800a4ee:	4a6c      	ldr	r2, [pc, #432]	; (800a6a0 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a4f0:	21a9      	movs	r1, #169	; 0xa9
 800a4f2:	486c      	ldr	r0, [pc, #432]	; (800a6a4 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a4f4:	f020 f94e 	bl	802a794 <__assert_func>
 800a4f8:	bf00      	nop
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	627b      	str	r3, [r7, #36]	; 0x24
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a506:	f00f fe73 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 800a50a:	4603      	mov	r3, r0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f00f fe75 	bl	801a1fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330c      	adds	r3, #12
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4610      	mov	r0, r2
 800a52a:	4798      	blx	r3
    if (*currentTrans)
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
    if (*currentScreen)
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d008      	beq.n	800a55e <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3314      	adds	r3, #20
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4610      	mov	r0, r2
 800a55c:	4798      	blx	r3
    if (*currentPresenter)
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3304      	adds	r3, #4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4610      	mov	r0, r2
 800a576:	4798      	blx	r3
    if (*currentScreen)
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
    if (*currentPresenter)
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d008      	beq.n	800a5aa <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	4798      	blx	r3
}
 800a5aa:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f87c 	bl	800a6b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	200c      	movs	r0, #12
 800a5be:	f7ff f959 	bl	8009874 <_ZnwjPv>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7ff fd09 	bl	8009fdc <_ZN8touchgfx12NoTransitionC1Ev>
 800a5ca:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f8e7 	bl	800a7a6 <_ZN8touchgfx17AbstractPartition2atI19LayoutSelectionViewEERT_t>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f44f 6092 	mov.w	r0, #1168	; 0x490
 800a5e0:	f7ff f948 	bl	8009874 <_ZnwjPv>
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f008 ffac 	bl	8013544 <_ZN19LayoutSelectionViewC1Ev>
 800a5ec:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f8e9 	bl	800a7cc <_ZN8touchgfx17AbstractPartition2atI24LayoutSelectionPresenterEERT_t>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	2010      	movs	r0, #16
 800a600:	f7ff f938 	bl	8009874 <_ZnwjPv>
 800a604:	4604      	mov	r4, r0
 800a606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a608:	4620      	mov	r0, r4
 800a60a:	f008 ff43 	bl	8013494 <_ZN24LayoutSelectionPresenterC1ER19LayoutSelectionView>
 800a60e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a614:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a61a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a620:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	3304      	adds	r3, #4
 800a62c:	e000      	b.n	800a630 <_ZN8touchgfx14makeTransitionI19LayoutSelectionView24LayoutSelectionPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800a62e:	2300      	movs	r3, #0
 800a630:	4619      	mov	r1, r3
 800a632:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a634:	f7ff fae2 	bl	8009bfc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	3304      	adds	r3, #4
 800a63c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fb44 	bl	8009ccc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f8d2 	bl	800a7f2 <_ZN8touchgfx4ViewI24LayoutSelectionPresenterE4bindERS1_>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	61bb      	str	r3, [r7, #24]
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	330c      	adds	r3, #12
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69f8      	ldr	r0, [r7, #28]
 800a664:	4798      	blx	r3
    newPresenter->activate();
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a670:	6979      	ldr	r1, [r7, #20]
 800a672:	69f8      	ldr	r0, [r7, #28]
 800a674:	f011 fa7f 	bl	801bb76 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3310      	adds	r3, #16
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6978      	ldr	r0, [r7, #20]
 800a682:	4798      	blx	r3
    newTransition->invalidate();
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3314      	adds	r3, #20
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6978      	ldr	r0, [r7, #20]
 800a68e:	4798      	blx	r3
}
 800a690:	bf00      	nop
    return newPresenter;
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a694:	4618      	mov	r0, r3
 800a696:	373c      	adds	r7, #60	; 0x3c
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd90      	pop	{r4, r7, pc}
 800a69c:	0802b908 	.word	0x0802b908
 800a6a0:	0802bd2c 	.word	0x0802bd2c
 800a6a4:	0802ba9c 	.word	0x0802ba9c
 800a6a8:	0802bae0 	.word	0x0802bae0
 800a6ac:	0802bb84 	.word	0x0802bb84

0800a6b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3324      	adds	r3, #36	; 0x24
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	887a      	ldrh	r2, [r7, #2]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
 800a6cc:	4603      	mov	r3, r0
    }
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZN8touchgfx17AbstractPartition2atI11Layout2ViewEERT_t>:
    T& at(const uint16_t index)
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3324      	adds	r3, #36	; 0x24
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	887a      	ldrh	r2, [r7, #2]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
 800a6f2:	4603      	mov	r3, r0
    }
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <_ZN8touchgfx17AbstractPartition2atI16Layout2PresenterEERT_t>:
    T& at(const uint16_t index)
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3324      	adds	r3, #36	; 0x24
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	887a      	ldrh	r2, [r7, #2]
 800a712:	4611      	mov	r1, r2
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
 800a718:	4603      	mov	r3, r0
    }
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_ZN8touchgfx4ViewI16Layout2PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <_ZN8touchgfx17AbstractPartition2atI11Layout4ViewEERT_t>:
    T& at(const uint16_t index)
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	887a      	ldrh	r2, [r7, #2]
 800a754:	4611      	mov	r1, r2
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
 800a75a:	4603      	mov	r3, r0
    }
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <_ZN8touchgfx17AbstractPartition2atI16Layout4PresenterEERT_t>:
    T& at(const uint16_t index)
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3324      	adds	r3, #36	; 0x24
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	887a      	ldrh	r2, [r7, #2]
 800a77a:	4611      	mov	r1, r2
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	4798      	blx	r3
 800a780:	4603      	mov	r3, r0
    }
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <_ZN8touchgfx4ViewI16Layout4PresenterE4bindERS1_>:
    void bind(T& presenter)
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <_ZN8touchgfx17AbstractPartition2atI19LayoutSelectionViewEERT_t>:
    T& at(const uint16_t index)
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3324      	adds	r3, #36	; 0x24
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	887a      	ldrh	r2, [r7, #2]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
 800a7c2:	4603      	mov	r3, r0
    }
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <_ZN8touchgfx17AbstractPartition2atI24LayoutSelectionPresenterEERT_t>:
    T& at(const uint16_t index)
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3324      	adds	r3, #36	; 0x24
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	887a      	ldrh	r2, [r7, #2]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
 800a7e8:	4603      	mov	r3, r0
    }
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <_ZN8touchgfx4ViewI24LayoutSelectionPresenterE4bindERS1_>:
    void bind(T& presenter)
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
	...

0800a810 <_ZN8touchgfx12NoTransitionD1Ev>:
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	4a05      	ldr	r2, [pc, #20]	; (800a830 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff f911 	bl	8009a48 <_ZN8touchgfx10TransitionD1Ev>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	0802c814 	.word	0x0802c814

0800a834 <_ZN8touchgfx12NoTransitionD0Ev>:
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff ffe7 	bl	800a810 <_ZN8touchgfx12NoTransitionD1Ev>
 800a842:	210c      	movs	r1, #12
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f01f ff76 	bl	802a736 <_ZdlPvj>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	4a05      	ldr	r2, [pc, #20]	; (800a874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff f891 	bl	800998c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	0802c87c 	.word	0x0802c87c

0800a878 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff ffe7 	bl	800a854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a886:	2110      	movs	r1, #16
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f01f ff54 	bl	802a736 <_ZdlPvj>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	68d2      	ldr	r2, [r2, #12]
 800a8a8:	1052      	asrs	r2, r2, #1
 800a8aa:	1899      	adds	r1, r3, r2
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	e00a      	b.n	800a8d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	68d2      	ldr	r2, [r2, #12]
 800a8c6:	1052      	asrs	r2, r2, #1
 800a8c8:	4413      	add	r3, r2
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6892      	ldr	r2, [r2, #8]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	4798      	blx	r3
    }
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d010      	beq.n	800a912 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d107      	bne.n	800a908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a908:	2300      	movs	r3, #0
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d001      	beq.n	800a912 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a912:	2300      	movs	r3, #0
    }
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
        : color(0)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
    {
    }
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	601a      	str	r2, [r3, #0]
    }
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
    {
        return color;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
    }
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a972:	b480      	push	{r7}
 800a974:	b083      	sub	sp, #12
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	801a      	strh	r2, [r3, #0]
        y = 0;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	805a      	strh	r2, [r3, #2]
        width = 0;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	809a      	strh	r2, [r3, #4]
        height = 0;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	80da      	strh	r2, [r3, #6]
    }
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	817b      	strh	r3, [r7, #10]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	813b      	strh	r3, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	897a      	ldrh	r2, [r7, #10]
 800a9be:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	893a      	ldrh	r2, [r7, #8]
 800a9c4:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	88fa      	ldrh	r2, [r7, #6]
 800a9ca:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8b3a      	ldrh	r2, [r7, #24]
 800a9d0:	80da      	strh	r2, [r3, #6]
    }
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	791b      	ldrb	r3, [r3, #4]
    }
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	887a      	ldrh	r2, [r7, #2]
 800aa08:	801a      	strh	r2, [r3, #0]
    {
    }
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800aa20:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	1d18      	adds	r0, r3, #4
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2200      	movs	r2, #0
 800aa32:	2100      	movs	r1, #0
 800aa34:	f7ff ffb4 	bl	800a9a0 <_ZN8touchgfx4RectC1Essss>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	330c      	adds	r3, #12
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff ff98 	bl	800a972 <_ZN8touchgfx4RectC1Ev>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	615a      	str	r2, [r3, #20]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	619a      	str	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	61da      	str	r2, [r3, #28]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0802f944 	.word	0x0802f944

0800aa74 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
    {
 800aa7c:	4a04      	ldr	r2, [pc, #16]	; (800aa90 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
    }
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	0802f944 	.word	0x0802f944

0800aa94 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
    }
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ffe9 	bl	800aa74 <_ZN8touchgfx8DrawableD1Ev>
 800aaa2:	2128      	movs	r1, #40	; 0x28
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f01f fe46 	bl	802a736 <_ZdlPvj>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aabc:	2300      	movs	r3, #0
    }
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	461a      	mov	r2, r3
 800aad8:	4603      	mov	r3, r0
 800aada:	817b      	strh	r3, [r7, #10]
 800aadc:	460b      	mov	r3, r1
 800aade:	813b      	strh	r3, [r7, #8]
 800aae0:	4613      	mov	r3, r2
 800aae2:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800aae4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800aae8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaec:	4619      	mov	r1, r3
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f844 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800aaf4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aaf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aafc:	4619      	mov	r1, r3
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f898 	bl	800ac34 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800ab04:	bf00      	nop
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800ab34:	4618      	mov	r0, r3
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	887a      	ldrh	r2, [r7, #2]
 800ab50:	809a      	strh	r2, [r3, #4]
    }
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	887a      	ldrh	r2, [r7, #2]
 800ab6e:	80da      	strh	r2, [r3, #6]
    }
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	807b      	strh	r3, [r7, #2]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	332c      	adds	r3, #44	; 0x2c
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ab98:	4611      	mov	r1, r2
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
        setY(y);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3330      	adds	r3, #48	; 0x30
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800abaa:	4611      	mov	r1, r2
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	4798      	blx	r3
    }
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	887a      	ldrh	r2, [r7, #2]
 800abc8:	811a      	strh	r2, [r3, #8]
    }
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	887a      	ldrh	r2, [r7, #2]
 800abe6:	815a      	strh	r2, [r3, #10]
    }
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
    {
    }
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
    {
    }
 800ac12:	bf00      	nop
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
    {
    }
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	807b      	strh	r3, [r7, #2]
 800ac40:	4613      	mov	r3, r2
 800ac42:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3334      	adds	r3, #52	; 0x34
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ac50:	4611      	mov	r1, r2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
        setHeight(height);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3338      	adds	r3, #56	; 0x38
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ac62:	4611      	mov	r1, r2
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
    }
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
    {
    }
 800ac7a:	bf00      	nop
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
    {
    }
 800ac8e:	bf00      	nop
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	807b      	strh	r3, [r7, #2]
 800acfa:	4613      	mov	r3, r2
 800acfc:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3350      	adds	r3, #80	; 0x50
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	8879      	ldrh	r1, [r7, #2]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	1a8a      	subs	r2, r1, r2
 800ad12:	b292      	uxth	r2, r2
 800ad14:	b210      	sxth	r0, r2
 800ad16:	8839      	ldrh	r1, [r7, #0]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ad1e:	b292      	uxth	r2, r2
 800ad20:	1a8a      	subs	r2, r1, r2
 800ad22:	b292      	uxth	r2, r2
 800ad24:	b212      	sxth	r2, r2
 800ad26:	4601      	mov	r1, r0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
    }
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad42:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad4a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad52:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f7ff ffe1 	bl	800ad34 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	601a      	str	r2, [r3, #0]
    }
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff fe40 	bl	800aa18 <_ZN8touchgfx8DrawableC1Ev>
 800ad98:	4a05      	ldr	r2, [pc, #20]	; (800adb0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	0802e15c 	.word	0x0802e15c

0800adb4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	607b      	str	r3, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	817b      	strh	r3, [r7, #10]
 800adf2:	4613      	mov	r3, r2
 800adf4:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ff5e 	bl	800acba <_ZNK8touchgfx8Drawable9isVisibleEv>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d008      	beq.n	800ae16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff ff64 	bl	800acd4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	601a      	str	r2, [r3, #0]
        }
    }
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff fdee 	bl	800aa18 <_ZN8touchgfx8DrawableC1Ev>
 800ae3c:	4a03      	ldr	r2, [pc, #12]	; (800ae4c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	0802d058 	.word	0x0802d058

0800ae50 <_ZN8touchgfx6WidgetD1Ev>:
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	4a05      	ldr	r2, [pc, #20]	; (800ae70 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fe07 	bl	800aa74 <_ZN8touchgfx8DrawableD1Ev>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0802d058 	.word	0x0802d058

0800ae74 <_ZN8touchgfx6WidgetD0Ev>:
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ffe7 	bl	800ae50 <_ZN8touchgfx6WidgetD1Ev>
 800ae82:	2128      	movs	r1, #40	; 0x28
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f01f fc56 	bl	802a736 <_ZdlPvj>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	2326      	movs	r3, #38	; 0x26
 800aea2:	461a      	mov	r2, r3
 800aea4:	2100      	movs	r1, #0
 800aea6:	f01f fd01 	bl	802a8ac <memset>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff ffbd 	bl	800ae2c <_ZN8touchgfx6WidgetC1Ev>
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	22ff      	movs	r2, #255	; 0xff
 800aebc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3328      	adds	r3, #40	; 0x28
 800aec4:	2100      	movs	r1, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff fd38 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	0802f48c 	.word	0x0802f48c

0800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	78fa      	ldrb	r2, [r7, #3]
 800af08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800af24:	4a06      	ldr	r2, [pc, #24]	; (800af40 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	887a      	ldrh	r2, [r7, #2]
 800af2e:	809a      	strh	r2, [r3, #4]
    }
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	0802c7a0 	.word	0x0802c7a0

0800af44 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	2326      	movs	r3, #38	; 0x26
 800af52:	461a      	mov	r2, r3
 800af54:	2100      	movs	r1, #0
 800af56:	f01f fca9 	bl	802a8ac <memset>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff ff65 	bl	800ae2c <_ZN8touchgfx6WidgetC1Ev>
 800af62:	4a14      	ldr	r2, [pc, #80]	; (800afb4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3328      	adds	r3, #40	; 0x28
 800af6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff ffd1 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	3330      	adds	r3, #48	; 0x30
 800af7a:	2100      	movs	r1, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fcdd 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	869a      	strh	r2, [r3, #52]	; 0x34
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	22ff      	movs	r2, #255	; 0xff
 800af8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	0802f3e4 	.word	0x0802f3e4

0800afb8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800afc2:	2300      	movs	r3, #0
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	2300      	movs	r3, #0
 800afc8:	2200      	movs	r2, #0
 800afca:	2100      	movs	r1, #0
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fce7 	bl	800a9a0 <_ZN8touchgfx4RectC1Essss>
    }
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800afdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800afe8:	687e      	ldr	r6, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3330      	adds	r3, #48	; 0x30
 800aff0:	681c      	ldr	r4, [r3, #0]
 800aff2:	887d      	ldrh	r5, [r7, #2]
 800aff4:	f107 030c 	add.w	r3, r7, #12
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4618      	mov	r0, r3
 800affc:	f000 f866 	bl	800b0cc <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	617b      	str	r3, [r7, #20]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800b006:	4b1b      	ldr	r3, [pc, #108]	; (800b074 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d105      	bne.n	800b01a <_ZN8touchgfx8TextArea12setBaselineYEs+0x3e>
 800b00e:	4b1a      	ldr	r3, [pc, #104]	; (800b078 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800b010:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800b012:	21b1      	movs	r1, #177	; 0xb1
 800b014:	481a      	ldr	r0, [pc, #104]	; (800b080 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800b016:	f01f fbbd 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	889a      	ldrh	r2, [r3, #4]
 800b01e:	4b19      	ldr	r3, [pc, #100]	; (800b084 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d305      	bcc.n	800b032 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
 800b026:	4b18      	ldr	r3, [pc, #96]	; (800b088 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800b028:	4a14      	ldr	r2, [pc, #80]	; (800b07c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800b02a:	21b2      	movs	r1, #178	; 0xb2
 800b02c:	4814      	ldr	r0, [pc, #80]	; (800b080 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800b02e:	f01f fbb1 	bl	802a794 <__assert_func>
    }
 800b032:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800b034:	4b15      	ldr	r3, [pc, #84]	; (800b08c <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800b03a:	6819      	ldr	r1, [r3, #0]
 800b03c:	8a3b      	ldrh	r3, [r7, #16]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	440b      	add	r3, r1
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	322c      	adds	r2, #44	; 0x2c
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	4790      	blx	r2
 800b054:	4603      	mov	r3, r0
 800b056:	1aeb      	subs	r3, r5, r3
 800b058:	b29b      	uxth	r3, r3
 800b05a:	b21b      	sxth	r3, r3
 800b05c:	4619      	mov	r1, r3
 800b05e:	4630      	mov	r0, r6
 800b060:	47a0      	blx	r4
 800b062:	f107 030c 	add.w	r3, r7, #12
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe f9dc 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    }
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b074:	20014ba4 	.word	0x20014ba4
 800b078:	0802be40 	.word	0x0802be40
 800b07c:	0802be84 	.word	0x0802be84
 800b080:	0802beb4 	.word	0x0802beb4
 800b084:	20014ba8 	.word	0x20014ba8
 800b088:	0802bef8 	.word	0x0802bef8
 800b08c:	20014bac 	.word	0x20014bac

0800b090 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	807b      	strh	r3, [r7, #2]
 800b09c:	4613      	mov	r3, r2
 800b09e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	332c      	adds	r3, #44	; 0x2c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
        setBaselineY(baselineY);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	335c      	adds	r3, #92	; 0x5c
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
    }
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
    {
        return typedText;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	3328      	adds	r3, #40	; 0x28
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7fe f9c1 	bl	8009464 <_ZN8touchgfx9TypedTextC1ERKS0_>
    }
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	4a08      	ldr	r2, [pc, #32]	; (800b118 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3328      	adds	r3, #40	; 0x28
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe f990 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff fea2 	bl	800ae50 <_ZN8touchgfx6WidgetD1Ev>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	0802f3e4 	.word	0x0802f3e4

0800b11c <_ZN8touchgfx8TextAreaD0Ev>:
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff ffe1 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 800b12a:	213c      	movs	r1, #60	; 0x3c
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f01f fb02 	bl	802a736 <_ZdlPvj>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff fefc 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 800b14c:	4a05      	ldr	r2, [pc, #20]	; (800b164 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	0802f4f0 	.word	0x0802f4f0

0800b168 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:

    virtual int16_t getTextHeight()
 800b168:	b5b0      	push	{r4, r5, r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard, 0) : 0;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3328      	adds	r3, #40	; 0x28
 800b174:	617b      	str	r3, [r7, #20]
        return typedTextId != TYPED_TEXT_INVALID;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	889b      	ldrh	r3, [r3, #4]
 800b17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b17e:	4293      	cmp	r3, r2
 800b180:	bf14      	ite	ne
 800b182:	2301      	movne	r3, #1
 800b184:	2300      	moveq	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d031      	beq.n	800b1f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x88>
 800b18c:	687d      	ldr	r5, [r7, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	336c      	adds	r3, #108	; 0x6c
 800b194:	681c      	ldr	r4, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3328      	adds	r3, #40	; 0x28
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800b1a0:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x94>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800b1a8:	4b15      	ldr	r3, [pc, #84]	; (800b200 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x98>)
 800b1aa:	4a16      	ldr	r2, [pc, #88]	; (800b204 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x9c>)
 800b1ac:	21b1      	movs	r1, #177	; 0xb1
 800b1ae:	4816      	ldr	r0, [pc, #88]	; (800b208 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0xa0>)
 800b1b0:	f01f faf0 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	889a      	ldrh	r2, [r3, #4]
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0xa4>)
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d305      	bcc.n	800b1cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>
 800b1c0:	4b13      	ldr	r3, [pc, #76]	; (800b210 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0xa8>)
 800b1c2:	4a10      	ldr	r2, [pc, #64]	; (800b204 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x9c>)
 800b1c4:	21b2      	movs	r1, #178	; 0xb2
 800b1c6:	4810      	ldr	r0, [pc, #64]	; (800b208 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0xa0>)
 800b1c8:	f01f fae4 	bl	802a794 <__assert_func>
    }
 800b1cc:	bf00      	nop
        return texts->getText(typedTextId);
 800b1ce:	4b11      	ldr	r3, [pc, #68]	; (800b214 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0xac>)
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	889b      	ldrh	r3, [r3, #4]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4610      	mov	r0, r2
 800b1da:	f007 fe13 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800b1de:	4601      	mov	r1, r0
 800b1e0:	bf00      	nop
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47a0      	blx	r4
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	e000      	b.n	800b1f2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x8a>
 800b1f0:	2300      	movs	r3, #0
    }
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20014ba4 	.word	0x20014ba4
 800b200:	0802be40 	.word	0x0802be40
 800b204:	0802be84 	.word	0x0802be84
 800b208:	0802beb4 	.word	0x0802beb4
 800b20c:	20014ba8 	.word	0x20014ba8
 800b210:	0802bef8 	.word	0x0802bef8
 800b214:	20014bb0 	.word	0x20014bb0

0800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
    const Unicode::UnicodeChar* getWildcard() const
    {
        return wildcard;
    }

    virtual uint16_t getTextWidth() const
 800b234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b236:	b08d      	sub	sp, #52	; 0x34
 800b238:	af02      	add	r7, sp, #8
 800b23a:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard, 0) : 0;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3328      	adds	r3, #40	; 0x28
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
        return typedTextId != TYPED_TEXT_INVALID;
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	889b      	ldrh	r3, [r3, #4]
 800b246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b24a:	4293      	cmp	r3, r2
 800b24c:	bf14      	ite	ne
 800b24e:	2301      	movne	r3, #1
 800b250:	2300      	moveq	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8081 	beq.w	800b35c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x128>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3328      	adds	r3, #40	; 0x28
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800b264:	4b40      	ldr	r3, [pc, #256]	; (800b368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x134>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x44>
 800b26c:	4b3f      	ldr	r3, [pc, #252]	; (800b36c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x138>)
 800b26e:	4a40      	ldr	r2, [pc, #256]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b270:	21b1      	movs	r1, #177	; 0xb1
 800b272:	4840      	ldr	r0, [pc, #256]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b274:	f01f fa8e 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	889a      	ldrh	r2, [r3, #4]
 800b27c:	4b3e      	ldr	r3, [pc, #248]	; (800b378 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x144>)
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d305      	bcc.n	800b290 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5c>
 800b284:	4b3d      	ldr	r3, [pc, #244]	; (800b37c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x148>)
 800b286:	4a3a      	ldr	r2, [pc, #232]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b288:	21b2      	movs	r1, #178	; 0xb2
 800b28a:	483a      	ldr	r0, [pc, #232]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b28c:	f01f fa82 	bl	802a794 <__assert_func>
    }
 800b290:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800b292:	4b3b      	ldr	r3, [pc, #236]	; (800b380 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x14c>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b34      	ldr	r3, [pc, #208]	; (800b368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x134>)
 800b298:	6819      	ldr	r1, [r3, #0]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	889b      	ldrh	r3, [r3, #4]
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	440b      	add	r3, r1
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	681c      	ldr	r4, [r3, #0]
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	331c      	adds	r3, #28
 800b2ae:	681d      	ldr	r5, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3328      	adds	r3, #40	; 0x28
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800b2ba:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x134>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d105      	bne.n	800b2ce <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x9a>
 800b2c2:	4b2a      	ldr	r3, [pc, #168]	; (800b36c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x138>)
 800b2c4:	4a2a      	ldr	r2, [pc, #168]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b2c6:	21b1      	movs	r1, #177	; 0xb1
 800b2c8:	482a      	ldr	r0, [pc, #168]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b2ca:	f01f fa63 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	889a      	ldrh	r2, [r3, #4]
 800b2d2:	4b29      	ldr	r3, [pc, #164]	; (800b378 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x144>)
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d305      	bcc.n	800b2e6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb2>
 800b2da:	4b28      	ldr	r3, [pc, #160]	; (800b37c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x148>)
 800b2dc:	4a24      	ldr	r2, [pc, #144]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b2de:	21b2      	movs	r1, #178	; 0xb2
 800b2e0:	4824      	ldr	r0, [pc, #144]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b2e2:	f01f fa57 	bl	802a794 <__assert_func>
    }
 800b2e6:	bf00      	nop
        return typedTexts[typedTextId].direction;
 800b2e8:	4b1f      	ldr	r3, [pc, #124]	; (800b368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x134>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	889b      	ldrh	r3, [r3, #4]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	4413      	add	r3, r2
 800b2f4:	785b      	ldrb	r3, [r3, #1]
 800b2f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	461e      	mov	r6, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3328      	adds	r3, #40	; 0x28
 800b302:	623b      	str	r3, [r7, #32]
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	61fb      	str	r3, [r7, #28]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800b308:	4b17      	ldr	r3, [pc, #92]	; (800b368 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x134>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xe8>
 800b310:	4b16      	ldr	r3, [pc, #88]	; (800b36c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x138>)
 800b312:	4a17      	ldr	r2, [pc, #92]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b314:	21b1      	movs	r1, #177	; 0xb1
 800b316:	4817      	ldr	r0, [pc, #92]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b318:	f01f fa3c 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	889a      	ldrh	r2, [r3, #4]
 800b320:	4b15      	ldr	r3, [pc, #84]	; (800b378 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x144>)
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d305      	bcc.n	800b334 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x100>
 800b328:	4b14      	ldr	r3, [pc, #80]	; (800b37c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x148>)
 800b32a:	4a11      	ldr	r2, [pc, #68]	; (800b370 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x13c>)
 800b32c:	21b2      	movs	r1, #178	; 0xb2
 800b32e:	4811      	ldr	r0, [pc, #68]	; (800b374 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x140>)
 800b330:	f01f fa30 	bl	802a794 <__assert_func>
    }
 800b334:	bf00      	nop
        return texts->getText(typedTextId);
 800b336:	4b13      	ldr	r3, [pc, #76]	; (800b384 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x150>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	889b      	ldrh	r3, [r3, #4]
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f007 fd5f 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800b346:	4602      	mov	r2, r0
 800b348:	bf00      	nop
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	2100      	movs	r1, #0
 800b350:	9100      	str	r1, [sp, #0]
 800b352:	4631      	mov	r1, r6
 800b354:	4620      	mov	r0, r4
 800b356:	47a8      	blx	r5
 800b358:	4603      	mov	r3, r0
 800b35a:	e000      	b.n	800b35e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x12a>
 800b35c:	2300      	movs	r3, #0
    }
 800b35e:	4618      	mov	r0, r3
 800b360:	372c      	adds	r7, #44	; 0x2c
 800b362:	46bd      	mov	sp, r7
 800b364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b366:	bf00      	nop
 800b368:	20014ba4 	.word	0x20014ba4
 800b36c:	0802be40 	.word	0x0802be40
 800b370:	0802be84 	.word	0x0802be84
 800b374:	0802beb4 	.word	0x0802beb4
 800b378:	20014ba8 	.word	0x20014ba8
 800b37c:	0802bef8 	.word	0x0802bef8
 800b380:	20014bac 	.word	0x20014bac
 800b384:	20014bb0 	.word	0x20014bb0

0800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
 800b392:	460b      	mov	r3, r1
 800b394:	71bb      	strb	r3, [r7, #6]
 800b396:	4613      	mov	r3, r2
 800b398:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800b39a:	f7fe fb17 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d105      	bne.n	800b3b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800b3a6:	4a0b      	ldr	r2, [pc, #44]	; (800b3d4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800b3a8:	2135      	movs	r1, #53	; 0x35
 800b3aa:	480b      	ldr	r0, [pc, #44]	; (800b3d8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800b3ac:	f01f f9f2 	bl	802a794 <__assert_func>
 800b3b0:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800b3b2:	f7fe fb17 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 800b3b6:	6803      	ldr	r3, [r0, #0]
 800b3b8:	3328      	adds	r3, #40	; 0x28
 800b3ba:	681c      	ldr	r4, [r3, #0]
 800b3bc:	797b      	ldrb	r3, [r7, #5]
 800b3be:	79ba      	ldrb	r2, [r7, #6]
 800b3c0:	79f9      	ldrb	r1, [r7, #7]
 800b3c2:	47a0      	blx	r4
 800b3c4:	4603      	mov	r3, r0
    }
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd90      	pop	{r4, r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0802bf4c 	.word	0x0802bf4c
 800b3d4:	0802bf90 	.word	0x0802bf90
 800b3d8:	0802bfec 	.word	0x0802bfec

0800b3dc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 800b3e4:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	809a      	strh	r2, [r3, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	80da      	strh	r2, [r3, #6]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	22ff      	movs	r2, #255	; 0xff
 800b3fa:	721a      	strb	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	22ff      	movs	r2, #255	; 0xff
 800b400:	725a      	strb	r2, [r3, #9]
    {
    }
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	0802d03c 	.word	0x0802d03c

0800b414 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
    {
 800b41c:	4a04      	ldr	r2, [pc, #16]	; (800b430 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	601a      	str	r2, [r3, #0]
    }
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	0802d03c 	.word	0x0802d03c

0800b434 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
    }
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff ffe9 	bl	800b414 <_ZN8touchgfx15AbstractPainterD1Ev>
 800b442:	210c      	movs	r1, #12
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f01f f976 	bl	802a736 <_ZdlPvj>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	78fa      	ldrb	r2, [r7, #3]
 800b464:	725a      	strb	r2, [r3, #9]
    }
 800b466:	bf00      	nop
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 800b472:	b480      	push	{r7}
 800b474:	b083      	sub	sp, #12
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	7a5b      	ldrb	r3, [r3, #9]
    }
 800b47e:	4618      	mov	r0, r3
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     * @see setPainter
     */
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 800b49e:	bf00      	nop
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff ff84 	bl	800b3dc <_ZN8touchgfx15AbstractPainterC1Ev>
 800b4d4:	4a29      	ldr	r2, [pc, #164]	; (800b57c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	60da      	str	r2, [r3, #12]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	611a      	str	r2, [r3, #16]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800b4ea:	f7fe fa7b 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	3220      	adds	r2, #32
 800b4f4:	6812      	ldr	r2, [r2, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	4790      	blx	r2
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
 800b500:	4293      	cmp	r3, r2
 800b502:	bf0c      	ite	eq
 800b504:	2301      	moveq	r3, #1
 800b506:	2300      	movne	r3, #0
 800b508:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800b50a:	f7fe fa5f 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 800b50e:	4603      	mov	r3, r0
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff fc5b 	bl	800adcc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bf14      	ite	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	2300      	moveq	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d01b      	beq.n	800b55e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800b526:	f7fe fa51 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 800b52a:	4603      	mov	r3, r0
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fc4d 	bl	800adcc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800b532:	4603      	mov	r3, r0
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	3220      	adds	r2, #32
 800b538:	6812      	ldr	r2, [r2, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	4790      	blx	r2
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	4293      	cmp	r3, r2
 800b546:	bf0c      	ite	eq
 800b548:	2301      	moveq	r3, #1
 800b54a:	2300      	movne	r3, #0
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
 800b550:	4313      	orrs	r3, r2
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	bf14      	ite	ne
 800b558:	2301      	movne	r3, #1
 800b55a:	2300      	moveq	r3, #0
 800b55c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800b560:	2b00      	cmp	r3, #0
 800b562:	d105      	bne.n	800b570 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xbc>)
 800b566:	4a07      	ldr	r2, [pc, #28]	; (800b584 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xc0>)
 800b568:	212f      	movs	r1, #47	; 0x2f
 800b56a:	4807      	ldr	r0, [pc, #28]	; (800b588 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xc4>)
 800b56c:	f01f f912 	bl	802a794 <__assert_func>
 800b570:	bf00      	nop
    }
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	0802e998 	.word	0x0802e998
 800b580:	0802c02c 	.word	0x0802c02c
 800b584:	0802c08c 	.word	0x0802c08c
 800b588:	0802c0c8 	.word	0x0802c0c8

0800b58c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	4a05      	ldr	r2, [pc, #20]	; (800b5ac <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff ff39 	bl	800b414 <_ZN8touchgfx15AbstractPainterD1Ev>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	0802e998 	.word	0x0802e998

0800b5b0 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff ffe7 	bl	800b58c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800b5be:	2114      	movs	r1, #20
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f01f f8b8 	bl	802a736 <_ZdlPvj>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB565(colortype color = 0, uint8_t alpha = 255)
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB565()
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff ff6f 	bl	800b4c4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800b5e6:	4a09      	ldr	r2, [pc, #36]	; (800b60c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x3c>)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 800b5ec:	68b9      	ldr	r1, [r7, #8]
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f80e 	bl	800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
        setAlpha(alpha);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	79fa      	ldrb	r2, [r7, #7]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff ff2a 	bl	800b454 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	0802e970 	.word	0x0802e970

0800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800b61a:	463b      	mov	r3, r7
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff f99c 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 800b622:	4603      	mov	r3, r0
 800b624:	b29a      	uxth	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	829a      	strh	r2, [r3, #20]
        painterRed = painterColor & RMASK;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	8a9a      	ldrh	r2, [r3, #20]
 800b62e:	4b0b      	ldr	r3, [pc, #44]	; (800b65c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x4c>)
 800b630:	4013      	ands	r3, r2
 800b632:	b29a      	uxth	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	82da      	strh	r2, [r3, #22]
        painterGreen = painterColor & GMASK;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	8a9b      	ldrh	r3, [r3, #20]
 800b63c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800b640:	b29a      	uxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	831a      	strh	r2, [r3, #24]
        painterBlue = painterColor & BMASK;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8a9b      	ldrh	r3, [r3, #20]
 800b64a:	f003 031f 	and.w	r3, r3, #31
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	835a      	strh	r2, [r3, #26]
    }
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	fffff800 	.word	0xfffff800

0800b660 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	4a05      	ldr	r2, [pc, #20]	; (800b680 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff f9ff 	bl	800aa74 <_ZN8touchgfx8DrawableD1Ev>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	0802e15c 	.word	0x0802e15c

0800b684 <_ZN8touchgfx9ContainerD0Ev>:
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff ffe7 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800b692:	212c      	movs	r1, #44	; 0x2c
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f01f f84e 	bl	802a736 <_ZdlPvj>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fb6a 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 800b6b4:	4a0b      	ldr	r2, [pc, #44]	; (800b6e4 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fae0 	bl	800ac9a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	0802cf28 	.word	0x0802cf28

0800b6e8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	78fa      	ldrb	r2, [r7, #3]
 800b6f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3384      	adds	r3, #132	; 0x84
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	4798      	blx	r3
    }
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:

    /** @copydoc Image::setAlpha() */
    void setAlpha(uint8_t newAlpha)
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3388      	adds	r3, #136	; 0x88
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	4798      	blx	r3
    }
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00d      	beq.n	800b7b4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e000      	b.n	800b7b6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
        }
    }
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
    {
    }
 800b7de:	bf00      	nop
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
    {
    }
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff ff80 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800b814:	6838      	ldr	r0, [r7, #0]
 800b816:	f7ff f8e3 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bf0c      	ite	eq
 800b820:	2301      	moveq	r3, #1
 800b822:	2300      	movne	r3, #0
 800b824:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800b826:	7bbb      	ldrb	r3, [r7, #14]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	f083 0301 	eor.w	r3, r3, #1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	d108      	bne.n	800b84a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	f083 0301 	eor.w	r3, r3, #1
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00f      	beq.n	800b864 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00c      	beq.n	800b864 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7bba      	ldrb	r2, [r7, #14]
 800b84e:	4611      	mov	r1, r2
 800b850:	4618      	mov	r0, r3
 800b852:	f7ff ff49 	bl	800b6e8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3314      	adds	r3, #20
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4610      	mov	r0, r2
 800b862:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800b86a:	6838      	ldr	r0, [r7, #0]
 800b86c:	f7ff f8b8 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b870:	4603      	mov	r3, r0
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800b87a:	2300      	movs	r3, #0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d006      	beq.n	800b88e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3380      	adds	r3, #128	; 0x80
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4610      	mov	r0, r2
 800b88c:	4798      	blx	r3
        }
    }
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
	...

0800b898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	4a05      	ldr	r2, [pc, #20]	; (800b8b8 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fed9 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	0802cf28 	.word	0x0802cf28

0800b8bc <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ffe7 	bl	800b898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800b8ca:	2134      	movs	r1, #52	; 0x34
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f01e ff32 	bl	802a736 <_ZdlPvj>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <_ZN8touchgfx19ToggleButtonTriggerC1Ev>:
 * to create a fully functional button.
 */
class ToggleButtonTrigger : public AbstractButtonContainer
{
public:
    ToggleButtonTrigger()
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
        : AbstractButtonContainer(), toggleCanceled(false)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fedc 	bl	800b6a4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800b8ec:	4a05      	ldr	r2, [pc, #20]	; (800b904 <_ZN8touchgfx19ToggleButtonTriggerC1Ev+0x28>)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
    }
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	0802cde8 	.word	0x0802cde8

0800b908 <_ZN8touchgfx19ToggleButtonTrigger17setToggleCanceledEb>:
    /**
     * Sets toggle canceled.
     *
     * @param  isToggleCanceled True if is toggle canceled, false if not.
     */
    void setToggleCanceled(bool isToggleCanceled)
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
    {
        toggleCanceled = isToggleCanceled;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	78fa      	ldrb	r2, [r7, #3]
 800b918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <_ZN8touchgfx19ToggleButtonTrigger17getToggleCanceledEv>:
    /**
     * Gets toggle canceled.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getToggleCanceled()
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
    {
        return toggleCanceled;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    }
 800b936:	4618      	mov	r0, r3
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE>:

    virtual void handleClickEvent(const ClickEvent& event)
 800b942:	b580      	push	{r7, lr}
 800b944:	b084      	sub	sp, #16
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff fede 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = !getPressed();
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fed8 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b960:	4603      	mov	r3, r0
 800b962:	f083 0301 	eor.w	r3, r3, #1
 800b966:	73bb      	strb	r3, [r7, #14]
        bool toggleCanceled = getToggleCanceled();
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff ffdd 	bl	800b928 <_ZN8touchgfx19ToggleButtonTrigger17getToggleCanceledEv>
 800b96e:	4603      	mov	r3, r0
 800b970:	737b      	strb	r3, [r7, #13]
        setToggleCanceled(event.getType() == ClickEvent::CANCEL);
 800b972:	6838      	ldr	r0, [r7, #0]
 800b974:	f7ff f834 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	bf0c      	ite	eq
 800b97e:	2301      	moveq	r3, #1
 800b980:	2300      	movne	r3, #0
 800b982:	b2db      	uxtb	r3, r3
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ffbe 	bl	800b908 <_ZN8touchgfx19ToggleButtonTrigger17setToggleCanceledEb>

        if (((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed)) && (event.getType() != ClickEvent::RELEASED) && !toggleCanceled)
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d005      	beq.n	800b99e <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	f083 0301 	eor.w	r3, r3, #1
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d108      	bne.n	800b9b0 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x6e>
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	f083 0301 	eor.w	r3, r3, #1
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d010      	beq.n	800b9cc <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00d      	beq.n	800b9cc <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 800b9b0:	6838      	ldr	r0, [r7, #0]
 800b9b2:	f7ff f815 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d007      	beq.n	800b9cc <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 800b9bc:	7b7b      	ldrb	r3, [r7, #13]
 800b9be:	f083 0301 	eor.w	r3, r3, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e000      	b.n	800b9ce <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8c>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00c      	beq.n	800b9ec <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xaa>
        {
            setPressed(newPressedValue);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7bba      	ldrb	r2, [r7, #14]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff fe85 	bl	800b6e8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3314      	adds	r3, #20
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	4798      	blx	r3
        }

        if (!toggleCanceled && (event.getType() == ClickEvent::RELEASED))
 800b9ec:	7b7b      	ldrb	r3, [r7, #13]
 800b9ee:	f083 0301 	eor.w	r3, r3, #1
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc6>
 800b9f8:	6838      	ldr	r0, [r7, #0]
 800b9fa:	f7fe fff1 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d101      	bne.n	800ba08 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc6>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d006      	beq.n	800ba1c <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xda>
        {
            executeAction();
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3380      	adds	r3, #128	; 0x80
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4798      	blx	r3
        }
    }
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	2326      	movs	r3, #38	; 0x26
 800ba34:	461a      	mov	r2, r3
 800ba36:	2100      	movs	r1, #0
 800ba38:	f01e ff38 	bl	802a8ac <memset>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff f9f4 	bl	800ae2c <_ZN8touchgfx6WidgetC1Ev>
 800ba44:	4a0b      	ldr	r2, [pc, #44]	; (800ba74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3326      	adds	r3, #38	; 0x26
 800ba4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe ffd0 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	22ff      	movs	r2, #255	; 0xff
 800ba5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f00c feeb 	bl	801883e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	0802f5fc 	.word	0x0802f5fc

0800ba78 <_ZN8touchgfx5Image8setAlphaEh>:
     *
     * @see getAlpha
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	4a05      	ldr	r2, [pc, #20]	; (800bab8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff f9d1 	bl	800ae50 <_ZN8touchgfx6WidgetD1Ev>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	0802f5fc 	.word	0x0802f5fc

0800babc <_ZN8touchgfx5ImageD0Ev>:
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff ffe7 	bl	800ba98 <_ZN8touchgfx5ImageD1Ev>
 800baca:	212c      	movs	r1, #44	; 0x2c
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f01e fe32 	bl	802a736 <_ZdlPvj>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	4a05      	ldr	r2, [pc, #20]	; (800bafc <_ZN8touchgfx3BoxD1Ev+0x20>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4618      	mov	r0, r3
 800baee:	f7ff f9af 	bl	800ae50 <_ZN8touchgfx6WidgetD1Ev>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	0802f48c 	.word	0x0802f48c

0800bb00 <_ZN8touchgfx3BoxD0Ev>:
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ffe7 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bb0e:	212c      	movs	r1, #44	; 0x2c
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f01e fe10 	bl	802a736 <_ZdlPvj>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff f9b2 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bb30:	4a08      	ldr	r2, [pc, #32]	; (800bb54 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	332c      	adds	r3, #44	; 0x2c
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fefd 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	0802f598 	.word	0x0802f598

0800bb58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	887a      	ldrh	r2, [r7, #2]
 800bb84:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800bb86:	bf00      	nop
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
	...

0800bb94 <_ZN12HalfVertBaseD1Ev>:

class HalfVertBase : public touchgfx::Container
{
public:
    HalfVertBase();
    virtual ~HalfVertBase() {}
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	4a6a      	ldr	r2, [pc, #424]	; (800bd48 <_ZN12HalfVertBaseD1Ev+0x1b4>)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	f241 13bc 	movw	r3, #4540	; 0x11bc
 800bba8:	4413      	add	r3, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f004 f874 	bl	800fc98 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	f241 1330 	movw	r3, #4400	; 0x1130
 800bbb6:	4413      	add	r3, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f003 fcb5 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	f241 0384 	movw	r3, #4228	; 0x1084
 800bbc4:	4413      	add	r3, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f004 f888 	bl	800fcdc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f603 73dc 	addw	r3, r3, #4060	; 0xfdc
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f004 f8aa 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f003 fca2 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800bbea:	4618      	mov	r0, r3
 800bbec:	f003 fc9c 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f003 fc96 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 800bc02:	4618      	mov	r0, r3
 800bc04:	f003 fbbe 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f603 53f4 	addw	r3, r3, #3572	; 0xdf4
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f003 fbb8 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f004 f8ae 	bl	800fd7c <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800bc26:	4618      	mov	r0, r3
 800bc28:	f004 f954 	bl	800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800bc32:	4618      	mov	r0, r3
 800bc34:	f004 f92c 	bl	800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f004 f948 	bl	800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f004 f920 	bl	800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800bc56:	4618      	mov	r0, r3
 800bc58:	f004 f8f8 	bl	800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800bc62:	4618      	mov	r0, r3
 800bc64:	f004 f8d0 	bl	800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f004 f8ec 	bl	800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f004 f8c4 	bl	800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800bc86:	4618      	mov	r0, r3
 800bc88:	f004 f89a 	bl	800fdc0 <_ZN8touchgfx11GraphScrollILs201EED1Ev>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800bc92:	4618      	mov	r0, r3
 800bc94:	f004 f91e 	bl	800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f004 f8f6 	bl	800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f004 f912 	bl	800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f004 f8ea 	bl	800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f004 f8c2 	bl	800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f004 f89a 	bl	800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f004 f870 	bl	800fdc0 <_ZN8touchgfx11GraphScrollILs201EED1Ev>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800bce6:	4618      	mov	r0, r3
 800bce8:	f003 fb4c 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f003 fb46 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff feec 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	33dc      	adds	r3, #220	; 0xdc
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fee7 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	33b0      	adds	r3, #176	; 0xb0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fee2 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	3384      	adds	r3, #132	; 0x84
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff fedd 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3358      	adds	r3, #88	; 0x58
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff fed8 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	332c      	adds	r3, #44	; 0x2c
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fed3 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff fc91 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	0802c93c 	.word	0x0802c93c

0800bd4c <_ZN12HalfVertBaseD0Ev>:
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff ff1d 	bl	800bb94 <_ZN12HalfVertBaseD1Ev>
 800bd5a:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f01e fce9 	bl	802a736 <_ZdlPvj>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <_ZN12HalfVertBase10SwichPowerEv>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void SwichPower()
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in HalfVert
    }
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <_ZN12HalfVertBase11PowerToggleEv>:

    virtual void PowerToggle()
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in HalfVert
    }
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <_ZN12HalfVertBase13SelectAmprageEv>:

    virtual void SelectAmprage()
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in HalfVert
    }
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <_ZN12HalfVertBase13SelectVoltageEv>:

    virtual void SelectVoltage()
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in HalfVert
    }
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
	...

0800bdc0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff f83d 	bl	800ae50 <_ZN8touchgfx6WidgetD1Ev>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	0802ea24 	.word	0x0802ea24

0800bde4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff ffe7 	bl	800bdc0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800bdf2:	2130      	movs	r1, #48	; 0x30
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f01e fc9e 	bl	802a736 <_ZdlPvj>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
#include <touchgfx/widgets/graph/AbstractDataGraph.hpp>

namespace touchgfx
{
/** An abstract graph element. Declares a couple of useful functions to help subclasses which use CWR (Canvas Widget Renderer). */
class AbstractGraphElement : public CanvasWidget
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	4a05      	ldr	r2, [pc, #20]	; (800be24 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff ffd3 	bl	800bdc0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	0802cfbc 	.word	0x0802cfbc

0800be28 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff ffe7 	bl	800be04 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800be36:	2134      	movs	r1, #52	; 0x34
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f01e fc7c 	bl	802a736 <_ZdlPvj>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
     */
    bool isCenterInvisible(const AbstractDataGraph* graph, int16_t index) const;
};

/** An abstract graph element. Declares a couple of useful functions to help subclasses which do not use CWR (Canvas Widget Renderer). */
class AbstractGraphElementNoCWR : public AbstractGraphElement
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	4a05      	ldr	r2, [pc, #20]	; (800be68 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff ffd3 	bl	800be04 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	0802f050 	.word	0x0802f050

0800be6c <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff ffe7 	bl	800be48 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800be7a:	2138      	movs	r1, #56	; 0x38
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f01e fc5a 	bl	802a736 <_ZdlPvj>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
};

/**
 * GraphElementGridBase is a helper class used to implement classed to draw grid lines in the graph.
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	4a05      	ldr	r2, [pc, #20]	; (800beac <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff ffd3 	bl	800be48 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	0802efc8 	.word	0x0802efc8

0800beb0 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff ffe7 	bl	800be8c <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800bebe:	2144      	movs	r1, #68	; 0x44
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f01e fc38 	bl	802a736 <_ZdlPvj>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <_ZN8touchgfx17GraphElementGridXC1Ev>:
 * GraphElementGridX draws vertical lines at selected intervals along the x axis. By combining two
 * GraphElementGridX instances, it is possible to have minor and major grid lines.
 *
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridX : public GraphElementGridBase
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	f00b fc8e 	bl	80177fc <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800bee0:	4a03      	ldr	r2, [pc, #12]	; (800bef0 <_ZN8touchgfx17GraphElementGridXC1Ev+0x20>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	0802eeb8 	.word	0x0802eeb8

0800bef4 <_ZN8touchgfx17GraphElementGridYC1Ev>:
 * GraphElementGridY draws horizontal lines at selected intervals along the y axis. By combining
 * two GraphElementGridY instances, it is possible to have minor and major grid lines.
 *
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4618      	mov	r0, r3
 800bf00:	f00b fc7c 	bl	80177fc <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800bf04:	4a03      	ldr	r2, [pc, #12]	; (800bf14 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	0802ef40 	.word	0x0802ef40

0800bf18 <_ZN12HalfVertBaseC1Ev>:
#include <gui_generated/containers/HalfVertBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

HalfVertBase::HalfVertBase() :
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1c:	b0ba      	sub	sp, #232	; 0xe8
 800bf1e:	af02      	add	r7, sp, #8
 800bf20:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &HalfVertBase::flexButtonCallbackHandler)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe ff2f 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 800bf2a:	4ada      	ldr	r2, [pc, #872]	; (800c294 <_ZN12HalfVertBaseC1Ev+0x37c>)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	332c      	adds	r3, #44	; 0x2c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe ffad 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3358      	adds	r3, #88	; 0x58
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe ffa8 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3384      	adds	r3, #132	; 0x84
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe ffa3 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	33b0      	adds	r3, #176	; 0xb0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe ff9e 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	33dc      	adds	r3, #220	; 0xdc
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fe ff99 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe ff93 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff f8e1 	bl	800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff f8db 	bl	800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f003 f9e3 	bl	800f358 <_ZN8touchgfx11GraphScrollILs201EEC1Ev>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f00b ffcf 	bl	8017f3c <_ZN8touchgfx16GraphElementLineC1Ev>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bfa4:	f107 031c 	add.w	r3, r7, #28
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fcc6 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 800bfb0:	22ff      	movs	r2, #255	; 0xff
 800bfb2:	69f9      	ldr	r1, [r7, #28]
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f7ff fb0b 	bl	800b5d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff ff85 	bl	800bed0 <_ZN8touchgfx17GraphElementGridXC1Ev>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff ff91 	bl	800bef4 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff ff79 	bl	800bed0 <_ZN8touchgfx17GraphElementGridXC1Ev>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff ff85 	bl	800bef4 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800bff0:	4618      	mov	r0, r3
 800bff2:	f003 f9b1 	bl	800f358 <_ZN8touchgfx11GraphScrollILs201EEC1Ev>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 800bffc:	4618      	mov	r0, r3
 800bffe:	f00b ff9d 	bl	8017f3c <_ZN8touchgfx16GraphElementLineC1Ev>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f503 6443 	add.w	r4, r3, #3120	; 0xc30
 800c008:	f107 0320 	add.w	r3, r7, #32
 800c00c:	2100      	movs	r1, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fc94 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 800c014:	22ff      	movs	r2, #255	; 0xff
 800c016:	6a39      	ldr	r1, [r7, #32]
 800c018:	4620      	mov	r0, r4
 800c01a:	f7ff fad9 	bl	800b5d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800c024:	4618      	mov	r0, r3
 800c026:	f00b ff89 	bl	8017f3c <_ZN8touchgfx16GraphElementLineC1Ev>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 800c030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c034:	2100      	movs	r1, #0
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fc80 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 800c03c:	22ff      	movs	r2, #255	; 0xff
 800c03e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fac5 	bl	800b5d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff ff3f 	bl	800bed0 <_ZN8touchgfx17GraphElementGridXC1Ev>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ff4b 	bl	800bef4 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff ff33 	bl	800bed0 <_ZN8touchgfx17GraphElementGridXC1Ev>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff ff3f 	bl	800bef4 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 800c07c:	4618      	mov	r0, r3
 800c07e:	f003 f9a3 	bl	800f3c8 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEC1Ev>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f603 53f4 	addw	r3, r3, #3572	; 0xdf4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff f857 	bl	800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff f851 	bl	800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f003 fa01 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f003 f9fb 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f003 f9f5 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f603 73dc 	addw	r3, r3, #4060	; 0xfdc
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f003 fa57 	bl	800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	f241 0384 	movw	r3, #4228	; 0x1084
 800c0d0:	4413      	add	r3, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f003 fad2 	bl	800f67c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev>
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	f241 1330 	movw	r3, #4400	; 0x1130
 800c0de:	4413      	add	r3, r2
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f003 f9e1 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f241 10bc 	movw	r0, #4540	; 0x11bc
 800c0ec:	4418      	add	r0, r3
 800c0ee:	4b6a      	ldr	r3, [pc, #424]	; (800c298 <_ZN12HalfVertBaseC1Ev+0x380>)
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0fa:	cb0c      	ldmia	r3, {r2, r3}
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	f003 fb05 	bl	800f70c <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    setWidth(432);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fd55 	bl	800abb8 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(560);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f44f 710c 	mov.w	r1, #560	; 0x230
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fd5e 	bl	800abd6 <_ZN8touchgfx8Drawable9setHeightEs>
    Background.setPosition(0, 0, 884, 560);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800c120:	f44f 730c 	mov.w	r3, #560	; 0x230
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	f44f 735d 	mov.w	r3, #884	; 0x374
 800c12a:	2200      	movs	r2, #0
 800c12c:	2100      	movs	r1, #0
 800c12e:	f7fe fccc 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85));
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c138:	2255      	movs	r2, #85	; 0x55
 800c13a:	214c      	movs	r1, #76	; 0x4c
 800c13c:	204b      	movs	r0, #75	; 0x4b
 800c13e:	f7ff f923 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c142:	4603      	mov	r3, r0
 800c144:	4619      	mov	r1, r3
 800c146:	4620      	mov	r0, r4
 800c148:	f7fe fec8 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageReadBack.setPosition(10, 10, 280, 81);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c152:	2351      	movs	r3, #81	; 0x51
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	f44f 738c 	mov.w	r3, #280	; 0x118
 800c15a:	220a      	movs	r2, #10
 800c15c:	210a      	movs	r1, #10
 800c15e:	f7fe fcb4 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageReadBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800c168:	2238      	movs	r2, #56	; 0x38
 800c16a:	2138      	movs	r1, #56	; 0x38
 800c16c:	2038      	movs	r0, #56	; 0x38
 800c16e:	f7ff f90b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c172:	4603      	mov	r3, r0
 800c174:	4619      	mov	r1, r3
 800c176:	4620      	mov	r0, r4
 800c178:	f7fe feb0 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    PowerReadPrimBack.setPosition(10, 290, 280, 81);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f103 0084 	add.w	r0, r3, #132	; 0x84
 800c182:	2351      	movs	r3, #81	; 0x51
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	f44f 738c 	mov.w	r3, #280	; 0x118
 800c18a:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c18e:	210a      	movs	r1, #10
 800c190:	f7fe fc9b 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadPrimBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f103 0484 	add.w	r4, r3, #132	; 0x84
 800c19a:	2238      	movs	r2, #56	; 0x38
 800c19c:	2138      	movs	r1, #56	; 0x38
 800c19e:	2038      	movs	r0, #56	; 0x38
 800c1a0:	f7ff f8f2 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7fe fe97 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageSetBack.setPosition(300, 10, 122, 37);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800c1b4:	2325      	movs	r3, #37	; 0x25
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	237a      	movs	r3, #122	; 0x7a
 800c1ba:	220a      	movs	r2, #10
 800c1bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c1c0:	f7fe fc83 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSetBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800c1ca:	2238      	movs	r2, #56	; 0x38
 800c1cc:	2138      	movs	r1, #56	; 0x38
 800c1ce:	2038      	movs	r0, #56	; 0x38
 800c1d0:	f7ff f8da 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f7fe fe7f 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    AmprageSetBack.setPosition(300, 290, 122, 37);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800c1e4:	2325      	movs	r3, #37	; 0x25
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	237a      	movs	r3, #122	; 0x7a
 800c1ea:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c1ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c1f2:	f7fe fc6a 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSetBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800c1fc:	2238      	movs	r2, #56	; 0x38
 800c1fe:	2138      	movs	r1, #56	; 0x38
 800c200:	2038      	movs	r0, #56	; 0x38
 800c202:	f7ff f8c1 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c206:	4603      	mov	r3, r0
 800c208:	4619      	mov	r1, r3
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7fe fe66 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    PowerReadSecBack.setPosition(300, 334, 122, 37);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f503 7084 	add.w	r0, r3, #264	; 0x108
 800c216:	2325      	movs	r3, #37	; 0x25
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	237a      	movs	r3, #122	; 0x7a
 800c21c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800c220:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c224:	f7fe fc51 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSecBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800c22e:	2238      	movs	r2, #56	; 0x38
 800c230:	2138      	movs	r1, #56	; 0x38
 800c232:	2038      	movs	r0, #56	; 0x38
 800c234:	f7ff f8a8 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c238:	4603      	mov	r3, r0
 800c23a:	4619      	mov	r1, r3
 800c23c:	4620      	mov	r0, r4
 800c23e:	f7fe fe4d 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageRead.setPosition(10, 10, 280, 81);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f503 709a 	add.w	r0, r3, #308	; 0x134
 800c248:	2351      	movs	r3, #81	; 0x51
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	f44f 738c 	mov.w	r3, #280	; 0x118
 800c250:	220a      	movs	r2, #10
 800c252:	210a      	movs	r1, #10
 800c254:	f7fe fc39 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageRead.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 749a 	add.w	r4, r3, #308	; 0x134
 800c25e:	22ff      	movs	r2, #255	; 0xff
 800c260:	21ff      	movs	r1, #255	; 0xff
 800c262:	20ff      	movs	r0, #255	; 0xff
 800c264:	f7ff f890 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c268:	4603      	mov	r3, r0
 800c26a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c26e:	61bb      	str	r3, [r7, #24]
        this->color = color;
 800c270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800c278:	bf00      	nop
    VoltageRead.setLinespacing(0);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800c280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c284:	2300      	movs	r3, #0
 800c286:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        linespace = space;
 800c28a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c28e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c292:	e003      	b.n	800c29c <_ZN12HalfVertBaseC1Ev+0x384>
 800c294:	0802c93c 	.word	0x0802c93c
 800c298:	0800f1b5 	.word	0x0800f1b5
 800c29c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800c29e:	bf00      	nop
    Unicode::snprintf(VoltageReadBuffer, VOLTAGEREAD_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f241 14a8 	movw	r4, #4520	; 0x11a8
 800c2a6:	441c      	add	r4, r3
 800c2a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c2ac:	2116      	movs	r1, #22
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fe32 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800c2b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c2b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c2bc:	4b4c      	ldr	r3, [pc, #304]	; (800c3f0 <_ZN12HalfVertBaseC1Ev+0x4d8>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d105      	bne.n	800c2d0 <_ZN12HalfVertBaseC1Ev+0x3b8>
 800c2c4:	4b4b      	ldr	r3, [pc, #300]	; (800c3f4 <_ZN12HalfVertBaseC1Ev+0x4dc>)
 800c2c6:	4a4c      	ldr	r2, [pc, #304]	; (800c3f8 <_ZN12HalfVertBaseC1Ev+0x4e0>)
 800c2c8:	21b1      	movs	r1, #177	; 0xb1
 800c2ca:	484c      	ldr	r0, [pc, #304]	; (800c3fc <_ZN12HalfVertBaseC1Ev+0x4e4>)
 800c2cc:	f01e fa62 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800c2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2d4:	889a      	ldrh	r2, [r3, #4]
 800c2d6:	4b4a      	ldr	r3, [pc, #296]	; (800c400 <_ZN12HalfVertBaseC1Ev+0x4e8>)
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d305      	bcc.n	800c2ea <_ZN12HalfVertBaseC1Ev+0x3d2>
 800c2de:	4b49      	ldr	r3, [pc, #292]	; (800c404 <_ZN12HalfVertBaseC1Ev+0x4ec>)
 800c2e0:	4a45      	ldr	r2, [pc, #276]	; (800c3f8 <_ZN12HalfVertBaseC1Ev+0x4e0>)
 800c2e2:	21b2      	movs	r1, #178	; 0xb2
 800c2e4:	4845      	ldr	r0, [pc, #276]	; (800c3fc <_ZN12HalfVertBaseC1Ev+0x4e4>)
 800c2e6:	f01e fa55 	bl	802a794 <__assert_func>
    }
 800c2ea:	bf00      	nop
        return texts->getText(typedTextId);
 800c2ec:	4b46      	ldr	r3, [pc, #280]	; (800c408 <_ZN12HalfVertBaseC1Ev+0x4f0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f006 fd85 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	bf00      	nop
 800c2fe:	4a43      	ldr	r2, [pc, #268]	; (800c40c <_ZN12HalfVertBaseC1Ev+0x4f4>)
 800c300:	2105      	movs	r1, #5
 800c302:	4620      	mov	r0, r4
 800c304:	f010 ff48 	bl	801d198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800c308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7fd f889 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    VoltageRead.setWildcard(VoltageReadBuffer);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f503 709a 	add.w	r0, r3, #308	; 0x134
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800c31e:	4413      	add	r3, r2
 800c320:	4619      	mov	r1, r3
 800c322:	f7fe ff79 	bl	800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    VoltageRead.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f503 749a 	add.w	r4, r3, #308	; 0x134
 800c32c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c330:	2115      	movs	r1, #21
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe fdf0 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800c338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c33c:	4619      	mov	r1, r3
 800c33e:	4620      	mov	r0, r4
 800c340:	f00c f93d 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800c344:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd f86b 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    PowerReadPrim.setPosition(10, 290, 280, 81);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 800c354:	2351      	movs	r3, #81	; 0x51
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	f44f 738c 	mov.w	r3, #280	; 0x118
 800c35c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c360:	210a      	movs	r1, #10
 800c362:	f7fe fbb2 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadPrim.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800c36c:	22ff      	movs	r2, #255	; 0xff
 800c36e:	21ff      	movs	r1, #255	; 0xff
 800c370:	20ff      	movs	r0, #255	; 0xff
 800c372:	f7ff f809 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c376:	4603      	mov	r3, r0
 800c378:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c37c:	617b      	str	r3, [r7, #20]
        this->color = color;
 800c37e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800c386:	bf00      	nop
    PowerReadPrim.setLinespacing(0);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800c38e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c392:	2300      	movs	r3, #0
 800c394:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        linespace = space;
 800c398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c39c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800c3a0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800c3a2:	bf00      	nop
    Unicode::snprintf(PowerReadPrimBuffer, POWERREADPRIM_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID26).getText());
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f241 14b2 	movw	r4, #4530	; 0x11b2
 800c3aa:	441c      	add	r4, r3
 800c3ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3b0:	2117      	movs	r1, #23
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fdb0 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800c3b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <_ZN12HalfVertBaseC1Ev+0x4d8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d105      	bne.n	800c3d4 <_ZN12HalfVertBaseC1Ev+0x4bc>
 800c3c8:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <_ZN12HalfVertBaseC1Ev+0x4dc>)
 800c3ca:	4a0b      	ldr	r2, [pc, #44]	; (800c3f8 <_ZN12HalfVertBaseC1Ev+0x4e0>)
 800c3cc:	21b1      	movs	r1, #177	; 0xb1
 800c3ce:	480b      	ldr	r0, [pc, #44]	; (800c3fc <_ZN12HalfVertBaseC1Ev+0x4e4>)
 800c3d0:	f01e f9e0 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800c3d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3d8:	889a      	ldrh	r2, [r3, #4]
 800c3da:	4b09      	ldr	r3, [pc, #36]	; (800c400 <_ZN12HalfVertBaseC1Ev+0x4e8>)
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d316      	bcc.n	800c410 <_ZN12HalfVertBaseC1Ev+0x4f8>
 800c3e2:	4b08      	ldr	r3, [pc, #32]	; (800c404 <_ZN12HalfVertBaseC1Ev+0x4ec>)
 800c3e4:	4a04      	ldr	r2, [pc, #16]	; (800c3f8 <_ZN12HalfVertBaseC1Ev+0x4e0>)
 800c3e6:	21b2      	movs	r1, #178	; 0xb2
 800c3e8:	4804      	ldr	r0, [pc, #16]	; (800c3fc <_ZN12HalfVertBaseC1Ev+0x4e4>)
 800c3ea:	f01e f9d3 	bl	802a794 <__assert_func>
 800c3ee:	bf00      	nop
 800c3f0:	20014ba4 	.word	0x20014ba4
 800c3f4:	0802be40 	.word	0x0802be40
 800c3f8:	0802be84 	.word	0x0802be84
 800c3fc:	0802beb4 	.word	0x0802beb4
 800c400:	20014ba8 	.word	0x20014ba8
 800c404:	0802bef8 	.word	0x0802bef8
 800c408:	20014bb0 	.word	0x20014bb0
 800c40c:	0802c128 	.word	0x0802c128
    }
 800c410:	bf00      	nop
        return texts->getText(typedTextId);
 800c412:	4bdd      	ldr	r3, [pc, #884]	; (800c788 <_ZN12HalfVertBaseC1Ev+0x870>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c41a:	4611      	mov	r1, r2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f006 fcf1 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800c422:	4603      	mov	r3, r0
 800c424:	bf00      	nop
 800c426:	4ad9      	ldr	r2, [pc, #868]	; (800c78c <_ZN12HalfVertBaseC1Ev+0x874>)
 800c428:	2105      	movs	r1, #5
 800c42a:	4620      	mov	r0, r4
 800c42c:	f010 feb4 	bl	801d198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800c430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c434:	4618      	mov	r0, r3
 800c436:	f7fc fff5 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    PowerReadPrim.setWildcard(PowerReadPrimBuffer);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	f241 13b2 	movw	r3, #4530	; 0x11b2
 800c446:	4413      	add	r3, r2
 800c448:	4619      	mov	r1, r3
 800c44a:	f7fe fee5 	bl	800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    PowerReadPrim.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800c454:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c458:	2100      	movs	r1, #0
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fe fd5c 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800c460:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c464:	4619      	mov	r1, r3
 800c466:	4620      	mov	r0, r4
 800c468:	f00c f8a9 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800c46c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c470:	4618      	mov	r0, r3
 800c472:	f7fc ffd7 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    VoltageGraph.setScale(100);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c47c:	2164      	movs	r1, #100	; 0x64
 800c47e:	4618      	mov	r0, r3
 800c480:	f00a fff6 	bl	8017470 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    VoltageGraph.setPosition(10, 102, 412, 167);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 800c48a:	23a7      	movs	r3, #167	; 0xa7
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800c492:	2266      	movs	r2, #102	; 0x66
 800c494:	210a      	movs	r1, #10
 800c496:	f7fe fb18 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageGraph.setGraphAreaMargin(0, 0, 0, 0);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	f00a ff33 	bl	8017314 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    VoltageGraph.setGraphAreaPadding(0, 0, 0, 0);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	2100      	movs	r1, #0
 800c4be:	f00a fd14 	bl	8016eea <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    VoltageGraph.setGraphRangeY(0, 20);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c4c8:	2214      	movs	r2, #20
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f00a fb2b 	bl	8016b28 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    VoltageGraphMinorXAxisGrid.setScale(100);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800c4d8:	2164      	movs	r1, #100	; 0x64
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f00b f89e 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    VoltageGraphMinorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	f7fe ff4c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f00b f819 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    VoltageGraphMinorXAxisGrid.setInterval(10);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800c500:	210a      	movs	r1, #10
 800c502:	4618      	mov	r0, r3
 800c504:	f00b f99a 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    VoltageGraphMinorXAxisGrid.setLineWidth(1);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800c50e:	2101      	movs	r1, #1
 800c510:	4618      	mov	r0, r3
 800c512:	f00b f9a2 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    VoltageGraphMinorXAxisGrid.setAlpha(20);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800c51c:	2114      	movs	r1, #20
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe ffb3 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    VoltageGraphMinorXAxisGrid.setMajorGrid(VoltageGraphMajorXAxisGrid);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f503 62cf 	add.w	r2, r3, #1656	; 0x678
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f00b f98f 	bl	8017856 <_ZN8touchgfx20GraphElementGridBase12setMajorGridERKS0_>
    VoltageGraph.addGraphElement(VoltageGraphMinorXAxisGrid);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800c544:	4619      	mov	r1, r3
 800c546:	4610      	mov	r0, r2
 800c548:	f00a fd8c 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    VoltageGraphMinorYAxisGrid.setScale(100);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800c552:	2164      	movs	r1, #100	; 0x64
 800c554:	4618      	mov	r0, r3
 800c556:	f00b f861 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    VoltageGraphMinorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 800c560:	2200      	movs	r2, #0
 800c562:	2100      	movs	r1, #0
 800c564:	2000      	movs	r0, #0
 800c566:	f7fe ff0f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c56a:	4603      	mov	r3, r0
 800c56c:	4619      	mov	r1, r3
 800c56e:	4620      	mov	r0, r4
 800c570:	f00a ffdc 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    VoltageGraphMinorYAxisGrid.setInterval(10);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800c57a:	210a      	movs	r1, #10
 800c57c:	4618      	mov	r0, r3
 800c57e:	f00b f95d 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    VoltageGraphMinorYAxisGrid.setLineWidth(1);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800c588:	2101      	movs	r1, #1
 800c58a:	4618      	mov	r0, r3
 800c58c:	f00b f965 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    VoltageGraphMinorYAxisGrid.setAlpha(20);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800c596:	2114      	movs	r1, #20
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe ff76 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    VoltageGraphMinorYAxisGrid.setMajorGrid(VoltageGraphMajorYAxisGrid);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f203 62bc 	addw	r2, r3, #1724	; 0x6bc
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f00b f952 	bl	8017856 <_ZN8touchgfx20GraphElementGridBase12setMajorGridERKS0_>
    VoltageGraph.addGraphElement(VoltageGraphMinorYAxisGrid);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f00a fd4f 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    VoltageGraphMajorXAxisGrid.setScale(100);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c5cc:	2164      	movs	r1, #100	; 0x64
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f00b f824 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    VoltageGraphMajorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f503 64e0 	add.w	r4, r3, #1792	; 0x700
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	2000      	movs	r0, #0
 800c5e0:	f7fe fed2 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f00a ff9f 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    VoltageGraphMajorXAxisGrid.setInterval(20);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c5f4:	2114      	movs	r1, #20
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f00b f920 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    VoltageGraphMajorXAxisGrid.setLineWidth(1);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c602:	2101      	movs	r1, #1
 800c604:	4618      	mov	r0, r3
 800c606:	f00b f928 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    VoltageGraphMajorXAxisGrid.setAlpha(100);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c610:	2164      	movs	r1, #100	; 0x64
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe ff39 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    VoltageGraph.addGraphElement(VoltageGraphMajorXAxisGrid);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f00a fd1c 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    VoltageGraphMajorYAxisGrid.setScale(100);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c632:	2164      	movs	r1, #100	; 0x64
 800c634:	4618      	mov	r0, r3
 800c636:	f00a fff1 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    VoltageGraphMajorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f203 7444 	addw	r4, r3, #1860	; 0x744
 800c640:	2200      	movs	r2, #0
 800c642:	2100      	movs	r1, #0
 800c644:	2000      	movs	r0, #0
 800c646:	f7fe fe9f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c64a:	4603      	mov	r3, r0
 800c64c:	4619      	mov	r1, r3
 800c64e:	4620      	mov	r0, r4
 800c650:	f00a ff6c 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    VoltageGraphMajorYAxisGrid.setInterval(20);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c65a:	2114      	movs	r1, #20
 800c65c:	4618      	mov	r0, r3
 800c65e:	f00b f8ed 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    VoltageGraphMajorYAxisGrid.setLineWidth(1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c668:	2101      	movs	r1, #1
 800c66a:	4618      	mov	r0, r3
 800c66c:	f00b f8f5 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    VoltageGraphMajorYAxisGrid.setAlpha(100);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c676:	2164      	movs	r1, #100	; 0x64
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fe ff06 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    VoltageGraph.addGraphElement(VoltageGraphMajorYAxisGrid);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f203 7344 	addw	r3, r3, #1860	; 0x744
 800c68a:	4619      	mov	r1, r3
 800c68c:	4610      	mov	r0, r2
 800c68e:	f00a fce9 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    VoltageGraphLine1.setScale(100);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800c698:	2164      	movs	r1, #100	; 0x64
 800c69a:	4618      	mov	r0, r3
 800c69c:	f00a ffbe 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    VoltageGraphLine1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(20, 151, 197));
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c6a6:	22c5      	movs	r2, #197	; 0xc5
 800c6a8:	2197      	movs	r1, #151	; 0x97
 800c6aa:	2014      	movs	r0, #20
 800c6ac:	f7fe fe6c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f7fe ffab 	bl	800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    VoltageGraphLine1.setPainter(VoltageGraphLine1Painter);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f203 6224 	addw	r2, r3, #1572	; 0x624
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f00a f91d 	bl	8016908 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    VoltageGraphLine1.setLineWidth(2);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f00b fc3e 	bl	8017f58 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    VoltageGraph.addGraphElement(VoltageGraphLine1);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	f00a fcba 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    VoltageGraph.addDataPoint(4.60663713188387f);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c6f6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800c790 <_ZN12HalfVertBaseC1Ev+0x878>
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f00a ff0a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.81416164262459f);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c706:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800c794 <_ZN12HalfVertBaseC1Ev+0x87c>
 800c70a:	4618      	mov	r0, r3
 800c70c:	f00a ff02 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.26803421205118f);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c716:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c798 <_ZN12HalfVertBaseC1Ev+0x880>
 800c71a:	4618      	mov	r0, r3
 800c71c:	f00a fefa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.91605396524789f);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c726:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800c79c <_ZN12HalfVertBaseC1Ev+0x884>
 800c72a:	4618      	mov	r0, r3
 800c72c:	f00a fef2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.69502893954586f);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c736:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800c7a0 <_ZN12HalfVertBaseC1Ev+0x888>
 800c73a:	4618      	mov	r0, r3
 800c73c:	f00a feea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.53489791218f);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c746:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800c7a4 <_ZN12HalfVertBaseC1Ev+0x88c>
 800c74a:	4618      	mov	r0, r3
 800c74c:	f00a fee2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.36326042579979f);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c756:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800c7a8 <_ZN12HalfVertBaseC1Ev+0x890>
 800c75a:	4618      	mov	r0, r3
 800c75c:	f00a feda 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.11003972800143f);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c766:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c7ac <_ZN12HalfVertBaseC1Ev+0x894>
 800c76a:	4618      	mov	r0, r3
 800c76c:	f00a fed2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.71198527077805f);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c776:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c7b0 <_ZN12HalfVertBaseC1Ev+0x898>
 800c77a:	4618      	mov	r0, r3
 800c77c:	f00a feca 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.1167372889459f);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c786:	e085      	b.n	800c894 <_ZN12HalfVertBaseC1Ev+0x97c>
 800c788:	20014bb0 	.word	0x20014bb0
 800c78c:	0802c128 	.word	0x0802c128
 800c790:	40936992 	.word	0x40936992
 800c794:	409a0d9d 	.word	0x409a0d9d
 800c798:	40a893bc 	.word	0x40a893bc
 800c79c:	40bd5050 	.word	0x40bd5050
 800c7a0:	40d63dad 	.word	0x40d63dad
 800c7a4:	40f11de2 	.word	0x40f11de2
 800c7a8:	4105cfea 	.word	0x4105cfea
 800c7ac:	4111c2b9 	.word	0x4111c2b9
 800c7b0:	411b644b 	.word	0x411b644b
 800c7b4:	4121de28 	.word	0x4121de28
 800c7b8:	41249449 	.word	0x41249449
 800c7bc:	41232f36 	.word	0x41232f36
 800c7c0:	411da1e1 	.word	0x411da1e1
 800c7c4:	41142ac5 	.word	0x41142ac5
 800c7c8:	41075052 	.word	0x41075052
 800c7cc:	40efb191 	.word	0x40efb191
 800c7d0:	40cd7c26 	.word	0x40cd7c26
 800c7d4:	40aa3ca2 	.word	0x40aa3ca2
 800c7d8:	40885422 	.word	0x40885422
 800c7dc:	40544537 	.word	0x40544537
 800c7e0:	4023c162 	.word	0x4023c162
 800c7e4:	4002f791 	.word	0x4002f791
 800c7e8:	3fe9da48 	.word	0x3fe9da48
 800c7ec:	3ff73fce 	.word	0x3ff73fce
 800c7f0:	4017e3d6 	.word	0x4017e3d6
 800c7f4:	404952ed 	.word	0x404952ed
 800c7f8:	40872803 	.word	0x40872803
 800c7fc:	40b20e59 	.word	0x40b20e59
 800c800:	40e3804f 	.word	0x40e3804f
 800c804:	410ca011 	.word	0x410ca011
 800c808:	412867e0 	.word	0x412867e0
 800c80c:	4143cb00 	.word	0x4143cb00
 800c810:	415d82bc 	.word	0x415d82bc
 800c814:	41746157 	.word	0x41746157
 800c818:	4183b1ca 	.word	0x4183b1ca
 800c81c:	418adfd8 	.word	0x418adfd8
 800c820:	418f786a 	.word	0x418f786a
 800c824:	41915f29 	.word	0x41915f29
 800c828:	41909f24 	.word	0x41909f24
 800c82c:	418d69bb 	.word	0x418d69bb
 800c830:	41881330 	.word	0x41881330
 800c834:	41810d28 	.word	0x41810d28
 800c838:	4171bebf 	.word	0x4171bebf
 800c83c:	41603e1c 	.word	0x41603e1c
 800c840:	414ecb07 	.word	0x414ecb07
 800c844:	413e8d27 	.word	0x413e8d27
 800c848:	41308ebe 	.word	0x41308ebe
 800c84c:	4125ac2c 	.word	0x4125ac2c
 800c850:	411e865f 	.word	0x411e865f
 800c854:	411b7904 	.word	0x411b7904
 800c858:	411c951c 	.word	0x411c951c
 800c85c:	4121a037 	.word	0x4121a037
 800c860:	412a187a 	.word	0x412a187a
 800c864:	41353d1f 	.word	0x41353d1f
 800c868:	41421ae3 	.word	0x41421ae3
 800c86c:	414f9baf 	.word	0x414f9baf
 800c870:	415c9875 	.word	0x415c9875
 800c874:	4167ec2b 	.word	0x4167ec2b
 800c878:	417086b1 	.word	0x417086b1
 800c87c:	41757e84 	.word	0x41757e84
 800c880:	41762013 	.word	0x41762013
 800c884:	4171f9ce 	.word	0x4171f9ce
 800c888:	4168e429 	.word	0x4168e429
 800c88c:	415b0518 	.word	0x415b0518
 800c890:	4148cec0 	.word	0x4148cec0
 800c894:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 800c7b4 <_ZN12HalfVertBaseC1Ev+0x89c>
 800c898:	4618      	mov	r0, r3
 800c89a:	f00a fe3b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.286202113802f);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8a4:	ed1f 0a3c 	vldr	s0, [pc, #-240]	; 800c7b8 <_ZN12HalfVertBaseC1Ev+0x8a0>
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f00a fe33 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.1990265584988f);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8b4:	ed1f 0a3f 	vldr	s0, [pc, #-252]	; 800c7bc <_ZN12HalfVertBaseC1Ev+0x8a4>
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f00a fe2b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.85202135629685f);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8c4:	ed1f 0a42 	vldr	s0, [pc, #-264]	; 800c7c0 <_ZN12HalfVertBaseC1Ev+0x8a8>
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f00a fe23 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.26044181602931f);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8d4:	ed1f 0a45 	vldr	s0, [pc, #-276]	; 800c7c4 <_ZN12HalfVertBaseC1Ev+0x8ac>
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f00a fe1b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.45710913311586f);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8e4:	ed1f 0a48 	vldr	s0, [pc, #-288]	; 800c7c8 <_ZN12HalfVertBaseC1Ev+0x8b0>
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f00a fe13 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.49042572114461f);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8f4:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 800c7cc <_ZN12HalfVertBaseC1Ev+0x8b4>
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f00a fe0b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.42140491318152f);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c904:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 800c7d0 <_ZN12HalfVertBaseC1Ev+0x8b8>
 800c908:	4618      	mov	r0, r3
 800c90a:	f00a fe03 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.31990145587802f);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c914:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 800c7d4 <_ZN12HalfVertBaseC1Ev+0x8bc>
 800c918:	4618      	mov	r0, r3
 800c91a:	f00a fdfb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.26027025155816f);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c924:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 800c7d8 <_ZN12HalfVertBaseC1Ev+0x8c0>
 800c928:	4618      	mov	r0, r3
 800c92a:	f00a fdf3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.31672444752251f);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c934:	ed1f 0a57 	vldr	s0, [pc, #-348]	; 800c7dc <_ZN12HalfVertBaseC1Ev+0x8c4>
 800c938:	4618      	mov	r0, r3
 800c93a:	f00a fdeb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.55867811862091f);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c944:	ed1f 0a5a 	vldr	s0, [pc, #-360]	; 800c7e0 <_ZN12HalfVertBaseC1Ev+0x8c8>
 800c948:	4618      	mov	r0, r3
 800c94a:	f00a fde3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.04636021801926f);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c954:	ed1f 0a5d 	vldr	s0, [pc, #-372]	; 800c7e4 <_ZN12HalfVertBaseC1Ev+0x8cc>
 800c958:	4618      	mov	r0, r3
 800c95a:	f00a fddb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.82697386285756f);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c964:	ed1f 0a60 	vldr	s0, [pc, #-384]	; 800c7e8 <_ZN12HalfVertBaseC1Ev+0x8d0>
 800c968:	4618      	mov	r0, r3
 800c96a:	f00a fdd3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.93163462914178f);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c974:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 800c7ec <_ZN12HalfVertBaseC1Ev+0x8d4>
 800c978:	4618      	mov	r0, r3
 800c97a:	f00a fdcb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.37328105966776f);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c984:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 800c7f0 <_ZN12HalfVertBaseC1Ev+0x8d8>
 800c988:	4618      	mov	r0, r3
 800c98a:	f00a fdc3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.14568641753711f);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c994:	ed1f 0a69 	vldr	s0, [pc, #-420]	; 800c7f4 <_ZN12HalfVertBaseC1Ev+0x8dc>
 800c998:	4618      	mov	r0, r3
 800c99a:	f00a fdbb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.22363446726907f);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9a4:	ed1f 0a6c 	vldr	s0, [pc, #-432]	; 800c7f8 <_ZN12HalfVertBaseC1Ev+0x8e0>
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f00a fdb3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.56425153304568f);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9b4:	ed1f 0a6f 	vldr	s0, [pc, #-444]	; 800c7fc <_ZN12HalfVertBaseC1Ev+0x8e4>
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f00a fdab 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.10941262777757f);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9c4:	ed1f 0a72 	vldr	s0, [pc, #-456]	; 800c800 <_ZN12HalfVertBaseC1Ev+0x8e8>
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f00a fda3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.78907879917654f);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9d4:	ed1f 0a75 	vldr	s0, [pc, #-468]	; 800c804 <_ZN12HalfVertBaseC1Ev+0x8ec>
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f00a fd9b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.5253605608645f);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9e4:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 800c808 <_ZN12HalfVertBaseC1Ev+0x8f0>
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f00a fd93 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.2370601207587f);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c9f4:	ed1f 0a7b 	vldr	s0, [pc, #-492]	; 800c80c <_ZN12HalfVertBaseC1Ev+0x8f4>
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f00a fd8b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.8444173115985f);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca04:	ed1f 0a7e 	vldr	s0, [pc, #-504]	; 800c810 <_ZN12HalfVertBaseC1Ev+0x8f8>
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f00a fd83 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.2737641653687f);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca14:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 800c814 <_ZN12HalfVertBaseC1Ev+0x8fc>
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f00a fd7b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.4618113545093f);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca24:	ed1f 0a84 	vldr	s0, [pc, #-528]	; 800c818 <_ZN12HalfVertBaseC1Ev+0x900>
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f00a fd73 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.359299612416f);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca34:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 800c81c <_ZN12HalfVertBaseC1Ev+0x904>
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f00a fd6b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.9337959747132f);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca44:	ed1f 0a8a 	vldr	s0, [pc, #-552]	; 800c820 <_ZN12HalfVertBaseC1Ev+0x908>
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f00a fd63 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.1714647453954f);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca54:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 800c824 <_ZN12HalfVertBaseC1Ev+0x90c>
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f00a fd5b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.0777060171604f);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca64:	ed1f 0a90 	vldr	s0, [pc, #-576]	; 800c828 <_ZN12HalfVertBaseC1Ev+0x910>
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f00a fd53 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.6766252971577f);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca74:	ed1f 0a93 	vldr	s0, [pc, #-588]	; 800c82c <_ZN12HalfVertBaseC1Ev+0x914>
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f00a fd4b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.0093681014389f);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca84:	ed1f 0a96 	vldr	s0, [pc, #-600]	; 800c830 <_ZN12HalfVertBaseC1Ev+0x918>
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f00a fd43 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.1314242090604f);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca94:	ed1f 0a99 	vldr	s0, [pc, #-612]	; 800c834 <_ZN12HalfVertBaseC1Ev+0x91c>
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f00a fd3b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.1090693369924f);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800caa4:	ed1f 0a9c 	vldr	s0, [pc, #-624]	; 800c838 <_ZN12HalfVertBaseC1Ev+0x920>
 800caa8:	4618      	mov	r0, r3
 800caaa:	f00a fd33 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.015163091489f);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cab4:	ed1f 0a9f 	vldr	s0, [pc, #-636]	; 800c83c <_ZN12HalfVertBaseC1Ev+0x924>
 800cab8:	4618      	mov	r0, r3
 800caba:	f00a fd2b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.924567047516f);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cac4:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 800c840 <_ZN12HalfVertBaseC1Ev+0x928>
 800cac8:	4618      	mov	r0, r3
 800caca:	f00a fd23 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.909460772126f);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cad4:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 800c844 <_ZN12HalfVertBaseC1Ev+0x92c>
 800cad8:	4618      	mov	r0, r3
 800cada:	f00a fd1b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.0348487415959f);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cae4:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 800c848 <_ZN12HalfVertBaseC1Ev+0x930>
 800cae8:	4618      	mov	r0, r3
 800caea:	f00a fd13 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.354533841496f);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800caf4:	ed1f 0aab 	vldr	s0, [pc, #-684]	; 800c84c <_ZN12HalfVertBaseC1Ev+0x934>
 800caf8:	4618      	mov	r0, r3
 800cafa:	f00a fd0b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.90780504781465f);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb04:	ed1f 0aae 	vldr	s0, [pc, #-696]	; 800c850 <_ZN12HalfVertBaseC1Ev+0x938>
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f00a fd03 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.71704528964902f);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb14:	ed1f 0ab1 	vldr	s0, [pc, #-708]	; 800c854 <_ZN12HalfVertBaseC1Ev+0x93c>
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f00a fcfb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.78640349849047f);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb24:	ed1f 0ab4 	vldr	s0, [pc, #-720]	; 800c858 <_ZN12HalfVertBaseC1Ev+0x940>
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f00a fcf3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.1016145058968f);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb34:	ed1f 0ab7 	vldr	s0, [pc, #-732]	; 800c85c <_ZN12HalfVertBaseC1Ev+0x944>
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f00a fceb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.6309761499794f);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb44:	ed1f 0aba 	vldr	s0, [pc, #-744]	; 800c860 <_ZN12HalfVertBaseC1Ev+0x948>
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f00a fce3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.3274221178028f);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb54:	ed1f 0abd 	vldr	s0, [pc, #-756]	; 800c864 <_ZN12HalfVertBaseC1Ev+0x94c>
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f00a fcdb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.1315638868157f);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb64:	ed1f 0ac0 	vldr	s0, [pc, #-768]	; 800c868 <_ZN12HalfVertBaseC1Ev+0x950>
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f00a fcd3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.9755085181411f);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb74:	ed1f 0ac3 	vldr	s0, [pc, #-780]	; 800c86c <_ZN12HalfVertBaseC1Ev+0x954>
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f00a fccb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.7872211068495f);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb84:	ed1f 0ac6 	vldr	s0, [pc, #-792]	; 800c870 <_ZN12HalfVertBaseC1Ev+0x958>
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f00a fcc3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.4951577674845f);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cb94:	ed1f 0ac9 	vldr	s0, [pc, #-804]	; 800c874 <_ZN12HalfVertBaseC1Ev+0x95c>
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f00a fcbb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.0328831680501f);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cba4:	ed1f 0acc 	vldr	s0, [pc, #-816]	; 800c878 <_ZN12HalfVertBaseC1Ev+0x960>
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f00a fcb3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.3433873625249f);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cbb4:	ed1f 0acf 	vldr	s0, [pc, #-828]	; 800c87c <_ZN12HalfVertBaseC1Ev+0x964>
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f00a fcab 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.3828304680238f);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cbc4:	ed1f 0ad2 	vldr	s0, [pc, #-840]	; 800c880 <_ZN12HalfVertBaseC1Ev+0x968>
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f00a fca3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.1234870895652f);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cbd4:	ed1f 0ad5 	vldr	s0, [pc, #-852]	; 800c884 <_ZN12HalfVertBaseC1Ev+0x96c>
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f00a fc9b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.5557031239437f);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cbe4:	ed1f 0ad8 	vldr	s0, [pc, #-864]	; 800c888 <_ZN12HalfVertBaseC1Ev+0x970>
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f00a fc93 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.6887435955137f);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cbf4:	ed1f 0adb 	vldr	s0, [pc, #-876]	; 800c88c <_ZN12HalfVertBaseC1Ev+0x974>
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f00a fc8b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.5504763120929f);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc04:	ed1f 0ade 	vldr	s0, [pc, #-888]	; 800c890 <_ZN12HalfVertBaseC1Ev+0x978>
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f00a fc83 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.1859083320302f);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc14:	ed9f 0ae1 	vldr	s0, [pc, #900]	; 800cf9c <_ZN12HalfVertBaseC1Ev+0x1084>
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f00a fc7b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.65466388184197f);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc24:	ed9f 0ade 	vldr	s0, [pc, #888]	; 800cfa0 <_ZN12HalfVertBaseC1Ev+0x1088>
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f00a fc73 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.02755451482949f);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc34:	ed9f 0adb 	vldr	s0, [pc, #876]	; 800cfa4 <_ZN12HalfVertBaseC1Ev+0x108c>
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f00a fc6b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.38245200707962f);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc44:	ed9f 0ad8 	vldr	s0, [pc, #864]	; 800cfa8 <_ZN12HalfVertBaseC1Ev+0x1090>
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f00a fc63 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.79971531084538f);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc54:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cfac <_ZN12HalfVertBaseC1Ev+0x1094>
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f00a fc5b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.35744933478198f);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc64:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800cfb0 <_ZN12HalfVertBaseC1Ev+0x1098>
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f00a fc53 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.12688965935294f);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc74:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800cfb4 <_ZN12HalfVertBaseC1Ev+0x109c>
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f00a fc4b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.16818965622451f);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc84:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800cfb8 <_ZN12HalfVertBaseC1Ev+0x10a0>
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f00a fc43 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.526872036552974f);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cc94:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800cfbc <_ZN12HalfVertBaseC1Ev+0x10a4>
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f00a fc3b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.231159798269493f);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cca4:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 800cfc0 <_ZN12HalfVertBaseC1Ev+0x10a8>
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f00a fc33 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.290350294925956f);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ccb4:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 800cfc4 <_ZN12HalfVertBaseC1Ev+0x10ac>
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00a fc2b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.694331033887536f);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ccc4:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800cfc8 <_ZN12HalfVertBaseC1Ev+0x10b0>
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f00a fc23 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.41426605088188f);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ccd4:	ed9f 0abd 	vldr	s0, [pc, #756]	; 800cfcc <_ZN12HalfVertBaseC1Ev+0x10b4>
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f00a fc1b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.40441039162803f);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cce4:	ed9f 0aba 	vldr	s0, [pc, #744]	; 800cfd0 <_ZN12HalfVertBaseC1Ev+0x10b8>
 800cce8:	4618      	mov	r0, r3
 800ccea:	f00a fc13 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.60494032305345f);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ccf4:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800cfd4 <_ZN12HalfVertBaseC1Ev+0x10bc>
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f00a fc0b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.94562467196677f);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd04:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800cfd8 <_ZN12HalfVertBaseC1Ev+0x10c0>
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f00a fc03 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.35011316223333f);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd14:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 800cfdc <_ZN12HalfVertBaseC1Ev+0x10c4>
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f00a fbfb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.74057371625765f);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd24:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800cfe0 <_ZN12HalfVertBaseC1Ev+0x10c8>
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f00a fbf3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.04239966906215f);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd34:	ed9f 0aab 	vldr	s0, [pc, #684]	; 800cfe4 <_ZN12HalfVertBaseC1Ev+0x10cc>
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f00a fbeb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.1886935770351f);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd44:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800cfe8 <_ZN12HalfVertBaseC1Ev+0x10d0>
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f00a fbe3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.1242545542083f);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd54:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800cfec <_ZN12HalfVertBaseC1Ev+0x10d4>
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f00a fbdb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.8088247383059f);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd64:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800cff0 <_ZN12HalfVertBaseC1Ev+0x10d8>
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f00a fbd3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.2193954264221f);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd74:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800cff4 <_ZN12HalfVertBaseC1Ev+0x10dc>
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f00a fbcb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.3514348252508f);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd84:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800cff8 <_ZN12HalfVertBaseC1Ev+0x10e0>
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f00a fbc3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.2189616523051f);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cd94:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800cffc <_ZN12HalfVertBaseC1Ev+0x10e4>
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f00a fbbb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.8534630332682f);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cda4:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800d000 <_ZN12HalfVertBaseC1Ev+0x10e8>
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f00a fbb3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.3017255702599f);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cdb4:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800d004 <_ZN12HalfVertBaseC1Ev+0x10ec>
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f00a fbab 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.6227138238942f);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cdc4:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800d008 <_ZN12HalfVertBaseC1Ev+0x10f0>
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f00a fba3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.88369455490295f);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cdd4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800d00c <_ZN12HalfVertBaseC1Ev+0x10f4>
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f00a fb9b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.15584283119328f);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cde4:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800d010 <_ZN12HalfVertBaseC1Ev+0x10f8>
 800cde8:	4618      	mov	r0, r3
 800cdea:	f00a fb93 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.50960651418088f);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cdf4:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800d014 <_ZN12HalfVertBaseC1Ev+0x10fc>
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f00a fb8b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.01011625080225f);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce04:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800d018 <_ZN12HalfVertBaseC1Ev+0x1100>
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f00a fb83 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.71292388037011f);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce14:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800d01c <_ZN12HalfVertBaseC1Ev+0x1104>
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f00a fb7b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.66033892000534f);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce24:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800d020 <_ZN12HalfVertBaseC1Ev+0x1108>
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f00a fb73 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.87858532766169f);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce34:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800d024 <_ZN12HalfVertBaseC1Ev+0x110c>
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f00a fb6b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.3759599808687f);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce44:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800d028 <_ZN12HalfVertBaseC1Ev+0x1110>
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f00a fb63 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.14210692132481f);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce54:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800d02c <_ZN12HalfVertBaseC1Ev+0x1114>
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f00a fb5b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.1484542331821f);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce64:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800d030 <_ZN12HalfVertBaseC1Ev+0x1118>
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f00a fb53 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.3497897427244f);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce74:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800d034 <_ZN12HalfVertBaseC1Ev+0x111c>
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f00a fb4b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.6868777627517f);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce84:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800d038 <_ZN12HalfVertBaseC1Ev+0x1120>
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f00a fb43 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.0899606566989f);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce94:	ed9f 0a69 	vldr	s0, [pc, #420]	; 800d03c <_ZN12HalfVertBaseC1Ev+0x1124>
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f00a fb3b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.4829289803912f);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cea4:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800d040 <_ZN12HalfVertBaseC1Ev+0x1128>
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f00a fb33 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.7879048635679f);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ceb4:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800d044 <_ZN12HalfVertBaseC1Ev+0x112c>
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f00a fb2b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.929959610233f);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cec4:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800d048 <_ZN12HalfVertBaseC1Ev+0x1130>
 800cec8:	4618      	mov	r0, r3
 800ceca:	f00a fb23 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.8416711656032f);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ced4:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800d04c <_ZN12HalfVertBaseC1Ev+0x1134>
 800ced8:	4618      	mov	r0, r3
 800ceda:	f00a fb1b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(19.467247328332f);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cee4:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800d050 <_ZN12HalfVertBaseC1Ev+0x1138>
 800cee8:	4618      	mov	r0, r3
 800ceea:	f00a fb13 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(19.7659567885326f);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cef4:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800d054 <_ZN12HalfVertBaseC1Ev+0x113c>
 800cef8:	4618      	mov	r0, r3
 800cefa:	f00a fb0b 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(19.7146585752098f);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf04:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800d058 <_ZN12HalfVertBaseC1Ev+0x1140>
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f00a fb03 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(19.309273663928f);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf14:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800d05c <_ZN12HalfVertBaseC1Ev+0x1144>
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f00a fafb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.5651075526746f);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf24:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800d060 <_ZN12HalfVertBaseC1Ev+0x1148>
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f00a faf3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.516003662712f);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf34:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800d064 <_ZN12HalfVertBaseC1Ev+0x114c>
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f00a faeb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.2123782857614f);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf44:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d068 <_ZN12HalfVertBaseC1Ev+0x1150>
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f00a fae3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.7182568609092f);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf54:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800d06c <_ZN12HalfVertBaseC1Ev+0x1154>
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f00a fadb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.1074935942916f);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf64:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800d070 <_ZN12HalfVertBaseC1Ev+0x1158>
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f00a fad3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.459402856576f);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf74:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800d074 <_ZN12HalfVertBaseC1Ev+0x115c>
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f00a facb 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.85407461570559f);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf84:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800d078 <_ZN12HalfVertBaseC1Ev+0x1160>
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f00a fac3 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.36765423415256f);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf94:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800d07c <_ZN12HalfVertBaseC1Ev+0x1164>
 800cf98:	4618      	mov	r0, r3
 800cf9a:	e0e1      	b.n	800d160 <_ZN12HalfVertBaseC1Ev+0x1248>
 800cf9c:	4132f97b 	.word	0x4132f97b
 800cfa0:	411a7981 	.word	0x411a7981
 800cfa4:	410070dd 	.word	0x410070dd
 800cfa8:	40cc3d0c 	.word	0x40cc3d0c
 800cfac:	40999745 	.word	0x40999745
 800cfb0:	4056e073 	.word	0x4056e073
 800cfb4:	40081ef6 	.word	0x40081ef6
 800cfb8:	3f95873d 	.word	0x3f95873d
 800cfbc:	3f06e116 	.word	0x3f06e116
 800cfc0:	3e6cb527 	.word	0x3e6cb527
 800cfc4:	3e94a8cb 	.word	0x3e94a8cb
 800cfc8:	3f31bfae 	.word	0x3f31bfae
 800cfcc:	3fb506ac 	.word	0x3fb506ac
 800cfd0:	4019e1dc 	.word	0x4019e1dc
 800cfd4:	4066b758 	.word	0x4066b758
 800cfd8:	409e428f 	.word	0x409e428f
 800cfdc:	40cb3421 	.word	0x40cb3421
 800cfe0:	40f7b2c8 	.word	0x40f7b2c8
 800cfe4:	4110adab 	.word	0x4110adab
 800cfe8:	412304e4 	.word	0x412304e4
 800cfec:	4131fcf2 	.word	0x4131fcf2
 800cff0:	413cf0f2 	.word	0x413cf0f2
 800cff4:	414382a5 	.word	0x414382a5
 800cff8:	41459f7a 	.word	0x41459f7a
 800cffc:	414380de 	.word	0x414380de
 800d000:	413da7c9 	.word	0x413da7c9
 800d004:	4134d3de 	.word	0x4134d3de
 800d008:	4129f6a3 	.word	0x4129f6a3
 800d00c:	411e239d 	.word	0x411e239d
 800d010:	41127e55 	.word	0x41127e55
 800d014:	41082759 	.word	0x41082759
 800d018:	41002970 	.word	0x41002970
 800d01c:	40f6d046 	.word	0x40f6d046
 800d020:	40f5217f 	.word	0x40f5217f
 800d024:	40fc1d5f 	.word	0x40fc1d5f
 800d028:	410603ef 	.word	0x410603ef
 800d02c:	41124612 	.word	0x41124612
 800d030:	41226012 	.word	0x41226012
 800d034:	413598bd 	.word	0x413598bd
 800d038:	414afd74 	.word	0x414afd74
 800d03c:	4161707b 	.word	0x4161707b
 800d040:	4177ba14 	.word	0x4177ba14
 800d044:	41864da1 	.word	0x41864da1
 800d048:	418f708f 	.word	0x418f708f
 800d04c:	4196bbbe 	.word	0x4196bbbe
 800d050:	419bbcec 	.word	0x419bbcec
 800d054:	419e20ae 	.word	0x419e20ae
 800d058:	419db79f 	.word	0x419db79f
 800d05c:	419a7964 	.word	0x419a7964
 800d060:	41948557 	.word	0x41948557
 800d064:	418c20c7 	.word	0x418c20c7
 800d068:	4181b2f3 	.word	0x4181b2f3
 800d06c:	416b7dfb 	.word	0x416b7dfb
 800d070:	4151b84b 	.word	0x4151b84b
 800d074:	413759b7 	.word	0x413759b7
 800d078:	411daa4a 	.word	0x411daa4a
 800d07c:	4105e1e9 	.word	0x4105e1e9
 800d080:	40e22c12 	.word	0x40e22c12
 800d084:	40c0531e 	.word	0x40c0531e
 800d088:	40a77fb6 	.word	0x40a77fb6
 800d08c:	4098677b 	.word	0x4098677b
 800d090:	409325d3 	.word	0x409325d3
 800d094:	40973c4f 	.word	0x40973c4f
 800d098:	40a39c85 	.word	0x40a39c85
 800d09c:	40b6bac0 	.word	0x40b6bac0
 800d0a0:	40cea859 	.word	0x40cea859
 800d0a4:	40e93410 	.word	0x40e93410
 800d0a8:	41020739 	.word	0x41020739
 800d0ac:	410e77fb 	.word	0x410e77fb
 800d0b0:	4118df3c 	.word	0x4118df3c
 800d0b4:	412057ed 	.word	0x412057ed
 800d0b8:	412433bc 	.word	0x412433bc
 800d0bc:	4124065e 	.word	0x4124065e
 800d0c0:	411facb3 	.word	0x411facb3
 800d0c4:	41174f53 	.word	0x41174f53
 800d0c8:	410b604f 	.word	0x410b604f
 800d0cc:	40f928b7 	.word	0x40f928b7
 800d0d0:	40d7af8a 	.word	0x40d7af8a
 800d0d4:	40b47fb2 	.word	0x40b47fb2
 800d0d8:	4091f365 	.word	0x4091f365
 800d0dc:	4064ddd7 	.word	0x4064ddd7
 800d0e0:	4030747a 	.word	0x4030747a
 800d0e4:	400ab870 	.word	0x400ab870
 800d0e8:	3fede67a 	.word	0x3fede67a
 800d0ec:	3feee7e3 	.word	0x3feee7e3
 800d0f0:	400d6803 	.word	0x400d6803
 800d0f4:	4038c5af 	.word	0x4038c5af
 800d0f8:	4078493f 	.word	0x4078493f
 800d0fc:	40a4c2b4 	.word	0x40a4c2b4
 800d100:	40d482e5 	.word	0x40d482e5
 800d104:	4104a05d 	.word	0x4104a05d
 800d108:	41204698 	.word	0x41204698
 800d10c:	413be987 	.word	0x413be987
 800d110:	41563eb9 	.word	0x41563eb9
 800d114:	416e0f41 	.word	0x416e0f41
 800d118:	418124e5 	.word	0x418124e5
 800d11c:	41890936 	.word	0x41890936
 800d120:	418e679f 	.word	0x418e679f
 800d124:	4191186c 	.word	0x4191186c
 800d128:	41911b2e 	.word	0x41911b2e
 800d12c:	418e9652 	.word	0x418e9652
 800d130:	4189d467 	.word	0x4189d467
 800d134:	41833f2d 	.word	0x41833f2d
 800d138:	4176b187 	.word	0x4176b187
 800d13c:	416566c6 	.word	0x416566c6
 800d140:	4153d052 	.word	0x4153d052
 800d144:	41431afb 	.word	0x41431afb
 800d148:	41345b69 	.word	0x41345b69
 800d14c:	41287cee 	.word	0x41287cee
 800d150:	41203307 	.word	0x41203307
 800d154:	411bee5d 	.word	0x411bee5d
 800d158:	411bd609 	.word	0x411bd609
 800d15c:	411fc570 	.word	0x411fc570
 800d160:	f00a f9d8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.06787952355117f);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d16a:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 800d080 <_ZN12HalfVertBaseC1Ev+0x1168>
 800d16e:	4618      	mov	r0, r3
 800d170:	f00a f9d0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.01014595205178f);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d17a:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800d084 <_ZN12HalfVertBaseC1Ev+0x116c>
 800d17e:	4618      	mov	r0, r3
 800d180:	f00a f9c8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.23433951287542f);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d18a:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 800d088 <_ZN12HalfVertBaseC1Ev+0x1170>
 800d18e:	4618      	mov	r0, r3
 800d190:	f00a f9c0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.7626316890286f);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d19a:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 800d08c <_ZN12HalfVertBaseC1Ev+0x1174>
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f00a f9b8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.59836714861792f);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1aa:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 800d090 <_ZN12HalfVertBaseC1Ev+0x1178>
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f00a f9b0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.72611190331496f);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1ba:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 800d094 <_ZN12HalfVertBaseC1Ev+0x117c>
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f00a f9a8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.11285659736723f);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1ca:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 800d098 <_ZN12HalfVertBaseC1Ev+0x1180>
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f00a f9a0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.71029679233904f);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1da:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 800d09c <_ZN12HalfVertBaseC1Ev+0x1184>
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f00a f998 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.45805009181703f);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1ea:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 800d0a0 <_ZN12HalfVertBaseC1Ev+0x1188>
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f00a f990 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.28760534997624f);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d1fa:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 800d0a4 <_ZN12HalfVertBaseC1Ev+0x118c>
 800d1fe:	4618      	mov	r0, r3
 800d200:	f00a f988 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.12676363652561f);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d20a:	ed1f 0a59 	vldr	s0, [pc, #-356]	; 800d0a8 <_ZN12HalfVertBaseC1Ev+0x1190>
 800d20e:	4618      	mov	r0, r3
 800d210:	f00a f980 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.90429169475964f);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d21a:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 800d0ac <_ZN12HalfVertBaseC1Ev+0x1194>
 800d21e:	4618      	mov	r0, r3
 800d220:	f00a f978 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.55450057730519f);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d22a:	ed1f 0a5f 	vldr	s0, [pc, #-380]	; 800d0b0 <_ZN12HalfVertBaseC1Ev+0x1198>
 800d22e:	4618      	mov	r0, r3
 800d230:	f00a f970 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.0214667217666f);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d23a:	ed1f 0a62 	vldr	s0, [pc, #-392]	; 800d0b4 <_ZN12HalfVertBaseC1Ev+0x119c>
 800d23e:	4618      	mov	r0, r3
 800d240:	f00a f968 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.26263055995f);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d24a:	ed1f 0a65 	vldr	s0, [pc, #-404]	; 800d0b8 <_ZN12HalfVertBaseC1Ev+0x11a0>
 800d24e:	4618      	mov	r0, r3
 800d250:	f00a f960 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.2515541601625f);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d25a:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 800d0bc <_ZN12HalfVertBaseC1Ev+0x11a4>
 800d25e:	4618      	mov	r0, r3
 800d260:	f00a f958 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.97966309877917f);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d26a:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 800d0c0 <_ZN12HalfVertBaseC1Ev+0x11a8>
 800d26e:	4618      	mov	r0, r3
 800d270:	f00a f950 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.45686603851587f);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d27a:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 800d0c4 <_ZN12HalfVertBaseC1Ev+0x11ac>
 800d27e:	4618      	mov	r0, r3
 800d280:	f00a f948 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.7110123857458f);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d28a:	ed1f 0a71 	vldr	s0, [pc, #-452]	; 800d0c8 <_ZN12HalfVertBaseC1Ev+0x11b0>
 800d28e:	4618      	mov	r0, r3
 800d290:	f00a f940 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(7.78622002108418f);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d29a:	ed1f 0a74 	vldr	s0, [pc, #-464]	; 800d0cc <_ZN12HalfVertBaseC1Ev+0x11b4>
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f00a f938 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.74017814685503f);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2aa:	ed1f 0a77 	vldr	s0, [pc, #-476]	; 800d0d0 <_ZN12HalfVertBaseC1Ev+0x11b8>
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f00a f930 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.64058775583206f);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2ba:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 800d0d4 <_ZN12HalfVertBaseC1Ev+0x11bc>
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f00a f928 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(4.56096131553326f);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2ca:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 800d0d8 <_ZN12HalfVertBaseC1Ev+0x11c0>
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f00a f920 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.57603994591644f);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2da:	ed1f 0a80 	vldr	s0, [pc, #-512]	; 800d0dc <_ZN12HalfVertBaseC1Ev+0x11c4>
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f00a f918 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.75710926122278f);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2ea:	ed1f 0a83 	vldr	s0, [pc, #-524]	; 800d0e0 <_ZN12HalfVertBaseC1Ev+0x11c8>
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f00a f910 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.1675072091891f);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2fa:	ed1f 0a86 	vldr	s0, [pc, #-536]	; 800d0e4 <_ZN12HalfVertBaseC1Ev+0x11cc>
 800d2fe:	4618      	mov	r0, r3
 800d300:	f00a f908 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.85859608593474f);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d30a:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 800d0e8 <_ZN12HalfVertBaseC1Ev+0x11d0>
 800d30e:	4618      	mov	r0, r3
 800d310:	f00a f900 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.86645160944919f);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d31a:	ed1f 0a8c 	vldr	s0, [pc, #-560]	; 800d0ec <_ZN12HalfVertBaseC1Ev+0x11d4>
 800d31e:	4618      	mov	r0, r3
 800d320:	f00a f8f8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.20947346486433f);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d32a:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 800d0f0 <_ZN12HalfVertBaseC1Ev+0x11d8>
 800d32e:	4618      	mov	r0, r3
 800d330:	f00a f8f0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.88706565583131f);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d33a:	ed1f 0a92 	vldr	s0, [pc, #-584]	; 800d0f4 <_ZN12HalfVertBaseC1Ev+0x11dc>
 800d33e:	4618      	mov	r0, r3
 800d340:	f00a f8e8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.87947050300013f);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d34a:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 800d0f8 <_ZN12HalfVertBaseC1Ev+0x11e0>
 800d34e:	4618      	mov	r0, r3
 800d350:	f00a f8e0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.14876739207152f);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d35a:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 800d0fc <_ZN12HalfVertBaseC1Ev+0x11e4>
 800d35e:	4618      	mov	r0, r3
 800d360:	f00a f8d8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.64097814046536f);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d36a:	ed1f 0a9b 	vldr	s0, [pc, #-620]	; 800d100 <_ZN12HalfVertBaseC1Ev+0x11e8>
 800d36e:	4618      	mov	r0, r3
 800d370:	f00a f8d0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.28915091900493f);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d37a:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 800d104 <_ZN12HalfVertBaseC1Ev+0x11ec>
 800d37e:	4618      	mov	r0, r3
 800d380:	f00a f8c8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.0172351616657f);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d38a:	ed1f 0aa1 	vldr	s0, [pc, #-644]	; 800d108 <_ZN12HalfVertBaseC1Ev+0x11f0>
 800d38e:	4618      	mov	r0, r3
 800d390:	f00a f8c0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.7445131121148f);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d39a:	ed1f 0aa4 	vldr	s0, [pc, #-656]	; 800d10c <_ZN12HalfVertBaseC1Ev+0x11f4>
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f00a f8b8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.3903131842228f);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3aa:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 800d110 <_ZN12HalfVertBaseC1Ev+0x11f8>
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f00a f8b0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.8787237938884f);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3ba:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 800d114 <_ZN12HalfVertBaseC1Ev+0x11fc>
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f00a f8a8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.1430145181956f);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3ca:	ed1f 0aad 	vldr	s0, [pc, #-692]	; 800d118 <_ZN12HalfVertBaseC1Ev+0x1200>
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f00a f8a0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.1294979929581f);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3da:	ed1f 0ab0 	vldr	s0, [pc, #-704]	; 800d11c <_ZN12HalfVertBaseC1Ev+0x1204>
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f00a f898 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.8005964987916f);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3ea:	ed1f 0ab3 	vldr	s0, [pc, #-716]	; 800d120 <_ZN12HalfVertBaseC1Ev+0x1208>
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f00a f890 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.1369254969443f);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d3fa:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 800d124 <_ZN12HalfVertBaseC1Ev+0x120c>
 800d3fe:	4618      	mov	r0, r3
 800d400:	f00a f888 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(18.1382706082503f);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d40a:	ed1f 0ab9 	vldr	s0, [pc, #-740]	; 800d128 <_ZN12HalfVertBaseC1Ev+0x1210>
 800d40e:	4618      	mov	r0, r3
 800d410:	f00a f880 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.8233979455502f);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d41a:	ed1f 0abc 	vldr	s0, [pc, #-752]	; 800d12c <_ZN12HalfVertBaseC1Ev+0x1214>
 800d41e:	4618      	mov	r0, r3
 800d420:	f00a f878 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(17.2287123843034f);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d42a:	ed1f 0abf 	vldr	s0, [pc, #-764]	; 800d130 <_ZN12HalfVertBaseC1Ev+0x1218>
 800d42e:	4618      	mov	r0, r3
 800d430:	f00a f870 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(16.4058483270326f);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d43a:	ed1f 0ac2 	vldr	s0, [pc, #-776]	; 800d134 <_ZN12HalfVertBaseC1Ev+0x121c>
 800d43e:	4618      	mov	r0, r3
 800d440:	f00a f868 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.4183413350047f);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d44a:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 800d138 <_ZN12HalfVertBaseC1Ev+0x1220>
 800d44e:	4618      	mov	r0, r3
 800d450:	f00a f860 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.3375909021571f);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d45a:	ed1f 0ac8 	vldr	s0, [pc, #-800]	; 800d13c <_ZN12HalfVertBaseC1Ev+0x1224>
 800d45e:	4618      	mov	r0, r3
 800d460:	f00a f858 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.2383591848269f);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d46a:	ed1f 0acb 	vldr	s0, [pc, #-812]	; 800d140 <_ZN12HalfVertBaseC1Ev+0x1228>
 800d46e:	4618      	mov	r0, r3
 800d470:	f00a f850 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.1940872342096f);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d47a:	ed1f 0ace 	vldr	s0, [pc, #-824]	; 800d144 <_ZN12HalfVertBaseC1Ev+0x122c>
 800d47e:	4618      	mov	r0, r3
 800d480:	f00a f848 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.2723170843749f);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d48a:	ed1f 0ad1 	vldr	s0, [pc, #-836]	; 800d148 <_ZN12HalfVertBaseC1Ev+0x1230>
 800d48e:	4618      	mov	r0, r3
 800d490:	f00a f840 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.5305007089172f);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d49a:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 800d14c <_ZN12HalfVertBaseC1Ev+0x1234>
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f00a f838 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.012457549612f);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4aa:	ed1f 0ad7 	vldr	s0, [pc, #-860]	; 800d150 <_ZN12HalfVertBaseC1Ev+0x1238>
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f00a f830 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.74569427805638f);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4ba:	ed1f 0ada 	vldr	s0, [pc, #-872]	; 800d154 <_ZN12HalfVertBaseC1Ev+0x123c>
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f00a f828 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.73975507446004f);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4ca:	ed1f 0add 	vldr	s0, [pc, #-884]	; 800d158 <_ZN12HalfVertBaseC1Ev+0x1240>
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f00a f820 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(9.98570211828255f);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4da:	ed1f 0ae0 	vldr	s0, [pc, #-896]	; 800d15c <_ZN12HalfVertBaseC1Ev+0x1244>
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f00a f818 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.4567576406144f);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4ea:	ed9f 0adf 	vldr	s0, [pc, #892]	; 800d868 <_ZN12HalfVertBaseC1Ev+0x1950>
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f00a f810 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.1100683273729f);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d4fa:	ed9f 0adc 	vldr	s0, [pc, #880]	; 800d86c <_ZN12HalfVertBaseC1Ev+0x1954>
 800d4fe:	4618      	mov	r0, r3
 800d500:	f00a f808 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.8894792381073f);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d50a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d870 <_ZN12HalfVertBaseC1Ev+0x1958>
 800d50e:	4618      	mov	r0, r3
 800d510:	f00a f800 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.7291493397579f);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d51a:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 800d874 <_ZN12HalfVertBaseC1Ev+0x195c>
 800d51e:	4618      	mov	r0, r3
 800d520:	f009 fff8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.557781115795f);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d52a:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 800d878 <_ZN12HalfVertBaseC1Ev+0x1960>
 800d52e:	4618      	mov	r0, r3
 800d530:	f009 fff0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.303203459779f);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d53a:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 800d87c <_ZN12HalfVertBaseC1Ev+0x1964>
 800d53e:	4618      	mov	r0, r3
 800d540:	f009 ffe8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.8970250402167f);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d54a:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800d880 <_ZN12HalfVertBaseC1Ev+0x1968>
 800d54e:	4618      	mov	r0, r3
 800d550:	f009 ffe0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.2790654764267f);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d55a:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800d884 <_ZN12HalfVertBaseC1Ev+0x196c>
 800d55e:	4618      	mov	r0, r3
 800d560:	f009 ffd8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.4012949647121f);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d56a:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 800d888 <_ZN12HalfVertBaseC1Ev+0x1970>
 800d56e:	4618      	mov	r0, r3
 800d570:	f009 ffd0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(15.2310332355113f);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d57a:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800d88c <_ZN12HalfVertBaseC1Ev+0x1974>
 800d57e:	4618      	mov	r0, r3
 800d580:	f009 ffc8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(14.7532102454138f);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d58a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d890 <_ZN12HalfVertBaseC1Ev+0x1978>
 800d58e:	4618      	mov	r0, r3
 800d590:	f009 ffc0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(13.9715467826925f);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d59a:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800d894 <_ZN12HalfVertBaseC1Ev+0x197c>
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f009 ffb8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(12.9085793249168f);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5aa:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800d898 <_ZN12HalfVertBaseC1Ev+0x1980>
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f009 ffb0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(11.6045258765107f);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5ba:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800d89c <_ZN12HalfVertBaseC1Ev+0x1984>
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f009 ffa8 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(10.115059813972f);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5ca:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 800d8a0 <_ZN12HalfVertBaseC1Ev+0x1988>
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f009 ffa0 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(8.50812572211965f);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5da:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800d8a4 <_ZN12HalfVertBaseC1Ev+0x198c>
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f009 ff98 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(6.8599919502722f);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5ea:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800d8a8 <_ZN12HalfVertBaseC1Ev+0x1990>
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f009 ff90 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(5.25077838842075f);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d5fa:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800d8ac <_ZN12HalfVertBaseC1Ev+0x1994>
 800d5fe:	4618      	mov	r0, r3
 800d600:	f009 ff88 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(3.7597370690662f);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d60a:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800d8b0 <_ZN12HalfVertBaseC1Ev+0x1998>
 800d60e:	4618      	mov	r0, r3
 800d610:	f009 ff80 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(2.46056814987075f);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d61a:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800d8b4 <_ZN12HalfVertBaseC1Ev+0x199c>
 800d61e:	4618      	mov	r0, r3
 800d620:	f009 ff78 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(1.41706209088805f);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d62a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800d8b8 <_ZN12HalfVertBaseC1Ev+0x19a0>
 800d62e:	4618      	mov	r0, r3
 800d630:	f009 ff70 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.679332863410023f);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d63a:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800d8bc <_ZN12HalfVertBaseC1Ev+0x19a4>
 800d63e:	4618      	mov	r0, r3
 800d640:	f009 ff68 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    VoltageGraph.addDataPoint(0.280872219738503f);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d64a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800d8c0 <_ZN12HalfVertBaseC1Ev+0x19a8>
 800d64e:	4618      	mov	r0, r3
 800d650:	f009 ff60 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    PowerGraph.setScale(100);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800d65a:	2164      	movs	r1, #100	; 0x64
 800d65c:	4618      	mov	r0, r3
 800d65e:	f009 ff07 	bl	8017470 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    PowerGraph.setPosition(10, 382, 412, 167);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f503 60f1 	add.w	r0, r3, #1928	; 0x788
 800d668:	23a7      	movs	r3, #167	; 0xa7
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800d670:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800d674:	210a      	movs	r1, #10
 800d676:	f7fd fa28 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerGraph.setGraphAreaMargin(0, 0, 0, 0);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f503 60f1 	add.w	r0, r3, #1928	; 0x788
 800d680:	2300      	movs	r3, #0
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	2300      	movs	r3, #0
 800d686:	2200      	movs	r2, #0
 800d688:	2100      	movs	r1, #0
 800d68a:	f009 fe43 	bl	8017314 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    PowerGraph.setGraphAreaPadding(0, 0, 0, 0);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f503 60f1 	add.w	r0, r3, #1928	; 0x788
 800d694:	2300      	movs	r3, #0
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	2300      	movs	r3, #0
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	f009 fc24 	bl	8016eea <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    PowerGraph.setGraphRangeY(0, 20);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800d6a8:	2214      	movs	r2, #20
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f009 fa3b 	bl	8016b28 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    PowerGraphMinorXAxisGrid.setScale(100);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d6b8:	2164      	movs	r1, #100	; 0x64
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f009 ffae 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphMinorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f503 644a 	add.w	r4, r3, #3232	; 0xca0
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	f7fd fe5c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f009 ff29 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    PowerGraphMinorXAxisGrid.setInterval(10);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d6e0:	210a      	movs	r1, #10
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f00a f8aa 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    PowerGraphMinorXAxisGrid.setLineWidth(1);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d6ee:	2101      	movs	r1, #1
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f00a f8b2 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    PowerGraphMinorXAxisGrid.setAlpha(20);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d6fc:	2114      	movs	r1, #20
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd fec3 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    PowerGraphMinorXAxisGrid.setMajorGrid(PowerGraphMajorXAxisGrid);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f00a f89f 	bl	8017856 <_ZN8touchgfx20GraphElementGridBase12setMajorGridERKS0_>
    PowerGraph.addGraphElement(PowerGraphMinorXAxisGrid);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d724:	4619      	mov	r1, r3
 800d726:	4610      	mov	r0, r2
 800d728:	f009 fc9c 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraphMinorYAxisGrid.setScale(100);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800d732:	2164      	movs	r1, #100	; 0x64
 800d734:	4618      	mov	r0, r3
 800d736:	f009 ff71 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphMinorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f603 44e4 	addw	r4, r3, #3300	; 0xce4
 800d740:	2200      	movs	r2, #0
 800d742:	2100      	movs	r1, #0
 800d744:	2000      	movs	r0, #0
 800d746:	f7fd fe1f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d74a:	4603      	mov	r3, r0
 800d74c:	4619      	mov	r1, r3
 800d74e:	4620      	mov	r0, r4
 800d750:	f009 feec 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    PowerGraphMinorYAxisGrid.setInterval(10);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800d75a:	210a      	movs	r1, #10
 800d75c:	4618      	mov	r0, r3
 800d75e:	f00a f86d 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    PowerGraphMinorYAxisGrid.setLineWidth(1);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800d768:	2101      	movs	r1, #1
 800d76a:	4618      	mov	r0, r3
 800d76c:	f00a f875 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    PowerGraphMinorYAxisGrid.setAlpha(20);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800d776:	2114      	movs	r1, #20
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd fe86 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    PowerGraphMinorYAxisGrid.setMajorGrid(PowerGraphMajorYAxisGrid);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f603 42e4 	addw	r2, r3, #3300	; 0xce4
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d78a:	4619      	mov	r1, r3
 800d78c:	4610      	mov	r0, r2
 800d78e:	f00a f862 	bl	8017856 <_ZN8touchgfx20GraphElementGridBase12setMajorGridERKS0_>
    PowerGraph.addGraphElement(PowerGraphMinorYAxisGrid);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	f009 fc5f 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraphMajorXAxisGrid.setScale(100);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d7ac:	2164      	movs	r1, #100	; 0x64
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f009 ff34 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphMajorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f603 5428 	addw	r4, r3, #3368	; 0xd28
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2100      	movs	r1, #0
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f7fd fde2 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f009 feaf 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    PowerGraphMajorXAxisGrid.setInterval(20);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d7d4:	2114      	movs	r1, #20
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f00a f830 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    PowerGraphMajorXAxisGrid.setLineWidth(1);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f00a f838 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    PowerGraphMajorXAxisGrid.setAlpha(100);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d7f0:	2164      	movs	r1, #100	; 0x64
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fd fe49 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    PowerGraph.addGraphElement(PowerGraphMajorXAxisGrid);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 800d804:	4619      	mov	r1, r3
 800d806:	4610      	mov	r0, r2
 800d808:	f009 fc2c 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraphMajorYAxisGrid.setScale(100);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d812:	2164      	movs	r1, #100	; 0x64
 800d814:	4618      	mov	r0, r3
 800d816:	f009 ff01 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphMajorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f603 546c 	addw	r4, r3, #3436	; 0xd6c
 800d820:	2200      	movs	r2, #0
 800d822:	2100      	movs	r1, #0
 800d824:	2000      	movs	r0, #0
 800d826:	f7fd fdaf 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d82a:	4603      	mov	r3, r0
 800d82c:	4619      	mov	r1, r3
 800d82e:	4620      	mov	r0, r4
 800d830:	f009 fe7c 	bl	801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    PowerGraphMajorYAxisGrid.setInterval(20);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d83a:	2114      	movs	r1, #20
 800d83c:	4618      	mov	r0, r3
 800d83e:	f009 fffd 	bl	801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>
    PowerGraphMajorYAxisGrid.setLineWidth(1);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d848:	2101      	movs	r1, #1
 800d84a:	4618      	mov	r0, r3
 800d84c:	f00a f805 	bl	801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>
    PowerGraphMajorYAxisGrid.setAlpha(100);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d856:	2164      	movs	r1, #100	; 0x64
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fd fe16 	bl	800b48a <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    PowerGraph.addGraphElement(PowerGraphMajorYAxisGrid);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	e083      	b.n	800d970 <_ZN12HalfVertBaseC1Ev+0x1a58>
 800d868:	41274ee1 	.word	0x41274ee1
 800d86c:	4131c2d7 	.word	0x4131c2d7
 800d870:	413e3b4f 	.word	0x413e3b4f
 800d874:	414baa98 	.word	0x414baa98
 800d878:	4158ecac 	.word	0x4158ecac
 800d87c:	4164d9ec 	.word	0x4164d9ec
 800d880:	416e5a37 	.word	0x416e5a37
 800d884:	4174770d 	.word	0x4174770d
 800d888:	41766bb4 	.word	0x41766bb4
 800d88c:	4173b250 	.word	0x4173b250
 800d890:	416c0d26 	.word	0x416c0d26
 800d894:	415f8b75 	.word	0x415f8b75
 800d898:	414e898a 	.word	0x414e898a
 800d89c:	4139ac23 	.word	0x4139ac23
 800d8a0:	4121d749 	.word	0x4121d749
 800d8a4:	41082148 	.word	0x41082148
 800d8a8:	40db850e 	.word	0x40db850e
 800d8ac:	40a80660 	.word	0x40a80660
 800d8b0:	40709f88 	.word	0x40709f88
 800d8b4:	401d79f3 	.word	0x401d79f3
 800d8b8:	3fb5624a 	.word	0x3fb5624a
 800d8bc:	3f2de8c2 	.word	0x3f2de8c2
 800d8c0:	3e8fce7c 	.word	0x3e8fce7c
 800d8c4:	40936992 	.word	0x40936992
 800d8c8:	409a0d9d 	.word	0x409a0d9d
 800d8cc:	40a893bc 	.word	0x40a893bc
 800d8d0:	40bd5050 	.word	0x40bd5050
 800d8d4:	40d63dad 	.word	0x40d63dad
 800d8d8:	40f11de2 	.word	0x40f11de2
 800d8dc:	4105cfea 	.word	0x4105cfea
 800d8e0:	4111c2b9 	.word	0x4111c2b9
 800d8e4:	411b644b 	.word	0x411b644b
 800d8e8:	4121de28 	.word	0x4121de28
 800d8ec:	41249449 	.word	0x41249449
 800d8f0:	41232f36 	.word	0x41232f36
 800d8f4:	411da1e1 	.word	0x411da1e1
 800d8f8:	41142ac5 	.word	0x41142ac5
 800d8fc:	41075052 	.word	0x41075052
 800d900:	40efb191 	.word	0x40efb191
 800d904:	40cd7c26 	.word	0x40cd7c26
 800d908:	40aa3ca2 	.word	0x40aa3ca2
 800d90c:	40885422 	.word	0x40885422
 800d910:	40544537 	.word	0x40544537
 800d914:	4023c162 	.word	0x4023c162
 800d918:	4002f791 	.word	0x4002f791
 800d91c:	3fe9da48 	.word	0x3fe9da48
 800d920:	3ff73fce 	.word	0x3ff73fce
 800d924:	4017e3d6 	.word	0x4017e3d6
 800d928:	404952ed 	.word	0x404952ed
 800d92c:	40872803 	.word	0x40872803
 800d930:	40b20e59 	.word	0x40b20e59
 800d934:	40e3804f 	.word	0x40e3804f
 800d938:	410ca011 	.word	0x410ca011
 800d93c:	412867e0 	.word	0x412867e0
 800d940:	4143cb00 	.word	0x4143cb00
 800d944:	415d82bc 	.word	0x415d82bc
 800d948:	41746157 	.word	0x41746157
 800d94c:	4183b1ca 	.word	0x4183b1ca
 800d950:	418adfd8 	.word	0x418adfd8
 800d954:	418f786a 	.word	0x418f786a
 800d958:	41915f29 	.word	0x41915f29
 800d95c:	41909f24 	.word	0x41909f24
 800d960:	418d69bb 	.word	0x418d69bb
 800d964:	41881330 	.word	0x41881330
 800d968:	41810d28 	.word	0x41810d28
 800d96c:	4171bebf 	.word	0x4171bebf
 800d970:	f603 536c 	addw	r3, r3, #3436	; 0xd6c
 800d974:	4619      	mov	r1, r3
 800d976:	4610      	mov	r0, r2
 800d978:	f009 fb74 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraphLine2.setScale(100);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800d982:	2164      	movs	r1, #100	; 0x64
 800d984:	4618      	mov	r0, r3
 800d986:	f009 fe49 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphLine2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(187, 25, 199));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 800d990:	22c7      	movs	r2, #199	; 0xc7
 800d992:	2119      	movs	r1, #25
 800d994:	20bb      	movs	r0, #187	; 0xbb
 800d996:	f7fd fcf7 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d99a:	4603      	mov	r3, r0
 800d99c:	4619      	mov	r1, r3
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7fd fe36 	bl	800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    PowerGraphLine2.setPainter(PowerGraphLine2Painter);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f603 424c 	addw	r2, r3, #3148	; 0xc4c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	f008 ffa8 	bl	8016908 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    PowerGraphLine2.setLineWidth(2);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800d9be:	2102      	movs	r1, #2
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f00a fac9 	bl	8017f58 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    PowerGraph.addGraphElement(PowerGraphLine2);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f009 fb45 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraphLine1.setScale(100);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 800d9e0:	2164      	movs	r1, #100	; 0x64
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f009 fe1a 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    PowerGraphLine1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(20, 151, 197));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f503 6443 	add.w	r4, r3, #3120	; 0xc30
 800d9ee:	22c5      	movs	r2, #197	; 0xc5
 800d9f0:	2197      	movs	r1, #151	; 0x97
 800d9f2:	2014      	movs	r0, #20
 800d9f4:	f7fd fcc8 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7fd fe07 	bl	800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    PowerGraphLine1.setPainter(PowerGraphLine1Painter);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f603 32f8 	addw	r2, r3, #3064	; 0xbf8
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f008 ff79 	bl	8016908 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    PowerGraphLine1.setLineWidth(2);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 800da1c:	2102      	movs	r1, #2
 800da1e:	4618      	mov	r0, r3
 800da20:	f00a fa9a 	bl	8017f58 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    PowerGraph.addGraphElement(PowerGraphLine1);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 800da30:	4619      	mov	r1, r3
 800da32:	4610      	mov	r0, r2
 800da34:	f009 fb16 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    PowerGraph.addDataPoint(4.60663713188387f);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da3e:	ed1f 0a5f 	vldr	s0, [pc, #-380]	; 800d8c4 <_ZN12HalfVertBaseC1Ev+0x19ac>
 800da42:	4618      	mov	r0, r3
 800da44:	f009 fd66 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.81416164262459f);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da4e:	ed1f 0a62 	vldr	s0, [pc, #-392]	; 800d8c8 <_ZN12HalfVertBaseC1Ev+0x19b0>
 800da52:	4618      	mov	r0, r3
 800da54:	f009 fd5e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.26803421205118f);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da5e:	ed1f 0a65 	vldr	s0, [pc, #-404]	; 800d8cc <_ZN12HalfVertBaseC1Ev+0x19b4>
 800da62:	4618      	mov	r0, r3
 800da64:	f009 fd56 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.91605396524789f);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da6e:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 800d8d0 <_ZN12HalfVertBaseC1Ev+0x19b8>
 800da72:	4618      	mov	r0, r3
 800da74:	f009 fd4e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.69502893954586f);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da7e:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 800d8d4 <_ZN12HalfVertBaseC1Ev+0x19bc>
 800da82:	4618      	mov	r0, r3
 800da84:	f009 fd46 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.53489791218f);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da8e:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 800d8d8 <_ZN12HalfVertBaseC1Ev+0x19c0>
 800da92:	4618      	mov	r0, r3
 800da94:	f009 fd3e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.36326042579979f);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800da9e:	ed1f 0a71 	vldr	s0, [pc, #-452]	; 800d8dc <_ZN12HalfVertBaseC1Ev+0x19c4>
 800daa2:	4618      	mov	r0, r3
 800daa4:	f009 fd36 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.11003972800143f);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800daae:	ed1f 0a74 	vldr	s0, [pc, #-464]	; 800d8e0 <_ZN12HalfVertBaseC1Ev+0x19c8>
 800dab2:	4618      	mov	r0, r3
 800dab4:	f009 fd2e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.71198527077805f);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dabe:	ed1f 0a77 	vldr	s0, [pc, #-476]	; 800d8e4 <_ZN12HalfVertBaseC1Ev+0x19cc>
 800dac2:	4618      	mov	r0, r3
 800dac4:	f009 fd26 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.1167372889459f);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dace:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 800d8e8 <_ZN12HalfVertBaseC1Ev+0x19d0>
 800dad2:	4618      	mov	r0, r3
 800dad4:	f009 fd1e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.286202113802f);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dade:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 800d8ec <_ZN12HalfVertBaseC1Ev+0x19d4>
 800dae2:	4618      	mov	r0, r3
 800dae4:	f009 fd16 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.1990265584988f);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800daee:	ed1f 0a80 	vldr	s0, [pc, #-512]	; 800d8f0 <_ZN12HalfVertBaseC1Ev+0x19d8>
 800daf2:	4618      	mov	r0, r3
 800daf4:	f009 fd0e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.85202135629685f);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dafe:	ed1f 0a83 	vldr	s0, [pc, #-524]	; 800d8f4 <_ZN12HalfVertBaseC1Ev+0x19dc>
 800db02:	4618      	mov	r0, r3
 800db04:	f009 fd06 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.26044181602931f);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db0e:	ed1f 0a86 	vldr	s0, [pc, #-536]	; 800d8f8 <_ZN12HalfVertBaseC1Ev+0x19e0>
 800db12:	4618      	mov	r0, r3
 800db14:	f009 fcfe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.45710913311586f);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db1e:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 800d8fc <_ZN12HalfVertBaseC1Ev+0x19e4>
 800db22:	4618      	mov	r0, r3
 800db24:	f009 fcf6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.49042572114461f);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db2e:	ed1f 0a8c 	vldr	s0, [pc, #-560]	; 800d900 <_ZN12HalfVertBaseC1Ev+0x19e8>
 800db32:	4618      	mov	r0, r3
 800db34:	f009 fcee 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.42140491318152f);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db3e:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 800d904 <_ZN12HalfVertBaseC1Ev+0x19ec>
 800db42:	4618      	mov	r0, r3
 800db44:	f009 fce6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.31990145587802f);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db4e:	ed1f 0a92 	vldr	s0, [pc, #-584]	; 800d908 <_ZN12HalfVertBaseC1Ev+0x19f0>
 800db52:	4618      	mov	r0, r3
 800db54:	f009 fcde 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.26027025155816f);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db5e:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 800d90c <_ZN12HalfVertBaseC1Ev+0x19f4>
 800db62:	4618      	mov	r0, r3
 800db64:	f009 fcd6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.31672444752251f);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db6e:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 800d910 <_ZN12HalfVertBaseC1Ev+0x19f8>
 800db72:	4618      	mov	r0, r3
 800db74:	f009 fcce 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.55867811862091f);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db7e:	ed1f 0a9b 	vldr	s0, [pc, #-620]	; 800d914 <_ZN12HalfVertBaseC1Ev+0x19fc>
 800db82:	4618      	mov	r0, r3
 800db84:	f009 fcc6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.04636021801926f);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db8e:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 800d918 <_ZN12HalfVertBaseC1Ev+0x1a00>
 800db92:	4618      	mov	r0, r3
 800db94:	f009 fcbe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.82697386285756f);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800db9e:	ed1f 0aa1 	vldr	s0, [pc, #-644]	; 800d91c <_ZN12HalfVertBaseC1Ev+0x1a04>
 800dba2:	4618      	mov	r0, r3
 800dba4:	f009 fcb6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.93163462914178f);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbae:	ed1f 0aa4 	vldr	s0, [pc, #-656]	; 800d920 <_ZN12HalfVertBaseC1Ev+0x1a08>
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f009 fcae 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.37328105966776f);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbbe:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 800d924 <_ZN12HalfVertBaseC1Ev+0x1a0c>
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f009 fca6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.14568641753711f);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbce:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 800d928 <_ZN12HalfVertBaseC1Ev+0x1a10>
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f009 fc9e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.22363446726907f);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbde:	ed1f 0aad 	vldr	s0, [pc, #-692]	; 800d92c <_ZN12HalfVertBaseC1Ev+0x1a14>
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f009 fc96 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.56425153304568f);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbee:	ed1f 0ab0 	vldr	s0, [pc, #-704]	; 800d930 <_ZN12HalfVertBaseC1Ev+0x1a18>
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f009 fc8e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.10941262777757f);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dbfe:	ed1f 0ab3 	vldr	s0, [pc, #-716]	; 800d934 <_ZN12HalfVertBaseC1Ev+0x1a1c>
 800dc02:	4618      	mov	r0, r3
 800dc04:	f009 fc86 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.78907879917654f);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc0e:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 800d938 <_ZN12HalfVertBaseC1Ev+0x1a20>
 800dc12:	4618      	mov	r0, r3
 800dc14:	f009 fc7e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.5253605608645f);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc1e:	ed1f 0ab9 	vldr	s0, [pc, #-740]	; 800d93c <_ZN12HalfVertBaseC1Ev+0x1a24>
 800dc22:	4618      	mov	r0, r3
 800dc24:	f009 fc76 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.2370601207587f);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc2e:	ed1f 0abc 	vldr	s0, [pc, #-752]	; 800d940 <_ZN12HalfVertBaseC1Ev+0x1a28>
 800dc32:	4618      	mov	r0, r3
 800dc34:	f009 fc6e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.8444173115985f);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc3e:	ed1f 0abf 	vldr	s0, [pc, #-764]	; 800d944 <_ZN12HalfVertBaseC1Ev+0x1a2c>
 800dc42:	4618      	mov	r0, r3
 800dc44:	f009 fc66 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.2737641653687f);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc4e:	ed1f 0ac2 	vldr	s0, [pc, #-776]	; 800d948 <_ZN12HalfVertBaseC1Ev+0x1a30>
 800dc52:	4618      	mov	r0, r3
 800dc54:	f009 fc5e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.4618113545093f);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc5e:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 800d94c <_ZN12HalfVertBaseC1Ev+0x1a34>
 800dc62:	4618      	mov	r0, r3
 800dc64:	f009 fc56 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.359299612416f);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc6e:	ed1f 0ac8 	vldr	s0, [pc, #-800]	; 800d950 <_ZN12HalfVertBaseC1Ev+0x1a38>
 800dc72:	4618      	mov	r0, r3
 800dc74:	f009 fc4e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.9337959747132f);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc7e:	ed1f 0acb 	vldr	s0, [pc, #-812]	; 800d954 <_ZN12HalfVertBaseC1Ev+0x1a3c>
 800dc82:	4618      	mov	r0, r3
 800dc84:	f009 fc46 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.1714647453954f);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc8e:	ed1f 0ace 	vldr	s0, [pc, #-824]	; 800d958 <_ZN12HalfVertBaseC1Ev+0x1a40>
 800dc92:	4618      	mov	r0, r3
 800dc94:	f009 fc3e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.0777060171604f);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dc9e:	ed1f 0ad1 	vldr	s0, [pc, #-836]	; 800d95c <_ZN12HalfVertBaseC1Ev+0x1a44>
 800dca2:	4618      	mov	r0, r3
 800dca4:	f009 fc36 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.6766252971577f);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcae:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 800d960 <_ZN12HalfVertBaseC1Ev+0x1a48>
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f009 fc2e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.0093681014389f);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcbe:	ed1f 0ad7 	vldr	s0, [pc, #-860]	; 800d964 <_ZN12HalfVertBaseC1Ev+0x1a4c>
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f009 fc26 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.1314242090604f);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcce:	ed1f 0ada 	vldr	s0, [pc, #-872]	; 800d968 <_ZN12HalfVertBaseC1Ev+0x1a50>
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f009 fc1e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.1090693369924f);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcde:	ed1f 0add 	vldr	s0, [pc, #-884]	; 800d96c <_ZN12HalfVertBaseC1Ev+0x1a54>
 800dce2:	4618      	mov	r0, r3
 800dce4:	f009 fc16 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.015163091489f);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcee:	ed9f 0ae2 	vldr	s0, [pc, #904]	; 800e078 <_ZN12HalfVertBaseC1Ev+0x2160>
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f009 fc0e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.924567047516f);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dcfe:	ed9f 0adf 	vldr	s0, [pc, #892]	; 800e07c <_ZN12HalfVertBaseC1Ev+0x2164>
 800dd02:	4618      	mov	r0, r3
 800dd04:	f009 fc06 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.909460772126f);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd0e:	ed9f 0adc 	vldr	s0, [pc, #880]	; 800e080 <_ZN12HalfVertBaseC1Ev+0x2168>
 800dd12:	4618      	mov	r0, r3
 800dd14:	f009 fbfe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.0348487415959f);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd1e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800e084 <_ZN12HalfVertBaseC1Ev+0x216c>
 800dd22:	4618      	mov	r0, r3
 800dd24:	f009 fbf6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.354533841496f);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd2e:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 800e088 <_ZN12HalfVertBaseC1Ev+0x2170>
 800dd32:	4618      	mov	r0, r3
 800dd34:	f009 fbee 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.90780504781465f);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd3e:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 800e08c <_ZN12HalfVertBaseC1Ev+0x2174>
 800dd42:	4618      	mov	r0, r3
 800dd44:	f009 fbe6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.71704528964902f);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd4e:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 800e090 <_ZN12HalfVertBaseC1Ev+0x2178>
 800dd52:	4618      	mov	r0, r3
 800dd54:	f009 fbde 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.78640349849047f);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd5e:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800e094 <_ZN12HalfVertBaseC1Ev+0x217c>
 800dd62:	4618      	mov	r0, r3
 800dd64:	f009 fbd6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.1016145058968f);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd6e:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800e098 <_ZN12HalfVertBaseC1Ev+0x2180>
 800dd72:	4618      	mov	r0, r3
 800dd74:	f009 fbce 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.6309761499794f);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd7e:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 800e09c <_ZN12HalfVertBaseC1Ev+0x2184>
 800dd82:	4618      	mov	r0, r3
 800dd84:	f009 fbc6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.3274221178028f);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd8e:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800e0a0 <_ZN12HalfVertBaseC1Ev+0x2188>
 800dd92:	4618      	mov	r0, r3
 800dd94:	f009 fbbe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.1315638868157f);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dd9e:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e0a4 <_ZN12HalfVertBaseC1Ev+0x218c>
 800dda2:	4618      	mov	r0, r3
 800dda4:	f009 fbb6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.9755085181411f);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddae:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800e0a8 <_ZN12HalfVertBaseC1Ev+0x2190>
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f009 fbae 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.7872211068495f);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddbe:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800e0ac <_ZN12HalfVertBaseC1Ev+0x2194>
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f009 fba6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.4951577674845f);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddce:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800e0b0 <_ZN12HalfVertBaseC1Ev+0x2198>
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f009 fb9e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.0328831680501f);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddde:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 800e0b4 <_ZN12HalfVertBaseC1Ev+0x219c>
 800dde2:	4618      	mov	r0, r3
 800dde4:	f009 fb96 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.3433873625249f);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddee:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800e0b8 <_ZN12HalfVertBaseC1Ev+0x21a0>
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f009 fb8e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.3828304680238f);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ddfe:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800e0bc <_ZN12HalfVertBaseC1Ev+0x21a4>
 800de02:	4618      	mov	r0, r3
 800de04:	f009 fb86 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.1234870895652f);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de0e:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800e0c0 <_ZN12HalfVertBaseC1Ev+0x21a8>
 800de12:	4618      	mov	r0, r3
 800de14:	f009 fb7e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.5557031239437f);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de1e:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800e0c4 <_ZN12HalfVertBaseC1Ev+0x21ac>
 800de22:	4618      	mov	r0, r3
 800de24:	f009 fb76 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.6887435955137f);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de2e:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800e0c8 <_ZN12HalfVertBaseC1Ev+0x21b0>
 800de32:	4618      	mov	r0, r3
 800de34:	f009 fb6e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.5504763120929f);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de3e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800e0cc <_ZN12HalfVertBaseC1Ev+0x21b4>
 800de42:	4618      	mov	r0, r3
 800de44:	f009 fb66 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.1859083320302f);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de4e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800e0d0 <_ZN12HalfVertBaseC1Ev+0x21b8>
 800de52:	4618      	mov	r0, r3
 800de54:	f009 fb5e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.65466388184197f);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de5e:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800e0d4 <_ZN12HalfVertBaseC1Ev+0x21bc>
 800de62:	4618      	mov	r0, r3
 800de64:	f009 fb56 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.02755451482949f);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de6e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800e0d8 <_ZN12HalfVertBaseC1Ev+0x21c0>
 800de72:	4618      	mov	r0, r3
 800de74:	f009 fb4e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.38245200707962f);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de7e:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800e0dc <_ZN12HalfVertBaseC1Ev+0x21c4>
 800de82:	4618      	mov	r0, r3
 800de84:	f009 fb46 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.79971531084538f);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de8e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e0e0 <_ZN12HalfVertBaseC1Ev+0x21c8>
 800de92:	4618      	mov	r0, r3
 800de94:	f009 fb3e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.35744933478198f);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800de9e:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800e0e4 <_ZN12HalfVertBaseC1Ev+0x21cc>
 800dea2:	4618      	mov	r0, r3
 800dea4:	f009 fb36 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.12688965935294f);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800deae:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800e0e8 <_ZN12HalfVertBaseC1Ev+0x21d0>
 800deb2:	4618      	mov	r0, r3
 800deb4:	f009 fb2e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.16818965622451f);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800debe:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e0ec <_ZN12HalfVertBaseC1Ev+0x21d4>
 800dec2:	4618      	mov	r0, r3
 800dec4:	f009 fb26 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.526872036552974f);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dece:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800e0f0 <_ZN12HalfVertBaseC1Ev+0x21d8>
 800ded2:	4618      	mov	r0, r3
 800ded4:	f009 fb1e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.231159798269493f);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dede:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800e0f4 <_ZN12HalfVertBaseC1Ev+0x21dc>
 800dee2:	4618      	mov	r0, r3
 800dee4:	f009 fb16 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.290350294925956f);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800deee:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e0f8 <_ZN12HalfVertBaseC1Ev+0x21e0>
 800def2:	4618      	mov	r0, r3
 800def4:	f009 fb0e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.694331033887536f);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800defe:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800e0fc <_ZN12HalfVertBaseC1Ev+0x21e4>
 800df02:	4618      	mov	r0, r3
 800df04:	f009 fb06 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.41426605088188f);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df0e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800e100 <_ZN12HalfVertBaseC1Ev+0x21e8>
 800df12:	4618      	mov	r0, r3
 800df14:	f009 fafe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.40441039162803f);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df1e:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e104 <_ZN12HalfVertBaseC1Ev+0x21ec>
 800df22:	4618      	mov	r0, r3
 800df24:	f009 faf6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.60494032305345f);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df2e:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800e108 <_ZN12HalfVertBaseC1Ev+0x21f0>
 800df32:	4618      	mov	r0, r3
 800df34:	f009 faee 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.94562467196677f);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df3e:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800e10c <_ZN12HalfVertBaseC1Ev+0x21f4>
 800df42:	4618      	mov	r0, r3
 800df44:	f009 fae6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.35011316223333f);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df4e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e110 <_ZN12HalfVertBaseC1Ev+0x21f8>
 800df52:	4618      	mov	r0, r3
 800df54:	f009 fade 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.74057371625765f);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df5e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e114 <_ZN12HalfVertBaseC1Ev+0x21fc>
 800df62:	4618      	mov	r0, r3
 800df64:	f009 fad6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.04239966906215f);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df6e:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800e118 <_ZN12HalfVertBaseC1Ev+0x2200>
 800df72:	4618      	mov	r0, r3
 800df74:	f009 face 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.1886935770351f);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df7e:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800e11c <_ZN12HalfVertBaseC1Ev+0x2204>
 800df82:	4618      	mov	r0, r3
 800df84:	f009 fac6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.1242545542083f);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df8e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800e120 <_ZN12HalfVertBaseC1Ev+0x2208>
 800df92:	4618      	mov	r0, r3
 800df94:	f009 fabe 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.8088247383059f);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800df9e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800e124 <_ZN12HalfVertBaseC1Ev+0x220c>
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f009 fab6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.2193954264221f);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dfae:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800e128 <_ZN12HalfVertBaseC1Ev+0x2210>
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f009 faae 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.3514348252508f);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dfbe:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800e12c <_ZN12HalfVertBaseC1Ev+0x2214>
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f009 faa6 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.2189616523051f);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dfce:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e130 <_ZN12HalfVertBaseC1Ev+0x2218>
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f009 fa9e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.8534630332682f);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dfde:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800e134 <_ZN12HalfVertBaseC1Ev+0x221c>
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f009 fa96 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.3017255702599f);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dfee:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800e138 <_ZN12HalfVertBaseC1Ev+0x2220>
 800dff2:	4618      	mov	r0, r3
 800dff4:	f009 fa8e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.6227138238942f);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800dffe:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800e13c <_ZN12HalfVertBaseC1Ev+0x2224>
 800e002:	4618      	mov	r0, r3
 800e004:	f009 fa86 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.88369455490295f);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e00e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800e140 <_ZN12HalfVertBaseC1Ev+0x2228>
 800e012:	4618      	mov	r0, r3
 800e014:	f009 fa7e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.15584283119328f);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e01e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800e144 <_ZN12HalfVertBaseC1Ev+0x222c>
 800e022:	4618      	mov	r0, r3
 800e024:	f009 fa76 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.50960651418088f);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e02e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800e148 <_ZN12HalfVertBaseC1Ev+0x2230>
 800e032:	4618      	mov	r0, r3
 800e034:	f009 fa6e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.01011625080225f);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e03e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800e14c <_ZN12HalfVertBaseC1Ev+0x2234>
 800e042:	4618      	mov	r0, r3
 800e044:	f009 fa66 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.71292388037011f);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e04e:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e150 <_ZN12HalfVertBaseC1Ev+0x2238>
 800e052:	4618      	mov	r0, r3
 800e054:	f009 fa5e 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.66033892000534f);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e05e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800e154 <_ZN12HalfVertBaseC1Ev+0x223c>
 800e062:	4618      	mov	r0, r3
 800e064:	f009 fa56 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.87858532766169f);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e06e:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800e158 <_ZN12HalfVertBaseC1Ev+0x2240>
 800e072:	4618      	mov	r0, r3
 800e074:	e0e2      	b.n	800e23c <_ZN12HalfVertBaseC1Ev+0x2324>
 800e076:	bf00      	nop
 800e078:	41603e1c 	.word	0x41603e1c
 800e07c:	414ecb07 	.word	0x414ecb07
 800e080:	413e8d27 	.word	0x413e8d27
 800e084:	41308ebe 	.word	0x41308ebe
 800e088:	4125ac2c 	.word	0x4125ac2c
 800e08c:	411e865f 	.word	0x411e865f
 800e090:	411b7904 	.word	0x411b7904
 800e094:	411c951c 	.word	0x411c951c
 800e098:	4121a037 	.word	0x4121a037
 800e09c:	412a187a 	.word	0x412a187a
 800e0a0:	41353d1f 	.word	0x41353d1f
 800e0a4:	41421ae3 	.word	0x41421ae3
 800e0a8:	414f9baf 	.word	0x414f9baf
 800e0ac:	415c9875 	.word	0x415c9875
 800e0b0:	4167ec2b 	.word	0x4167ec2b
 800e0b4:	417086b1 	.word	0x417086b1
 800e0b8:	41757e84 	.word	0x41757e84
 800e0bc:	41762013 	.word	0x41762013
 800e0c0:	4171f9ce 	.word	0x4171f9ce
 800e0c4:	4168e429 	.word	0x4168e429
 800e0c8:	415b0518 	.word	0x415b0518
 800e0cc:	4148cec0 	.word	0x4148cec0
 800e0d0:	4132f97b 	.word	0x4132f97b
 800e0d4:	411a7981 	.word	0x411a7981
 800e0d8:	410070dd 	.word	0x410070dd
 800e0dc:	40cc3d0c 	.word	0x40cc3d0c
 800e0e0:	40999745 	.word	0x40999745
 800e0e4:	4056e073 	.word	0x4056e073
 800e0e8:	40081ef6 	.word	0x40081ef6
 800e0ec:	3f95873d 	.word	0x3f95873d
 800e0f0:	3f06e116 	.word	0x3f06e116
 800e0f4:	3e6cb527 	.word	0x3e6cb527
 800e0f8:	3e94a8cb 	.word	0x3e94a8cb
 800e0fc:	3f31bfae 	.word	0x3f31bfae
 800e100:	3fb506ac 	.word	0x3fb506ac
 800e104:	4019e1dc 	.word	0x4019e1dc
 800e108:	4066b758 	.word	0x4066b758
 800e10c:	409e428f 	.word	0x409e428f
 800e110:	40cb3421 	.word	0x40cb3421
 800e114:	40f7b2c8 	.word	0x40f7b2c8
 800e118:	4110adab 	.word	0x4110adab
 800e11c:	412304e4 	.word	0x412304e4
 800e120:	4131fcf2 	.word	0x4131fcf2
 800e124:	413cf0f2 	.word	0x413cf0f2
 800e128:	414382a5 	.word	0x414382a5
 800e12c:	41459f7a 	.word	0x41459f7a
 800e130:	414380de 	.word	0x414380de
 800e134:	413da7c9 	.word	0x413da7c9
 800e138:	4134d3de 	.word	0x4134d3de
 800e13c:	4129f6a3 	.word	0x4129f6a3
 800e140:	411e239d 	.word	0x411e239d
 800e144:	41127e55 	.word	0x41127e55
 800e148:	41082759 	.word	0x41082759
 800e14c:	41002970 	.word	0x41002970
 800e150:	40f6d046 	.word	0x40f6d046
 800e154:	40f5217f 	.word	0x40f5217f
 800e158:	40fc1d5f 	.word	0x40fc1d5f
 800e15c:	410603ef 	.word	0x410603ef
 800e160:	41124612 	.word	0x41124612
 800e164:	41226012 	.word	0x41226012
 800e168:	413598bd 	.word	0x413598bd
 800e16c:	414afd74 	.word	0x414afd74
 800e170:	4161707b 	.word	0x4161707b
 800e174:	4177ba14 	.word	0x4177ba14
 800e178:	41864da1 	.word	0x41864da1
 800e17c:	418f708f 	.word	0x418f708f
 800e180:	4196bbbe 	.word	0x4196bbbe
 800e184:	419bbcec 	.word	0x419bbcec
 800e188:	419e20ae 	.word	0x419e20ae
 800e18c:	419db79f 	.word	0x419db79f
 800e190:	419a7964 	.word	0x419a7964
 800e194:	41948557 	.word	0x41948557
 800e198:	418c20c7 	.word	0x418c20c7
 800e19c:	4181b2f3 	.word	0x4181b2f3
 800e1a0:	416b7dfb 	.word	0x416b7dfb
 800e1a4:	4151b84b 	.word	0x4151b84b
 800e1a8:	413759b7 	.word	0x413759b7
 800e1ac:	411daa4a 	.word	0x411daa4a
 800e1b0:	4105e1e9 	.word	0x4105e1e9
 800e1b4:	40e22c12 	.word	0x40e22c12
 800e1b8:	40c0531e 	.word	0x40c0531e
 800e1bc:	40a77fb6 	.word	0x40a77fb6
 800e1c0:	4098677b 	.word	0x4098677b
 800e1c4:	409325d3 	.word	0x409325d3
 800e1c8:	40973c4f 	.word	0x40973c4f
 800e1cc:	40a39c85 	.word	0x40a39c85
 800e1d0:	40b6bac0 	.word	0x40b6bac0
 800e1d4:	40cea859 	.word	0x40cea859
 800e1d8:	40e93410 	.word	0x40e93410
 800e1dc:	41020739 	.word	0x41020739
 800e1e0:	410e77fb 	.word	0x410e77fb
 800e1e4:	4118df3c 	.word	0x4118df3c
 800e1e8:	412057ed 	.word	0x412057ed
 800e1ec:	412433bc 	.word	0x412433bc
 800e1f0:	4124065e 	.word	0x4124065e
 800e1f4:	411facb3 	.word	0x411facb3
 800e1f8:	41174f53 	.word	0x41174f53
 800e1fc:	410b604f 	.word	0x410b604f
 800e200:	40f928b7 	.word	0x40f928b7
 800e204:	40d7af8a 	.word	0x40d7af8a
 800e208:	40b47fb2 	.word	0x40b47fb2
 800e20c:	4091f365 	.word	0x4091f365
 800e210:	4064ddd7 	.word	0x4064ddd7
 800e214:	4030747a 	.word	0x4030747a
 800e218:	400ab870 	.word	0x400ab870
 800e21c:	3fede67a 	.word	0x3fede67a
 800e220:	3feee7e3 	.word	0x3feee7e3
 800e224:	400d6803 	.word	0x400d6803
 800e228:	4038c5af 	.word	0x4038c5af
 800e22c:	4078493f 	.word	0x4078493f
 800e230:	40a4c2b4 	.word	0x40a4c2b4
 800e234:	40d482e5 	.word	0x40d482e5
 800e238:	4104a05d 	.word	0x4104a05d
 800e23c:	f009 f96a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.3759599808687f);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e246:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 800e15c <_ZN12HalfVertBaseC1Ev+0x2244>
 800e24a:	4618      	mov	r0, r3
 800e24c:	f009 f962 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.14210692132481f);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e256:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e160 <_ZN12HalfVertBaseC1Ev+0x2248>
 800e25a:	4618      	mov	r0, r3
 800e25c:	f009 f95a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.1484542331821f);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e266:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 800e164 <_ZN12HalfVertBaseC1Ev+0x224c>
 800e26a:	4618      	mov	r0, r3
 800e26c:	f009 f952 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.3497897427244f);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e276:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 800e168 <_ZN12HalfVertBaseC1Ev+0x2250>
 800e27a:	4618      	mov	r0, r3
 800e27c:	f009 f94a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.6868777627517f);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e286:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 800e16c <_ZN12HalfVertBaseC1Ev+0x2254>
 800e28a:	4618      	mov	r0, r3
 800e28c:	f009 f942 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.0899606566989f);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e296:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 800e170 <_ZN12HalfVertBaseC1Ev+0x2258>
 800e29a:	4618      	mov	r0, r3
 800e29c:	f009 f93a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.4829289803912f);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2a6:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 800e174 <_ZN12HalfVertBaseC1Ev+0x225c>
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f009 f932 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.7879048635679f);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2b6:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 800e178 <_ZN12HalfVertBaseC1Ev+0x2260>
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f009 f92a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.929959610233f);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2c6:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 800e17c <_ZN12HalfVertBaseC1Ev+0x2264>
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f009 f922 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.8416711656032f);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2d6:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 800e180 <_ZN12HalfVertBaseC1Ev+0x2268>
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f009 f91a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(19.467247328332f);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2e6:	ed1f 0a59 	vldr	s0, [pc, #-356]	; 800e184 <_ZN12HalfVertBaseC1Ev+0x226c>
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f009 f912 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(19.7659567885326f);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e2f6:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 800e188 <_ZN12HalfVertBaseC1Ev+0x2270>
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f009 f90a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(19.7146585752098f);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e306:	ed1f 0a5f 	vldr	s0, [pc, #-380]	; 800e18c <_ZN12HalfVertBaseC1Ev+0x2274>
 800e30a:	4618      	mov	r0, r3
 800e30c:	f009 f902 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(19.309273663928f);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e316:	ed1f 0a62 	vldr	s0, [pc, #-392]	; 800e190 <_ZN12HalfVertBaseC1Ev+0x2278>
 800e31a:	4618      	mov	r0, r3
 800e31c:	f009 f8fa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.5651075526746f);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e326:	ed1f 0a65 	vldr	s0, [pc, #-404]	; 800e194 <_ZN12HalfVertBaseC1Ev+0x227c>
 800e32a:	4618      	mov	r0, r3
 800e32c:	f009 f8f2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.516003662712f);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e336:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 800e198 <_ZN12HalfVertBaseC1Ev+0x2280>
 800e33a:	4618      	mov	r0, r3
 800e33c:	f009 f8ea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.2123782857614f);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e346:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 800e19c <_ZN12HalfVertBaseC1Ev+0x2284>
 800e34a:	4618      	mov	r0, r3
 800e34c:	f009 f8e2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.7182568609092f);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e356:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 800e1a0 <_ZN12HalfVertBaseC1Ev+0x2288>
 800e35a:	4618      	mov	r0, r3
 800e35c:	f009 f8da 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.1074935942916f);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e366:	ed1f 0a71 	vldr	s0, [pc, #-452]	; 800e1a4 <_ZN12HalfVertBaseC1Ev+0x228c>
 800e36a:	4618      	mov	r0, r3
 800e36c:	f009 f8d2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.459402856576f);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e376:	ed1f 0a74 	vldr	s0, [pc, #-464]	; 800e1a8 <_ZN12HalfVertBaseC1Ev+0x2290>
 800e37a:	4618      	mov	r0, r3
 800e37c:	f009 f8ca 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.85407461570559f);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e386:	ed1f 0a77 	vldr	s0, [pc, #-476]	; 800e1ac <_ZN12HalfVertBaseC1Ev+0x2294>
 800e38a:	4618      	mov	r0, r3
 800e38c:	f009 f8c2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.36765423415256f);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e396:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 800e1b0 <_ZN12HalfVertBaseC1Ev+0x2298>
 800e39a:	4618      	mov	r0, r3
 800e39c:	f009 f8ba 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.06787952355117f);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3a6:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 800e1b4 <_ZN12HalfVertBaseC1Ev+0x229c>
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f009 f8b2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.01014595205178f);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3b6:	ed1f 0a80 	vldr	s0, [pc, #-512]	; 800e1b8 <_ZN12HalfVertBaseC1Ev+0x22a0>
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f009 f8aa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.23433951287542f);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3c6:	ed1f 0a83 	vldr	s0, [pc, #-524]	; 800e1bc <_ZN12HalfVertBaseC1Ev+0x22a4>
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f009 f8a2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.7626316890286f);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3d6:	ed1f 0a86 	vldr	s0, [pc, #-536]	; 800e1c0 <_ZN12HalfVertBaseC1Ev+0x22a8>
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f009 f89a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.59836714861792f);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3e6:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 800e1c4 <_ZN12HalfVertBaseC1Ev+0x22ac>
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f009 f892 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.72611190331496f);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e3f6:	ed1f 0a8c 	vldr	s0, [pc, #-560]	; 800e1c8 <_ZN12HalfVertBaseC1Ev+0x22b0>
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f009 f88a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.11285659736723f);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e406:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 800e1cc <_ZN12HalfVertBaseC1Ev+0x22b4>
 800e40a:	4618      	mov	r0, r3
 800e40c:	f009 f882 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.71029679233904f);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e416:	ed1f 0a92 	vldr	s0, [pc, #-584]	; 800e1d0 <_ZN12HalfVertBaseC1Ev+0x22b8>
 800e41a:	4618      	mov	r0, r3
 800e41c:	f009 f87a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.45805009181703f);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e426:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 800e1d4 <_ZN12HalfVertBaseC1Ev+0x22bc>
 800e42a:	4618      	mov	r0, r3
 800e42c:	f009 f872 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.28760534997624f);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e436:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 800e1d8 <_ZN12HalfVertBaseC1Ev+0x22c0>
 800e43a:	4618      	mov	r0, r3
 800e43c:	f009 f86a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.12676363652561f);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e446:	ed1f 0a9b 	vldr	s0, [pc, #-620]	; 800e1dc <_ZN12HalfVertBaseC1Ev+0x22c4>
 800e44a:	4618      	mov	r0, r3
 800e44c:	f009 f862 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.90429169475964f);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e456:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 800e1e0 <_ZN12HalfVertBaseC1Ev+0x22c8>
 800e45a:	4618      	mov	r0, r3
 800e45c:	f009 f85a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.55450057730519f);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e466:	ed1f 0aa1 	vldr	s0, [pc, #-644]	; 800e1e4 <_ZN12HalfVertBaseC1Ev+0x22cc>
 800e46a:	4618      	mov	r0, r3
 800e46c:	f009 f852 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.0214667217666f);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e476:	ed1f 0aa4 	vldr	s0, [pc, #-656]	; 800e1e8 <_ZN12HalfVertBaseC1Ev+0x22d0>
 800e47a:	4618      	mov	r0, r3
 800e47c:	f009 f84a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.26263055995f);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e486:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 800e1ec <_ZN12HalfVertBaseC1Ev+0x22d4>
 800e48a:	4618      	mov	r0, r3
 800e48c:	f009 f842 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.2515541601625f);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e496:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 800e1f0 <_ZN12HalfVertBaseC1Ev+0x22d8>
 800e49a:	4618      	mov	r0, r3
 800e49c:	f009 f83a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.97966309877917f);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4a6:	ed1f 0aad 	vldr	s0, [pc, #-692]	; 800e1f4 <_ZN12HalfVertBaseC1Ev+0x22dc>
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f009 f832 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.45686603851587f);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4b6:	ed1f 0ab0 	vldr	s0, [pc, #-704]	; 800e1f8 <_ZN12HalfVertBaseC1Ev+0x22e0>
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f009 f82a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.7110123857458f);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4c6:	ed1f 0ab3 	vldr	s0, [pc, #-716]	; 800e1fc <_ZN12HalfVertBaseC1Ev+0x22e4>
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f009 f822 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(7.78622002108418f);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4d6:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 800e200 <_ZN12HalfVertBaseC1Ev+0x22e8>
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f009 f81a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.74017814685503f);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4e6:	ed1f 0ab9 	vldr	s0, [pc, #-740]	; 800e204 <_ZN12HalfVertBaseC1Ev+0x22ec>
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f009 f812 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.64058775583206f);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e4f6:	ed1f 0abc 	vldr	s0, [pc, #-752]	; 800e208 <_ZN12HalfVertBaseC1Ev+0x22f0>
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f009 f80a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(4.56096131553326f);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e506:	ed1f 0abf 	vldr	s0, [pc, #-764]	; 800e20c <_ZN12HalfVertBaseC1Ev+0x22f4>
 800e50a:	4618      	mov	r0, r3
 800e50c:	f009 f802 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.57603994591644f);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e516:	ed1f 0ac2 	vldr	s0, [pc, #-776]	; 800e210 <_ZN12HalfVertBaseC1Ev+0x22f8>
 800e51a:	4618      	mov	r0, r3
 800e51c:	f008 fffa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.75710926122278f);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e526:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 800e214 <_ZN12HalfVertBaseC1Ev+0x22fc>
 800e52a:	4618      	mov	r0, r3
 800e52c:	f008 fff2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.1675072091891f);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e536:	ed1f 0ac8 	vldr	s0, [pc, #-800]	; 800e218 <_ZN12HalfVertBaseC1Ev+0x2300>
 800e53a:	4618      	mov	r0, r3
 800e53c:	f008 ffea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.85859608593474f);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e546:	ed1f 0acb 	vldr	s0, [pc, #-812]	; 800e21c <_ZN12HalfVertBaseC1Ev+0x2304>
 800e54a:	4618      	mov	r0, r3
 800e54c:	f008 ffe2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.86645160944919f);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e556:	ed1f 0ace 	vldr	s0, [pc, #-824]	; 800e220 <_ZN12HalfVertBaseC1Ev+0x2308>
 800e55a:	4618      	mov	r0, r3
 800e55c:	f008 ffda 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.20947346486433f);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e566:	ed1f 0ad1 	vldr	s0, [pc, #-836]	; 800e224 <_ZN12HalfVertBaseC1Ev+0x230c>
 800e56a:	4618      	mov	r0, r3
 800e56c:	f008 ffd2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.88706565583131f);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e576:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 800e228 <_ZN12HalfVertBaseC1Ev+0x2310>
 800e57a:	4618      	mov	r0, r3
 800e57c:	f008 ffca 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.87947050300013f);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e586:	ed1f 0ad7 	vldr	s0, [pc, #-860]	; 800e22c <_ZN12HalfVertBaseC1Ev+0x2314>
 800e58a:	4618      	mov	r0, r3
 800e58c:	f008 ffc2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.14876739207152f);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e596:	ed1f 0ada 	vldr	s0, [pc, #-872]	; 800e230 <_ZN12HalfVertBaseC1Ev+0x2318>
 800e59a:	4618      	mov	r0, r3
 800e59c:	f008 ffba 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.64097814046536f);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5a6:	ed1f 0add 	vldr	s0, [pc, #-884]	; 800e234 <_ZN12HalfVertBaseC1Ev+0x231c>
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f008 ffb2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.28915091900493f);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5b6:	ed1f 0ae0 	vldr	s0, [pc, #-896]	; 800e238 <_ZN12HalfVertBaseC1Ev+0x2320>
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f008 ffaa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.0172351616657f);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5c6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800e92c <_ZN12HalfVertBaseC1Ev+0x2a14>
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f008 ffa2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.7445131121148f);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5d6:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 800e930 <_ZN12HalfVertBaseC1Ev+0x2a18>
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f008 ff9a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.3903131842228f);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5e6:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 800e934 <_ZN12HalfVertBaseC1Ev+0x2a1c>
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f008 ff92 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.8787237938884f);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e5f6:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 800e938 <_ZN12HalfVertBaseC1Ev+0x2a20>
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f008 ff8a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.1430145181956f);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e606:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800e93c <_ZN12HalfVertBaseC1Ev+0x2a24>
 800e60a:	4618      	mov	r0, r3
 800e60c:	f008 ff82 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.1294979929581f);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e616:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800e940 <_ZN12HalfVertBaseC1Ev+0x2a28>
 800e61a:	4618      	mov	r0, r3
 800e61c:	f008 ff7a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.8005964987916f);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e626:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 800e944 <_ZN12HalfVertBaseC1Ev+0x2a2c>
 800e62a:	4618      	mov	r0, r3
 800e62c:	f008 ff72 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.1369254969443f);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e636:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800e948 <_ZN12HalfVertBaseC1Ev+0x2a30>
 800e63a:	4618      	mov	r0, r3
 800e63c:	f008 ff6a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(18.1382706082503f);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e646:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e94c <_ZN12HalfVertBaseC1Ev+0x2a34>
 800e64a:	4618      	mov	r0, r3
 800e64c:	f008 ff62 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.8233979455502f);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e656:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800e950 <_ZN12HalfVertBaseC1Ev+0x2a38>
 800e65a:	4618      	mov	r0, r3
 800e65c:	f008 ff5a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(17.2287123843034f);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e666:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800e954 <_ZN12HalfVertBaseC1Ev+0x2a3c>
 800e66a:	4618      	mov	r0, r3
 800e66c:	f008 ff52 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(16.4058483270326f);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e676:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800e958 <_ZN12HalfVertBaseC1Ev+0x2a40>
 800e67a:	4618      	mov	r0, r3
 800e67c:	f008 ff4a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.4183413350047f);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e686:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 800e95c <_ZN12HalfVertBaseC1Ev+0x2a44>
 800e68a:	4618      	mov	r0, r3
 800e68c:	f008 ff42 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.3375909021571f);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e696:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800e960 <_ZN12HalfVertBaseC1Ev+0x2a48>
 800e69a:	4618      	mov	r0, r3
 800e69c:	f008 ff3a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.2383591848269f);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6a6:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800e964 <_ZN12HalfVertBaseC1Ev+0x2a4c>
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f008 ff32 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.1940872342096f);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6b6:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800e968 <_ZN12HalfVertBaseC1Ev+0x2a50>
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f008 ff2a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.2723170843749f);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6c6:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800e96c <_ZN12HalfVertBaseC1Ev+0x2a54>
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f008 ff22 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.5305007089172f);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6d6:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800e970 <_ZN12HalfVertBaseC1Ev+0x2a58>
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f008 ff1a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.012457549612f);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6e6:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800e974 <_ZN12HalfVertBaseC1Ev+0x2a5c>
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f008 ff12 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.74569427805638f);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e6f6:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800e978 <_ZN12HalfVertBaseC1Ev+0x2a60>
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f008 ff0a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.73975507446004f);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e706:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800e97c <_ZN12HalfVertBaseC1Ev+0x2a64>
 800e70a:	4618      	mov	r0, r3
 800e70c:	f008 ff02 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(9.98570211828255f);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e716:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800e980 <_ZN12HalfVertBaseC1Ev+0x2a68>
 800e71a:	4618      	mov	r0, r3
 800e71c:	f008 fefa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.4567576406144f);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e726:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800e984 <_ZN12HalfVertBaseC1Ev+0x2a6c>
 800e72a:	4618      	mov	r0, r3
 800e72c:	f008 fef2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.1100683273729f);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e736:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e988 <_ZN12HalfVertBaseC1Ev+0x2a70>
 800e73a:	4618      	mov	r0, r3
 800e73c:	f008 feea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.8894792381073f);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e746:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800e98c <_ZN12HalfVertBaseC1Ev+0x2a74>
 800e74a:	4618      	mov	r0, r3
 800e74c:	f008 fee2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.7291493397579f);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e756:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800e990 <_ZN12HalfVertBaseC1Ev+0x2a78>
 800e75a:	4618      	mov	r0, r3
 800e75c:	f008 feda 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.557781115795f);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e766:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e994 <_ZN12HalfVertBaseC1Ev+0x2a7c>
 800e76a:	4618      	mov	r0, r3
 800e76c:	f008 fed2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.303203459779f);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e776:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800e998 <_ZN12HalfVertBaseC1Ev+0x2a80>
 800e77a:	4618      	mov	r0, r3
 800e77c:	f008 feca 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.8970250402167f);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e786:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800e99c <_ZN12HalfVertBaseC1Ev+0x2a84>
 800e78a:	4618      	mov	r0, r3
 800e78c:	f008 fec2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.2790654764267f);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e796:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e9a0 <_ZN12HalfVertBaseC1Ev+0x2a88>
 800e79a:	4618      	mov	r0, r3
 800e79c:	f008 feba 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.4012949647121f);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7a6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800e9a4 <_ZN12HalfVertBaseC1Ev+0x2a8c>
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f008 feb2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(15.2310332355113f);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7b6:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800e9a8 <_ZN12HalfVertBaseC1Ev+0x2a90>
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f008 feaa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(14.7532102454138f);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7c6:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e9ac <_ZN12HalfVertBaseC1Ev+0x2a94>
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f008 fea2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(13.9715467826925f);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7d6:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800e9b0 <_ZN12HalfVertBaseC1Ev+0x2a98>
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f008 fe9a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(12.9085793249168f);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7e6:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800e9b4 <_ZN12HalfVertBaseC1Ev+0x2a9c>
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f008 fe92 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(11.6045258765107f);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e7f6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e9b8 <_ZN12HalfVertBaseC1Ev+0x2aa0>
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f008 fe8a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(10.115059813972f);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e806:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e9bc <_ZN12HalfVertBaseC1Ev+0x2aa4>
 800e80a:	4618      	mov	r0, r3
 800e80c:	f008 fe82 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(8.50812572211965f);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e816:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800e9c0 <_ZN12HalfVertBaseC1Ev+0x2aa8>
 800e81a:	4618      	mov	r0, r3
 800e81c:	f008 fe7a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(6.8599919502722f);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e826:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800e9c4 <_ZN12HalfVertBaseC1Ev+0x2aac>
 800e82a:	4618      	mov	r0, r3
 800e82c:	f008 fe72 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(5.25077838842075f);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e836:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800e9c8 <_ZN12HalfVertBaseC1Ev+0x2ab0>
 800e83a:	4618      	mov	r0, r3
 800e83c:	f008 fe6a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(3.7597370690662f);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e846:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800e9cc <_ZN12HalfVertBaseC1Ev+0x2ab4>
 800e84a:	4618      	mov	r0, r3
 800e84c:	f008 fe62 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(2.46056814987075f);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e856:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800e9d0 <_ZN12HalfVertBaseC1Ev+0x2ab8>
 800e85a:	4618      	mov	r0, r3
 800e85c:	f008 fe5a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(1.41706209088805f);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e866:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800e9d4 <_ZN12HalfVertBaseC1Ev+0x2abc>
 800e86a:	4618      	mov	r0, r3
 800e86c:	f008 fe52 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.679332863410023f);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e876:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e9d8 <_ZN12HalfVertBaseC1Ev+0x2ac0>
 800e87a:	4618      	mov	r0, r3
 800e87c:	f008 fe4a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    PowerGraph.addDataPoint(0.280872219738503f);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800e886:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800e9dc <_ZN12HalfVertBaseC1Ev+0x2ac4>
 800e88a:	4618      	mov	r0, r3
 800e88c:	f008 fe42 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    VoltageSet.setPosition(300, 10, 122, 37);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f503 605b 	add.w	r0, r3, #3504	; 0xdb0
 800e896:	2325      	movs	r3, #37	; 0x25
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	237a      	movs	r3, #122	; 0x7a
 800e89c:	220a      	movs	r2, #10
 800e89e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800e8a2:	f7fc f912 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSet.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f503 645b 	add.w	r4, r3, #3504	; 0xdb0
 800e8ac:	22ff      	movs	r2, #255	; 0xff
 800e8ae:	21ff      	movs	r1, #255	; 0xff
 800e8b0:	20ff      	movs	r0, #255	; 0xff
 800e8b2:	f7fc fd69 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800e8bc:	613b      	str	r3, [r7, #16]
        this->color = color;
 800e8be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e8c2:	693a      	ldr	r2, [r7, #16]
 800e8c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e8c6:	bf00      	nop
    VoltageSet.setLinespacing(0);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 800e8ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        linespace = space;
 800e8d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e8dc:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800e8e0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800e8e2:	bf00      	nop
    VoltageSet.setWildcard(touchgfx::TypedText(T_SINGLEUSEID29).getText());
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f503 645b 	add.w	r4, r3, #3504	; 0xdb0
 800e8ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e8ee:	211a      	movs	r1, #26
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fc fb11 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800e8f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e8fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e8fe:	4b38      	ldr	r3, [pc, #224]	; (800e9e0 <_ZN12HalfVertBaseC1Ev+0x2ac8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d105      	bne.n	800e912 <_ZN12HalfVertBaseC1Ev+0x29fa>
 800e906:	4b37      	ldr	r3, [pc, #220]	; (800e9e4 <_ZN12HalfVertBaseC1Ev+0x2acc>)
 800e908:	4a37      	ldr	r2, [pc, #220]	; (800e9e8 <_ZN12HalfVertBaseC1Ev+0x2ad0>)
 800e90a:	21b1      	movs	r1, #177	; 0xb1
 800e90c:	4837      	ldr	r0, [pc, #220]	; (800e9ec <_ZN12HalfVertBaseC1Ev+0x2ad4>)
 800e90e:	f01b ff41 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e916:	889a      	ldrh	r2, [r3, #4]
 800e918:	4b35      	ldr	r3, [pc, #212]	; (800e9f0 <_ZN12HalfVertBaseC1Ev+0x2ad8>)
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d36b      	bcc.n	800e9f8 <_ZN12HalfVertBaseC1Ev+0x2ae0>
 800e920:	4b34      	ldr	r3, [pc, #208]	; (800e9f4 <_ZN12HalfVertBaseC1Ev+0x2adc>)
 800e922:	4a31      	ldr	r2, [pc, #196]	; (800e9e8 <_ZN12HalfVertBaseC1Ev+0x2ad0>)
 800e924:	21b2      	movs	r1, #178	; 0xb2
 800e926:	4831      	ldr	r0, [pc, #196]	; (800e9ec <_ZN12HalfVertBaseC1Ev+0x2ad4>)
 800e928:	f01b ff34 	bl	802a794 <__assert_func>
 800e92c:	41204698 	.word	0x41204698
 800e930:	413be987 	.word	0x413be987
 800e934:	41563eb9 	.word	0x41563eb9
 800e938:	416e0f41 	.word	0x416e0f41
 800e93c:	418124e5 	.word	0x418124e5
 800e940:	41890936 	.word	0x41890936
 800e944:	418e679f 	.word	0x418e679f
 800e948:	4191186c 	.word	0x4191186c
 800e94c:	41911b2e 	.word	0x41911b2e
 800e950:	418e9652 	.word	0x418e9652
 800e954:	4189d467 	.word	0x4189d467
 800e958:	41833f2d 	.word	0x41833f2d
 800e95c:	4176b187 	.word	0x4176b187
 800e960:	416566c6 	.word	0x416566c6
 800e964:	4153d052 	.word	0x4153d052
 800e968:	41431afb 	.word	0x41431afb
 800e96c:	41345b69 	.word	0x41345b69
 800e970:	41287cee 	.word	0x41287cee
 800e974:	41203307 	.word	0x41203307
 800e978:	411bee5d 	.word	0x411bee5d
 800e97c:	411bd609 	.word	0x411bd609
 800e980:	411fc570 	.word	0x411fc570
 800e984:	41274ee1 	.word	0x41274ee1
 800e988:	4131c2d7 	.word	0x4131c2d7
 800e98c:	413e3b4f 	.word	0x413e3b4f
 800e990:	414baa98 	.word	0x414baa98
 800e994:	4158ecac 	.word	0x4158ecac
 800e998:	4164d9ec 	.word	0x4164d9ec
 800e99c:	416e5a37 	.word	0x416e5a37
 800e9a0:	4174770d 	.word	0x4174770d
 800e9a4:	41766bb4 	.word	0x41766bb4
 800e9a8:	4173b250 	.word	0x4173b250
 800e9ac:	416c0d26 	.word	0x416c0d26
 800e9b0:	415f8b75 	.word	0x415f8b75
 800e9b4:	414e898a 	.word	0x414e898a
 800e9b8:	4139ac23 	.word	0x4139ac23
 800e9bc:	4121d749 	.word	0x4121d749
 800e9c0:	41082148 	.word	0x41082148
 800e9c4:	40db850e 	.word	0x40db850e
 800e9c8:	40a80660 	.word	0x40a80660
 800e9cc:	40709f88 	.word	0x40709f88
 800e9d0:	401d79f3 	.word	0x401d79f3
 800e9d4:	3fb5624a 	.word	0x3fb5624a
 800e9d8:	3f2de8c2 	.word	0x3f2de8c2
 800e9dc:	3e8fce7c 	.word	0x3e8fce7c
 800e9e0:	20014ba4 	.word	0x20014ba4
 800e9e4:	0802be40 	.word	0x0802be40
 800e9e8:	0802be84 	.word	0x0802be84
 800e9ec:	0802beb4 	.word	0x0802beb4
 800e9f0:	20014ba8 	.word	0x20014ba8
 800e9f4:	0802bef8 	.word	0x0802bef8
    }
 800e9f8:	bf00      	nop
        return texts->getText(typedTextId);
 800e9fa:	4b76      	ldr	r3, [pc, #472]	; (800ebd4 <_ZN12HalfVertBaseC1Ev+0x2cbc>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f004 f9fd 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	bf00      	nop
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4620      	mov	r0, r4
 800ea12:	f7fc fc01 	bl	800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
 800ea16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fa fd02 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    VoltageSet.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f503 645b 	add.w	r4, r3, #3504	; 0xdb0
 800ea26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fc fa73 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800ea32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea36:	4619      	mov	r1, r3
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f009 fdc0 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800ea3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fa fcee 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    AmprageSet.setPosition(300, 290, 122, 37);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f603 50f4 	addw	r0, r3, #3572	; 0xdf4
 800ea4e:	2325      	movs	r3, #37	; 0x25
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	237a      	movs	r3, #122	; 0x7a
 800ea54:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ea58:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ea5c:	f7fc f835 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSet.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f603 54f4 	addw	r4, r3, #3572	; 0xdf4
 800ea66:	22ff      	movs	r2, #255	; 0xff
 800ea68:	21ff      	movs	r1, #255	; 0xff
 800ea6a:	20ff      	movs	r0, #255	; 0xff
 800ea6c:	f7fc fc8c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ea70:	4603      	mov	r3, r0
 800ea72:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800ea76:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800ea78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ea80:	bf00      	nop
    AmprageSet.setLinespacing(0);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f603 53f4 	addw	r3, r3, #3572	; 0xdf4
 800ea88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 800ea92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea96:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800ea9a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800ea9c:	bf00      	nop
    AmprageSet.setWildcard(touchgfx::TypedText(T_SINGLEUSEID28).getText());
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f603 54f4 	addw	r4, r3, #3572	; 0xdf4
 800eaa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eaa8:	2119      	movs	r1, #25
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fc fa34 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800eab0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800eab8:	4b47      	ldr	r3, [pc, #284]	; (800ebd8 <_ZN12HalfVertBaseC1Ev+0x2cc0>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d105      	bne.n	800eacc <_ZN12HalfVertBaseC1Ev+0x2bb4>
 800eac0:	4b46      	ldr	r3, [pc, #280]	; (800ebdc <_ZN12HalfVertBaseC1Ev+0x2cc4>)
 800eac2:	4a47      	ldr	r2, [pc, #284]	; (800ebe0 <_ZN12HalfVertBaseC1Ev+0x2cc8>)
 800eac4:	21b1      	movs	r1, #177	; 0xb1
 800eac6:	4847      	ldr	r0, [pc, #284]	; (800ebe4 <_ZN12HalfVertBaseC1Ev+0x2ccc>)
 800eac8:	f01b fe64 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800eacc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ead0:	889a      	ldrh	r2, [r3, #4]
 800ead2:	4b45      	ldr	r3, [pc, #276]	; (800ebe8 <_ZN12HalfVertBaseC1Ev+0x2cd0>)
 800ead4:	881b      	ldrh	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d305      	bcc.n	800eae6 <_ZN12HalfVertBaseC1Ev+0x2bce>
 800eada:	4b44      	ldr	r3, [pc, #272]	; (800ebec <_ZN12HalfVertBaseC1Ev+0x2cd4>)
 800eadc:	4a40      	ldr	r2, [pc, #256]	; (800ebe0 <_ZN12HalfVertBaseC1Ev+0x2cc8>)
 800eade:	21b2      	movs	r1, #178	; 0xb2
 800eae0:	4840      	ldr	r0, [pc, #256]	; (800ebe4 <_ZN12HalfVertBaseC1Ev+0x2ccc>)
 800eae2:	f01b fe57 	bl	802a794 <__assert_func>
    }
 800eae6:	bf00      	nop
        return texts->getText(typedTextId);
 800eae8:	4b3a      	ldr	r3, [pc, #232]	; (800ebd4 <_ZN12HalfVertBaseC1Ev+0x2cbc>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f004 f986 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	bf00      	nop
 800eafc:	4619      	mov	r1, r3
 800eafe:	4620      	mov	r0, r4
 800eb00:	f7fc fb8a 	bl	800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
 800eb04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fa fc8b 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    AmprageSet.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f603 54f4 	addw	r4, r3, #3572	; 0xdf4
 800eb14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb18:	2102      	movs	r1, #2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fc f9fc 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800eb20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb24:	4619      	mov	r1, r3
 800eb26:	4620      	mov	r0, r4
 800eb28:	f009 fd49 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800eb2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fa fc77 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    PowerReadSec.setPosition(300, 334, 122, 37);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f603 6034 	addw	r0, r3, #3636	; 0xe34
 800eb3c:	2325      	movs	r3, #37	; 0x25
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	237a      	movs	r3, #122	; 0x7a
 800eb42:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800eb46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800eb4a:	f7fb ffbe 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSec.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f603 6434 	addw	r4, r3, #3636	; 0xe34
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	21ff      	movs	r1, #255	; 0xff
 800eb58:	20ff      	movs	r0, #255	; 0xff
 800eb5a:	f7fc fc15 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800eb64:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800eb66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800eb6e:	bf00      	nop
    PowerReadSec.setLinespacing(0);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 800eb76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        linespace = space;
 800eb80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb84:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800eb88:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800eb8a:	bf00      	nop
    PowerReadSec.setWildcard(touchgfx::TypedText(T_SINGLEUSEID27).getText());
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f603 6434 	addw	r4, r3, #3636	; 0xe34
 800eb92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eb96:	2118      	movs	r1, #24
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fc f9bd 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800eb9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800eba6:	4b0c      	ldr	r3, [pc, #48]	; (800ebd8 <_ZN12HalfVertBaseC1Ev+0x2cc0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d105      	bne.n	800ebba <_ZN12HalfVertBaseC1Ev+0x2ca2>
 800ebae:	4b0b      	ldr	r3, [pc, #44]	; (800ebdc <_ZN12HalfVertBaseC1Ev+0x2cc4>)
 800ebb0:	4a0b      	ldr	r2, [pc, #44]	; (800ebe0 <_ZN12HalfVertBaseC1Ev+0x2cc8>)
 800ebb2:	21b1      	movs	r1, #177	; 0xb1
 800ebb4:	480b      	ldr	r0, [pc, #44]	; (800ebe4 <_ZN12HalfVertBaseC1Ev+0x2ccc>)
 800ebb6:	f01b fded 	bl	802a794 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800ebba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebbe:	889a      	ldrh	r2, [r3, #4]
 800ebc0:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <_ZN12HalfVertBaseC1Ev+0x2cd0>)
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d313      	bcc.n	800ebf0 <_ZN12HalfVertBaseC1Ev+0x2cd8>
 800ebc8:	4b08      	ldr	r3, [pc, #32]	; (800ebec <_ZN12HalfVertBaseC1Ev+0x2cd4>)
 800ebca:	4a05      	ldr	r2, [pc, #20]	; (800ebe0 <_ZN12HalfVertBaseC1Ev+0x2cc8>)
 800ebcc:	21b2      	movs	r1, #178	; 0xb2
 800ebce:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <_ZN12HalfVertBaseC1Ev+0x2ccc>)
 800ebd0:	f01b fde0 	bl	802a794 <__assert_func>
 800ebd4:	20014bb0 	.word	0x20014bb0
 800ebd8:	20014ba4 	.word	0x20014ba4
 800ebdc:	0802be40 	.word	0x0802be40
 800ebe0:	0802be84 	.word	0x0802be84
 800ebe4:	0802beb4 	.word	0x0802beb4
 800ebe8:	20014ba8 	.word	0x20014ba8
 800ebec:	0802bef8 	.word	0x0802bef8
    }
 800ebf0:	bf00      	nop
        return texts->getText(typedTextId);
 800ebf2:	4be5      	ldr	r3, [pc, #916]	; (800ef88 <_ZN12HalfVertBaseC1Ev+0x3070>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f004 f901 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 800ec02:	4603      	mov	r3, r0
 800ec04:	bf00      	nop
 800ec06:	4619      	mov	r1, r3
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f7fc fb05 	bl	800b218 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
 800ec0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fa fc06 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>
    PowerReadSec.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f603 6434 	addw	r4, r3, #3636	; 0xe34
 800ec1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ec22:	2103      	movs	r1, #3
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fc f977 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 800ec2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4620      	mov	r0, r4
 800ec32:	f009 fcc4 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800ec36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fa fbf2 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    VoltageSetClick.setBoxWithBorderPosition(0, 0, 122, 37);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f603 6074 	addw	r0, r3, #3700	; 0xe74
 800ec46:	2325      	movs	r3, #37	; 0x25
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	237a      	movs	r3, #122	; 0x7a
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2100      	movs	r1, #0
 800ec50:	f000 fd7c 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    VoltageSetClick.setBorderSize(5);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800ec5a:	2105      	movs	r1, #5
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 fd95 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    VoltageSetClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f603 6474 	addw	r4, r3, #3700	; 0xe74
 800ec68:	2299      	movs	r2, #153	; 0x99
 800ec6a:	2166      	movs	r1, #102	; 0x66
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	f7fc fb8b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec72:	4605      	mov	r5, r0
 800ec74:	22cc      	movs	r2, #204	; 0xcc
 800ec76:	2199      	movs	r1, #153	; 0x99
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f7fc fb85 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec7e:	4606      	mov	r6, r0
 800ec80:	2266      	movs	r2, #102	; 0x66
 800ec82:	2133      	movs	r1, #51	; 0x33
 800ec84:	2000      	movs	r0, #0
 800ec86:	f7fc fb7f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec8a:	4680      	mov	r8, r0
 800ec8c:	2299      	movs	r2, #153	; 0x99
 800ec8e:	2166      	movs	r1, #102	; 0x66
 800ec90:	2033      	movs	r0, #51	; 0x33
 800ec92:	f7fc fb79 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec96:	4603      	mov	r3, r0
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	4643      	mov	r3, r8
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 fd85 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    VoltageSetClick.setPosition(300, 10, 122, 37);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f603 6074 	addw	r0, r3, #3700	; 0xe74
 800ecac:	2325      	movs	r3, #37	; 0x25
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	237a      	movs	r3, #122	; 0x7a
 800ecb2:	220a      	movs	r2, #10
 800ecb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ecb8:	f7fb ff07 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSetClick.setAlpha(0);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fc fd30 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    VoltageSetClick.setAction(flexButtonCallback);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f603 6074 	addw	r0, r3, #3700	; 0xe74
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	f241 13bc 	movw	r3, #4540	; 0x11bc
 800ecd6:	4413      	add	r3, r2
 800ecd8:	4619      	mov	r1, r3
 800ecda:	f7fc fd47 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    PowerReadSecClick.setBoxWithBorderPosition(0, 0, 122, 37);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f603 60ec 	addw	r0, r3, #3820	; 0xeec
 800ece4:	2325      	movs	r3, #37	; 0x25
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	237a      	movs	r3, #122	; 0x7a
 800ecea:	2200      	movs	r2, #0
 800ecec:	2100      	movs	r1, #0
 800ecee:	f000 fd2d 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    PowerReadSecClick.setBorderSize(5);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800ecf8:	2105      	movs	r1, #5
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fd46 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    PowerReadSecClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f603 64ec 	addw	r4, r3, #3820	; 0xeec
 800ed06:	2299      	movs	r2, #153	; 0x99
 800ed08:	2166      	movs	r1, #102	; 0x66
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	f7fc fb3c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ed10:	4605      	mov	r5, r0
 800ed12:	22cc      	movs	r2, #204	; 0xcc
 800ed14:	2199      	movs	r1, #153	; 0x99
 800ed16:	2000      	movs	r0, #0
 800ed18:	f7fc fb36 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	2266      	movs	r2, #102	; 0x66
 800ed20:	2133      	movs	r1, #51	; 0x33
 800ed22:	2000      	movs	r0, #0
 800ed24:	f7fc fb30 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ed28:	4680      	mov	r8, r0
 800ed2a:	2299      	movs	r2, #153	; 0x99
 800ed2c:	2166      	movs	r1, #102	; 0x66
 800ed2e:	2033      	movs	r0, #51	; 0x33
 800ed30:	f7fc fb2a 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ed34:	4603      	mov	r3, r0
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	4643      	mov	r3, r8
 800ed3a:	4632      	mov	r2, r6
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 fd36 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    PowerReadSecClick.setPosition(300, 334, 122, 37);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f603 60ec 	addw	r0, r3, #3820	; 0xeec
 800ed4a:	2325      	movs	r3, #37	; 0x25
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	237a      	movs	r3, #122	; 0x7a
 800ed50:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800ed54:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ed58:	f7fb feb7 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSecClick.setAlpha(0);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800ed62:	2100      	movs	r1, #0
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fc fce0 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    PowerReadSecClick.setAction(flexButtonCallback);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f603 60ec 	addw	r0, r3, #3820	; 0xeec
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	f241 13bc 	movw	r3, #4540	; 0x11bc
 800ed76:	4413      	add	r3, r2
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f7fc fcf7 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    AmprageSetClick.setBoxWithBorderPosition(0, 0, 122, 37);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f603 7064 	addw	r0, r3, #3940	; 0xf64
 800ed84:	2325      	movs	r3, #37	; 0x25
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	237a      	movs	r3, #122	; 0x7a
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	f000 fcdd 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    AmprageSetClick.setBorderSize(5);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ed98:	2105      	movs	r1, #5
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f000 fcf6 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    AmprageSetClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f603 7464 	addw	r4, r3, #3940	; 0xf64
 800eda6:	2299      	movs	r2, #153	; 0x99
 800eda8:	2166      	movs	r1, #102	; 0x66
 800edaa:	2000      	movs	r0, #0
 800edac:	f7fc faec 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800edb0:	4605      	mov	r5, r0
 800edb2:	22cc      	movs	r2, #204	; 0xcc
 800edb4:	2199      	movs	r1, #153	; 0x99
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7fc fae6 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800edbc:	4606      	mov	r6, r0
 800edbe:	2266      	movs	r2, #102	; 0x66
 800edc0:	2133      	movs	r1, #51	; 0x33
 800edc2:	2000      	movs	r0, #0
 800edc4:	f7fc fae0 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800edc8:	4680      	mov	r8, r0
 800edca:	2299      	movs	r2, #153	; 0x99
 800edcc:	2166      	movs	r1, #102	; 0x66
 800edce:	2033      	movs	r0, #51	; 0x33
 800edd0:	f7fc fada 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800edd4:	4603      	mov	r3, r0
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	4643      	mov	r3, r8
 800edda:	4632      	mov	r2, r6
 800eddc:	4629      	mov	r1, r5
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 fce6 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    AmprageSetClick.setPosition(300, 290, 122, 37);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f603 7064 	addw	r0, r3, #3940	; 0xf64
 800edea:	2325      	movs	r3, #37	; 0x25
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	237a      	movs	r3, #122	; 0x7a
 800edf0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800edf4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800edf8:	f7fb fe67 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSetClick.setAlpha(0);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ee02:	2100      	movs	r1, #0
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fc fc90 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    AmprageSetClick.setAction(flexButtonCallback);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f603 7064 	addw	r0, r3, #3940	; 0xf64
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	f241 13bc 	movw	r3, #4540	; 0x11bc
 800ee16:	4413      	add	r3, r2
 800ee18:	4619      	mov	r1, r3
 800ee1a:	f7fc fca7 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Settings.setBoxWithBorderPosition(0, 0, 56, 37);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f603 70dc 	addw	r0, r3, #4060	; 0xfdc
 800ee24:	2325      	movs	r3, #37	; 0x25
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	2338      	movs	r3, #56	; 0x38
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	f000 fc8d 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    Settings.setBorderSize(0);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f603 73dc 	addw	r3, r3, #4060	; 0xfdc
 800ee38:	2100      	movs	r1, #0
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 fca6 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    Settings.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f603 74dc 	addw	r4, r3, #4060	; 0xfdc
 800ee46:	2238      	movs	r2, #56	; 0x38
 800ee48:	2138      	movs	r1, #56	; 0x38
 800ee4a:	2038      	movs	r0, #56	; 0x38
 800ee4c:	f7fc fa9c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ee50:	4605      	mov	r5, r0
 800ee52:	2238      	movs	r2, #56	; 0x38
 800ee54:	2138      	movs	r1, #56	; 0x38
 800ee56:	2038      	movs	r0, #56	; 0x38
 800ee58:	f7fc fa96 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	2266      	movs	r2, #102	; 0x66
 800ee60:	2133      	movs	r1, #51	; 0x33
 800ee62:	2000      	movs	r0, #0
 800ee64:	f7fc fa90 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ee68:	4680      	mov	r8, r0
 800ee6a:	2299      	movs	r2, #153	; 0x99
 800ee6c:	2166      	movs	r1, #102	; 0x66
 800ee6e:	2033      	movs	r0, #51	; 0x33
 800ee70:	f7fc fa8a 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ee74:	4603      	mov	r3, r0
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	4643      	mov	r3, r8
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 fc96 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    Settings.setIconBitmaps(Bitmap(BITMAP_COG_OUTLINE_SMALL_WHITE_ID), Bitmap(BITMAP_COG_OUTLINE_SMALL_BLACK_ID));
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f603 74dc 	addw	r4, r3, #4060	; 0xfdc
 800ee8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ee8e:	2105      	movs	r1, #5
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fb fdb1 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800ee96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ee9a:	2104      	movs	r1, #4
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fb fdab 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800eea2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800eea6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800eeaa:	4619      	mov	r1, r3
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fc9c 	bl	800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    Settings.setIconXY(16, 6);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f603 73dc 	addw	r3, r3, #4060	; 0xfdc
 800eeb8:	2206      	movs	r2, #6
 800eeba:	2110      	movs	r1, #16
 800eebc:	4618      	mov	r0, r3
 800eebe:	f000 fcde 	bl	800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    Settings.setPosition(300, 54, 56, 37);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f603 70dc 	addw	r0, r3, #4060	; 0xfdc
 800eec8:	2325      	movs	r3, #37	; 0x25
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	2338      	movs	r3, #56	; 0x38
 800eece:	2236      	movs	r2, #54	; 0x36
 800eed0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800eed4:	f7fb fdf9 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>

    Power.setBoxWithBorderPosition(0, 0, 56, 37);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f241 0084 	movw	r0, #4228	; 0x1084
 800eede:	4418      	add	r0, r3
 800eee0:	2325      	movs	r3, #37	; 0x25
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	2338      	movs	r3, #56	; 0x38
 800eee6:	2200      	movs	r2, #0
 800eee8:	2100      	movs	r1, #0
 800eeea:	f000 fce0 	bl	800f8ae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE24setBoxWithBorderPositionEssss>
    Power.setBorderSize(0);
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	f241 0384 	movw	r3, #4228	; 0x1084
 800eef4:	4413      	add	r3, r2
 800eef6:	2100      	movs	r1, #0
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fcf8 	bl	800f8ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE13setBorderSizeEh>
    Power.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(20, 151, 197), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f241 0484 	movw	r4, #4228	; 0x1084
 800ef04:	441c      	add	r4, r3
 800ef06:	2238      	movs	r2, #56	; 0x38
 800ef08:	2138      	movs	r1, #56	; 0x38
 800ef0a:	2038      	movs	r0, #56	; 0x38
 800ef0c:	f7fc fa3c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ef10:	4605      	mov	r5, r0
 800ef12:	22c5      	movs	r2, #197	; 0xc5
 800ef14:	2197      	movs	r1, #151	; 0x97
 800ef16:	2014      	movs	r0, #20
 800ef18:	f7fc fa36 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	2266      	movs	r2, #102	; 0x66
 800ef20:	2133      	movs	r1, #51	; 0x33
 800ef22:	2000      	movs	r0, #0
 800ef24:	f7fc fa30 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ef28:	4680      	mov	r8, r0
 800ef2a:	2299      	movs	r2, #153	; 0x99
 800ef2c:	2166      	movs	r1, #102	; 0x66
 800ef2e:	2033      	movs	r0, #51	; 0x33
 800ef30:	f7fc fa2a 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ef34:	4603      	mov	r3, r0
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	4643      	mov	r3, r8
 800ef3a:	4632      	mov	r2, r6
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 fce7 	bl	800f912 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    Power.setIconBitmaps(Bitmap(BITMAP_POWER_SMALL_WHITE_ID), Bitmap(BITMAP_POWER_SMALL_BLACK_ID));
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f241 0484 	movw	r4, #4228	; 0x1084
 800ef4a:	441c      	add	r4, r3
 800ef4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ef50:	210d      	movs	r1, #13
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fb fd50 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800ef58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef5c:	210c      	movs	r1, #12
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fb fd4a 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800ef64:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800ef68:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f000 fcec 	bl	800f94c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    Power.setIconXY(16, 6);
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	f241 0384 	movw	r3, #4228	; 0x1084
 800ef7a:	4413      	add	r3, r2
 800ef7c:	2206      	movs	r2, #6
 800ef7e:	2110      	movs	r1, #16
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fd2d 	bl	800f9e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE9setIconXYEss>
 800ef86:	e001      	b.n	800ef8c <_ZN12HalfVertBaseC1Ev+0x3074>
 800ef88:	20014bb0 	.word	0x20014bb0
    Power.setPosition(366, 54, 56, 37);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f241 0084 	movw	r0, #4228	; 0x1084
 800ef92:	4418      	add	r0, r3
 800ef94:	2325      	movs	r3, #37	; 0x25
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	2338      	movs	r3, #56	; 0x38
 800ef9a:	2236      	movs	r2, #54	; 0x36
 800ef9c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800efa0:	f7fb fd93 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Power.setAction(flexButtonCallback);
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	f241 0384 	movw	r3, #4228	; 0x1084
 800efaa:	4413      	add	r3, r2
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800efb2:	440a      	add	r2, r1
 800efb4:	4611      	mov	r1, r2
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fc fbd8 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    PowerReadSecClick_1.setBoxWithBorderPosition(0, 0, 280, 81);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f241 1030 	movw	r0, #4400	; 0x1130
 800efc2:	4418      	add	r0, r3
 800efc4:	2351      	movs	r3, #81	; 0x51
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	f44f 738c 	mov.w	r3, #280	; 0x118
 800efcc:	2200      	movs	r2, #0
 800efce:	2100      	movs	r1, #0
 800efd0:	f000 fbbc 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    PowerReadSecClick_1.setBorderSize(5);
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	f241 1330 	movw	r3, #4400	; 0x1130
 800efda:	4413      	add	r3, r2
 800efdc:	2105      	movs	r1, #5
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 fbd4 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    PowerReadSecClick_1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f241 1430 	movw	r4, #4400	; 0x1130
 800efea:	441c      	add	r4, r3
 800efec:	2299      	movs	r2, #153	; 0x99
 800efee:	2166      	movs	r1, #102	; 0x66
 800eff0:	2000      	movs	r0, #0
 800eff2:	f7fc f9c9 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800eff6:	4605      	mov	r5, r0
 800eff8:	22cc      	movs	r2, #204	; 0xcc
 800effa:	2199      	movs	r1, #153	; 0x99
 800effc:	2000      	movs	r0, #0
 800effe:	f7fc f9c3 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f002:	4606      	mov	r6, r0
 800f004:	2266      	movs	r2, #102	; 0x66
 800f006:	2133      	movs	r1, #51	; 0x33
 800f008:	2000      	movs	r0, #0
 800f00a:	f7fc f9bd 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f00e:	4680      	mov	r8, r0
 800f010:	2299      	movs	r2, #153	; 0x99
 800f012:	2166      	movs	r1, #102	; 0x66
 800f014:	2033      	movs	r0, #51	; 0x33
 800f016:	f7fc f9b7 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f01a:	4603      	mov	r3, r0
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	4643      	mov	r3, r8
 800f020:	4632      	mov	r2, r6
 800f022:	4629      	mov	r1, r5
 800f024:	4620      	mov	r0, r4
 800f026:	f000 fbc3 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    PowerReadSecClick_1.setPosition(10, 290, 280, 81);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f241 1030 	movw	r0, #4400	; 0x1130
 800f030:	4418      	add	r0, r3
 800f032:	2351      	movs	r3, #81	; 0x51
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	f44f 738c 	mov.w	r3, #280	; 0x118
 800f03a:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f03e:	210a      	movs	r1, #10
 800f040:	f7fb fd43 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSecClick_1.setAlpha(0);
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	f241 1330 	movw	r3, #4400	; 0x1130
 800f04a:	4413      	add	r3, r2
 800f04c:	2100      	movs	r1, #0
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fc fb6b 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    PowerReadSecClick_1.setAction(flexButtonCallback);
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	f241 1330 	movw	r3, #4400	; 0x1130
 800f05a:	4413      	add	r3, r2
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800f062:	440a      	add	r2, r1
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7fc fb80 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(Background);
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	332c      	adds	r3, #44	; 0x2c
 800f072:	4619      	mov	r1, r3
 800f074:	4610      	mov	r0, r2
 800f076:	f006 faeb 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageReadBack);
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	3358      	adds	r3, #88	; 0x58
 800f080:	4619      	mov	r1, r3
 800f082:	4610      	mov	r0, r2
 800f084:	f006 fae4 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadPrimBack);
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3384      	adds	r3, #132	; 0x84
 800f08e:	4619      	mov	r1, r3
 800f090:	4610      	mov	r0, r2
 800f092:	f006 fadd 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSetBack);
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	33b0      	adds	r3, #176	; 0xb0
 800f09c:	4619      	mov	r1, r3
 800f09e:	4610      	mov	r0, r2
 800f0a0:	f006 fad6 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSetBack);
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	33dc      	adds	r3, #220	; 0xdc
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	f006 facf 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSecBack);
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f006 fac7 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageRead);
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	f006 fabf 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadPrim);
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800f0da:	4619      	mov	r1, r3
 800f0dc:	4610      	mov	r0, r2
 800f0de:	f006 fab7 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageGraph);
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	f006 faaf 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerGraph);
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f006 faa7 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSet);
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 800f10a:	4619      	mov	r1, r3
 800f10c:	4610      	mov	r0, r2
 800f10e:	f006 fa9f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSet);
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f603 53f4 	addw	r3, r3, #3572	; 0xdf4
 800f11a:	4619      	mov	r1, r3
 800f11c:	4610      	mov	r0, r2
 800f11e:	f006 fa97 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSec);
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 800f12a:	4619      	mov	r1, r3
 800f12c:	4610      	mov	r0, r2
 800f12e:	f006 fa8f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSetClick);
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800f13a:	4619      	mov	r1, r3
 800f13c:	4610      	mov	r0, r2
 800f13e:	f006 fa87 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSecClick);
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800f14a:	4619      	mov	r1, r3
 800f14c:	4610      	mov	r0, r2
 800f14e:	f006 fa7f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSetClick);
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f006 fa77 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(Settings);
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f603 73dc 	addw	r3, r3, #4060	; 0xfdc
 800f16a:	4619      	mov	r1, r3
 800f16c:	4610      	mov	r0, r2
 800f16e:	f006 fa6f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(Power);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	f241 0384 	movw	r3, #4228	; 0x1084
 800f17a:	4413      	add	r3, r2
 800f17c:	4619      	mov	r1, r3
 800f17e:	f006 fa67 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSecClick_1);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	f241 1330 	movw	r3, #4400	; 0x1130
 800f18a:	4413      	add	r3, r2
 800f18c:	4619      	mov	r1, r3
 800f18e:	f006 fa5f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4618      	mov	r0, r3
 800f196:	37e0      	adds	r7, #224	; 0xe0
 800f198:	46bd      	mov	sp, r7
 800f19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19e:	bf00      	nop

0800f1a0 <_ZN12HalfVertBase10initializeEv>:

void HalfVertBase::initialize()
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]

}
 800f1a8:	bf00      	nop
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void HalfVertBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
    if (&src == &VoltageSetClick)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d106      	bne.n	800f1d8 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //SelectVoltage
        //When VoltageSetClick clicked call virtual function
        //Call SelectVoltage
        SelectVoltage();
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3390      	adds	r3, #144	; 0x90
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	4798      	blx	r3
        //SwichPower2
        //When PowerReadSecClick_1 clicked call virtual function
        //Call SwichPower
        SwichPower();
    }
}
 800f1d6:	e034      	b.n	800f242 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8e>
    else if (&src == &PowerReadSecClick)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f603 63ec 	addw	r3, r3, #3820	; 0xeec
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d106      	bne.n	800f1f2 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
        SwichPower();
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3384      	adds	r3, #132	; 0x84
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	4798      	blx	r3
}
 800f1f0:	e027      	b.n	800f242 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8e>
    else if (&src == &AmprageSetClick)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d106      	bne.n	800f20c <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x58>
        SelectAmprage();
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	338c      	adds	r3, #140	; 0x8c
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	4798      	blx	r3
}
 800f20a:	e01a      	b.n	800f242 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8e>
    else if (&src == &Power)
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	f241 0384 	movw	r3, #4228	; 0x1084
 800f212:	4413      	add	r3, r2
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d106      	bne.n	800f228 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x74>
        PowerToggle();
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3388      	adds	r3, #136	; 0x88
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
}
 800f226:	e00c      	b.n	800f242 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8e>
    else if (&src == &PowerReadSecClick_1)
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	f241 1330 	movw	r3, #4400	; 0x1130
 800f22e:	4413      	add	r3, r2
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d105      	bne.n	800f242 <_ZN12HalfVertBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8e>
        SwichPower();
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3384      	adds	r3, #132	; 0x84
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	4798      	blx	r3
}
 800f242:	bf00      	nop
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
	...

0800f24c <_ZN8touchgfx17AbstractDataGraphD1Ev>:
{
class AbstractGraphElement;
class AbstractGraphDecoration;

/** An abstract data graph. */
class AbstractDataGraph : public Container
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	4a12      	ldr	r2, [pc, #72]	; (800f2a0 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	33e4      	adds	r3, #228	; 0xe4
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fc f9fe 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	33b8      	adds	r3, #184	; 0xb8
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fc f9f9 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	338c      	adds	r3, #140	; 0x8c
 800f272:	4618      	mov	r0, r3
 800f274:	f7fc f9f4 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3360      	adds	r3, #96	; 0x60
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fc f9ef 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3334      	adds	r3, #52	; 0x34
 800f286:	4618      	mov	r0, r3
 800f288:	f7fc f9ea 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fc f9e6 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	0802eb44 	.word	0x0802eb44

0800f2a4 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff ffcd 	bl	800f24c <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800f2b2:	f44f 7194 	mov.w	r1, #296	; 0x128
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f01b fa3d 	bl	802a736 <_ZdlPvj>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>:
};

/**
 * Abstract helper class used to implement graphs with the same distance between the x values (i.e. x is ignored).
 */
class AbstractDataGraphWithY : public AbstractDataGraph
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	4a05      	ldr	r2, [pc, #20]	; (800f2e8 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev+0x20>)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff ffb7 	bl	800f24c <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	0802ec34 	.word	0x0802ec34

0800f2ec <_ZN8touchgfx22AbstractDataGraphWithYD0Ev>:
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ffe7 	bl	800f2c8 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800f2fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f01b fa19 	bl	802a736 <_ZdlPvj>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4618      	mov	r0, r3
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
	...

0800f310 <_ZN8touchgfx15DataGraphScrollD1Ev>:
 * DataGraphScroll is used to display a graph that continuously scrolls to the left every
 * time a new value is added to the graph. Because the graph is scrolled every time a new value
 * is added, the graph has to be re-drawn which can be quite demanding for the hardware
 * depending on the graph elements used in the graph.
 */
class DataGraphScroll : public AbstractDataGraphWithY
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	4a05      	ldr	r2, [pc, #20]	; (800f330 <_ZN8touchgfx15DataGraphScrollD1Ev+0x20>)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff ffd1 	bl	800f2c8 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	0802f1fc 	.word	0x0802f1fc

0800f334 <_ZN8touchgfx15DataGraphScrollD0Ev>:
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7ff ffe7 	bl	800f310 <_ZN8touchgfx15DataGraphScrollD1Ev>
 800f342:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f01b f9f5 	bl	802a736 <_ZdlPvj>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <_ZN8touchgfx11GraphScrollILs201EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphScroll : public DataGraphScroll
{
public:
    GraphScroll()
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
        : DataGraphScroll(CAPACITY, yValues)
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f368:	461a      	mov	r2, r3
 800f36a:	21c9      	movs	r1, #201	; 0xc9
 800f36c:	f008 ff88 	bl	8018280 <_ZN8touchgfx15DataGraphScrollC1EsPi>
 800f370:	4a03      	ldr	r2, [pc, #12]	; (800f380 <_ZN8touchgfx11GraphScrollILs201EEC1Ev+0x28>)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	601a      	str	r2, [r3, #0]
    {
    }
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	0802ccc0 	.word	0x0802ccc0

0800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	4a05      	ldr	r2, [pc, #20]	; (800f3a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	f7fb fea9 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	0802f4f0 	.word	0x0802f4f0

0800f3a8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff ffe7 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f3b6:	2140      	movs	r1, #64	; 0x40
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f01b f9bc 	bl	802a736 <_ZdlPvj>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEC1Ev>:
template <class T>
class ClickListener : public T
{
public:
    /** Initializes a new instance of the ClickListener class. Make the object touchable. */
    ClickListener()
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
        : T(), clickAction(0)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fb feb2 	bl	800b13c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f3d8:	4a07      	ldr	r2, [pc, #28]	; (800f3f8 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEC1Ev+0x30>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	641a      	str	r2, [r3, #64]	; 0x40
    {
        T::setTouchable(true);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fb fc56 	bl	800ac9a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	0802cc48 	.word	0x0802cc48

0800f3fc <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4618      	mov	r0, r3
 800f408:	f7fc f94c 	bl	800b6a4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800f40c:	4a03      	ldr	r2, [pc, #12]	; (800f41c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	0802ce7c 	.word	0x0802ce7c

0800f420 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	4a05      	ldr	r2, [pc, #20]	; (800f440 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4618      	mov	r0, r3
 800f432:	f7fc fa31 	bl	800b898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	0802ce7c 	.word	0x0802ce7c

0800f444 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff ffe7 	bl	800f420 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800f452:	2134      	movs	r1, #52	; 0x34
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f01b f96e 	bl	802a736 <_ZdlPvj>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	4a05      	ldr	r2, [pc, #20]	; (800f484 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f7fc fb31 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4618      	mov	r0, r3
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	0802f598 	.word	0x0802f598

0800f488 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7ff ffe7 	bl	800f464 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f496:	2134      	movs	r1, #52	; 0x34
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f01b f94c 	bl	802a736 <_ZdlPvj>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	2334      	movs	r3, #52	; 0x34
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	f01b f9f7 	bl	802a8ac <memset>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff ff9b 	bl	800f3fc <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800f4c6:	4a17      	ldr	r2, [pc, #92]	; (800f524 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3334      	adds	r3, #52	; 0x34
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fc fb25 	bl	800bb20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	3368      	adds	r3, #104	; 0x68
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fb fa20 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	336c      	adds	r3, #108	; 0x6c
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fb fa1b 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	3370      	adds	r3, #112	; 0x70
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fb fa16 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3374      	adds	r3, #116	; 0x74
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fb fa11 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3334      	adds	r3, #52	; 0x34
 800f502:	2200      	movs	r2, #0
 800f504:	2100      	movs	r1, #0
 800f506:	4618      	mov	r0, r3
 800f508:	f7fb fb38 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3334      	adds	r3, #52	; 0x34
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f006 f89b 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	0802cbb4 	.word	0x0802cbb4

0800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	4a08      	ldr	r2, [pc, #32]	; (800f554 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3334      	adds	r3, #52	; 0x34
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff ff92 	bl	800f464 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff ff6c 	bl	800f420 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	0802cbb4 	.word	0x0802cbb4

0800f558 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff ffe1 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800f566:	2178      	movs	r1, #120	; 0x78
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f01b f8e4 	bl	802a736 <_ZdlPvj>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class IconButtonStyle : public T
{
public:
    IconButtonStyle()
 800f578:	b590      	push	{r4, r7, lr}
 800f57a:	b085      	sub	sp, #20
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
        : T()
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff ff90 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800f588:	4a16      	ldr	r2, [pc, #88]	; (800f5e4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x6c>)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	601a      	str	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3378      	adds	r3, #120	; 0x78
 800f592:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f596:	4618      	mov	r0, r3
 800f598:	f7fb fa2e 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	337a      	adds	r3, #122	; 0x7a
 800f5a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fb fa27 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800f5b0:	f107 030c 	add.w	r3, r7, #12
 800f5b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fb fa1d 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f5be:	f107 030c 	add.w	r3, r7, #12
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f7fc fa2d 	bl	800ba24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    {
        T::add(iconImage);
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	337c      	adds	r3, #124	; 0x7c
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	f006 f83c 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3714      	adds	r7, #20
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd90      	pop	{r4, r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	0802cb1c 	.word	0x0802cb1c

0800f5e8 <_ZN8touchgfx19ToggleButtonTriggerD1Ev>:
class ToggleButtonTrigger : public AbstractButtonContainer
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	4a05      	ldr	r2, [pc, #20]	; (800f608 <_ZN8touchgfx19ToggleButtonTriggerD1Ev+0x20>)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fc f94d 	bl	800b898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4618      	mov	r0, r3
 800f602:	3708      	adds	r7, #8
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	0802cde8 	.word	0x0802cde8

0800f60c <_ZN8touchgfx19ToggleButtonTriggerD0Ev>:
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff ffe7 	bl	800f5e8 <_ZN8touchgfx19ToggleButtonTriggerD1Ev>
 800f61a:	2138      	movs	r1, #56	; 0x38
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f01b f88a 	bl	802a736 <_ZdlPvj>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEED1Ev>:
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	4a08      	ldr	r2, [pc, #32]	; (800f658 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEED1Ev+0x2c>)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3338      	adds	r3, #56	; 0x38
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff ff10 	bl	800f464 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff ffce 	bl	800f5e8 <_ZN8touchgfx19ToggleButtonTriggerD1Ev>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	0802ca88 	.word	0x0802ca88

0800f65c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEED0Ev>:
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff ffe1 	bl	800f62c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEED1Ev>
 800f66a:	217c      	movs	r1, #124	; 0x7c
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f01b f862 	bl	802a736 <_ZdlPvj>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev>:
    IconButtonStyle()
 800f67c:	b590      	push	{r4, r7, lr}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
        : T()
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	f000 f9c2 	bl	800fa10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEC1Ev>
 800f68c:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev+0x6c>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	337c      	adds	r3, #124	; 0x7c
 800f696:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fb f9ac 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	337e      	adds	r3, #126	; 0x7e
 800f6a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fb f9a5 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800f6b4:	f107 030c 	add.w	r3, r7, #12
 800f6b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fb f99b 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 800f6c2:	f107 030c 	add.w	r3, r7, #12
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7fc f9ab 	bl	800ba24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	3380      	adds	r3, #128	; 0x80
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	f005 ffba 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd90      	pop	{r4, r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	0802c9f0 	.word	0x0802c9f0

0800f6ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	4a04      	ldr	r2, [pc, #16]	; (800f708 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	0802cf10 	.word	0x0802cf10

0800f70c <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	4639      	mov	r1, r7
 800f718:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff ffe4 	bl	800f6ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 800f724:	4a08      	ldr	r2, [pc, #32]	; (800f748 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	3308      	adds	r3, #8
 800f734:	463a      	mov	r2, r7
 800f736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f73a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	0802c9d8 	.word	0x0802c9d8

0800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f74c:	b590      	push	{r4, r7, lr}
 800f74e:	b087      	sub	sp, #28
 800f750:	af02      	add	r7, sp, #8
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	4608      	mov	r0, r1
 800f756:	4611      	mov	r1, r2
 800f758:	461a      	mov	r2, r3
 800f75a:	4603      	mov	r3, r0
 800f75c:	817b      	strh	r3, [r7, #10]
 800f75e:	460b      	mov	r3, r1
 800f760:	813b      	strh	r3, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f76c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800f770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f774:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4623      	mov	r3, r4
 800f780:	f7fb f9a3 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800f784:	bf00      	nop
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd90      	pop	{r4, r7, pc}

0800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	460b      	mov	r3, r1
 800f796:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3334      	adds	r3, #52	; 0x34
 800f79c:	78fa      	ldrb	r2, [r7, #3]
 800f79e:	b292      	uxth	r2, r2
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fc f9e6 	bl	800bb74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	69ba      	ldr	r2, [r7, #24]
 800f7d4:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3384      	adds	r3, #132	; 0x84
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	4798      	blx	r3
    }
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
     * Sets icon bitmaps.
     *
     * @param  newIconReleased The new icon released.
     * @param  newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800f7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ec:	b085      	sub	sp, #20
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	8812      	ldrh	r2, [r2, #0]
 800f7fc:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        iconPressed = newIconPressed;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	8812      	ldrh	r2, [r2, #0]
 800f806:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	4618      	mov	r0, r3
 800f814:	f7fb f97a 	bl	800ab0c <_ZNK8touchgfx8Drawable8getWidthEv>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	da00      	bge.n	800f820 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 800f81e:	3301      	adds	r3, #1
 800f820:	105b      	asrs	r3, r3, #1
 800f822:	b21b      	sxth	r3, r3
 800f824:	b29c      	uxth	r4, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f00d fd96 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f82c:	4603      	mov	r3, r0
 800f82e:	085b      	lsrs	r3, r3, #1
 800f830:	b29b      	uxth	r3, r3
 800f832:	1ae3      	subs	r3, r4, r3
 800f834:	b29b      	uxth	r3, r3
 800f836:	b21e      	sxth	r6, r3
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fb f973 	bl	800ab26 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	da00      	bge.n	800f848 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 800f846:	3301      	adds	r3, #1
 800f848:	105b      	asrs	r3, r3, #1
 800f84a:	b21b      	sxth	r3, r3
 800f84c:	b29c      	uxth	r4, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f00d fdbc 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f854:	4603      	mov	r3, r0
 800f856:	085b      	lsrs	r3, r3, #1
 800f858:	b29b      	uxth	r3, r3
 800f85a:	1ae3      	subs	r3, r4, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	b21b      	sxth	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	4631      	mov	r1, r6
 800f864:	4628      	mov	r0, r5
 800f866:	f7fb f989 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3384      	adds	r3, #132	; 0x84
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	4798      	blx	r3
    }
 800f876:	bf00      	nop
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>:
     * Sets the position of the icon.
     *
     * @param  x The x coordinate.
     * @param  y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
 800f886:	460b      	mov	r3, r1
 800f888:	807b      	strh	r3, [r7, #2]
 800f88a:	4613      	mov	r3, r2
 800f88c:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f88e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f892:	4619      	mov	r1, r3
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 f966 	bl	800fb66 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 800f89a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 f972 	bl	800fb8a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>
    }
 800f8a6:	bf00      	nop
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f8ae:	b590      	push	{r4, r7, lr}
 800f8b0:	b087      	sub	sp, #28
 800f8b2:	af02      	add	r7, sp, #8
 800f8b4:	60f8      	str	r0, [r7, #12]
 800f8b6:	4608      	mov	r0, r1
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	4603      	mov	r3, r0
 800f8be:	817b      	strh	r3, [r7, #10]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	813b      	strh	r3, [r7, #8]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f8ce:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800f8d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f8d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f8da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8de:	9300      	str	r3, [sp, #0]
 800f8e0:	4623      	mov	r3, r4
 800f8e2:	f7fb f8f2 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800f8e6:	bf00      	nop
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd90      	pop	{r4, r7, pc}

0800f8ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b082      	sub	sp, #8
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3338      	adds	r3, #56	; 0x38
 800f8fe:	78fa      	ldrb	r2, [r7, #3]
 800f900:	b292      	uxth	r2, r2
 800f902:	4611      	mov	r1, r2
 800f904:	4618      	mov	r0, r3
 800f906:	f7fc f935 	bl	800bb74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800f90a:	bf00      	nop
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800f912:	b580      	push	{r7, lr}
 800f914:	b084      	sub	sp, #16
 800f916:	af00      	add	r7, sp, #0
 800f918:	60f8      	str	r0, [r7, #12]
 800f91a:	60b9      	str	r1, [r7, #8]
 800f91c:	607a      	str	r2, [r7, #4]
 800f91e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	66da      	str	r2, [r3, #108]	; 0x6c
        down = colorPressed;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	671a      	str	r2, [r3, #112]	; 0x70
        borderUp = borderColorReleased;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	675a      	str	r2, [r3, #116]	; 0x74
        borderDown = borderColorPressed;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	69ba      	ldr	r2, [r7, #24]
 800f936:	679a      	str	r2, [r3, #120]	; 0x78
        handlePressedUpdated();
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	3384      	adds	r3, #132	; 0x84
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	4798      	blx	r3
    }
 800f944:	bf00      	nop
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
        iconReleased = newIconReleased;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	68ba      	ldr	r2, [r7, #8]
 800f95c:	8812      	ldrh	r2, [r2, #0]
 800f95e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
        iconPressed = newIconPressed;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	8812      	ldrh	r2, [r2, #0]
 800f968:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	4618      	mov	r0, r3
 800f976:	f7fb f8c9 	bl	800ab0c <_ZNK8touchgfx8Drawable8getWidthEv>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	da00      	bge.n	800f982 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 800f980:	3301      	adds	r3, #1
 800f982:	105b      	asrs	r3, r3, #1
 800f984:	b21b      	sxth	r3, r3
 800f986:	b29c      	uxth	r4, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f00d fce5 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f98e:	4603      	mov	r3, r0
 800f990:	085b      	lsrs	r3, r3, #1
 800f992:	b29b      	uxth	r3, r3
 800f994:	1ae3      	subs	r3, r4, r3
 800f996:	b29b      	uxth	r3, r3
 800f998:	b21e      	sxth	r6, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fb f8c2 	bl	800ab26 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	da00      	bge.n	800f9aa <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	105b      	asrs	r3, r3, #1
 800f9ac:	b21b      	sxth	r3, r3
 800f9ae:	b29c      	uxth	r4, r3
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f00d fd0b 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	085b      	lsrs	r3, r3, #1
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	1ae3      	subs	r3, r4, r3
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	b21b      	sxth	r3, r3
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f7fb f8d8 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3384      	adds	r3, #132	; 0x84
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	4798      	blx	r3
    }
 800f9d8:	bf00      	nop
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	807b      	strh	r3, [r7, #2]
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 800f9f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f92a 	bl	800fc50 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 800f9fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 f936 	bl	800fc74 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE8setIconYEs>
    }
 800fa08:	bf00      	nop
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fb ff5e 	bl	800b8dc <_ZN8touchgfx19ToggleButtonTriggerC1Ev>
 800fa20:	4a17      	ldr	r2, [pc, #92]	; (800fa80 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEC1Ev+0x70>)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3338      	adds	r3, #56	; 0x38
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fc f878 	bl	800bb20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	336c      	adds	r3, #108	; 0x6c
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fa ff73 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3370      	adds	r3, #112	; 0x70
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fa ff6e 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3374      	adds	r3, #116	; 0x74
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fa ff69 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3378      	adds	r3, #120	; 0x78
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fa ff64 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3338      	adds	r3, #56	; 0x38
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	2100      	movs	r1, #0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fb f88b 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3338      	adds	r3, #56	; 0x38
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4610      	mov	r0, r2
 800fa70:	f005 fdee 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4618      	mov	r0, r3
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	0802ca88 	.word	0x0802ca88

0800fa84 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
    }
 800fa8c:	4a04      	ldr	r2, [pc, #16]	; (800faa0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	0802cf10 	.word	0x0802cf10

0800faa4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
    }
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f7ff ffe9 	bl	800fa84 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800fab2:	2104      	movs	r1, #4
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f01a fe3e 	bl	802a736 <_ZdlPvj>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fb fe1b 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d002      	beq.n	800fae6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	336c      	adds	r3, #108	; 0x6c
 800fae4:	e001      	b.n	800faea <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	3368      	adds	r3, #104	; 0x68
 800faea:	6819      	ldr	r1, [r3, #0]
 800faec:	4620      	mov	r0, r4
 800faee:	f7fb f9f5 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fb fe08 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3374      	adds	r3, #116	; 0x74
 800fb0a:	e001      	b.n	800fb10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3370      	adds	r3, #112	; 0x70
 800fb10:	6819      	ldr	r1, [r3, #0]
 800fb12:	4620      	mov	r0, r4
 800fb14:	f7fc f820 	bl	800bb58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fb fe5b 	bl	800b7d6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd90      	pop	{r4, r7, pc}

0800fb28 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    Bitmap iconReleased; ///< Icon to display when button is not pressed.
    Bitmap iconPressed;  ///< Icon to display when button is pressed.
    Image iconImage;     ///< The icon image

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fb fde9 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d002      	beq.n	800fb4a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	337a      	adds	r3, #122	; 0x7a
 800fb48:	e001      	b.n	800fb4e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3378      	adds	r3, #120	; 0x78
 800fb4e:	4619      	mov	r1, r3
 800fb50:	4620      	mov	r0, r4
 800fb52:	f008 fe74 	bl	801883e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7ff ffb3 	bl	800fac4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 800fb5e:	bf00      	nop
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd90      	pop	{r4, r7, pc}

0800fb66 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	460b      	mov	r3, r1
 800fb70:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	337c      	adds	r3, #124	; 0x7c
 800fb76:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fa ffdf 	bl	800ab40 <_ZN8touchgfx8Drawable4setXEs>
    }
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	460b      	mov	r3, r1
 800fb94:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	337c      	adds	r3, #124	; 0x7c
 800fb9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fa ffdc 	bl	800ab5e <_ZN8touchgfx8Drawable4setYEs>
    }
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 800fbae:	b590      	push	{r4, r7, lr}
 800fbb0:	b083      	sub	sp, #12
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fb fda6 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d002      	beq.n	800fbd0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	3370      	adds	r3, #112	; 0x70
 800fbce:	e001      	b.n	800fbd4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	336c      	adds	r3, #108	; 0x6c
 800fbd4:	6819      	ldr	r1, [r3, #0]
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f7fb f980 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fb fd93 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3378      	adds	r3, #120	; 0x78
 800fbf4:	e001      	b.n	800fbfa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3374      	adds	r3, #116	; 0x74
 800fbfa:	6819      	ldr	r1, [r3, #0]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7fb ffab 	bl	800bb58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fb fde6 	bl	800b7d6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800fc0a:	bf00      	nop
 800fc0c:	370c      	adds	r7, #12
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd90      	pop	{r4, r7, pc}

0800fc12 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 800fc12:	b590      	push	{r4, r7, lr}
 800fc14:	b083      	sub	sp, #12
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fb fd74 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	337e      	adds	r3, #126	; 0x7e
 800fc32:	e001      	b.n	800fc38 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	337c      	adds	r3, #124	; 0x7c
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f008 fdff 	bl	801883e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff ffb3 	bl	800fbae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>
    }
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd90      	pop	{r4, r7, pc}

0800fc50 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	3380      	adds	r3, #128	; 0x80
 800fc60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fa ff6a 	bl	800ab40 <_ZN8touchgfx8Drawable4setXEs>
    }
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	3380      	adds	r3, #128	; 0x80
 800fc84:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fa ff67 	bl	800ab5e <_ZN8touchgfx8Drawable4setYEs>
    }
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	4a05      	ldr	r2, [pc, #20]	; (800fcb8 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff feeb 	bl	800fa84 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	0802c9d8 	.word	0x0802c9d8

0800fcbc <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7ff ffe7 	bl	800fc98 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800fcca:	2110      	movs	r1, #16
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f01a fd32 	bl	802a736 <_ZdlPvj>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>:
class IconButtonStyle : public T
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	4a08      	ldr	r2, [pc, #32]	; (800fd08 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED1Ev+0x2c>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	601a      	str	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3380      	adds	r3, #128	; 0x80
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fb fed2 	bl	800ba98 <_ZN8touchgfx5ImageD1Ev>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7ff fc98 	bl	800f62c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEED1Ev>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3708      	adds	r7, #8
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	0802c9f0 	.word	0x0802c9f0

0800fd0c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED0Ev>:
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f7ff ffe1 	bl	800fcdc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>
 800fd1a:	21ac      	movs	r1, #172	; 0xac
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f01a fd0a 	bl	802a736 <_ZdlPvj>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	4a08      	ldr	r2, [pc, #32]	; (800fd58 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	337c      	adds	r3, #124	; 0x7c
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fb feaa 	bl	800ba98 <_ZN8touchgfx5ImageD1Ev>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff fbee 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	0802cb1c 	.word	0x0802cb1c

0800fd5c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7ff ffe1 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800fd6a:	21a8      	movs	r1, #168	; 0xa8
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f01a fce2 	bl	802a736 <_ZdlPvj>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev>:
class ClickListener : public T
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff faf9 	bl	800f384 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	0802cc48 	.word	0x0802cc48

0800fda0 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED0Ev>:
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe7 	bl	800fd7c <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev>
 800fdae:	2144      	movs	r1, #68	; 0x44
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f01a fcc0 	bl	802a736 <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN8touchgfx11GraphScrollILs201EED1Ev>:
class GraphScroll : public DataGraphScroll
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <_ZN8touchgfx11GraphScrollILs201EED1Ev+0x20>)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff fa9d 	bl	800f310 <_ZN8touchgfx15DataGraphScrollD1Ev>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	0802ccc0 	.word	0x0802ccc0

0800fde4 <_ZN8touchgfx11GraphScrollILs201EED0Ev>:
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff ffe7 	bl	800fdc0 <_ZN8touchgfx11GraphScrollILs201EED1Ev>
 800fdf2:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f01a fc9d 	bl	802a736 <_ZdlPvj>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>:
 * GraphElementLine will draw a line with a given thickness through the data points in the graph.
 *
 * @note The Line is drawn using Canvas Widget Renderer which is slower but produces much nicer
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	4a05      	ldr	r2, [pc, #20]	; (800fe28 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fb fff3 	bl	800be04 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	0802ee38 	.word	0x0802ee38

0800fe2c <_ZN8touchgfx16GraphElementLineD0Ev>:
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7ff ffe7 	bl	800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>
 800fe3a:	2138      	movs	r1, #56	; 0x38
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f01a fc7a 	bl	802a736 <_ZdlPvj>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	4a05      	ldr	r2, [pc, #20]	; (800fe6c <_ZN8touchgfx13PainterRGB565D1Ev+0x20>)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fb fb95 	bl	800b58c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4618      	mov	r0, r3
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	0802e970 	.word	0x0802e970

0800fe70 <_ZN8touchgfx13PainterRGB565D0Ev>:
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff ffe7 	bl	800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>
 800fe7e:	211c      	movs	r1, #28
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f01a fc58 	bl	802a736 <_ZdlPvj>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	4a05      	ldr	r2, [pc, #20]	; (800feb0 <_ZN8touchgfx17GraphElementGridXD1Ev+0x20>)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	601a      	str	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fb fff3 	bl	800be8c <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	0802eeb8 	.word	0x0802eeb8

0800feb4 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff ffe7 	bl	800fe90 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800fec2:	2144      	movs	r1, #68	; 0x44
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f01a fc36 	bl	802a736 <_ZdlPvj>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	4a05      	ldr	r2, [pc, #20]	; (800fef4 <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fb ffd1 	bl	800be8c <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	0802ef40 	.word	0x0802ef40

0800fef8 <_ZN8touchgfx17GraphElementGridYD0Ev>:
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff ffe7 	bl	800fed4 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800ff06:	2144      	movs	r1, #68	; 0x44
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f01a fc14 	bl	802a736 <_ZdlPvj>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	68d2      	ldr	r2, [r2, #12]
 800ff2a:	1052      	asrs	r2, r2, #1
 800ff2c:	1898      	adds	r0, r3, r2
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d102      	bne.n	800ff40 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	e00a      	b.n	800ff56 <_ZN8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	68d2      	ldr	r2, [r2, #12]
 800ff48:	1052      	asrs	r2, r2, #1
 800ff4a:	4413      	add	r3, r2
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	6892      	ldr	r2, [r2, #8]
 800ff52:	4413      	add	r3, r2
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	4798      	blx	r3
    }
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d010      	beq.n	800ff94 <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d107      	bne.n	800ff8a <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	f003 0301 	and.w	r3, r3, #1
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d101      	bne.n	800ff8a <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800ff86:	2301      	movs	r3, #1
 800ff88:	e000      	b.n	800ff8c <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d001      	beq.n	800ff94 <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800ff90:	2301      	movs	r3, #1
 800ff92:	e000      	b.n	800ff96 <_ZNK8touchgfx8CallbackI12HalfVertBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 800ff94:	2300      	movs	r3, #0
    }
 800ff96:	4618      	mov	r0, r3
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800ffa2:	b590      	push	{r4, r7, lr}
 800ffa4:	b083      	sub	sp, #12
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fb fbcd 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f7fb fd5b 	bl	800ba78 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f804 	bl	800ffd2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE18handleAlphaUpdatedEv>
    }
 800ffca:	bf00      	nop
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd90      	pop	{r4, r7, pc}

0800ffd2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800ffd2:	b590      	push	{r4, r7, lr}
 800ffd4:	b083      	sub	sp, #12
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fb fbb5 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	4619      	mov	r1, r3
 800ffec:	4620      	mov	r0, r4
 800ffee:	f7fa ff83 	bl	800aef8 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fb fbf8 	bl	800b7ea <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800fffa:	bf00      	nop
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd90      	pop	{r4, r7, pc}

08010002 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8010002:	b590      	push	{r4, r7, lr}
 8010004:	b083      	sub	sp, #12
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
        iconImage.setAlpha(T::getAlpha());
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f7fb fb9d 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8010018:	4603      	mov	r3, r0
 801001a:	4619      	mov	r1, r3
 801001c:	4620      	mov	r0, r4
 801001e:	f7fb fd2b 	bl	800ba78 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	f000 f804 	bl	8010032 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 801002a:	bf00      	nop
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	bd90      	pop	{r4, r7, pc}

08010032 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8010032:	b590      	push	{r4, r7, lr}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4618      	mov	r0, r3
 8010044:	f7fb fb85 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8010048:	4603      	mov	r3, r0
 801004a:	4619      	mov	r1, r3
 801004c:	4620      	mov	r0, r4
 801004e:	f7fa ff53 	bl	800aef8 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	f7fb fbc8 	bl	800b7ea <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801005a:	bf00      	nop
 801005c:	370c      	adds	r7, #12
 801005e:	46bd      	mov	sp, r7
 8010060:	bd90      	pop	{r4, r7, pc}

08010062 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
    {
        T::handleClickEvent(event);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	4618      	mov	r0, r3
 8010072:	f7fa fdc9 	bl	800ac08 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00d      	beq.n	801009a <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE+0x38>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	330c      	adds	r3, #12
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4610      	mov	r0, r2
 801008e:	4798      	blx	r3
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d001      	beq.n	801009a <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE+0x38>
 8010096:	2301      	movs	r3, #1
 8010098:	e000      	b.n	801009c <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE+0x3a>
 801009a:	2300      	movs	r3, #0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d009      	beq.n	80100b4 <_ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE+0x52>
        {
            clickAction->execute(*this, event);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3308      	adds	r3, #8
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	6879      	ldr	r1, [r7, #4]
 80100b0:	683a      	ldr	r2, [r7, #0]
 80100b2:	4798      	blx	r3
        }
    }
 80100b4:	bf00      	nop
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fb fb21 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80100ce:	4603      	mov	r3, r0
 80100d0:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80100d2:	6838      	ldr	r0, [r7, #0]
 80100d4:	f7fa fc84 	bl	800a9e0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	bf0c      	ite	eq
 80100de:	2301      	moveq	r3, #1
 80100e0:	2300      	movne	r3, #0
 80100e2:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80100e4:	7bbb      	ldrb	r3, [r7, #14]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d005      	beq.n	80100f6 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80100ea:	7bfb      	ldrb	r3, [r7, #15]
 80100ec:	f083 0301 	eor.w	r3, r3, #1
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d108      	bne.n	8010108 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
 80100f8:	f083 0301 	eor.w	r3, r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00f      	beq.n	8010122 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8010102:	7bfb      	ldrb	r3, [r7, #15]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00c      	beq.n	8010122 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	7bba      	ldrb	r2, [r7, #14]
 801010c:	4611      	mov	r1, r2
 801010e:	4618      	mov	r0, r3
 8010110:	f7fb faea 	bl	800b6e8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3314      	adds	r3, #20
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4610      	mov	r0, r2
 8010120:	4798      	blx	r3
        }
        if (newPressedValue)
 8010122:	7bbb      	ldrb	r3, [r7, #14]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d006      	beq.n	8010136 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7a>
        {
            executeAction();
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	3380      	adds	r3, #128	; 0x80
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4610      	mov	r0, r2
 8010134:	4798      	blx	r3
        }
    }
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
class TouchButtonTrigger : public AbstractButtonContainer
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	4a05      	ldr	r2, [pc, #20]	; (8010160 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4618      	mov	r0, r3
 8010152:	f7fb fba1 	bl	800b898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	0802d1e8 	.word	0x0802d1e8

08010164 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ffe7 	bl	8010140 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8010172:	2134      	movs	r1, #52	; 0x34
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f01a fade 	bl	802a736 <_ZdlPvj>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	4a08      	ldr	r2, [pc, #32]	; (80101b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	3334      	adds	r3, #52	; 0x34
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff f964 	bl	800f464 <_ZN8touchgfx13BoxWithBorderD1Ev>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7ff ffce 	bl	8010140 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	0802d154 	.word	0x0802d154

080101b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7ff ffe1 	bl	8010184 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80101c2:	2178      	movs	r1, #120	; 0x78
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f01a fab6 	bl	802a736 <_ZdlPvj>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev>:
    IconButtonStyle()
 80101d4:	b590      	push	{r4, r7, lr}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
        : T()
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f8f4 	bl	80103cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 80101e4:	4a16      	ldr	r2, [pc, #88]	; (8010240 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev+0x6c>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	3378      	adds	r3, #120	; 0x78
 80101ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fa fc00 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	337a      	adds	r3, #122	; 0x7a
 80101fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010200:	4618      	mov	r0, r3
 8010202:	f7fa fbf9 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801020c:	f107 030c 	add.w	r3, r7, #12
 8010210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010214:	4618      	mov	r0, r3
 8010216:	f7fa fbef 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 801021a:	f107 030c 	add.w	r3, r7, #12
 801021e:	4619      	mov	r1, r3
 8010220:	4620      	mov	r0, r4
 8010222:	f7fb fbff 	bl	800ba24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	337c      	adds	r3, #124	; 0x7c
 801022c:	4619      	mov	r1, r3
 801022e:	4610      	mov	r0, r2
 8010230:	f005 fa0e 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	bd90      	pop	{r4, r7, pc}
 801023e:	bf00      	nop
 8010240:	0802d0bc 	.word	0x0802d0bc

08010244 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010244:	b590      	push	{r4, r7, lr}
 8010246:	b087      	sub	sp, #28
 8010248:	af02      	add	r7, sp, #8
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	4608      	mov	r0, r1
 801024e:	4611      	mov	r1, r2
 8010250:	461a      	mov	r2, r3
 8010252:	4603      	mov	r3, r0
 8010254:	817b      	strh	r3, [r7, #10]
 8010256:	460b      	mov	r3, r1
 8010258:	813b      	strh	r3, [r7, #8]
 801025a:	4613      	mov	r3, r2
 801025c:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010264:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8010268:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801026c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010270:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	4623      	mov	r3, r4
 8010278:	f7fa fc27 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 801027c:	bf00      	nop
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	bd90      	pop	{r4, r7, pc}

08010284 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3334      	adds	r3, #52	; 0x34
 8010294:	78fa      	ldrb	r2, [r7, #3]
 8010296:	b292      	uxth	r2, r2
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fb fc6a 	bl	800bb74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 80102a0:	bf00      	nop
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	68ba      	ldr	r2, [r7, #8]
 80102ba:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	69ba      	ldr	r2, [r7, #24]
 80102cc:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3384      	adds	r3, #132	; 0x84
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	4798      	blx	r3
    }
 80102da:	bf00      	nop
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80102e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102e4:	b085      	sub	sp, #20
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	60f8      	str	r0, [r7, #12]
 80102ea:	60b9      	str	r1, [r7, #8]
 80102ec:	607a      	str	r2, [r7, #4]
        iconReleased = newIconReleased;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	8812      	ldrh	r2, [r2, #0]
 80102f4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        iconPressed = newIconPressed;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	8812      	ldrh	r2, [r2, #0]
 80102fe:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	4618      	mov	r0, r3
 801030c:	f7fa fbfe 	bl	800ab0c <_ZNK8touchgfx8Drawable8getWidthEv>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	da00      	bge.n	8010318 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 8010316:	3301      	adds	r3, #1
 8010318:	105b      	asrs	r3, r3, #1
 801031a:	b21b      	sxth	r3, r3
 801031c:	b29c      	uxth	r4, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f00d f81a 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010324:	4603      	mov	r3, r0
 8010326:	085b      	lsrs	r3, r3, #1
 8010328:	b29b      	uxth	r3, r3
 801032a:	1ae3      	subs	r3, r4, r3
 801032c:	b29b      	uxth	r3, r3
 801032e:	b21e      	sxth	r6, r3
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	4618      	mov	r0, r3
 8010334:	f7fa fbf7 	bl	800ab26 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	da00      	bge.n	8010340 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 801033e:	3301      	adds	r3, #1
 8010340:	105b      	asrs	r3, r3, #1
 8010342:	b21b      	sxth	r3, r3
 8010344:	b29c      	uxth	r4, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f00d f840 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801034c:	4603      	mov	r3, r0
 801034e:	085b      	lsrs	r3, r3, #1
 8010350:	b29b      	uxth	r3, r3
 8010352:	1ae3      	subs	r3, r4, r3
 8010354:	b29b      	uxth	r3, r3
 8010356:	b21b      	sxth	r3, r3
 8010358:	461a      	mov	r2, r3
 801035a:	4631      	mov	r1, r6
 801035c:	4628      	mov	r0, r5
 801035e:	f7fa fc0d 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3384      	adds	r3, #132	; 0x84
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	4798      	blx	r3
    }
 801036e:	bf00      	nop
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010376 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	460b      	mov	r3, r1
 8010380:	807b      	strh	r3, [r7, #2]
 8010382:	4613      	mov	r3, r2
 8010384:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 8010386:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801038a:	4619      	mov	r1, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 f8ae 	bl	80104ee <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 8010392:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010396:	4619      	mov	r1, r3
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 f8ba 	bl	8010512 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE8setIconYEs>
    }
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb f976 	bl	800b6a4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80103b8:	4a03      	ldr	r2, [pc, #12]	; (80103c8 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	601a      	str	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	0802d1e8 	.word	0x0802d1e8

080103cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	2334      	movs	r3, #52	; 0x34
 80103da:	461a      	mov	r2, r3
 80103dc:	2100      	movs	r1, #0
 80103de:	f01a fa65 	bl	802a8ac <memset>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff ffdf 	bl	80103a8 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 80103ea:	4a17      	ldr	r2, [pc, #92]	; (8010448 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x7c>)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	601a      	str	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	3334      	adds	r3, #52	; 0x34
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fb fb93 	bl	800bb20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3368      	adds	r3, #104	; 0x68
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fa fa8e 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	336c      	adds	r3, #108	; 0x6c
 8010408:	4618      	mov	r0, r3
 801040a:	f7fa fa89 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3370      	adds	r3, #112	; 0x70
 8010412:	4618      	mov	r0, r3
 8010414:	f7fa fa84 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3374      	adds	r3, #116	; 0x74
 801041c:	4618      	mov	r0, r3
 801041e:	f7fa fa7f 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3334      	adds	r3, #52	; 0x34
 8010426:	2200      	movs	r2, #0
 8010428:	2100      	movs	r1, #0
 801042a:	4618      	mov	r0, r3
 801042c:	f7fa fba6 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	3334      	adds	r3, #52	; 0x34
 8010436:	4619      	mov	r1, r3
 8010438:	4610      	mov	r0, r2
 801043a:	f005 f909 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	0802d154 	.word	0x0802d154

0801044c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 801044c:	b590      	push	{r4, r7, lr}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	f7fb f957 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d002      	beq.n	801046e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	336c      	adds	r3, #108	; 0x6c
 801046c:	e001      	b.n	8010472 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	3368      	adds	r3, #104	; 0x68
 8010472:	6819      	ldr	r1, [r3, #0]
 8010474:	4620      	mov	r0, r4
 8010476:	f7fa fd31 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4618      	mov	r0, r3
 8010484:	f7fb f944 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d002      	beq.n	8010494 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3374      	adds	r3, #116	; 0x74
 8010492:	e001      	b.n	8010498 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	3370      	adds	r3, #112	; 0x70
 8010498:	6819      	ldr	r1, [r3, #0]
 801049a:	4620      	mov	r0, r4
 801049c:	f7fb fb5c 	bl	800bb58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fb f997 	bl	800b7d6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd90      	pop	{r4, r7, pc}

080104b0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80104b0:	b590      	push	{r4, r7, lr}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fb f925 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	337a      	adds	r3, #122	; 0x7a
 80104d0:	e001      	b.n	80104d6 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	3378      	adds	r3, #120	; 0x78
 80104d6:	4619      	mov	r1, r3
 80104d8:	4620      	mov	r0, r4
 80104da:	f008 f9b0 	bl	801883e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ff ffb3 	bl	801044c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>
    }
 80104e6:	bf00      	nop
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd90      	pop	{r4, r7, pc}

080104ee <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b082      	sub	sp, #8
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	460b      	mov	r3, r1
 80104f8:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	337c      	adds	r3, #124	; 0x7c
 80104fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010502:	4611      	mov	r1, r2
 8010504:	4618      	mov	r0, r3
 8010506:	f7fa fb1b 	bl	800ab40 <_ZN8touchgfx8Drawable4setXEs>
    }
 801050a:	bf00      	nop
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 8010512:	b580      	push	{r7, lr}
 8010514:	b082      	sub	sp, #8
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	460b      	mov	r3, r1
 801051c:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	337c      	adds	r3, #124	; 0x7c
 8010522:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010526:	4611      	mov	r1, r2
 8010528:	4618      	mov	r0, r3
 801052a:	f7fa fb18 	bl	800ab5e <_ZN8touchgfx8Drawable4setYEs>
    }
 801052e:	bf00      	nop
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
	...

08010538 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>:
class IconButtonStyle : public T
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	4a08      	ldr	r2, [pc, #32]	; (8010564 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev+0x2c>)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	337c      	adds	r3, #124	; 0x7c
 801054a:	4618      	mov	r0, r3
 801054c:	f7fb faa4 	bl	800ba98 <_ZN8touchgfx5ImageD1Ev>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7ff fe16 	bl	8010184 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	0802d0bc 	.word	0x0802d0bc

08010568 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED0Ev>:
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ffe1 	bl	8010538 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>
 8010576:	21a8      	movs	r1, #168	; 0xa8
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f01a f8dc 	bl	802a736 <_ZdlPvj>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8010588:	b590      	push	{r4, r7, lr}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
        iconImage.setAlpha(T::getAlpha());
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4618      	mov	r0, r3
 801059a:	f7fb f8da 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801059e:	4603      	mov	r3, r0
 80105a0:	4619      	mov	r1, r3
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7fb fa68 	bl	800ba78 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 f804 	bl	80105b8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>
    }
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd90      	pop	{r4, r7, pc}

080105b8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 80105b8:	b590      	push	{r4, r7, lr}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fb f8c2 	bl	800b752 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80105ce:	4603      	mov	r3, r0
 80105d0:	4619      	mov	r1, r3
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7fa fc90 	bl	800aef8 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fb f905 	bl	800b7ea <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd90      	pop	{r4, r7, pc}

080105e8 <_ZN12OneForthBaseD1Ev>:

class OneForthBase : public touchgfx::Container
{
public:
    OneForthBase();
    virtual ~OneForthBase() {}
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	4a3c      	ldr	r2, [pc, #240]	; (80106e4 <_ZN12OneForthBaseD1Ev+0xfc>)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff fc25 	bl	800fe4c <_ZN8touchgfx13PainterRGB565D1Ev>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fbfd 	bl	800fe08 <_ZN8touchgfx16GraphElementLineD1Ev>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010614:	4618      	mov	r0, r3
 8010616:	f001 f97b 	bl	8011910 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8010620:	4618      	mov	r0, r3
 8010622:	f7fe ff81 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801062c:	4618      	mov	r0, r3
 801062e:	f7fe ff7b 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010638:	4618      	mov	r0, r3
 801063a:	f7fa fd57 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8010644:	4618      	mov	r0, r3
 8010646:	f7fa fd51 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010650:	4618      	mov	r0, r3
 8010652:	f7fa fd4b 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801065c:	4618      	mov	r0, r3
 801065e:	f7fb fa3d 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010668:	4618      	mov	r0, r3
 801066a:	f7fb fa37 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8010674:	4618      	mov	r0, r3
 8010676:	f7fb fa31 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff fb2b 	bl	800fcdc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff fb4d 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe ff45 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	33ec      	adds	r3, #236	; 0xec
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 f958 	bl	8011958 <_ZN8touchgfx13ClickListenerINS_8TextAreaEED1Ev>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	33b0      	adds	r3, #176	; 0xb0
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fa fd1d 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	3384      	adds	r3, #132	; 0x84
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fb fa10 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3358      	adds	r3, #88	; 0x58
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fb fa0b 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	332c      	adds	r3, #44	; 0x2c
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fb fa06 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fa ffc4 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4618      	mov	r0, r3
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	0802d27c 	.word	0x0802d27c

080106e8 <_ZN12OneForthBaseD0Ev>:
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff ff79 	bl	80105e8 <_ZN12OneForthBaseD1Ev>
 80106f6:	f640 014c 	movw	r1, #2124	; 0x84c
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f01a f81b 	bl	802a736 <_ZdlPvj>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	4618      	mov	r0, r3
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <_ZN12OneForthBaseC1Ev>:
#include <gui_generated/containers/OneForthBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

OneForthBase::OneForthBase()
 801070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010710:	b0a8      	sub	sp, #160	; 0xa0
 8010712:	af02      	add	r7, sp, #8
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7fa fb35 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 801071e:	4ada      	ldr	r2, [pc, #872]	; (8010a88 <_ZN12OneForthBaseC1Ev+0x37c>)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	332c      	adds	r3, #44	; 0x2c
 8010728:	4618      	mov	r0, r3
 801072a:	f7fa fbb3 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	3358      	adds	r3, #88	; 0x58
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa fbae 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	3384      	adds	r3, #132	; 0x84
 801073c:	4618      	mov	r0, r3
 801073e:	f7fa fba9 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	33b0      	adds	r3, #176	; 0xb0
 8010746:	4618      	mov	r0, r3
 8010748:	f7fa fbfc 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	33ec      	adds	r3, #236	; 0xec
 8010750:	4618      	mov	r0, r3
 8010752:	f001 f889 	bl	8011868 <_ZN8touchgfx13ClickListenerINS_8TextAreaEEC1Ev>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801075c:	4618      	mov	r0, r3
 801075e:	f7fe fea3 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8010768:	4618      	mov	r0, r3
 801076a:	f7fe ff05 	bl	800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe ff81 	bl	800f67c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8010780:	4618      	mov	r0, r3
 8010782:	f7fa fb87 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f503 7349 	add.w	r3, r3, #804	; 0x324
 801078c:	4618      	mov	r0, r3
 801078e:	f7fa fb81 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010798:	4618      	mov	r0, r3
 801079a:	f7fa fb7b 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fa fbcd 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fa fbc7 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fa fbc1 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fe fe6d 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fe fe67 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80107e0:	4618      	mov	r0, r3
 80107e2:	f001 f87f 	bl	80118e4 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80107ec:	4618      	mov	r0, r3
 80107ee:	f007 fba5 	bl	8017f3c <_ZN8touchgfx16GraphElementLineC1Ev>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f503 6403 	add.w	r4, r3, #2096	; 0x830
 80107f8:	f107 0320 	add.w	r3, r7, #32
 80107fc:	2100      	movs	r1, #0
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fa f89c 	bl	800a93c <_ZN8touchgfx9colortypeC1Em>
 8010804:	22ff      	movs	r2, #255	; 0xff
 8010806:	6a39      	ldr	r1, [r7, #32]
 8010808:	4620      	mov	r0, r4
 801080a:	f7fa fee1 	bl	800b5d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
{
    setWidth(432);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8010814:	4618      	mov	r0, r3
 8010816:	f7fa f9cf 	bl	800abb8 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(270);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8010820:	4618      	mov	r0, r3
 8010822:	f7fa f9d8 	bl	800abd6 <_ZN8touchgfx8Drawable9setHeightEs>
    Background.setPosition(0, 0, 432, 270);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801082c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8010836:	2200      	movs	r2, #0
 8010838:	2100      	movs	r1, #0
 801083a:	f7fa f946 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85));
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010844:	2255      	movs	r2, #85	; 0x55
 8010846:	214c      	movs	r1, #76	; 0x4c
 8010848:	204b      	movs	r0, #75	; 0x4b
 801084a:	f7fa fd9d 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801084e:	4603      	mov	r3, r0
 8010850:	4619      	mov	r1, r3
 8010852:	4620      	mov	r0, r4
 8010854:	f7fa fb42 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageReadBack.setPosition(10, 10, 280, 81);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801085e:	2351      	movs	r3, #81	; 0x51
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	f44f 738c 	mov.w	r3, #280	; 0x118
 8010866:	220a      	movs	r2, #10
 8010868:	210a      	movs	r1, #10
 801086a:	f7fa f92e 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageReadBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8010874:	2238      	movs	r2, #56	; 0x38
 8010876:	2138      	movs	r1, #56	; 0x38
 8010878:	2038      	movs	r0, #56	; 0x38
 801087a:	f7fa fd85 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801087e:	4603      	mov	r3, r0
 8010880:	4619      	mov	r1, r3
 8010882:	4620      	mov	r0, r4
 8010884:	f7fa fb2a 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageSetBack.setPosition(300, 10, 122, 37);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f103 0084 	add.w	r0, r3, #132	; 0x84
 801088e:	2325      	movs	r3, #37	; 0x25
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	237a      	movs	r3, #122	; 0x7a
 8010894:	220a      	movs	r2, #10
 8010896:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801089a:	f7fa f916 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSetBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80108a4:	2238      	movs	r2, #56	; 0x38
 80108a6:	2138      	movs	r1, #56	; 0x38
 80108a8:	2038      	movs	r0, #56	; 0x38
 80108aa:	f7fa fd6d 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108ae:	4603      	mov	r3, r0
 80108b0:	4619      	mov	r1, r3
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7fa fb12 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    VoltageRead.setPosition(10, 10, 280, 81);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80108be:	2351      	movs	r3, #81	; 0x51
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80108c6:	220a      	movs	r2, #10
 80108c8:	210a      	movs	r1, #10
 80108ca:	f7fa f8fe 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageRead.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80108d4:	22ff      	movs	r2, #255	; 0xff
 80108d6:	21ff      	movs	r1, #255	; 0xff
 80108d8:	20ff      	movs	r0, #255	; 0xff
 80108da:	f7fa fd55 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108de:	4603      	mov	r3, r0
 80108e0:	65fc      	str	r4, [r7, #92]	; 0x5c
 80108e2:	61fb      	str	r3, [r7, #28]
        this->color = color;
 80108e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e6:	69fa      	ldr	r2, [r7, #28]
 80108e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80108ea:	bf00      	nop
    VoltageRead.setLinespacing(0);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	33b0      	adds	r3, #176	; 0xb0
 80108f0:	667b      	str	r3, [r7, #100]	; 0x64
 80108f2:	2300      	movs	r3, #0
 80108f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        linespace = space;
 80108f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80108fa:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80108fe:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010900:	bf00      	nop
    VoltageRead.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8010908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801090c:	2104      	movs	r1, #4
 801090e:	4618      	mov	r0, r3
 8010910:	f7fa fb02 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 8010914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010918:	4619      	mov	r1, r3
 801091a:	4620      	mov	r0, r4
 801091c:	f007 fe4f 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010924:	4618      	mov	r0, r3
 8010926:	f7f8 fd7d 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    VoltageSet.setPosition(300, 10, 122, 37);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8010930:	2325      	movs	r3, #37	; 0x25
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	237a      	movs	r3, #122	; 0x7a
 8010936:	220a      	movs	r2, #10
 8010938:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801093c:	f7fa f8c5 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSet.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8010946:	22ff      	movs	r2, #255	; 0xff
 8010948:	21ff      	movs	r1, #255	; 0xff
 801094a:	20ff      	movs	r0, #255	; 0xff
 801094c:	f7fa fd1c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010950:	4603      	mov	r3, r0
 8010952:	66bc      	str	r4, [r7, #104]	; 0x68
 8010954:	61bb      	str	r3, [r7, #24]
        this->color = color;
 8010956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010958:	69ba      	ldr	r2, [r7, #24]
 801095a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801095c:	bf00      	nop
    VoltageSet.setLinespacing(0);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	33ec      	adds	r3, #236	; 0xec
 8010962:	673b      	str	r3, [r7, #112]	; 0x70
 8010964:	2300      	movs	r3, #0
 8010966:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        linespace = space;
 801096a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801096c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8010970:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010972:	bf00      	nop
    VoltageSet.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801097e:	2105      	movs	r1, #5
 8010980:	4618      	mov	r0, r3
 8010982:	f7fa fac9 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 8010986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801098a:	4619      	mov	r1, r3
 801098c:	4620      	mov	r0, r4
 801098e:	f007 fe16 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010996:	4618      	mov	r0, r3
 8010998:	f7f8 fd44 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    VoltageSetClick.setBoxWithBorderPosition(0, 0, 122, 37);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 80109a2:	2325      	movs	r3, #37	; 0x25
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	237a      	movs	r3, #122	; 0x7a
 80109a8:	2200      	movs	r2, #0
 80109aa:	2100      	movs	r1, #0
 80109ac:	f7fe fece 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    VoltageSetClick.setBorderSize(5);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80109b6:	2105      	movs	r1, #5
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fe fee7 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    VoltageSetClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80109c4:	2299      	movs	r2, #153	; 0x99
 80109c6:	2166      	movs	r1, #102	; 0x66
 80109c8:	2000      	movs	r0, #0
 80109ca:	f7fa fcdd 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109ce:	4605      	mov	r5, r0
 80109d0:	22cc      	movs	r2, #204	; 0xcc
 80109d2:	2199      	movs	r1, #153	; 0x99
 80109d4:	2000      	movs	r0, #0
 80109d6:	f7fa fcd7 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109da:	4606      	mov	r6, r0
 80109dc:	2266      	movs	r2, #102	; 0x66
 80109de:	2133      	movs	r1, #51	; 0x33
 80109e0:	2000      	movs	r0, #0
 80109e2:	f7fa fcd1 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109e6:	4680      	mov	r8, r0
 80109e8:	2299      	movs	r2, #153	; 0x99
 80109ea:	2166      	movs	r1, #102	; 0x66
 80109ec:	2033      	movs	r0, #51	; 0x33
 80109ee:	f7fa fccb 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109f2:	4603      	mov	r3, r0
 80109f4:	9300      	str	r3, [sp, #0]
 80109f6:	4643      	mov	r3, r8
 80109f8:	4632      	mov	r2, r6
 80109fa:	4629      	mov	r1, r5
 80109fc:	4620      	mov	r0, r4
 80109fe:	f7fe fed7 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    VoltageSetClick.setPosition(300, 10, 122, 37);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8010a08:	2325      	movs	r3, #37	; 0x25
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	237a      	movs	r3, #122	; 0x7a
 8010a0e:	220a      	movs	r2, #10
 8010a10:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010a14:	f7fa f859 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    VoltageSetClick.setAlpha(0);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010a1e:	2100      	movs	r1, #0
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fa fe82 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>

    Settings.setBoxWithBorderPosition(0, 0, 56, 37);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8010a2c:	2325      	movs	r3, #37	; 0x25
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	2338      	movs	r3, #56	; 0x38
 8010a32:	2200      	movs	r2, #0
 8010a34:	2100      	movs	r1, #0
 8010a36:	f7fe fe89 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    Settings.setBorderSize(0);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8010a40:	2100      	movs	r1, #0
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fea2 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    Settings.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8010a4e:	2238      	movs	r2, #56	; 0x38
 8010a50:	2138      	movs	r1, #56	; 0x38
 8010a52:	2038      	movs	r0, #56	; 0x38
 8010a54:	f7fa fc98 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a58:	4605      	mov	r5, r0
 8010a5a:	2238      	movs	r2, #56	; 0x38
 8010a5c:	2138      	movs	r1, #56	; 0x38
 8010a5e:	2038      	movs	r0, #56	; 0x38
 8010a60:	f7fa fc92 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a64:	4606      	mov	r6, r0
 8010a66:	2266      	movs	r2, #102	; 0x66
 8010a68:	2133      	movs	r1, #51	; 0x33
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	f7fa fc8c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a70:	4680      	mov	r8, r0
 8010a72:	2299      	movs	r2, #153	; 0x99
 8010a74:	2166      	movs	r1, #102	; 0x66
 8010a76:	2033      	movs	r0, #51	; 0x33
 8010a78:	f7fa fc86 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	4643      	mov	r3, r8
 8010a82:	4632      	mov	r2, r6
 8010a84:	e002      	b.n	8010a8c <_ZN12OneForthBaseC1Ev+0x380>
 8010a86:	bf00      	nop
 8010a88:	0802d27c 	.word	0x0802d27c
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f7fe fe8e 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    Settings.setIconBitmaps(Bitmap(BITMAP_COG_OUTLINE_SMALL_WHITE_ID), Bitmap(BITMAP_COG_OUTLINE_SMALL_BLACK_ID));
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8010a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a9e:	2105      	movs	r1, #5
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f9 ffa9 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8010aa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010aaa:	2104      	movs	r1, #4
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7f9 ffa3 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8010ab2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010aba:	4619      	mov	r1, r3
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7fe fe94 	bl	800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    Settings.setIconXY(16, 6);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8010ac8:	2206      	movs	r2, #6
 8010aca:	2110      	movs	r1, #16
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fe fed6 	bl	800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    Settings.setPosition(300, 55, 56, 37);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8010ad8:	2325      	movs	r3, #37	; 0x25
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	2338      	movs	r3, #56	; 0x38
 8010ade:	2237      	movs	r2, #55	; 0x37
 8010ae0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010ae4:	f7f9 fff1 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>

    Settings_1.setBoxWithBorderPosition(0, 0, 56, 37);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8010aee:	2325      	movs	r3, #37	; 0x25
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	2338      	movs	r3, #56	; 0x38
 8010af4:	2200      	movs	r2, #0
 8010af6:	2100      	movs	r1, #0
 8010af8:	f7fe fed9 	bl	800f8ae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE24setBoxWithBorderPositionEssss>
    Settings_1.setBorderSize(0);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010b02:	2100      	movs	r1, #0
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fe fef2 	bl	800f8ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE13setBorderSizeEh>
    Settings_1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(56, 56, 56), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8010b10:	2238      	movs	r2, #56	; 0x38
 8010b12:	2138      	movs	r1, #56	; 0x38
 8010b14:	2038      	movs	r0, #56	; 0x38
 8010b16:	f7fa fc37 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	2238      	movs	r2, #56	; 0x38
 8010b1e:	2138      	movs	r1, #56	; 0x38
 8010b20:	2038      	movs	r0, #56	; 0x38
 8010b22:	f7fa fc31 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b26:	4606      	mov	r6, r0
 8010b28:	2266      	movs	r2, #102	; 0x66
 8010b2a:	2133      	movs	r1, #51	; 0x33
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f7fa fc2b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b32:	4680      	mov	r8, r0
 8010b34:	2299      	movs	r2, #153	; 0x99
 8010b36:	2166      	movs	r1, #102	; 0x66
 8010b38:	2033      	movs	r0, #51	; 0x33
 8010b3a:	f7fa fc25 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	4643      	mov	r3, r8
 8010b44:	4632      	mov	r2, r6
 8010b46:	4629      	mov	r1, r5
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f7fe fee2 	bl	800f912 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    Settings_1.setIconBitmaps(Bitmap(BITMAP_POWER_SMALL_WHITE_ID), Bitmap(BITMAP_POWER_SMALL_BLACK_ID));
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8010b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b58:	210d      	movs	r1, #13
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7f9 ff4c 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8010b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010b64:	210c      	movs	r1, #12
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7f9 ff46 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8010b6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b74:	4619      	mov	r1, r3
 8010b76:	4620      	mov	r0, r4
 8010b78:	f7fe fee8 	bl	800f94c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    Settings_1.setIconXY(16, 6);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010b82:	2206      	movs	r2, #6
 8010b84:	2110      	movs	r1, #16
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fe ff2a 	bl	800f9e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19ToggleButtonTriggerEEEE9setIconXYEss>
    Settings_1.setPosition(366, 55, 56, 37);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8010b92:	2325      	movs	r3, #37	; 0x25
 8010b94:	9300      	str	r3, [sp, #0]
 8010b96:	2338      	movs	r3, #56	; 0x38
 8010b98:	2237      	movs	r2, #55	; 0x37
 8010b9a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8010b9e:	f7f9 ff94 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>

    PowerReadPrimBack.setPosition(10, 100, 280, 81);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8010ba8:	2351      	movs	r3, #81	; 0x51
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	f44f 738c 	mov.w	r3, #280	; 0x118
 8010bb0:	2264      	movs	r2, #100	; 0x64
 8010bb2:	210a      	movs	r1, #10
 8010bb4:	f7f9 ff89 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadPrimBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8010bbe:	2238      	movs	r2, #56	; 0x38
 8010bc0:	2138      	movs	r1, #56	; 0x38
 8010bc2:	2038      	movs	r0, #56	; 0x38
 8010bc4:	f7fa fbe0 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	4619      	mov	r1, r3
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f7fa f985 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    AmprageSetBack.setPosition(300, 100, 122, 37);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8010bd8:	2325      	movs	r3, #37	; 0x25
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	237a      	movs	r3, #122	; 0x7a
 8010bde:	2264      	movs	r2, #100	; 0x64
 8010be0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010be4:	f7f9 ff71 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSetBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f503 7449 	add.w	r4, r3, #804	; 0x324
 8010bee:	2238      	movs	r2, #56	; 0x38
 8010bf0:	2138      	movs	r1, #56	; 0x38
 8010bf2:	2038      	movs	r0, #56	; 0x38
 8010bf4:	f7fa fbc8 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f7fa f96d 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    PowerReadSecBack.setPosition(300, 144, 122, 37);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f503 7054 	add.w	r0, r3, #848	; 0x350
 8010c08:	2325      	movs	r3, #37	; 0x25
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	237a      	movs	r3, #122	; 0x7a
 8010c0e:	2290      	movs	r2, #144	; 0x90
 8010c10:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010c14:	f7f9 ff59 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSecBack.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 56, 56));
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8010c1e:	2238      	movs	r2, #56	; 0x38
 8010c20:	2138      	movs	r1, #56	; 0x38
 8010c22:	2038      	movs	r0, #56	; 0x38
 8010c24:	f7fa fbb0 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f7fa f955 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    PowerReadPrim.setPosition(10, 100, 280, 81);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8010c38:	2351      	movs	r3, #81	; 0x51
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8010c40:	2264      	movs	r2, #100	; 0x64
 8010c42:	210a      	movs	r1, #10
 8010c44:	f7f9 ff41 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadPrim.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8010c4e:	22ff      	movs	r2, #255	; 0xff
 8010c50:	21ff      	movs	r1, #255	; 0xff
 8010c52:	20ff      	movs	r0, #255	; 0xff
 8010c54:	f7fa fb98 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	677c      	str	r4, [r7, #116]	; 0x74
 8010c5c:	617b      	str	r3, [r7, #20]
        this->color = color;
 8010c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010c64:	bf00      	nop
    PowerReadPrim.setLinespacing(0);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        linespace = space;
 8010c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c76:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010c7a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010c7c:	bf00      	nop
    PowerReadPrim.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8010c84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c88:	2106      	movs	r1, #6
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fa f944 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 8010c90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c94:	4619      	mov	r1, r3
 8010c96:	4620      	mov	r0, r4
 8010c98:	f007 fc91 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7f8 fbbf 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    AmprageSet.setPosition(300, 100, 122, 37);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f503 706e 	add.w	r0, r3, #952	; 0x3b8
 8010cac:	2325      	movs	r3, #37	; 0x25
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	237a      	movs	r3, #122	; 0x7a
 8010cb2:	2264      	movs	r2, #100	; 0x64
 8010cb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010cb8:	f7f9 ff07 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSet.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8010cc2:	22ff      	movs	r2, #255	; 0xff
 8010cc4:	21ff      	movs	r1, #255	; 0xff
 8010cc6:	20ff      	movs	r0, #255	; 0xff
 8010cc8:	f7fa fb5e 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8010cd2:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010cdc:	bf00      	nop
    AmprageSet.setLinespacing(0);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8010ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010ce8:	2300      	movs	r3, #0
 8010cea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        linespace = space;
 8010cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cf2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8010cf6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010cf8:	bf00      	nop
    AmprageSet.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8010d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d04:	2107      	movs	r1, #7
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa f906 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 8010d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d10:	4619      	mov	r1, r3
 8010d12:	4620      	mov	r0, r4
 8010d14:	f007 fc53 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010d18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7f8 fb81 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    PowerReadSec.setPosition(300, 144, 122, 37);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f503 707d 	add.w	r0, r3, #1012	; 0x3f4
 8010d28:	2325      	movs	r3, #37	; 0x25
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	237a      	movs	r3, #122	; 0x7a
 8010d2e:	2290      	movs	r2, #144	; 0x90
 8010d30:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010d34:	f7f9 fec9 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSec.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8010d3e:	22ff      	movs	r2, #255	; 0xff
 8010d40:	21ff      	movs	r1, #255	; 0xff
 8010d42:	20ff      	movs	r0, #255	; 0xff
 8010d44:	f7fa fb20 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 8010d4e:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8010d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010d58:	bf00      	nop
    PowerReadSec.setLinespacing(0);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010d64:	2300      	movs	r3, #0
 8010d66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
        linespace = space;
 8010d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d6e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8010d72:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010d74:	bf00      	nop
    PowerReadSec.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8010d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d80:	2108      	movs	r1, #8
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fa f8c8 	bl	800af18 <_ZN8touchgfx9TypedTextC1Et>
 8010d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f007 fc15 	bl	80185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7f8 fb43 	bl	8009424 <_ZN8touchgfx9TypedTextD1Ev>

    PowerReadSecClick.setBoxWithBorderPosition(0, 0, 122, 37);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 6086 	add.w	r0, r3, #1072	; 0x430
 8010da4:	2325      	movs	r3, #37	; 0x25
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	237a      	movs	r3, #122	; 0x7a
 8010daa:	2200      	movs	r2, #0
 8010dac:	2100      	movs	r1, #0
 8010dae:	f7fe fccd 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    PowerReadSecClick.setBorderSize(5);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8010db8:	2105      	movs	r1, #5
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe fce6 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    PowerReadSecClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f503 6486 	add.w	r4, r3, #1072	; 0x430
 8010dc6:	2299      	movs	r2, #153	; 0x99
 8010dc8:	2166      	movs	r1, #102	; 0x66
 8010dca:	2000      	movs	r0, #0
 8010dcc:	f7fa fadc 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	22cc      	movs	r2, #204	; 0xcc
 8010dd4:	2199      	movs	r1, #153	; 0x99
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	f7fa fad6 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ddc:	4606      	mov	r6, r0
 8010dde:	2266      	movs	r2, #102	; 0x66
 8010de0:	2133      	movs	r1, #51	; 0x33
 8010de2:	2000      	movs	r0, #0
 8010de4:	f7fa fad0 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010de8:	4680      	mov	r8, r0
 8010dea:	2299      	movs	r2, #153	; 0x99
 8010dec:	2166      	movs	r1, #102	; 0x66
 8010dee:	2033      	movs	r0, #51	; 0x33
 8010df0:	f7fa faca 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010df4:	4603      	mov	r3, r0
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	4643      	mov	r3, r8
 8010dfa:	4632      	mov	r2, r6
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7fe fcd6 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    PowerReadSecClick.setPosition(300, 143, 122, 37);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f503 6086 	add.w	r0, r3, #1072	; 0x430
 8010e0a:	2325      	movs	r3, #37	; 0x25
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	237a      	movs	r3, #122	; 0x7a
 8010e10:	228f      	movs	r2, #143	; 0x8f
 8010e12:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010e16:	f7f9 fe58 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    PowerReadSecClick.setAlpha(0);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8010e20:	2100      	movs	r1, #0
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fa fc81 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>

    AmprageSetClick.setBoxWithBorderPosition(0, 0, 122, 37);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f503 6095 	add.w	r0, r3, #1192	; 0x4a8
 8010e2e:	2325      	movs	r3, #37	; 0x25
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	237a      	movs	r3, #122	; 0x7a
 8010e34:	2200      	movs	r2, #0
 8010e36:	2100      	movs	r1, #0
 8010e38:	f7fe fc88 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    AmprageSetClick.setBorderSize(5);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8010e42:	2105      	movs	r1, #5
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fe fca1 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    AmprageSetClick.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 6495 	add.w	r4, r3, #1192	; 0x4a8
 8010e50:	2299      	movs	r2, #153	; 0x99
 8010e52:	2166      	movs	r1, #102	; 0x66
 8010e54:	2000      	movs	r0, #0
 8010e56:	f7fa fa97 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	22cc      	movs	r2, #204	; 0xcc
 8010e5e:	2199      	movs	r1, #153	; 0x99
 8010e60:	2000      	movs	r0, #0
 8010e62:	f7fa fa91 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e66:	4606      	mov	r6, r0
 8010e68:	2266      	movs	r2, #102	; 0x66
 8010e6a:	2133      	movs	r1, #51	; 0x33
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	f7fa fa8b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e72:	4680      	mov	r8, r0
 8010e74:	2299      	movs	r2, #153	; 0x99
 8010e76:	2166      	movs	r1, #102	; 0x66
 8010e78:	2033      	movs	r0, #51	; 0x33
 8010e7a:	f7fa fa85 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	4643      	mov	r3, r8
 8010e84:	4632      	mov	r2, r6
 8010e86:	4629      	mov	r1, r5
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f7fe fc91 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    AmprageSetClick.setPosition(300, 100, 122, 37);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f503 6095 	add.w	r0, r3, #1192	; 0x4a8
 8010e94:	2325      	movs	r3, #37	; 0x25
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	237a      	movs	r3, #122	; 0x7a
 8010e9a:	2264      	movs	r2, #100	; 0x64
 8010e9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010ea0:	f7f9 fe13 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    AmprageSetClick.setAlpha(0);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8010eaa:	2100      	movs	r1, #0
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fa fc3c 	bl	800b72a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>

    dynamicGraph1.setScale(1);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010eb8:	2101      	movs	r1, #1
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f006 fad8 	bl	8017470 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    dynamicGraph1.setPosition(10, 190, 412, 70);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f503 60a4 	add.w	r0, r3, #1312	; 0x520
 8010ec6:	2346      	movs	r3, #70	; 0x46
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8010ece:	22be      	movs	r2, #190	; 0xbe
 8010ed0:	210a      	movs	r1, #10
 8010ed2:	f7f9 fdfa 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f503 60a4 	add.w	r0, r3, #1312	; 0x520
 8010edc:	2300      	movs	r3, #0
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	f006 fa15 	bl	8017314 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f503 60a4 	add.w	r0, r3, #1312	; 0x520
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	2100      	movs	r1, #0
 8010efa:	f005 fff6 	bl	8016eea <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010f04:	2264      	movs	r2, #100	; 0x64
 8010f06:	2100      	movs	r1, #0
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f005 fe0d 	bl	8016b28 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    dynamicGraph1Line1.setScale(1);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8010f14:	2101      	movs	r1, #1
 8010f16:	4618      	mov	r0, r3
 8010f18:	f006 fb80 	bl	801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(20, 151, 197));
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f503 6403 	add.w	r4, r3, #2096	; 0x830
 8010f22:	22c5      	movs	r2, #197	; 0xc5
 8010f24:	2197      	movs	r1, #151	; 0x97
 8010f26:	2014      	movs	r0, #20
 8010f28:	f7fa fa2e 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	4619      	mov	r1, r3
 8010f30:	4620      	mov	r0, r4
 8010f32:	f7fa fb6d 	bl	800b610 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 62ff 	add.w	r2, r3, #2040	; 0x7f8
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8010f42:	4619      	mov	r1, r3
 8010f44:	4610      	mov	r0, r2
 8010f46:	f005 fcdf 	bl	8016908 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8010f50:	2102      	movs	r1, #2
 8010f52:	4618      	mov	r0, r3
 8010f54:	f007 f800 	bl	8017f58 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8010f64:	4619      	mov	r1, r3
 8010f66:	4610      	mov	r0, r2
 8010f68:	f006 f87c 	bl	8017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1.addDataPoint(96.0070543976293f);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010f72:	ed9f 0ae2 	vldr	s0, [pc, #904]	; 80112fc <_ZN12OneForthBaseC1Ev+0xbf0>
 8010f76:	4618      	mov	r0, r3
 8010f78:	f006 facc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.9174401670901f);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010f82:	ed9f 0adf 	vldr	s0, [pc, #892]	; 8011300 <_ZN12OneForthBaseC1Ev+0xbf4>
 8010f86:	4618      	mov	r0, r3
 8010f88:	f006 fac4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(94.7645451677004f);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010f92:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8011304 <_ZN12OneForthBaseC1Ev+0xbf8>
 8010f96:	4618      	mov	r0, r3
 8010f98:	f006 fabc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(84.1782222558823f);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010fa2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8011308 <_ZN12OneForthBaseC1Ev+0xbfc>
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f006 fab4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(69.182994746513f);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010fb2:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 801130c <_ZN12OneForthBaseC1Ev+0xc00>
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f006 faac 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(52.7250020912929f);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010fc2:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 8011310 <_ZN12OneForthBaseC1Ev+0xc04>
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f006 faa4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(37.9795945915858f);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010fd2:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8011314 <_ZN12OneForthBaseC1Ev+0xc08>
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f006 fa9c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.6079474640604f);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010fe2:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8011318 <_ZN12OneForthBaseC1Ev+0xc0c>
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f006 fa94 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.1433484569999f);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8010ff2:	ed9f 0aca 	vldr	s0, [pc, #808]	; 801131c <_ZN12OneForthBaseC1Ev+0xc10>
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f006 fa8c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.6559024347377f);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011002:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8011320 <_ZN12OneForthBaseC1Ev+0xc14>
 8011006:	4618      	mov	r0, r3
 8011008:	f006 fa84 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(30.7761507640189f);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011012:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8011324 <_ZN12OneForthBaseC1Ev+0xc18>
 8011016:	4618      	mov	r0, r3
 8011018:	f006 fa7c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.0701950974445f);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011022:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8011328 <_ZN12OneForthBaseC1Ev+0xc1c>
 8011026:	4618      	mov	r0, r3
 8011028:	f006 fa74 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(46.6728928416899f);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011032:	ed9f 0abe 	vldr	s0, [pc, #760]	; 801132c <_ZN12OneForthBaseC1Ev+0xc20>
 8011036:	4618      	mov	r0, r3
 8011038:	f006 fa6c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.0226133929839f);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011042:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8011330 <_ZN12OneForthBaseC1Ev+0xc24>
 8011046:	4618      	mov	r0, r3
 8011048:	f006 fa64 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.5163292394694f);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011052:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8011334 <_ZN12OneForthBaseC1Ev+0xc28>
 8011056:	4618      	mov	r0, r3
 8011058:	f006 fa5c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.9235442505752f);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011062:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8011338 <_ZN12OneForthBaseC1Ev+0xc2c>
 8011066:	4618      	mov	r0, r3
 8011068:	f006 fa54 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(35.4568580033794f);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011072:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 801133c <_ZN12OneForthBaseC1Ev+0xc30>
 8011076:	4618      	mov	r0, r3
 8011078:	f006 fa4c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.4813267479779f);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011082:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8011340 <_ZN12OneForthBaseC1Ev+0xc34>
 8011086:	4618      	mov	r0, r3
 8011088:	f006 fa44 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(14.933530102786f);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011092:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8011344 <_ZN12OneForthBaseC1Ev+0xc38>
 8011096:	4618      	mov	r0, r3
 8011098:	f006 fa3c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.5926516819633f);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110a2:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8011348 <_ZN12OneForthBaseC1Ev+0xc3c>
 80110a6:	4618      	mov	r0, r3
 80110a8:	f006 fa34 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.3824348334662f);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110b2:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 801134c <_ZN12OneForthBaseC1Ev+0xc40>
 80110b6:	4618      	mov	r0, r3
 80110b8:	f006 fa2c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(17.8756204713066f);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110c2:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8011350 <_ZN12OneForthBaseC1Ev+0xc44>
 80110c6:	4618      	mov	r0, r3
 80110c8:	f006 fa24 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(31.1231790778966f);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110d2:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8011354 <_ZN12OneForthBaseC1Ev+0xc48>
 80110d6:	4618      	mov	r0, r3
 80110d8:	f006 fa1c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.8513598310094f);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110e2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8011358 <_ZN12OneForthBaseC1Ev+0xc4c>
 80110e6:	4618      	mov	r0, r3
 80110e8:	f006 fa14 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(64.9797258567076f);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80110f2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 801135c <_ZN12OneForthBaseC1Ev+0xc50>
 80110f6:	4618      	mov	r0, r3
 80110f8:	f006 fa0c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(79.3348792794052f);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011102:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8011360 <_ZN12OneForthBaseC1Ev+0xc54>
 8011106:	4618      	mov	r0, r3
 8011108:	f006 fa04 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(88.386746292738f);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011112:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8011364 <_ZN12OneForthBaseC1Ev+0xc58>
 8011116:	4618      	mov	r0, r3
 8011118:	f006 f9fc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.8287770379527f);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011122:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8011368 <_ZN12OneForthBaseC1Ev+0xc5c>
 8011126:	4618      	mov	r0, r3
 8011128:	f006 f9f4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(86.8615673713344f);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011132:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 801136c <_ZN12OneForthBaseC1Ev+0xc60>
 8011136:	4618      	mov	r0, r3
 8011138:	f006 f9ec 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(78.1119139864848f);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011142:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8011370 <_ZN12OneForthBaseC1Ev+0xc64>
 8011146:	4618      	mov	r0, r3
 8011148:	f006 f9e4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.2083853652208f);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011152:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8011374 <_ZN12OneForthBaseC1Ev+0xc68>
 8011156:	4618      	mov	r0, r3
 8011158:	f006 f9dc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.1183673727349f);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011162:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8011378 <_ZN12OneForthBaseC1Ev+0xc6c>
 8011166:	4618      	mov	r0, r3
 8011168:	f006 f9d4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.4096705590709f);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011172:	ed9f 0a82 	vldr	s0, [pc, #520]	; 801137c <_ZN12OneForthBaseC1Ev+0xc70>
 8011176:	4618      	mov	r0, r3
 8011178:	f006 f9cc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.6179564689207f);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011182:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8011380 <_ZN12OneForthBaseC1Ev+0xc74>
 8011186:	4618      	mov	r0, r3
 8011188:	f006 f9c4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.8750145622263f);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011192:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8011384 <_ZN12OneForthBaseC1Ev+0xc78>
 8011196:	4618      	mov	r0, r3
 8011198:	f006 f9bc 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.888730008183f);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111a2:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8011388 <_ZN12OneForthBaseC1Ev+0xc7c>
 80111a6:	4618      	mov	r0, r3
 80111a8:	f006 f9b4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.2791598429393f);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111b2:	ed9f 0a76 	vldr	s0, [pc, #472]	; 801138c <_ZN12OneForthBaseC1Ev+0xc80>
 80111b6:	4618      	mov	r0, r3
 80111b8:	f006 f9ac 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.1876462614067f);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111c2:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8011390 <_ZN12OneForthBaseC1Ev+0xc84>
 80111c6:	4618      	mov	r0, r3
 80111c8:	f006 f9a4 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(77.008785763266f);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111d2:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8011394 <_ZN12OneForthBaseC1Ev+0xc88>
 80111d6:	4618      	mov	r0, r3
 80111d8:	f006 f99c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.064758647246f);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8011398 <_ZN12OneForthBaseC1Ev+0xc8c>
 80111e6:	4618      	mov	r0, r3
 80111e8:	f006 f994 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(65.055470875208f);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80111f2:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 801139c <_ZN12OneForthBaseC1Ev+0xc90>
 80111f6:	4618      	mov	r0, r3
 80111f8:	f006 f98c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.1727277422503f);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011202:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80113a0 <_ZN12OneForthBaseC1Ev+0xc94>
 8011206:	4618      	mov	r0, r3
 8011208:	f006 f984 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(34.8488613672377f);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011212:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80113a4 <_ZN12OneForthBaseC1Ev+0xc98>
 8011216:	4618      	mov	r0, r3
 8011218:	f006 f97c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(19.1997500789273f);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011222:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80113a8 <_ZN12OneForthBaseC1Ev+0xc9c>
 8011226:	4618      	mov	r0, r3
 8011228:	f006 f974 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(7.29705505460446f);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011232:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80113ac <_ZN12OneForthBaseC1Ev+0xca0>
 8011236:	4618      	mov	r0, r3
 8011238:	f006 f96c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.44646121119877f);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011242:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80113b0 <_ZN12OneForthBaseC1Ev+0xca4>
 8011246:	4618      	mov	r0, r3
 8011248:	f006 f964 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(2.64742454691226f);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011252:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80113b4 <_ZN12OneForthBaseC1Ev+0xca8>
 8011256:	4618      	mov	r0, r3
 8011258:	f006 f95c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.3657314768102f);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011262:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80113b8 <_ZN12OneForthBaseC1Ev+0xcac>
 8011266:	4618      	mov	r0, r3
 8011268:	f006 f954 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(22.6738684837447f);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011272:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80113bc <_ZN12OneForthBaseC1Ev+0xcb0>
 8011276:	4618      	mov	r0, r3
 8011278:	f006 f94c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(36.7244513397395f);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011282:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80113c0 <_ZN12OneForthBaseC1Ev+0xcb4>
 8011286:	4618      	mov	r0, r3
 8011288:	f006 f944 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.4407432291511f);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011292:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80113c4 <_ZN12OneForthBaseC1Ev+0xcb8>
 8011296:	4618      	mov	r0, r3
 8011298:	f006 f93c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.2554618868898f);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112a2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80113c8 <_ZN12OneForthBaseC1Ev+0xcbc>
 80112a6:	4618      	mov	r0, r3
 80112a8:	f006 f934 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.7175691806896f);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112b2:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80113cc <_ZN12OneForthBaseC1Ev+0xcc0>
 80112b6:	4618      	mov	r0, r3
 80112b8:	f006 f92c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(59.8193440994186f);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112c2:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80113d0 <_ZN12OneForthBaseC1Ev+0xcc4>
 80112c6:	4618      	mov	r0, r3
 80112c8:	f006 f924 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.9647889363169f);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112d2:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80113d4 <_ZN12OneForthBaseC1Ev+0xcc8>
 80112d6:	4618      	mov	r0, r3
 80112d8:	f006 f91c 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(46.5884353738452f);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112e2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80113d8 <_ZN12OneForthBaseC1Ev+0xccc>
 80112e6:	4618      	mov	r0, r3
 80112e8:	f006 f914 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.5193738733546f);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80112f2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80113dc <_ZN12OneForthBaseC1Ev+0xcd0>
 80112f6:	4618      	mov	r0, r3
 80112f8:	e0c8      	b.n	801148c <_ZN12OneForthBaseC1Ev+0xd80>
 80112fa:	bf00      	nop
 80112fc:	42c0039d 	.word	0x42c0039d
 8011300:	42c5d5bb 	.word	0x42c5d5bb
 8011304:	42bd8772 	.word	0x42bd8772
 8011308:	42a85b40 	.word	0x42a85b40
 801130c:	428a5db1 	.word	0x428a5db1
 8011310:	4252e667 	.word	0x4252e667
 8011314:	4217eb1b 	.word	0x4217eb1b
 8011318:	41dcdd14 	.word	0x41dcdd14
 801131c:	41b92594 	.word	0x41b92594
 8011320:	41c53f4a 	.word	0x41c53f4a
 8011324:	41f6358f 	.word	0x41f6358f
 8011328:	421c47e1 	.word	0x421c47e1
 801132c:	423ab10b 	.word	0x423ab10b
 8011330:	424c1728 	.word	0x424c1728
 8011334:	424a10b9 	.word	0x424a10b9
 8011338:	4233b1b6 	.word	0x4233b1b6
 801133c:	420dd3d3 	.word	0x420dd3d3
 8011340:	41c3d9c2 	.word	0x41c3d9c2
 8011344:	416eefbd 	.word	0x416eefbd
 8011348:	41197b80 	.word	0x41197b80
 801134c:	41261e74 	.word	0x41261e74
 8011350:	418f0145 	.word	0x418f0145
 8011354:	41f8fc45 	.word	0x41f8fc45
 8011358:	423f67cb 	.word	0x423f67cb
 801135c:	4281f59f 	.word	0x4281f59f
 8011360:	429eab75 	.word	0x429eab75
 8011364:	42b0c604 	.word	0x42b0c604
 8011368:	42b5a855 	.word	0x42b5a855
 801136c:	42adb91f 	.word	0x42adb91f
 8011370:	429c394d 	.word	0x429c394d
 8011374:	42866ab1 	.word	0x42866ab1
 8011378:	42647935 	.word	0x42647935
 801137c:	4249a381 	.word	0x4249a381
 8011380:	424278ca 	.word	0x424278ca
 8011384:	424f8004 	.word	0x424f8004
 8011388:	426b8e0f 	.word	0x426b8e0f
 801138c:	42868eee 	.word	0x42868eee
 8011390:	42946013 	.word	0x42946013
 8011394:	429a0480 	.word	0x429a0480
 8011398:	42942128 	.word	0x42942128
 801139c:	42821c67 	.word	0x42821c67
 80113a0:	424cb0e0 	.word	0x424cb0e0
 80113a4:	420b653c 	.word	0x420b653c
 80113a8:	41999917 	.word	0x41999917
 80113ac:	40e9817a 	.word	0x40e9817a
 80113b0:	3fb925a4 	.word	0x3fb925a4
 80113b4:	40296f67 	.word	0x40296f67
 80113b8:	4125da09 	.word	0x4125da09
 80113bc:	41b56415 	.word	0x41b56415
 80113c0:	4212e5d7 	.word	0x4212e5d7
 80113c4:	4245c352 	.word	0x4245c352
 80113c8:	42690598 	.word	0x42690598
 80113cc:	4276deca 	.word	0x4276deca
 80113d0:	426f4702 	.word	0x426f4702
 80113d4:	4257dbf2 	.word	0x4257dbf2
 80113d8:	423a5a8f 	.word	0x423a5a8f
 80113dc:	422213d7 	.word	0x422213d7
 80113e0:	4218fdc1 	.word	0x4218fdc1
 80113e4:	422519ee 	.word	0x422519ee
 80113e8:	4246d697 	.word	0x4246d697
 80113ec:	4278d0e9 	.word	0x4278d0e9
 80113f0:	429884a5 	.word	0x429884a5
 80113f4:	42b19f95 	.word	0x42b19f95
 80113f8:	42c1f0c3 	.word	0x42c1f0c3
 80113fc:	42c56e3c 	.word	0x42c56e3c
 8011400:	42baca2e 	.word	0x42baca2e
 8011404:	42a3c941 	.word	0x42a3c941
 8011408:	4284dc46 	.word	0x4284dc46
 801140c:	42482c23 	.word	0x42482c23
 8011410:	420f7c2d 	.word	0x420f7c2d
 8011414:	41d36293 	.word	0x41d36293
 8011418:	41b80065 	.word	0x41b80065
 801141c:	41cb5976 	.word	0x41cb5976
 8011420:	42006198 	.word	0x42006198
 8011424:	4221e5cd 	.word	0x4221e5cd
 8011428:	423ec2fb 	.word	0x423ec2fb
 801142c:	424d3510 	.word	0x424d3510
 8011430:	4247a9ed 	.word	0x4247a9ed
 8011434:	422e3351 	.word	0x422e3351
 8011438:	42068fa5 	.word	0x42068fa5
 801143c:	41b58dfd 	.word	0x41b58dfd
 8011440:	415acc19 	.word	0x415acc19
 8011444:	411432c5 	.word	0x411432c5
 8011448:	4132e3a1 	.word	0x4132e3a1
 801144c:	419dfc51 	.word	0x419dfc51
 8011450:	42071465 	.word	0x42071465
 8011454:	424b2be1 	.word	0x424b2be1
 8011458:	42875612 	.word	0x42875612
 801145c:	42a28fe9 	.word	0x42a28fe9
 8011460:	42b28c07 	.word	0x42b28c07
 8011464:	42b529f3 	.word	0x42b529f3
 8011468:	42ab533e 	.word	0x42ab533e
 801146c:	4298b276 	.word	0x4298b276
 8011470:	4282c08d 	.word	0x4282c08d
 8011474:	425ec90a 	.word	0x425ec90a
 8011478:	4246f82e 	.word	0x4246f82e
 801147c:	424352db 	.word	0x424352db
 8011480:	425361e7 	.word	0x425361e7
 8011484:	42711db1 	.word	0x42711db1
 8011488:	42893ec0 	.word	0x42893ec0
 801148c:	f006 f842 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.2478071725895f);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011496:	ed1f 0a2e 	vldr	s0, [pc, #-184]	; 80113e0 <_ZN12OneForthBaseC1Ev+0xcd4>
 801149a:	4618      	mov	r0, r3
 801149c:	f006 f83a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(41.2753221341369f);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114a6:	ed1f 0a31 	vldr	s0, [pc, #-196]	; 80113e4 <_ZN12OneForthBaseC1Ev+0xcd8>
 80114aa:	4618      	mov	r0, r3
 80114ac:	f006 f832 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.7095590541239f);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114b6:	ed1f 0a34 	vldr	s0, [pc, #-208]	; 80113e8 <_ZN12OneForthBaseC1Ev+0xcdc>
 80114ba:	4618      	mov	r0, r3
 80114bc:	f006 f82a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(62.2040149632109f);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114c6:	ed1f 0a37 	vldr	s0, [pc, #-220]	; 80113ec <_ZN12OneForthBaseC1Ev+0xce0>
 80114ca:	4618      	mov	r0, r3
 80114cc:	f006 f822 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.2590703871616f);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114d6:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 80113f0 <_ZN12OneForthBaseC1Ev+0xce4>
 80114da:	4618      	mov	r0, r3
 80114dc:	f006 f81a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(88.811679956001f);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114e6:	ed1f 0a3d 	vldr	s0, [pc, #-244]	; 80113f4 <_ZN12OneForthBaseC1Ev+0xce8>
 80114ea:	4618      	mov	r0, r3
 80114ec:	f006 f812 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(96.9702374364698f);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80114f6:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 80113f8 <_ZN12OneForthBaseC1Ev+0xcec>
 80114fa:	4618      	mov	r0, r3
 80114fc:	f006 f80a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.7152981417737f);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011506:	ed1f 0a43 	vldr	s0, [pc, #-268]	; 80113fc <_ZN12OneForthBaseC1Ev+0xcf0>
 801150a:	4618      	mov	r0, r3
 801150c:	f006 f802 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(93.3948841388844f);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011516:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 8011400 <_ZN12OneForthBaseC1Ev+0xcf4>
 801151a:	4618      	mov	r0, r3
 801151c:	f005 fffa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(81.8930705562608f);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011526:	ed1f 0a49 	vldr	s0, [pc, #-292]	; 8011404 <_ZN12OneForthBaseC1Ev+0xcf8>
 801152a:	4618      	mov	r0, r3
 801152c:	f005 fff2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(66.4302184752315f);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011536:	ed1f 0a4c 	vldr	s0, [pc, #-304]	; 8011408 <_ZN12OneForthBaseC1Ev+0xcfc>
 801153a:	4618      	mov	r0, r3
 801153c:	f005 ffea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.0431023315935f);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011546:	ed1f 0a4f 	vldr	s0, [pc, #-316]	; 801140c <_ZN12OneForthBaseC1Ev+0xd00>
 801154a:	4618      	mov	r0, r3
 801154c:	f005 ffe2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(35.8712639645931f);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011556:	ed1f 0a52 	vldr	s0, [pc, #-328]	; 8011410 <_ZN12OneForthBaseC1Ev+0xd04>
 801155a:	4618      	mov	r0, r3
 801155c:	f005 ffda 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(26.42313110339f);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011566:	ed1f 0a55 	vldr	s0, [pc, #-340]	; 8011414 <_ZN12OneForthBaseC1Ev+0xd08>
 801156a:	4618      	mov	r0, r3
 801156c:	f005 ffd2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.0001924395672f);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011576:	ed1f 0a58 	vldr	s0, [pc, #-352]	; 8011418 <_ZN12OneForthBaseC1Ev+0xd0c>
 801157a:	4618      	mov	r0, r3
 801157c:	f005 ffca 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(25.4186814492858f);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011586:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801141c <_ZN12OneForthBaseC1Ev+0xd10>
 801158a:	4618      	mov	r0, r3
 801158c:	f005 ffc2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(32.0953076787007f);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011596:	ed1f 0a5e 	vldr	s0, [pc, #-376]	; 8011420 <_ZN12OneForthBaseC1Ev+0xd14>
 801159a:	4618      	mov	r0, r3
 801159c:	f005 ffba 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.474414495256f);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115a6:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8011424 <_ZN12OneForthBaseC1Ev+0xd18>
 80115aa:	4618      	mov	r0, r3
 80115ac:	f005 ffb2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.6904101287104f);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115b6:	ed1f 0a64 	vldr	s0, [pc, #-400]	; 8011428 <_ZN12OneForthBaseC1Ev+0xd1c>
 80115ba:	4618      	mov	r0, r3
 80115bc:	f005 ffaa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.3018199967457f);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115c6:	ed1f 0a67 	vldr	s0, [pc, #-412]	; 801142c <_ZN12OneForthBaseC1Ev+0xd20>
 80115ca:	4618      	mov	r0, r3
 80115cc:	f005 ffa2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.9159442387373f);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115d6:	ed1f 0a6a 	vldr	s0, [pc, #-424]	; 8011430 <_ZN12OneForthBaseC1Ev+0xd24>
 80115da:	4618      	mov	r0, r3
 80115dc:	f005 ff9a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.5501125506104f);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115e6:	ed1f 0a6d 	vldr	s0, [pc, #-436]	; 8011434 <_ZN12OneForthBaseC1Ev+0xd28>
 80115ea:	4618      	mov	r0, r3
 80115ec:	f005 ff92 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(33.6402768901792f);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80115f6:	ed1f 0a70 	vldr	s0, [pc, #-448]	; 8011438 <_ZN12OneForthBaseC1Ev+0xd2c>
 80115fa:	4618      	mov	r0, r3
 80115fc:	f005 ff8a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(22.6943292718603f);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011606:	ed1f 0a73 	vldr	s0, [pc, #-460]	; 801143c <_ZN12OneForthBaseC1Ev+0xd30>
 801160a:	4618      	mov	r0, r3
 801160c:	f005 ff82 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(13.6748282544424f);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011616:	ed1f 0a76 	vldr	s0, [pc, #-472]	; 8011440 <_ZN12OneForthBaseC1Ev+0xd34>
 801161a:	4618      	mov	r0, r3
 801161c:	f005 ff7a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.26239526103545f);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011626:	ed1f 0a79 	vldr	s0, [pc, #-484]	; 8011444 <_ZN12OneForthBaseC1Ev+0xd38>
 801162a:	4618      	mov	r0, r3
 801162c:	f005 ff72 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(11.1805735947719f);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011636:	ed1f 0a7c 	vldr	s0, [pc, #-496]	; 8011448 <_ZN12OneForthBaseC1Ev+0xd3c>
 801163a:	4618      	mov	r0, r3
 801163c:	f005 ff6a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(19.748202127922f);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011646:	ed1f 0a7f 	vldr	s0, [pc, #-508]	; 801144c <_ZN12OneForthBaseC1Ev+0xd40>
 801164a:	4618      	mov	r0, r3
 801164c:	f005 ff62 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(33.7699182439543f);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011656:	ed1f 0a82 	vldr	s0, [pc, #-520]	; 8011450 <_ZN12OneForthBaseC1Ev+0xd44>
 801165a:	4618      	mov	r0, r3
 801165c:	f005 ff5a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.7928524012751f);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011666:	ed1f 0a85 	vldr	s0, [pc, #-532]	; 8011454 <_ZN12OneForthBaseC1Ev+0xd48>
 801166a:	4618      	mov	r0, r3
 801166c:	f005 ff52 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.6681026218629f);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011676:	ed1f 0a88 	vldr	s0, [pc, #-544]	; 8011458 <_ZN12OneForthBaseC1Ev+0xd4c>
 801167a:	4618      	mov	r0, r3
 801167c:	f005 ff4a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(81.2810729151665f);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011686:	ed1f 0a8b 	vldr	s0, [pc, #-556]	; 801145c <_ZN12OneForthBaseC1Ev+0xd50>
 801168a:	4618      	mov	r0, r3
 801168c:	f005 ff42 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(89.2734896551194f);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011696:	ed1f 0a8e 	vldr	s0, [pc, #-568]	; 8011460 <_ZN12OneForthBaseC1Ev+0xd54>
 801169a:	4618      	mov	r0, r3
 801169c:	f005 ff3a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.58193237475f);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116a6:	ed1f 0a91 	vldr	s0, [pc, #-580]	; 8011464 <_ZN12OneForthBaseC1Ev+0xd58>
 80116aa:	4618      	mov	r0, r3
 80116ac:	f005 ff32 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(85.6625788707832f);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116b6:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8011468 <_ZN12OneForthBaseC1Ev+0xd5c>
 80116ba:	4618      	mov	r0, r3
 80116bc:	f005 ff2a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.3485599632322f);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116c6:	ed1f 0a97 	vldr	s0, [pc, #-604]	; 801146c <_ZN12OneForthBaseC1Ev+0xd60>
 80116ca:	4618      	mov	r0, r3
 80116cc:	f005 ff22 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(65.3760795367797f);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116d6:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 8011470 <_ZN12OneForthBaseC1Ev+0xd64>
 80116da:	4618      	mov	r0, r3
 80116dc:	f005 ff1a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.696325712222f);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116e6:	ed1f 0a9d 	vldr	s0, [pc, #-628]	; 8011474 <_ZN12OneForthBaseC1Ev+0xd68>
 80116ea:	4618      	mov	r0, r3
 80116ec:	f005 ff12 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.7423623733714f);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80116f6:	ed1f 0aa0 	vldr	s0, [pc, #-640]	; 8011478 <_ZN12OneForthBaseC1Ev+0xd6c>
 80116fa:	4618      	mov	r0, r3
 80116fc:	f005 ff0a 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.8309139331979f);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011706:	ed1f 0aa3 	vldr	s0, [pc, #-652]	; 801147c <_ZN12OneForthBaseC1Ev+0xd70>
 801170a:	4618      	mov	r0, r3
 801170c:	f005 ff02 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(52.8456065136649f);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011716:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 8011480 <_ZN12OneForthBaseC1Ev+0xd74>
 801171a:	4618      	mov	r0, r3
 801171c:	f005 fefa 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.2789969276101f);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011726:	ed1f 0aa9 	vldr	s0, [pc, #-676]	; 8011484 <_ZN12OneForthBaseC1Ev+0xd78>
 801172a:	4618      	mov	r0, r3
 801172c:	f005 fef2 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(68.6225573612057f);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8011736:	ed1f 0aac 	vldr	s0, [pc, #-688]	; 8011488 <_ZN12OneForthBaseC1Ev+0xd7c>
 801173a:	4618      	mov	r0, r3
 801173c:	f005 feea 	bl	8017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    add(Background);
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	332c      	adds	r3, #44	; 0x2c
 8011746:	4619      	mov	r1, r3
 8011748:	4610      	mov	r0, r2
 801174a:	f003 ff81 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageReadBack);
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3358      	adds	r3, #88	; 0x58
 8011754:	4619      	mov	r1, r3
 8011756:	4610      	mov	r0, r2
 8011758:	f003 ff7a 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSetBack);
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	3384      	adds	r3, #132	; 0x84
 8011762:	4619      	mov	r1, r3
 8011764:	4610      	mov	r0, r2
 8011766:	f003 ff73 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageRead);
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	33b0      	adds	r3, #176	; 0xb0
 8011770:	4619      	mov	r1, r3
 8011772:	4610      	mov	r0, r2
 8011774:	f003 ff6c 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSet);
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	33ec      	adds	r3, #236	; 0xec
 801177e:	4619      	mov	r1, r3
 8011780:	4610      	mov	r0, r2
 8011782:	f003 ff65 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(VoltageSetClick);
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801178e:	4619      	mov	r1, r3
 8011790:	4610      	mov	r0, r2
 8011792:	f003 ff5d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(Settings);
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801179e:	4619      	mov	r1, r3
 80117a0:	4610      	mov	r0, r2
 80117a2:	f003 ff55 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(Settings_1);
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80117ae:	4619      	mov	r1, r3
 80117b0:	4610      	mov	r0, r2
 80117b2:	f003 ff4d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadPrimBack);
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80117be:	4619      	mov	r1, r3
 80117c0:	4610      	mov	r0, r2
 80117c2:	f003 ff45 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSetBack);
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80117ce:	4619      	mov	r1, r3
 80117d0:	4610      	mov	r0, r2
 80117d2:	f003 ff3d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSecBack);
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80117de:	4619      	mov	r1, r3
 80117e0:	4610      	mov	r0, r2
 80117e2:	f003 ff35 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadPrim);
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80117ee:	4619      	mov	r1, r3
 80117f0:	4610      	mov	r0, r2
 80117f2:	f003 ff2d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSet);
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80117fe:	4619      	mov	r1, r3
 8011800:	4610      	mov	r0, r2
 8011802:	f003 ff25 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSec);
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801180e:	4619      	mov	r1, r3
 8011810:	4610      	mov	r0, r2
 8011812:	f003 ff1d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(PowerReadSecClick);
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801181e:	4619      	mov	r1, r3
 8011820:	4610      	mov	r0, r2
 8011822:	f003 ff15 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(AmprageSetClick);
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 801182e:	4619      	mov	r1, r3
 8011830:	4610      	mov	r0, r2
 8011832:	f003 ff0d 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(dynamicGraph1);
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 801183e:	4619      	mov	r1, r3
 8011840:	4610      	mov	r0, r2
 8011842:	f003 ff05 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	3798      	adds	r7, #152	; 0x98
 801184c:	46bd      	mov	sp, r7
 801184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011852:	bf00      	nop

08011854 <_ZN12OneForthBase10initializeEv>:

void OneForthBase::initialize()
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]

}
 801185c:	bf00      	nop
 801185e:	370c      	adds	r7, #12
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <_ZN8touchgfx13ClickListenerINS_8TextAreaEEC1Ev>:
    ClickListener()
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
        : T(), clickAction(0)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	f7f9 fb66 	bl	800af44 <_ZN8touchgfx8TextAreaC1Ev>
 8011878:	4a07      	ldr	r2, [pc, #28]	; (8011898 <_ZN8touchgfx13ClickListenerINS_8TextAreaEEC1Ev+0x30>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	601a      	str	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	63da      	str	r2, [r3, #60]	; 0x3c
        T::setTouchable(true);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2101      	movs	r1, #1
 8011888:	4618      	mov	r0, r3
 801188a:	f7f9 fa06 	bl	800ac9a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4618      	mov	r0, r3
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	0802d42c 	.word	0x0802d42c

0801189c <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>:
/**
 * The DataGraphWrapAndClear will show new points progressing across the graph. Once the graph is
 * filled, the next point added will cause the graph to be cleared and a new graph will slowly
 * be created as new values are added.
 */
class DataGraphWrapAndClear : public AbstractDataGraphWithY
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	4a05      	ldr	r2, [pc, #20]	; (80118bc <_ZN8touchgfx21DataGraphWrapAndClearD1Ev+0x20>)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fd fd0b 	bl	800f2c8 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	4618      	mov	r0, r3
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0802f0d8 	.word	0x0802f0d8

080118c0 <_ZN8touchgfx21DataGraphWrapAndClearD0Ev>:
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7ff ffe7 	bl	801189c <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>
 80118ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f018 ff2f 	bl	802a736 <_ZdlPvj>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
	...

080118e4 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public DataGraphWrapAndClear
{
public:
    GraphWrapAndClear()
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
        : DataGraphWrapAndClear(CAPACITY, yValues)
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80118f4:	461a      	mov	r2, r3
 80118f6:	2164      	movs	r1, #100	; 0x64
 80118f8:	f006 fc5c 	bl	80181b4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>
 80118fc:	4a03      	ldr	r2, [pc, #12]	; (801190c <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev+0x28>)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	601a      	str	r2, [r3, #0]
    {
    }
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4618      	mov	r0, r3
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	0802d308 	.word	0x0802d308

08011910 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
class GraphWrapAndClear : public DataGraphWrapAndClear
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	4a05      	ldr	r2, [pc, #20]	; (8011930 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev+0x20>)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	f7ff ffbb 	bl	801189c <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4618      	mov	r0, r3
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	0802d308 	.word	0x0802d308

08011934 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7ff ffe7 	bl	8011910 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>
 8011942:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f018 fef5 	bl	802a736 <_ZdlPvj>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
	...

08011958 <_ZN8touchgfx13ClickListenerINS_8TextAreaEED1Ev>:
class ClickListener : public T
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	4a05      	ldr	r2, [pc, #20]	; (8011978 <_ZN8touchgfx13ClickListenerINS_8TextAreaEED1Ev+0x20>)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	601a      	str	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	4618      	mov	r0, r3
 801196a:	f7f9 fbbf 	bl	800b0ec <_ZN8touchgfx8TextAreaD1Ev>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4618      	mov	r0, r3
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	0802d42c 	.word	0x0802d42c

0801197c <_ZN8touchgfx13ClickListenerINS_8TextAreaEED0Ev>:
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f7ff ffe7 	bl	8011958 <_ZN8touchgfx13ClickListenerINS_8TextAreaEED1Ev>
 801198a:	2140      	movs	r1, #64	; 0x40
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f018 fed2 	bl	802a736 <_ZdlPvj>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <_ZN8touchgfx13ClickListenerINS_8TextAreaEE16handleClickEventERKNS_10ClickEventE>:
    virtual void handleClickEvent(const ClickEvent& event)
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
        T::handleClickEvent(event);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6839      	ldr	r1, [r7, #0]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f9 f92c 	bl	800ac08 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d00d      	beq.n	80119d4 <_ZN8touchgfx13ClickListenerINS_8TextAreaEE16handleClickEventERKNS_10ClickEventE+0x38>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	330c      	adds	r3, #12
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4610      	mov	r0, r2
 80119c8:	4798      	blx	r3
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d001      	beq.n	80119d4 <_ZN8touchgfx13ClickListenerINS_8TextAreaEE16handleClickEventERKNS_10ClickEventE+0x38>
 80119d0:	2301      	movs	r3, #1
 80119d2:	e000      	b.n	80119d6 <_ZN8touchgfx13ClickListenerINS_8TextAreaEE16handleClickEventERKNS_10ClickEventE+0x3a>
 80119d4:	2300      	movs	r3, #0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d009      	beq.n	80119ee <_ZN8touchgfx13ClickListenerINS_8TextAreaEE16handleClickEventERKNS_10ClickEventE+0x52>
            clickAction->execute(*this, event);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	3308      	adds	r3, #8
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	4798      	blx	r3
    }
 80119ee:	bf00      	nop
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80119f6:	b480      	push	{r7}
 80119f8:	b083      	sub	sp, #12
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	460b      	mov	r3, r1
 8011a00:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	78fa      	ldrb	r2, [r7, #3]
 8011a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8011a0a:	bf00      	nop
 8011a0c:	370c      	adds	r7, #12
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a14:	4770      	bx	lr
	...

08011a18 <_ZN11SidebarBaseD1Ev>:

class SidebarBase : public touchgfx::Container
{
public:
    SidebarBase();
    virtual ~SidebarBase() {}
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	4a1c      	ldr	r2, [pc, #112]	; (8011a94 <_ZN11SidebarBaseD1Ev+0x7c>)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f000 fb69 	bl	8012104 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fd fd75 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fe f971 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fd fd69 	bl	800f528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe f965 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fe f95f 	bl	800fd2c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	3358      	adds	r3, #88	; 0x58
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fe fd60 	bl	8010538 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	332c      	adds	r3, #44	; 0x2c
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fa f82d 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7f9 fdeb 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	0802d4a4 	.word	0x0802d4a4

08011a98 <_ZN11SidebarBaseD0Ev>:
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7ff ffb9 	bl	8011a18 <_ZN11SidebarBaseD1Ev>
 8011aa6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f018 fe43 	bl	802a736 <_ZdlPvj>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <_ZN11SidebarBase11applicationEv>:
    virtual void initialize();

protected:
    FrontendApplication& application() {
 8011aba:	b580      	push	{r7, lr}
 8011abc:	b082      	sub	sp, #8
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8011ac2:	f008 fb95 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 8011ac6:	4603      	mov	r3, r0
    }
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <_ZN11SidebarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/SidebarBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

SidebarBase::SidebarBase() :
 8011ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad4:	b08e      	sub	sp, #56	; 0x38
 8011ad6:	af02      	add	r7, sp, #8
 8011ad8:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &SidebarBase::flexButtonCallbackHandler)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f9 f953 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 8011ae2:	4ae0      	ldr	r2, [pc, #896]	; (8011e64 <_ZN11SidebarBaseC1Ev+0x394>)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	332c      	adds	r3, #44	; 0x2c
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7f9 f9d1 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	3358      	adds	r3, #88	; 0x58
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe fb6c 	bl	80101d4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fd fd38 	bl	800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fd fd32 	bl	800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fd fcc4 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fd fd26 	bl	800f578 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fd fcb8 	bl	800f4a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 8011b3e:	4bca      	ldr	r3, [pc, #808]	; (8011e68 <_ZN11SidebarBaseC1Ev+0x398>)
 8011b40:	60bb      	str	r3, [r7, #8]
 8011b42:	2300      	movs	r3, #0
 8011b44:	60fb      	str	r3, [r7, #12]
 8011b46:	f107 0308 	add.w	r3, r7, #8
 8011b4a:	cb0c      	ldmia	r3, {r2, r3}
 8011b4c:	6879      	ldr	r1, [r7, #4]
 8011b4e:	f000 fab9 	bl	80120c4 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    setWidth(100);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2164      	movs	r1, #100	; 0x64
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7f9 f82e 	bl	800abb8 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(600);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7f9 f837 	bl	800abd6 <_ZN8touchgfx8Drawable9setHeightEs>
    box1.setPosition(0, 0, 100, 600);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8011b6e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	2364      	movs	r3, #100	; 0x64
 8011b76:	2200      	movs	r2, #0
 8011b78:	2100      	movs	r1, #0
 8011b7a:	f7f8 ffa6 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85));
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011b84:	2255      	movs	r2, #85	; 0x55
 8011b86:	214c      	movs	r1, #76	; 0x4c
 8011b88:	204b      	movs	r0, #75	; 0x4b
 8011b8a:	f7f9 fbfd 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	4619      	mov	r1, r3
 8011b92:	4620      	mov	r0, r4
 8011b94:	f7f9 f9a2 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    HomeButton.setBoxWithBorderPosition(0, 0, 100, 100);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8011b9e:	2364      	movs	r3, #100	; 0x64
 8011ba0:	9300      	str	r3, [sp, #0]
 8011ba2:	2364      	movs	r3, #100	; 0x64
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	f7fe fb4c 	bl	8010244 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    HomeButton.setBorderSize(0);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3358      	adds	r3, #88	; 0x58
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fe fb66 	bl	8010284 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    HomeButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8011bbe:	2255      	movs	r2, #85	; 0x55
 8011bc0:	214c      	movs	r1, #76	; 0x4c
 8011bc2:	204b      	movs	r0, #75	; 0x4b
 8011bc4:	f7f9 fbe0 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bc8:	4605      	mov	r5, r0
 8011bca:	22cc      	movs	r2, #204	; 0xcc
 8011bcc:	2199      	movs	r1, #153	; 0x99
 8011bce:	2000      	movs	r0, #0
 8011bd0:	f7f9 fbda 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bd4:	4606      	mov	r6, r0
 8011bd6:	2266      	movs	r2, #102	; 0x66
 8011bd8:	2133      	movs	r1, #51	; 0x33
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f7f9 fbd4 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011be0:	4680      	mov	r8, r0
 8011be2:	2299      	movs	r2, #153	; 0x99
 8011be4:	2166      	movs	r1, #102	; 0x66
 8011be6:	2033      	movs	r0, #51	; 0x33
 8011be8:	f7f9 fbce 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bec:	4603      	mov	r3, r0
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	4643      	mov	r3, r8
 8011bf2:	4632      	mov	r2, r6
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7fe fb56 	bl	80102a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    HomeButton.setIconBitmaps(Bitmap(BITMAP_HOME_VARIANT_OUTLINE_WHITE_ID), Bitmap(BITMAP_HOME_VARIANT_OUTLINE_BLACK_ID));
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8011c02:	f107 0310 	add.w	r3, r7, #16
 8011c06:	2108      	movs	r1, #8
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7f8 fef5 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011c0e:	f107 0314 	add.w	r3, r7, #20
 8011c12:	2107      	movs	r1, #7
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f8 feef 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011c1a:	f107 0214 	add.w	r2, r7, #20
 8011c1e:	f107 0310 	add.w	r3, r7, #16
 8011c22:	4619      	mov	r1, r3
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7fe fb5c 	bl	80102e2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    HomeButton.setIconXY(26, 26);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3358      	adds	r3, #88	; 0x58
 8011c2e:	221a      	movs	r2, #26
 8011c30:	211a      	movs	r1, #26
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fe fb9f 	bl	8010376 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE9setIconXYEss>
    HomeButton.setPosition(0, 0, 100, 100);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8011c3e:	2364      	movs	r3, #100	; 0x64
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	2364      	movs	r3, #100	; 0x64
 8011c44:	2200      	movs	r2, #0
 8011c46:	2100      	movs	r1, #0
 8011c48:	f7f8 ff3f 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeButton.setAction(flexButtonCallback);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011c58:	4619      	mov	r1, r3
 8011c5a:	4610      	mov	r0, r2
 8011c5c:	f7f9 fd86 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    BusSettings.setBoxWithBorderPosition(0, 0, 100, 100);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8011c66:	2364      	movs	r3, #100	; 0x64
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	2364      	movs	r3, #100	; 0x64
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2100      	movs	r1, #0
 8011c70:	f7fd fd6c 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    BusSettings.setBorderSize(0);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fd fd85 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    BusSettings.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8011c88:	2255      	movs	r2, #85	; 0x55
 8011c8a:	214c      	movs	r1, #76	; 0x4c
 8011c8c:	204b      	movs	r0, #75	; 0x4b
 8011c8e:	f7f9 fb7b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c92:	4605      	mov	r5, r0
 8011c94:	22cc      	movs	r2, #204	; 0xcc
 8011c96:	2199      	movs	r1, #153	; 0x99
 8011c98:	2000      	movs	r0, #0
 8011c9a:	f7f9 fb75 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	2266      	movs	r2, #102	; 0x66
 8011ca2:	2133      	movs	r1, #51	; 0x33
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	f7f9 fb6f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011caa:	4680      	mov	r8, r0
 8011cac:	2299      	movs	r2, #153	; 0x99
 8011cae:	2166      	movs	r1, #102	; 0x66
 8011cb0:	2033      	movs	r0, #51	; 0x33
 8011cb2:	f7f9 fb69 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	4643      	mov	r3, r8
 8011cbc:	4632      	mov	r2, r6
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f7fd fd75 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BusSettings.setIconBitmaps(Bitmap(BITMAP_TRANSIT_CONNECTION_HORIZONTAL_WHITE_ID), Bitmap(BITMAP_TRANSIT_CONNECTION_HORIZONTAL_BALCK_ID));
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8011ccc:	f107 0318 	add.w	r3, r7, #24
 8011cd0:	2111      	movs	r1, #17
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f8 fe90 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011cd8:	f107 031c 	add.w	r3, r7, #28
 8011cdc:	2110      	movs	r1, #16
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7f8 fe8a 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011ce4:	f107 021c 	add.w	r2, r7, #28
 8011ce8:	f107 0318 	add.w	r3, r7, #24
 8011cec:	4619      	mov	r1, r3
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7fd fd7b 	bl	800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    BusSettings.setIconXY(26, 26);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011cfa:	221a      	movs	r2, #26
 8011cfc:	211a      	movs	r1, #26
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fd fdbd 	bl	800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    BusSettings.setPosition(0, 200, 100, 100);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8011d0a:	2364      	movs	r3, #100	; 0x64
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	2364      	movs	r3, #100	; 0x64
 8011d10:	22c8      	movs	r2, #200	; 0xc8
 8011d12:	2100      	movs	r1, #0
 8011d14:	f7f8 fed9 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    BusSettings.setAction(flexButtonCallback);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011d24:	4619      	mov	r1, r3
 8011d26:	4610      	mov	r0, r2
 8011d28:	f7f9 fd20 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    LayoutButton.setBoxWithBorderPosition(0, 0, 100, 100);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8011d32:	2364      	movs	r3, #100	; 0x64
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	2364      	movs	r3, #100	; 0x64
 8011d38:	2200      	movs	r2, #0
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	f7fd fd06 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    LayoutButton.setBorderSize(0);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d46:	2100      	movs	r1, #0
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fd fd1f 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    LayoutButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011d54:	2255      	movs	r2, #85	; 0x55
 8011d56:	214c      	movs	r1, #76	; 0x4c
 8011d58:	204b      	movs	r0, #75	; 0x4b
 8011d5a:	f7f9 fb15 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d5e:	4605      	mov	r5, r0
 8011d60:	22cc      	movs	r2, #204	; 0xcc
 8011d62:	2199      	movs	r1, #153	; 0x99
 8011d64:	2000      	movs	r0, #0
 8011d66:	f7f9 fb0f 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d6a:	4606      	mov	r6, r0
 8011d6c:	2266      	movs	r2, #102	; 0x66
 8011d6e:	2133      	movs	r1, #51	; 0x33
 8011d70:	2000      	movs	r0, #0
 8011d72:	f7f9 fb09 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d76:	4680      	mov	r8, r0
 8011d78:	2299      	movs	r2, #153	; 0x99
 8011d7a:	2166      	movs	r1, #102	; 0x66
 8011d7c:	2033      	movs	r0, #51	; 0x33
 8011d7e:	f7f9 fb03 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d82:	4603      	mov	r3, r0
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	4643      	mov	r3, r8
 8011d88:	4632      	mov	r2, r6
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f7fd fd0f 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    LayoutButton.setIconBitmaps(Bitmap(BITMAP_VIEW_QUILT_OUTLINE_WHITE_ID), Bitmap(BITMAP_VIEW_QUILT_OUTLINE_BLACK_ID));
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011d98:	f107 0320 	add.w	r3, r7, #32
 8011d9c:	2114      	movs	r1, #20
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7f8 fe2a 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011da8:	2113      	movs	r1, #19
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7f8 fe24 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011db0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011db4:	f107 0320 	add.w	r3, r7, #32
 8011db8:	4619      	mov	r1, r3
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f7fd fd15 	bl	800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    LayoutButton.setIconXY(26, 26);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011dc6:	221a      	movs	r2, #26
 8011dc8:	211a      	movs	r1, #26
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fd fd57 	bl	800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    LayoutButton.setPosition(0, 100, 100, 100);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8011dd6:	2364      	movs	r3, #100	; 0x64
 8011dd8:	9300      	str	r3, [sp, #0]
 8011dda:	2364      	movs	r3, #100	; 0x64
 8011ddc:	2264      	movs	r2, #100	; 0x64
 8011dde:	2100      	movs	r1, #0
 8011de0:	f7f8 fe73 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    LayoutButton.setAction(flexButtonCallback);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011df0:	4619      	mov	r1, r3
 8011df2:	4610      	mov	r0, r2
 8011df4:	f7f9 fcba 	bl	800b76c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    flexButton2_3.setBoxWithBorderPosition(0, 0, 100, 100);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011dfe:	2364      	movs	r3, #100	; 0x64
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	2364      	movs	r3, #100	; 0x64
 8011e04:	2200      	movs	r2, #0
 8011e06:	2100      	movs	r1, #0
 8011e08:	f7fd fca0 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2_3.setBorderSize(0);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011e12:	2100      	movs	r1, #0
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fd fcb9 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton2_3.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011e20:	2255      	movs	r2, #85	; 0x55
 8011e22:	214c      	movs	r1, #76	; 0x4c
 8011e24:	204b      	movs	r0, #75	; 0x4b
 8011e26:	f7f9 faaf 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	22cc      	movs	r2, #204	; 0xcc
 8011e2e:	2199      	movs	r1, #153	; 0x99
 8011e30:	2000      	movs	r0, #0
 8011e32:	f7f9 faa9 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e36:	4606      	mov	r6, r0
 8011e38:	2266      	movs	r2, #102	; 0x66
 8011e3a:	2133      	movs	r1, #51	; 0x33
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	f7f9 faa3 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e42:	4680      	mov	r8, r0
 8011e44:	2299      	movs	r2, #153	; 0x99
 8011e46:	2166      	movs	r1, #102	; 0x66
 8011e48:	2033      	movs	r0, #51	; 0x33
 8011e4a:	f7f9 fa9d 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	4643      	mov	r3, r8
 8011e54:	4632      	mov	r2, r6
 8011e56:	4629      	mov	r1, r5
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f7fd fca9 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2_3.setPosition(0, 300, 100, 100);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	e004      	b.n	8011e6c <_ZN11SidebarBaseC1Ev+0x39c>
 8011e62:	bf00      	nop
 8011e64:	0802d4a4 	.word	0x0802d4a4
 8011e68:	08012061 	.word	0x08012061
 8011e6c:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011e70:	2364      	movs	r3, #100	; 0x64
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	2364      	movs	r3, #100	; 0x64
 8011e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	f7f8 fe25 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton2_3.setVisible(false);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011e86:	2100      	movs	r1, #0
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7ff fdb4 	bl	80119f6 <_ZN8touchgfx8Drawable10setVisibleEb>

    Settings.setBoxWithBorderPosition(0, 0, 100, 100);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8011e94:	2364      	movs	r3, #100	; 0x64
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	2364      	movs	r3, #100	; 0x64
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	2100      	movs	r1, #0
 8011e9e:	f7fd fc55 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    Settings.setBorderSize(0);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fd fc6e 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    Settings.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f503 7432 	add.w	r4, r3, #712	; 0x2c8
 8011eb6:	2255      	movs	r2, #85	; 0x55
 8011eb8:	214c      	movs	r1, #76	; 0x4c
 8011eba:	204b      	movs	r0, #75	; 0x4b
 8011ebc:	f7f9 fa64 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ec0:	4605      	mov	r5, r0
 8011ec2:	22cc      	movs	r2, #204	; 0xcc
 8011ec4:	2199      	movs	r1, #153	; 0x99
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	f7f9 fa5e 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ecc:	4606      	mov	r6, r0
 8011ece:	2266      	movs	r2, #102	; 0x66
 8011ed0:	2133      	movs	r1, #51	; 0x33
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f7f9 fa58 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ed8:	4680      	mov	r8, r0
 8011eda:	2299      	movs	r2, #153	; 0x99
 8011edc:	2166      	movs	r1, #102	; 0x66
 8011ede:	2033      	movs	r0, #51	; 0x33
 8011ee0:	f7f9 fa52 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	4643      	mov	r3, r8
 8011eea:	4632      	mov	r2, r6
 8011eec:	4629      	mov	r1, r5
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f7fd fc5e 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    Settings.setIconBitmaps(Bitmap(BITMAP_COG_OUTLINE_WHITE_ID), Bitmap(BITMAP_COG_OUTLINE_BLACK_ID));
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f503 7432 	add.w	r4, r3, #712	; 0x2c8
 8011efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011efe:	2106      	movs	r1, #6
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7f8 fd79 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f0a:	2103      	movs	r1, #3
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7f8 fd73 	bl	800a9f8 <_ZN8touchgfx6BitmapC1Et>
 8011f12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7fd fc64 	bl	800f7ea <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    Settings.setIconXY(26, 26);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8011f28:	221a      	movs	r2, #26
 8011f2a:	211a      	movs	r1, #26
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fd fca6 	bl	800f87e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    Settings.setPosition(0, 500, 100, 100);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8011f38:	2364      	movs	r3, #100	; 0x64
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	2364      	movs	r3, #100	; 0x64
 8011f3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011f42:	2100      	movs	r1, #0
 8011f44:	f7f8 fdc1 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>

    flexButton2_5.setBoxWithBorderPosition(0, 0, 100, 100);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f503 705c 	add.w	r0, r3, #880	; 0x370
 8011f4e:	2364      	movs	r3, #100	; 0x64
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	2364      	movs	r3, #100	; 0x64
 8011f54:	2200      	movs	r2, #0
 8011f56:	2100      	movs	r1, #0
 8011f58:	f7fd fbf8 	bl	800f74c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2_5.setBorderSize(0);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011f62:	2100      	movs	r1, #0
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7fd fc11 	bl	800f78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton2_5.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(75, 76, 85), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8011f70:	2255      	movs	r2, #85	; 0x55
 8011f72:	214c      	movs	r1, #76	; 0x4c
 8011f74:	204b      	movs	r0, #75	; 0x4b
 8011f76:	f7f9 fa07 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	22cc      	movs	r2, #204	; 0xcc
 8011f7e:	2199      	movs	r1, #153	; 0x99
 8011f80:	2000      	movs	r0, #0
 8011f82:	f7f9 fa01 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f86:	4606      	mov	r6, r0
 8011f88:	2266      	movs	r2, #102	; 0x66
 8011f8a:	2133      	movs	r1, #51	; 0x33
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7f9 f9fb 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f92:	4680      	mov	r8, r0
 8011f94:	2299      	movs	r2, #153	; 0x99
 8011f96:	2166      	movs	r1, #102	; 0x66
 8011f98:	2033      	movs	r0, #51	; 0x33
 8011f9a:	f7f9 f9f5 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	4643      	mov	r3, r8
 8011fa4:	4632      	mov	r2, r6
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7fd fc01 	bl	800f7b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2_5.setPosition(0, 400, 100, 100);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f503 705c 	add.w	r0, r3, #880	; 0x370
 8011fb4:	2364      	movs	r3, #100	; 0x64
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	2364      	movs	r3, #100	; 0x64
 8011fba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	f7f8 fd83 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton2_5.setVisible(false);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011fca:	2100      	movs	r1, #0
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff fd12 	bl	80119f6 <_ZN8touchgfx8Drawable10setVisibleEb>

    add(box1);
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	332c      	adds	r3, #44	; 0x2c
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f003 fb38 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(HomeButton);
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3358      	adds	r3, #88	; 0x58
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	4610      	mov	r0, r2
 8011fea:	f003 fb31 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(BusSettings);
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	f003 fb29 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(LayoutButton);
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012006:	4619      	mov	r1, r3
 8012008:	4610      	mov	r0, r2
 801200a:	f003 fb21 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(flexButton2_3);
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8012016:	4619      	mov	r1, r3
 8012018:	4610      	mov	r0, r2
 801201a:	f003 fb19 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(Settings);
 801201e:	687a      	ldr	r2, [r7, #4]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012026:	4619      	mov	r1, r3
 8012028:	4610      	mov	r0, r2
 801202a:	f003 fb11 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(flexButton2_5);
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8012036:	4619      	mov	r1, r3
 8012038:	4610      	mov	r0, r2
 801203a:	f003 fb09 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	3730      	adds	r7, #48	; 0x30
 8012044:	46bd      	mov	sp, r7
 8012046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204a:	bf00      	nop

0801204c <_ZN11SidebarBase10initializeEv>:

void SidebarBase::initialize()
{
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]

}
 8012054:	bf00      	nop
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SidebarBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
    if (&src == &HomeButton)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	3358      	adds	r3, #88	; 0x58
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	429a      	cmp	r2, r3
 8012072:	d107      	bne.n	8012084 <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When HomeButton clicked change screen to Layout2
        //Go to Layout2 with no screen transition
        application().gotoLayout2ScreenNoTransition();
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff fd20 	bl	8011aba <_ZN11SidebarBase11applicationEv>
 801207a:	4603      	mov	r3, r0
 801207c:	4618      	mov	r0, r3
 801207e:	f7f7 fe8f 	bl	8009da0 <_ZN23FrontendApplicationBase29gotoLayout2ScreenNoTransitionEv>
        //Interaction2
        //When LayoutButton clicked change screen to Layout4
        //Go to Layout4 with no screen transition
        application().gotoLayout4ScreenNoTransition();
    }
}
 8012082:	e01a      	b.n	80120ba <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x5a>
    else if (&src == &BusSettings)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801208a:	683a      	ldr	r2, [r7, #0]
 801208c:	429a      	cmp	r2, r3
 801208e:	d107      	bne.n	80120a0 <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x40>
        application().gotoLayoutSelectionScreenNoTransition();
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7ff fd12 	bl	8011aba <_ZN11SidebarBase11applicationEv>
 8012096:	4603      	mov	r3, r0
 8012098:	4618      	mov	r0, r3
 801209a:	f7f7 ff0d 	bl	8009eb8 <_ZN23FrontendApplicationBase37gotoLayoutSelectionScreenNoTransitionEv>
}
 801209e:	e00c      	b.n	80120ba <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x5a>
    else if (&src == &LayoutButton)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80120a6:	683a      	ldr	r2, [r7, #0]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d106      	bne.n	80120ba <_ZN11SidebarBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x5a>
        application().gotoLayout4ScreenNoTransition();
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f7ff fd04 	bl	8011aba <_ZN11SidebarBase11applicationEv>
 80120b2:	4603      	mov	r3, r0
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7f7 feb9 	bl	8009e2c <_ZN23FrontendApplicationBase29gotoLayout4ScreenNoTransitionEv>
}
 80120ba:	bf00      	nop
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	4639      	mov	r1, r7
 80120d0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7fd fb08 	bl	800f6ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80120dc:	4a08      	ldr	r2, [pc, #32]	; (8012100 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	68ba      	ldr	r2, [r7, #8]
 80120e6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	3308      	adds	r3, #8
 80120ec:	463a      	mov	r2, r7
 80120ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	4618      	mov	r0, r3
 80120fa:	3710      	adds	r7, #16
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	0802d530 	.word	0x0802d530

08012104 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	4a05      	ldr	r2, [pc, #20]	; (8012124 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	f7fd fcb5 	bl	800fa84 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	4618      	mov	r0, r3
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	0802d530 	.word	0x0802d530

08012128 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7ff ffe7 	bl	8012104 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8012136:	2110      	movs	r1, #16
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f018 fafc 	bl	802a736 <_ZdlPvj>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	68d2      	ldr	r2, [r2, #12]
 801215a:	1052      	asrs	r2, r2, #1
 801215c:	1898      	adds	r0, r3, r2
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d102      	bne.n	8012170 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	689b      	ldr	r3, [r3, #8]
 801216e:	e00a      	b.n	8012186 <_ZN8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	68d2      	ldr	r2, [r2, #12]
 8012178:	1052      	asrs	r2, r2, #1
 801217a:	4413      	add	r3, r2
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	6892      	ldr	r2, [r2, #8]
 8012182:	4413      	add	r3, r2
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	4798      	blx	r3
    }
 801218a:	bf00      	nop
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8012192:	b480      	push	{r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d010      	beq.n	80121c4 <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	689b      	ldr	r3, [r3, #8]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d107      	bne.n	80121ba <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	f003 0301 	and.w	r3, r3, #1
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80121b6:	2301      	movs	r3, #1
 80121b8:	e000      	b.n	80121bc <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80121ba:	2300      	movs	r3, #0
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d001      	beq.n	80121c4 <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80121c0:	2301      	movs	r3, #1
 80121c2:	e000      	b.n	80121c6 <_ZNK8touchgfx8CallbackI11SidebarBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80121c4:	2300      	movs	r3, #0
    }
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr
	...

080121d4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
    {
 80121dc:	4a06      	ldr	r2, [pc, #24]	; (80121f8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	601a      	str	r2, [r3, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	3304      	adds	r3, #4
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7f9 fa3a 	bl	800b660 <_ZN8touchgfx9ContainerD1Ev>
    }
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	3708      	adds	r7, #8
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	0802fa38 	.word	0x0802fa38

080121fc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
    }
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff ffe5 	bl	80121d4 <_ZN8touchgfx6ScreenD1Ev>
 801220a:	213c      	movs	r1, #60	; 0x3c
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f018 fa92 	bl	802a736 <_ZdlPvj>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
    {
    }
 8012224:	bf00      	nop
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    {
    }
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
    {
    }
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
    {
    }
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	460b      	mov	r3, r1
 8012276:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012278:	bf00      	nop
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	3304      	adds	r3, #4
 8012292:	6839      	ldr	r1, [r7, #0]
 8012294:	4618      	mov	r0, r3
 8012296:	f003 f9db 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801229a:	bf00      	nop
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
	...

080122a4 <_ZN7SidebarD1Ev>:

class Sidebar : public SidebarBase
{
public:
    Sidebar();
    virtual ~Sidebar() {}
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	4a05      	ldr	r2, [pc, #20]	; (80122c4 <_ZN7SidebarD1Ev+0x20>)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff fbaf 	bl	8011a18 <_ZN11SidebarBaseD1Ev>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	0802d9e0 	.word	0x0802d9e0

080122c8 <_ZN7SidebarD0Ev>:
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff ffe7 	bl	80122a4 <_ZN7SidebarD1Ev>
 80122d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f018 fa2b 	bl	802a736 <_ZdlPvj>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
	...

080122ec <_ZN8HalfVertD1Ev>:

class HalfVert : public HalfVertBase
{
public:
    HalfVert();
    virtual ~HalfVert() {}
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	4a05      	ldr	r2, [pc, #20]	; (801230c <_ZN8HalfVertD1Ev+0x20>)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	601a      	str	r2, [r3, #0]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f9 fc49 	bl	800bb94 <_ZN12HalfVertBaseD1Ev>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	0802d8b8 	.word	0x0802d8b8

08012310 <_ZN8HalfVertD0Ev>:
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f7ff ffe7 	bl	80122ec <_ZN8HalfVertD1Ev>
 801231e:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f018 fa07 	bl	802a736 <_ZdlPvj>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
	...

08012334 <_ZN8touchgfx4ViewI16Layout2PresenterED1Ev>:
class View : public Screen
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	4a05      	ldr	r2, [pc, #20]	; (8012354 <_ZN8touchgfx4ViewI16Layout2PresenterED1Ev+0x20>)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	601a      	str	r2, [r3, #0]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4618      	mov	r0, r3
 8012346:	f7ff ff45 	bl	80121d4 <_ZN8touchgfx6ScreenD1Ev>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	0802d57c 	.word	0x0802d57c

08012358 <_ZN8touchgfx4ViewI16Layout2PresenterED0Ev>:
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff ffe7 	bl	8012334 <_ZN8touchgfx4ViewI16Layout2PresenterED1Ev>
 8012366:	2140      	movs	r1, #64	; 0x40
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f018 f9e4 	bl	802a736 <_ZdlPvj>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4618      	mov	r0, r3
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <_ZN15Layout2ViewBaseD1Ev>:

class Layout2ViewBase : public touchgfx::View<Layout2Presenter>
{
public:
    Layout2ViewBase();
    virtual ~Layout2ViewBase() {}
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	4a13      	ldr	r2, [pc, #76]	; (80123d0 <_ZN15Layout2ViewBaseD1Ev+0x58>)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	f241 635c 	movw	r3, #5724	; 0x165c
 801238c:	4413      	add	r3, r2
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff ffac 	bl	80122ec <_ZN8HalfVertD1Ev>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801239a:	4618      	mov	r0, r3
 801239c:	f7ff ffa6 	bl	80122ec <_ZN8HalfVertD1Ev>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3398      	adds	r3, #152	; 0x98
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ff7d 	bl	80122a4 <_ZN7SidebarD1Ev>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	336c      	adds	r3, #108	; 0x6c
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f9 fb94 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3340      	adds	r3, #64	; 0x40
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7f9 fb8f 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7ff ffb7 	bl	8012334 <_ZN8touchgfx4ViewI16Layout2PresenterED1Ev>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	0802d548 	.word	0x0802d548

080123d4 <_ZN15Layout2ViewBaseD0Ev>:
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff ffcb 	bl	8012378 <_ZN15Layout2ViewBaseD1Ev>
 80123e2:	f246 4128 	movw	r1, #25640	; 0x6428
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f018 f9a5 	bl	802a736 <_ZdlPvj>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
	...

080123f8 <_ZN15Layout2ViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/layout2_screen/Layout2ViewBase.hpp>
#include <touchgfx/Color.hpp>

Layout2ViewBase::Layout2ViewBase()
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af02      	add	r7, sp, #8
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	4618      	mov	r0, r3
 8012404:	f000 f8ba 	bl	801257c <_ZN8touchgfx4ViewI16Layout2PresenterEC1Ev>
 8012408:	4a4e      	ldr	r2, [pc, #312]	; (8012544 <_ZN15Layout2ViewBaseC1Ev+0x14c>)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	3340      	adds	r3, #64	; 0x40
 8012412:	4618      	mov	r0, r3
 8012414:	f7f8 fd3e 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	336c      	adds	r3, #108	; 0x6c
 801241c:	4618      	mov	r0, r3
 801241e:	f7f8 fd39 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	3398      	adds	r3, #152	; 0x98
 8012426:	4618      	mov	r0, r3
 8012428:	f000 fdfe 	bl	8013028 <_ZN7SidebarC1Ev>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012432:	4618      	mov	r0, r3
 8012434:	f000 fd8e 	bl	8012f54 <_ZN8HalfVertC1Ev>
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	f241 635c 	movw	r3, #5724	; 0x165c
 801243e:	4413      	add	r3, r2
 8012440:	4618      	mov	r0, r3
 8012442:	f000 fd87 	bl	8012f54 <_ZN8HalfVertC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	f642 0328 	movw	r3, #10280	; 0x2828
 801244c:	4413      	add	r3, r2
 801244e:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8012452:	4618      	mov	r0, r3
 8012454:	f006 fa60 	bl	8018918 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 1024, 600);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801245e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012468:	2200      	movs	r2, #0
 801246a:	2100      	movs	r1, #0
 801246c:	f7f8 fb2d 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012476:	2200      	movs	r2, #0
 8012478:	2100      	movs	r1, #0
 801247a:	2000      	movs	r0, #0
 801247c:	f7f8 ff84 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012480:	4603      	mov	r3, r0
 8012482:	4619      	mov	r1, r3
 8012484:	4620      	mov	r0, r4
 8012486:	f7f8 fd29 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Background.setPosition(0, 0, 1024, 600);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8012490:	f44f 7316 	mov.w	r3, #600	; 0x258
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801249a:	2200      	movs	r2, #0
 801249c:	2100      	movs	r1, #0
 801249e:	f7f8 fb14 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(33, 35, 41));
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80124a8:	2229      	movs	r2, #41	; 0x29
 80124aa:	2123      	movs	r1, #35	; 0x23
 80124ac:	2021      	movs	r0, #33	; 0x21
 80124ae:	f7f8 ff6b 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124b2:	4603      	mov	r3, r0
 80124b4:	4619      	mov	r1, r3
 80124b6:	4620      	mov	r0, r4
 80124b8:	f7f8 fd10 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    sidebar.setXY(0, 0);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	3398      	adds	r3, #152	; 0x98
 80124c0:	2200      	movs	r2, #0
 80124c2:	2100      	movs	r1, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f8 fb59 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    powerFullsize1.setXY(121, 20);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80124d0:	2214      	movs	r2, #20
 80124d2:	2179      	movs	r1, #121	; 0x79
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7f8 fb51 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    powerFullsize2.setXY(570, 20);
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	f241 635c 	movw	r3, #5724	; 0x165c
 80124e0:	4413      	add	r3, r2
 80124e2:	2214      	movs	r2, #20
 80124e4:	f240 213a 	movw	r1, #570	; 0x23a
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7f8 fb47 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    add(__background);
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3340      	adds	r3, #64	; 0x40
 80124f4:	4619      	mov	r1, r3
 80124f6:	4610      	mov	r0, r2
 80124f8:	f7ff fec4 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Background);
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	336c      	adds	r3, #108	; 0x6c
 8012502:	4619      	mov	r1, r3
 8012504:	4610      	mov	r0, r2
 8012506:	f7ff febd 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sidebar);
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3398      	adds	r3, #152	; 0x98
 8012510:	4619      	mov	r1, r3
 8012512:	4610      	mov	r0, r2
 8012514:	f7ff feb6 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(powerFullsize1);
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012520:	4619      	mov	r1, r3
 8012522:	4610      	mov	r0, r2
 8012524:	f7ff feae 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(powerFullsize2);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	f241 635c 	movw	r3, #5724	; 0x165c
 8012530:	4413      	add	r3, r2
 8012532:	4619      	mov	r1, r3
 8012534:	f7ff fea6 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	370c      	adds	r7, #12
 801253e:	46bd      	mov	sp, r7
 8012540:	bd90      	pop	{r4, r7, pc}
 8012542:	bf00      	nop
 8012544:	0802d548 	.word	0x0802d548

08012548 <_ZN15Layout2ViewBase11setupScreenEv>:

void Layout2ViewBase::setupScreen()
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    sidebar.initialize();
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	3398      	adds	r3, #152	; 0x98
 8012554:	4618      	mov	r0, r3
 8012556:	f000 fd79 	bl	801304c <_ZN7Sidebar10initializeEv>
    powerFullsize1.initialize();
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012560:	4618      	mov	r0, r3
 8012562:	f000 fd09 	bl	8012f78 <_ZN8HalfVert10initializeEv>
    powerFullsize2.initialize();
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	f241 635c 	movw	r3, #5724	; 0x165c
 801256c:	4413      	add	r3, r2
 801256e:	4618      	mov	r0, r3
 8012570:	f000 fd02 	bl	8012f78 <_ZN8HalfVert10initializeEv>
}
 8012574:	bf00      	nop
 8012576:	3708      	adds	r7, #8
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <_ZN8touchgfx4ViewI16Layout2PresenterEC1Ev>:
    View()
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f009 f97a 	bl	801b880 <_ZN8touchgfx6ScreenC1Ev>
 801258c:	4a05      	ldr	r2, [pc, #20]	; (80125a4 <_ZN8touchgfx4ViewI16Layout2PresenterEC1Ev+0x28>)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2200      	movs	r2, #0
 8012596:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	3708      	adds	r7, #8
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	0802d57c 	.word	0x0802d57c

080125a8 <_ZN8OneForthD1Ev>:

class OneForth : public OneForthBase
{
public:
    OneForth();
    virtual ~OneForth() {}
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	4a05      	ldr	r2, [pc, #20]	; (80125c8 <_ZN8OneForthD1Ev+0x20>)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fe f815 	bl	80105e8 <_ZN12OneForthBaseD1Ev>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4618      	mov	r0, r3
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	0802d954 	.word	0x0802d954

080125cc <_ZN8OneForthD0Ev>:
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7ff ffe7 	bl	80125a8 <_ZN8OneForthD1Ev>
 80125da:	f640 014c 	movw	r1, #2124	; 0x84c
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f018 f8a9 	bl	802a736 <_ZdlPvj>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4618      	mov	r0, r3
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
	...

080125f0 <_ZN8touchgfx4ViewI16Layout4PresenterED1Ev>:
class View : public Screen
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	4a05      	ldr	r2, [pc, #20]	; (8012610 <_ZN8touchgfx4ViewI16Layout4PresenterED1Ev+0x20>)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	4618      	mov	r0, r3
 8012602:	f7ff fde7 	bl	80121d4 <_ZN8touchgfx6ScreenD1Ev>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	0802d5e4 	.word	0x0802d5e4

08012614 <_ZN8touchgfx4ViewI16Layout4PresenterED0Ev>:
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ff ffe7 	bl	80125f0 <_ZN8touchgfx4ViewI16Layout4PresenterED1Ev>
 8012622:	2140      	movs	r1, #64	; 0x40
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f018 f886 	bl	802a736 <_ZdlPvj>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <_ZN15Layout4ViewBaseD1Ev>:

class Layout4ViewBase : public touchgfx::View<Layout4Presenter>
{
public:
    Layout4ViewBase();
    virtual ~Layout4ViewBase() {}
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	4a1a      	ldr	r2, [pc, #104]	; (80126a8 <_ZN15Layout4ViewBaseD1Ev+0x74>)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	f641 5374 	movw	r3, #7540	; 0x1d74
 8012648:	4413      	add	r3, r2
 801264a:	4618      	mov	r0, r3
 801264c:	f7ff ffac 	bl	80125a8 <_ZN8OneForthD1Ev>
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	f241 5328 	movw	r3, #5416	; 0x1528
 8012656:	4413      	add	r3, r2
 8012658:	4618      	mov	r0, r3
 801265a:	f7ff ffa5 	bl	80125a8 <_ZN8OneForthD1Ev>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 8012664:	4618      	mov	r0, r3
 8012666:	f7ff ff9f 	bl	80125a8 <_ZN8OneForthD1Ev>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff ff99 	bl	80125a8 <_ZN8OneForthD1Ev>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3398      	adds	r3, #152	; 0x98
 801267a:	4618      	mov	r0, r3
 801267c:	f7ff fe12 	bl	80122a4 <_ZN7SidebarD1Ev>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	336c      	adds	r3, #108	; 0x6c
 8012684:	4618      	mov	r0, r3
 8012686:	f7f9 fa29 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	3340      	adds	r3, #64	; 0x40
 801268e:	4618      	mov	r0, r3
 8012690:	f7f9 fa24 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	f7ff ffaa 	bl	80125f0 <_ZN8touchgfx4ViewI16Layout4PresenterED1Ev>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	0802d5b0 	.word	0x0802d5b0

080126ac <_ZN15Layout4ViewBaseD0Ev>:
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f7ff ffbd 	bl	8012634 <_ZN15Layout4ViewBaseD1Ev>
 80126ba:	f246 11c0 	movw	r1, #25024	; 0x61c0
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f018 f839 	bl	802a736 <_ZdlPvj>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4618      	mov	r0, r3
 80126c8:	3708      	adds	r7, #8
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
	...

080126d0 <_ZN15Layout4ViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/layout4_screen/Layout4ViewBase.hpp>
#include <touchgfx/Color.hpp>

Layout4ViewBase::Layout4ViewBase()
 80126d0:	b590      	push	{r4, r7, lr}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af02      	add	r7, sp, #8
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 f8f8 	bl	80128d0 <_ZN8touchgfx4ViewI16Layout4PresenterEC1Ev>
 80126e0:	4a66      	ldr	r2, [pc, #408]	; (801287c <_ZN15Layout4ViewBaseC1Ev+0x1ac>)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	3340      	adds	r3, #64	; 0x40
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f8 fbd2 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	336c      	adds	r3, #108	; 0x6c
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7f8 fbcd 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	3398      	adds	r3, #152	; 0x98
 80126fe:	4618      	mov	r0, r3
 8012700:	f000 fc92 	bl	8013028 <_ZN7SidebarC1Ev>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801270a:	4618      	mov	r0, r3
 801270c:	f000 fc6e 	bl	8012fec <_ZN8OneForthC1Ev>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 8012716:	4618      	mov	r0, r3
 8012718:	f000 fc68 	bl	8012fec <_ZN8OneForthC1Ev>
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	f241 5328 	movw	r3, #5416	; 0x1528
 8012722:	4413      	add	r3, r2
 8012724:	4618      	mov	r0, r3
 8012726:	f000 fc61 	bl	8012fec <_ZN8OneForthC1Ev>
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	f641 5374 	movw	r3, #7540	; 0x1d74
 8012730:	4413      	add	r3, r2
 8012732:	4618      	mov	r0, r3
 8012734:	f000 fc5a 	bl	8012fec <_ZN8OneForthC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 801273e:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8012742:	4618      	mov	r0, r3
 8012744:	f006 f8e8 	bl	8018918 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 1024, 600);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801274e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012758:	2200      	movs	r2, #0
 801275a:	2100      	movs	r1, #0
 801275c:	f7f8 f9b5 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012766:	2200      	movs	r2, #0
 8012768:	2100      	movs	r1, #0
 801276a:	2000      	movs	r0, #0
 801276c:	f7f8 fe0c 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012770:	4603      	mov	r3, r0
 8012772:	4619      	mov	r1, r3
 8012774:	4620      	mov	r0, r4
 8012776:	f7f8 fbb1 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Background.setPosition(0, 0, 1024, 600);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8012780:	f44f 7316 	mov.w	r3, #600	; 0x258
 8012784:	9300      	str	r3, [sp, #0]
 8012786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801278a:	2200      	movs	r2, #0
 801278c:	2100      	movs	r1, #0
 801278e:	f7f8 f99c 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(33, 35, 41));
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8012798:	2229      	movs	r2, #41	; 0x29
 801279a:	2123      	movs	r1, #35	; 0x23
 801279c:	2021      	movs	r0, #33	; 0x21
 801279e:	f7f8 fdf3 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80127a2:	4603      	mov	r3, r0
 80127a4:	4619      	mov	r1, r3
 80127a6:	4620      	mov	r0, r4
 80127a8:	f7f8 fb98 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    sidebar.setXY(0, 0);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	3398      	adds	r3, #152	; 0x98
 80127b0:	2200      	movs	r2, #0
 80127b2:	2100      	movs	r1, #0
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7f8 f9e1 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    oneForth1.setXY(120, 20);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80127c0:	2214      	movs	r2, #20
 80127c2:	2178      	movs	r1, #120	; 0x78
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f8 f9d9 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    oneForth1_2.setXY(570, 310);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 80127d0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80127d4:	f240 213a 	movw	r1, #570	; 0x23a
 80127d8:	4618      	mov	r0, r3
 80127da:	f7f8 f9cf 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    oneForth1_3.setXY(570, 20);
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	f241 5328 	movw	r3, #5416	; 0x1528
 80127e4:	4413      	add	r3, r2
 80127e6:	2214      	movs	r2, #20
 80127e8:	f240 213a 	movw	r1, #570	; 0x23a
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f8 f9c5 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    oneForth1_1.setXY(120, 310);
 80127f2:	687a      	ldr	r2, [r7, #4]
 80127f4:	f641 5374 	movw	r3, #7540	; 0x1d74
 80127f8:	4413      	add	r3, r2
 80127fa:	f44f 729b 	mov.w	r2, #310	; 0x136
 80127fe:	2178      	movs	r1, #120	; 0x78
 8012800:	4618      	mov	r0, r3
 8012802:	f7f8 f9bb 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    add(__background);
 8012806:	687a      	ldr	r2, [r7, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3340      	adds	r3, #64	; 0x40
 801280c:	4619      	mov	r1, r3
 801280e:	4610      	mov	r0, r2
 8012810:	f7ff fd38 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Background);
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	336c      	adds	r3, #108	; 0x6c
 801281a:	4619      	mov	r1, r3
 801281c:	4610      	mov	r0, r2
 801281e:	f7ff fd31 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sidebar);
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	3398      	adds	r3, #152	; 0x98
 8012828:	4619      	mov	r1, r3
 801282a:	4610      	mov	r0, r2
 801282c:	f7ff fd2a 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oneForth1);
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012838:	4619      	mov	r1, r3
 801283a:	4610      	mov	r0, r2
 801283c:	f7ff fd22 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oneForth1_2);
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 8012848:	4619      	mov	r1, r3
 801284a:	4610      	mov	r0, r2
 801284c:	f7ff fd1a 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oneForth1_3);
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	f241 5328 	movw	r3, #5416	; 0x1528
 8012858:	4413      	add	r3, r2
 801285a:	4619      	mov	r1, r3
 801285c:	f7ff fd12 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oneForth1_1);
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	f641 5374 	movw	r3, #7540	; 0x1d74
 8012868:	4413      	add	r3, r2
 801286a:	4619      	mov	r1, r3
 801286c:	f7ff fd0a 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	370c      	adds	r7, #12
 8012876:	46bd      	mov	sp, r7
 8012878:	bd90      	pop	{r4, r7, pc}
 801287a:	bf00      	nop
 801287c:	0802d5b0 	.word	0x0802d5b0

08012880 <_ZN15Layout4ViewBase11setupScreenEv>:

void Layout4ViewBase::setupScreen()
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
    sidebar.initialize();
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3398      	adds	r3, #152	; 0x98
 801288c:	4618      	mov	r0, r3
 801288e:	f000 fbdd 	bl	801304c <_ZN7Sidebar10initializeEv>
    oneForth1.initialize();
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012898:	4618      	mov	r0, r3
 801289a:	f000 fbb9 	bl	8013010 <_ZN8OneForth10initializeEv>
    oneForth1_2.initialize();
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 fbb3 	bl	8013010 <_ZN8OneForth10initializeEv>
    oneForth1_3.initialize();
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	f241 5328 	movw	r3, #5416	; 0x1528
 80128b0:	4413      	add	r3, r2
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 fbac 	bl	8013010 <_ZN8OneForth10initializeEv>
    oneForth1_1.initialize();
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	f641 5374 	movw	r3, #7540	; 0x1d74
 80128be:	4413      	add	r3, r2
 80128c0:	4618      	mov	r0, r3
 80128c2:	f000 fba5 	bl	8013010 <_ZN8OneForth10initializeEv>
}
 80128c6:	bf00      	nop
 80128c8:	3708      	adds	r7, #8
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
	...

080128d0 <_ZN8touchgfx4ViewI16Layout4PresenterEC1Ev>:
    View()
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4618      	mov	r0, r3
 80128dc:	f008 ffd0 	bl	801b880 <_ZN8touchgfx6ScreenC1Ev>
 80128e0:	4a05      	ldr	r2, [pc, #20]	; (80128f8 <_ZN8touchgfx4ViewI16Layout4PresenterEC1Ev+0x28>)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	601a      	str	r2, [r3, #0]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2200      	movs	r2, #0
 80128ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4618      	mov	r0, r3
 80128f0:	3708      	adds	r7, #8
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	0802d5e4 	.word	0x0802d5e4

080128fc <_ZN8touchgfx4ViewI24LayoutSelectionPresenterED1Ev>:
class View : public Screen
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	4a05      	ldr	r2, [pc, #20]	; (801291c <_ZN8touchgfx4ViewI24LayoutSelectionPresenterED1Ev+0x20>)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff fc61 	bl	80121d4 <_ZN8touchgfx6ScreenD1Ev>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	0802d64c 	.word	0x0802d64c

08012920 <_ZN8touchgfx4ViewI24LayoutSelectionPresenterED0Ev>:
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7ff ffe7 	bl	80128fc <_ZN8touchgfx4ViewI24LayoutSelectionPresenterED1Ev>
 801292e:	2140      	movs	r1, #64	; 0x40
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f017 ff00 	bl	802a736 <_ZdlPvj>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <_ZN23LayoutSelectionViewBaseD1Ev>:

class LayoutSelectionViewBase : public touchgfx::View<LayoutSelectionPresenter>
{
public:
    LayoutSelectionViewBase();
    virtual ~LayoutSelectionViewBase() {}
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	4a0d      	ldr	r2, [pc, #52]	; (8012980 <_ZN23LayoutSelectionViewBaseD1Ev+0x40>)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3398      	adds	r3, #152	; 0x98
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff fca6 	bl	80122a4 <_ZN7SidebarD1Ev>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	336c      	adds	r3, #108	; 0x6c
 801295c:	4618      	mov	r0, r3
 801295e:	f7f9 f8bd 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3340      	adds	r3, #64	; 0x40
 8012966:	4618      	mov	r0, r3
 8012968:	f7f9 f8b8 	bl	800badc <_ZN8touchgfx3BoxD1Ev>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff ffc4 	bl	80128fc <_ZN8touchgfx4ViewI24LayoutSelectionPresenterED1Ev>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	4618      	mov	r0, r3
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	0802d618 	.word	0x0802d618

08012984 <_ZN23LayoutSelectionViewBaseD0Ev>:
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff ffd7 	bl	8012940 <_ZN23LayoutSelectionViewBaseD1Ev>
 8012992:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f017 fecd 	bl	802a736 <_ZdlPvj>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4618      	mov	r0, r3
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <_ZN23LayoutSelectionViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/layoutselection_screen/LayoutSelectionViewBase.hpp>
#include <touchgfx/Color.hpp>

LayoutSelectionViewBase::LayoutSelectionViewBase()
 80129a8:	b590      	push	{r4, r7, lr}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af02      	add	r7, sp, #8
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4618      	mov	r0, r3
 80129b4:	f000 f876 	bl	8012aa4 <_ZN8touchgfx4ViewI24LayoutSelectionPresenterEC1Ev>
 80129b8:	4a32      	ldr	r2, [pc, #200]	; (8012a84 <_ZN23LayoutSelectionViewBaseC1Ev+0xdc>)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	601a      	str	r2, [r3, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	3340      	adds	r3, #64	; 0x40
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f8 fa66 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	336c      	adds	r3, #108	; 0x6c
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f8 fa61 	bl	800ae94 <_ZN8touchgfx3BoxC1Ev>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	3398      	adds	r3, #152	; 0x98
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 fb26 	bl	8013028 <_ZN7SidebarC1Ev>
{

    __background.setPosition(0, 0, 1024, 600);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80129e2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129ec:	2200      	movs	r2, #0
 80129ee:	2100      	movs	r1, #0
 80129f0:	f7f8 f86b 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80129fa:	2200      	movs	r2, #0
 80129fc:	2100      	movs	r1, #0
 80129fe:	2000      	movs	r0, #0
 8012a00:	f7f8 fcc2 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012a04:	4603      	mov	r3, r0
 8012a06:	4619      	mov	r1, r3
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7f8 fa67 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Background.setPosition(0, 0, 1024, 600);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8012a14:	f44f 7316 	mov.w	r3, #600	; 0x258
 8012a18:	9300      	str	r3, [sp, #0]
 8012a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2100      	movs	r1, #0
 8012a22:	f7f8 f852 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(33, 35, 41));
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8012a2c:	2229      	movs	r2, #41	; 0x29
 8012a2e:	2123      	movs	r1, #35	; 0x23
 8012a30:	2021      	movs	r0, #33	; 0x21
 8012a32:	f7f8 fca9 	bl	800b388 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012a36:	4603      	mov	r3, r0
 8012a38:	4619      	mov	r1, r3
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f7f8 fa4e 	bl	800aedc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    sidebar.setXY(0, 0);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3398      	adds	r3, #152	; 0x98
 8012a44:	2200      	movs	r2, #0
 8012a46:	2100      	movs	r1, #0
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f8 f897 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>

    add(__background);
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3340      	adds	r3, #64	; 0x40
 8012a54:	4619      	mov	r1, r3
 8012a56:	4610      	mov	r0, r2
 8012a58:	f7ff fc14 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Background);
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	336c      	adds	r3, #108	; 0x6c
 8012a62:	4619      	mov	r1, r3
 8012a64:	4610      	mov	r0, r2
 8012a66:	f7ff fc0d 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sidebar);
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3398      	adds	r3, #152	; 0x98
 8012a70:	4619      	mov	r1, r3
 8012a72:	4610      	mov	r0, r2
 8012a74:	f7ff fc06 	bl	8012284 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd90      	pop	{r4, r7, pc}
 8012a82:	bf00      	nop
 8012a84:	0802d618 	.word	0x0802d618

08012a88 <_ZN23LayoutSelectionViewBase11setupScreenEv>:

void LayoutSelectionViewBase::setupScreen()
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
    sidebar.initialize();
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	3398      	adds	r3, #152	; 0x98
 8012a94:	4618      	mov	r0, r3
 8012a96:	f000 fad9 	bl	801304c <_ZN7Sidebar10initializeEv>
}
 8012a9a:	bf00      	nop
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
	...

08012aa4 <_ZN8touchgfx4ViewI24LayoutSelectionPresenterEC1Ev>:
    View()
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f008 fee6 	bl	801b880 <_ZN8touchgfx6ScreenC1Ev>
 8012ab4:	4a05      	ldr	r2, [pc, #20]	; (8012acc <_ZN8touchgfx4ViewI24LayoutSelectionPresenterEC1Ev+0x28>)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	601a      	str	r2, [r3, #0]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2200      	movs	r2, #0
 8012abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3708      	adds	r7, #8
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	0802d64c 	.word	0x0802d64c

08012ad0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012ad4:	4b02      	ldr	r3, [pc, #8]	; (8012ae0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr
 8012ae0:	0802d678 	.word	0x0802d678

08012ae4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012ae8:	2315      	movs	r3, #21
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	460b      	mov	r3, r1
 8012afe:	607a      	str	r2, [r7, #4]
 8012b00:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8012b02:	2300      	movs	r3, #0
    }
 8012b04:	4618      	mov	r0, r3
 8012b06:	3714      	adds	r7, #20
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012b10:	b480      	push	{r7}
 8012b12:	b083      	sub	sp, #12
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012b18:	2300      	movs	r3, #0
    }
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr
	...

08012b28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012b28:	b480      	push	{r7}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	4613      	mov	r3, r2
 8012b34:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012b36:	4a07      	ldr	r2, [pc, #28]	; (8012b54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012b3c:	4a06      	ldr	r2, [pc, #24]	; (8012b58 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012b42:	4a06      	ldr	r2, [pc, #24]	; (8012b5c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012b44:	88fb      	ldrh	r3, [r7, #6]
 8012b46:	8013      	strh	r3, [r2, #0]
    }
 8012b48:	bf00      	nop
 8012b4a:	3714      	adds	r7, #20
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr
 8012b54:	20014ba4 	.word	0x20014ba4
 8012b58:	20014bac 	.word	0x20014bac
 8012b5c:	20014ba8 	.word	0x20014ba8

08012b60 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012b60:	b40e      	push	{r1, r2, r3}
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b085      	sub	sp, #20
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012b6a:	f107 0320 	add.w	r3, r7, #32
 8012b6e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	69fa      	ldr	r2, [r7, #28]
 8012b74:	2100      	movs	r1, #0
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f008 f98e 	bl	801ae98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012b80:	89fb      	ldrh	r3, [r7, #14]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3714      	adds	r7, #20
 8012b86:	46bd      	mov	sp, r7
 8012b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b8c:	b003      	add	sp, #12
 8012b8e:	4770      	bx	lr

08012b90 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012b90:	b40c      	push	{r2, r3}
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b084      	sub	sp, #16
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012b9e:	f107 031c 	add.w	r3, r7, #28
 8012ba2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012ba4:	78f9      	ldrb	r1, [r7, #3]
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	69ba      	ldr	r2, [r7, #24]
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f008 f974 	bl	801ae98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012bb4:	89fb      	ldrh	r3, [r7, #14]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3710      	adds	r7, #16
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bc0:	b002      	add	sp, #8
 8012bc2:	4770      	bx	lr

08012bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b08a      	sub	sp, #40	; 0x28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d016      	beq.n	8012c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	331a      	adds	r3, #26
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	8adb      	ldrh	r3, [r3, #22]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d105      	bne.n	8012bf2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8012be6:	4b43      	ldr	r3, [pc, #268]	; (8012cf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012be8:	4a43      	ldr	r2, [pc, #268]	; (8012cf8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012bea:	21c0      	movs	r1, #192	; 0xc0
 8012bec:	4843      	ldr	r0, [pc, #268]	; (8012cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012bee:	f017 fdd1 	bl	802a794 <__assert_func>
            return buffer[pos];
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	8a9b      	ldrh	r3, [r3, #20]
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d001      	beq.n	8012c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012c02:	2301      	movs	r3, #1
 8012c04:	e000      	b.n	8012c08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8012c06:	2300      	movs	r3, #0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d06a      	beq.n	8012ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f009 fd0b 	bl	801c628 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	331a      	adds	r3, #26
 8012c16:	623b      	str	r3, [r7, #32]
 8012c18:	2301      	movs	r3, #1
 8012c1a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8012c1c:	6a3b      	ldr	r3, [r7, #32]
 8012c1e:	8adb      	ldrh	r3, [r3, #22]
 8012c20:	8bfa      	ldrh	r2, [r7, #30]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d305      	bcc.n	8012c32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012c26:	4b36      	ldr	r3, [pc, #216]	; (8012d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8012c28:	4a36      	ldr	r2, [pc, #216]	; (8012d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012c2a:	21c5      	movs	r1, #197	; 0xc5
 8012c2c:	4833      	ldr	r0, [pc, #204]	; (8012cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012c2e:	f017 fdb1 	bl	802a794 <__assert_func>
            const uint16_t index = pos + offset;
 8012c32:	6a3b      	ldr	r3, [r7, #32]
 8012c34:	8a9a      	ldrh	r2, [r3, #20]
 8012c36:	8bfb      	ldrh	r3, [r7, #30]
 8012c38:	4413      	add	r3, r2
 8012c3a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8012c3c:	8bbb      	ldrh	r3, [r7, #28]
 8012c3e:	2b09      	cmp	r3, #9
 8012c40:	d801      	bhi.n	8012c46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012c42:	8bbb      	ldrh	r3, [r7, #28]
 8012c44:	e001      	b.n	8012c4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012c46:	8bbb      	ldrh	r3, [r7, #28]
 8012c48:	3b0a      	subs	r3, #10
 8012c4a:	6a3a      	ldr	r2, [r7, #32]
 8012c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c50:	f640 123f 	movw	r2, #2367	; 0x93f
 8012c54:	4293      	cmp	r3, r2
 8012c56:	bf0c      	ite	eq
 8012c58:	2301      	moveq	r3, #1
 8012c5a:	2300      	movne	r3, #0
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d03f      	beq.n	8012ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	331a      	adds	r3, #26
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	321a      	adds	r2, #26
 8012c6a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012c6c:	68ba      	ldr	r2, [r7, #8]
 8012c6e:	8ad2      	ldrh	r2, [r2, #22]
 8012c70:	2a00      	cmp	r2, #0
 8012c72:	d105      	bne.n	8012c80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012c74:	4b1f      	ldr	r3, [pc, #124]	; (8012cf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012c76:	4a20      	ldr	r2, [pc, #128]	; (8012cf8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012c78:	21c0      	movs	r1, #192	; 0xc0
 8012c7a:	4820      	ldr	r0, [pc, #128]	; (8012cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012c7c:	f017 fd8a 	bl	802a794 <__assert_func>
            return buffer[pos];
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	8a92      	ldrh	r2, [r2, #20]
 8012c84:	4611      	mov	r1, r2
 8012c86:	68ba      	ldr	r2, [r7, #8]
 8012c88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012c8c:	613b      	str	r3, [r7, #16]
 8012c8e:	4613      	mov	r3, r2
 8012c90:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	8adb      	ldrh	r3, [r3, #22]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d806      	bhi.n	8012ca8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012c9a:	4b1b      	ldr	r3, [pc, #108]	; (8012d08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012c9c:	4a1b      	ldr	r2, [pc, #108]	; (8012d0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8012c9e:	f240 110d 	movw	r1, #269	; 0x10d
 8012ca2:	4816      	ldr	r0, [pc, #88]	; (8012cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012ca4:	f017 fd76 	bl	802a794 <__assert_func>
            const uint16_t index = pos + 1;
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	8a9b      	ldrh	r3, [r3, #20]
 8012cac:	3301      	adds	r3, #1
 8012cae:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012cb0:	89bb      	ldrh	r3, [r7, #12]
 8012cb2:	2b09      	cmp	r3, #9
 8012cb4:	d801      	bhi.n	8012cba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8012cb6:	89bb      	ldrh	r3, [r7, #12]
 8012cb8:	e000      	b.n	8012cbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	693a      	ldr	r2, [r7, #16]
 8012cbe:	89f9      	ldrh	r1, [r7, #14]
 8012cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8012cc4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	331a      	adds	r3, #26
 8012cca:	61bb      	str	r3, [r7, #24]
 8012ccc:	f640 133f 	movw	r3, #2367	; 0x93f
 8012cd0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	8a9b      	ldrh	r3, [r3, #20]
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	8afa      	ldrh	r2, [r7, #22]
 8012cdc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8012ce0:	bf00      	nop
        }
    }
    return getNextChar();
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f009 fb84 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012ce8:	4603      	mov	r3, r0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3728      	adds	r7, #40	; 0x28
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0802c12c 	.word	0x0802c12c
 8012cf8:	0802c138 	.word	0x0802c138
 8012cfc:	0802c1e4 	.word	0x0802c1e4
 8012d00:	0802c22c 	.word	0x0802c22c
 8012d04:	0802c23c 	.word	0x0802c23c
 8012d08:	0802c310 	.word	0x0802c310
 8012d0c:	0802c31c 	.word	0x0802c31c

08012d10 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f009 fb23 	bl	801c364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8012d1e:	bf00      	nop
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b088      	sub	sp, #32
 8012d2a:	af02      	add	r7, sp, #8
 8012d2c:	60f8      	str	r0, [r7, #12]
 8012d2e:	1d38      	adds	r0, r7, #4
 8012d30:	e880 0006 	stmia.w	r0, {r1, r2}
 8012d34:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8012d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d3a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8012d3c:	1d39      	adds	r1, r7, #4
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	9301      	str	r3, [sp, #4]
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	9300      	str	r3, [sp, #0]
 8012d46:	6a3b      	ldr	r3, [r7, #32]
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	68f8      	ldr	r0, [r7, #12]
 8012d4c:	f006 fe30 	bl	80199b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8012d50:	bf00      	nop
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012d58:	b590      	push	{r4, r7, lr}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	4603      	mov	r3, r0
 8012d60:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012d62:	2300      	movs	r3, #0
 8012d64:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012d66:	88fb      	ldrh	r3, [r7, #6]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d127      	bne.n	8012dbc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012d6c:	88fb      	ldrh	r3, [r7, #6]
 8012d6e:	4a1e      	ldr	r2, [pc, #120]	; (8012de8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d016      	beq.n	8012da6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012d78:	88fb      	ldrh	r3, [r7, #6]
 8012d7a:	4a1b      	ldr	r2, [pc, #108]	; (8012de8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d80:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	68ba      	ldr	r2, [r7, #8]
 8012d88:	4413      	add	r3, r2
 8012d8a:	4a18      	ldr	r2, [pc, #96]	; (8012dec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012d8c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	68ba      	ldr	r2, [r7, #8]
 8012d94:	4413      	add	r3, r2
 8012d96:	4a16      	ldr	r2, [pc, #88]	; (8012df0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012d98:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	689b      	ldr	r3, [r3, #8]
 8012d9e:	68ba      	ldr	r2, [r7, #8]
 8012da0:	4413      	add	r3, r2
 8012da2:	60fb      	str	r3, [r7, #12]
 8012da4:	e00a      	b.n	8012dbc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012da6:	4b11      	ldr	r3, [pc, #68]	; (8012dec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012da8:	4a12      	ldr	r2, [pc, #72]	; (8012df4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012daa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012dac:	4a12      	ldr	r2, [pc, #72]	; (8012df8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012dae:	4b10      	ldr	r3, [pc, #64]	; (8012df0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012db0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012db2:	88fb      	ldrh	r3, [r7, #6]
 8012db4:	4a11      	ldr	r2, [pc, #68]	; (8012dfc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dba:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00d      	beq.n	8012dde <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012dc2:	4a0f      	ldr	r2, [pc, #60]	; (8012e00 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012dc4:	88fb      	ldrh	r3, [r7, #6]
 8012dc6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012dc8:	f000 f83e 	bl	8012e48 <_ZN17TypedTextDatabase8getFontsEv>
 8012dcc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012dce:	f000 f833 	bl	8012e38 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f7ff fea5 	bl	8012b28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012dde:	bf00      	nop
 8012de0:	3714      	adds	r7, #20
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd90      	pop	{r4, r7, pc}
 8012de6:	bf00      	nop
 8012de8:	2000d810 	.word	0x2000d810
 8012dec:	2000d818 	.word	0x2000d818
 8012df0:	2000d81c 	.word	0x2000d81c
 8012df4:	0805fb60 	.word	0x0805fb60
 8012df8:	0805faf4 	.word	0x0805faf4
 8012dfc:	0805fbec 	.word	0x0805fbec
 8012e00:	2000d814 	.word	0x2000d814

08012e04 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012e10:	4b07      	ldr	r3, [pc, #28]	; (8012e30 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	4b07      	ldr	r3, [pc, #28]	; (8012e34 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012e16:	6819      	ldr	r1, [r3, #0]
 8012e18:	887b      	ldrh	r3, [r7, #2]
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	440b      	add	r3, r1
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4413      	add	r3, r2
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	370c      	adds	r7, #12
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr
 8012e30:	2000d818 	.word	0x2000d818
 8012e34:	2000d81c 	.word	0x2000d81c

08012e38 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012e38:	b480      	push	{r7}
 8012e3a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012e3c:	231b      	movs	r3, #27
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr

08012e48 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012e48:	b480      	push	{r7}
 8012e4a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012e4c:	4b02      	ldr	r3, [pc, #8]	; (8012e58 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr
 8012e58:	2000d820 	.word	0x2000d820

08012e5c <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_arial_70_2bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	6039      	str	r1, [r7, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d118      	bne.n	8012e9e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d113      	bne.n	8012e9e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_arial_20_2bpp()),
 8012e76:	f7f6 fc09 	bl	800968c <_Z21getFont_arial_20_2bppv>
 8012e7a:	4603      	mov	r3, r0
};
 8012e7c:	4a0a      	ldr	r2, [pc, #40]	; (8012ea8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012e7e:	6013      	str	r3, [r2, #0]
    &(getFont_arial_30_2bpp()),
 8012e80:	f7f6 fc58 	bl	8009734 <_Z21getFont_arial_30_2bppv>
 8012e84:	4603      	mov	r3, r0
};
 8012e86:	4a08      	ldr	r2, [pc, #32]	; (8012ea8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012e88:	6053      	str	r3, [r2, #4]
    &(getFont_arial_10_2bpp()),
 8012e8a:	f7f6 fbab 	bl	80095e4 <_Z21getFont_arial_10_2bppv>
 8012e8e:	4603      	mov	r3, r0
};
 8012e90:	4a05      	ldr	r2, [pc, #20]	; (8012ea8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012e92:	6093      	str	r3, [r2, #8]
    &(getFont_arial_70_2bpp())
 8012e94:	f7f6 fca2 	bl	80097dc <_Z21getFont_arial_70_2bppv>
 8012e98:	4603      	mov	r3, r0
};
 8012e9a:	4a03      	ldr	r2, [pc, #12]	; (8012ea8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012e9c:	60d3      	str	r3, [r2, #12]
}  // namespace TypedTextDatabase
 8012e9e:	bf00      	nop
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	2000d820 	.word	0x2000d820

08012eac <_GLOBAL__sub_I_touchgfx_fonts>:
 8012eac:	b580      	push	{r7, lr}
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012eb4:	2001      	movs	r0, #1
 8012eb6:	f7ff ffd1 	bl	8012e5c <_Z41__static_initialization_and_destruction_0ii>
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	4a05      	ldr	r2, [pc, #20]	; (8012edc <_ZN19FrontendApplicationD1Ev+0x20>)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	601a      	str	r2, [r3, #0]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f6 fec7 	bl	8009c60 <_ZN23FrontendApplicationBaseD1Ev>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	0802d874 	.word	0x0802d874

08012ee0 <_ZN19FrontendApplicationD0Ev>:
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7ff ffe7 	bl	8012ebc <_ZN19FrontendApplicationD1Ev>
 8012eee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f017 fc1f 	bl	802a736 <_ZdlPvj>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	3708      	adds	r7, #8
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012f02:	b580      	push	{r7, lr}
 8012f04:	b082      	sub	sp, #8
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012f10:	4618      	mov	r0, r3
 8012f12:	f000 fb4f 	bl	80135b4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f007 f891 	bl	801a040 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012f1e:	bf00      	nop
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
	...

08012f28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	68b9      	ldr	r1, [r7, #8]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7f6 fed4 	bl	8009ce8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012f40:	4a03      	ldr	r2, [pc, #12]	; (8012f50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	601a      	str	r2, [r3, #0]
{

}
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3710      	adds	r7, #16
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	0802d874 	.word	0x0802d874

08012f54 <_ZN8HalfVertC1Ev>:
#include <gui/containers/HalfVert.hpp>

HalfVert::HalfVert()
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7f8 ffda 	bl	800bf18 <_ZN12HalfVertBaseC1Ev>
 8012f64:	4a03      	ldr	r2, [pc, #12]	; (8012f74 <_ZN8HalfVertC1Ev+0x20>)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	601a      	str	r2, [r3, #0]
{

}
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3708      	adds	r7, #8
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	0802d8b8 	.word	0x0802d8b8

08012f78 <_ZN8HalfVert10initializeEv>:

void HalfVert::initialize()
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
    HalfVertBase::initialize();
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fc f90c 	bl	800f1a0 <_ZN12HalfVertBase10initializeEv>
}
 8012f88:	bf00      	nop
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <_ZN8HalfVert11PowerToggleEv>:

void HalfVert::PowerToggle(){
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af02      	add	r7, sp, #8
 8012f96:	6078      	str	r0, [r7, #4]
	if(Power.getPressed()){
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	f241 0384 	movw	r3, #4228	; 0x1084
 8012f9e:	4413      	add	r3, r2
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f8 fbb5 	bl	800b710 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00d      	beq.n	8012fc8 <_ZN8HalfVert11PowerToggleEv+0x38>
		uint8_t I2CTransmit[2] = {0x01,255};
 8012fac:	f64f 7301 	movw	r3, #65281	; 0xff01
 8012fb0:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Master_Transmit(&hi2c4,0x20,I2CTransmit,2,HAL_MAX_DELAY);
 8012fb2:	f107 020c 	add.w	r2, r7, #12
 8012fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	2120      	movs	r1, #32
 8012fc0:	4809      	ldr	r0, [pc, #36]	; (8012fe8 <_ZN8HalfVert11PowerToggleEv+0x58>)
 8012fc2:	f7ef f99f 	bl	8002304 <HAL_I2C_Master_Transmit>
	}else{
		uint8_t I2CTransmit[2] = {0x01,0};
		HAL_I2C_Master_Transmit(&hi2c4,0x20,I2CTransmit,2,HAL_MAX_DELAY);
	}
}
 8012fc6:	e00b      	b.n	8012fe0 <_ZN8HalfVert11PowerToggleEv+0x50>
		uint8_t I2CTransmit[2] = {0x01,0};
 8012fc8:	2301      	movs	r3, #1
 8012fca:	813b      	strh	r3, [r7, #8]
		HAL_I2C_Master_Transmit(&hi2c4,0x20,I2CTransmit,2,HAL_MAX_DELAY);
 8012fcc:	f107 0208 	add.w	r2, r7, #8
 8012fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	2120      	movs	r1, #32
 8012fda:	4803      	ldr	r0, [pc, #12]	; (8012fe8 <_ZN8HalfVert11PowerToggleEv+0x58>)
 8012fdc:	f7ef f992 	bl	8002304 <HAL_I2C_Master_Transmit>
}
 8012fe0:	bf00      	nop
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	20014e3c 	.word	0x20014e3c

08012fec <_ZN8OneForthC1Ev>:
#include <gui/containers/OneForth.hpp>

OneForth::OneForth()
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7fd fb88 	bl	801070c <_ZN12OneForthBaseC1Ev>
 8012ffc:	4a03      	ldr	r2, [pc, #12]	; (801300c <_ZN8OneForthC1Ev+0x20>)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	601a      	str	r2, [r3, #0]
{

}
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	0802d954 	.word	0x0802d954

08013010 <_ZN8OneForth10initializeEv>:

void OneForth::initialize()
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
    OneForthBase::initialize();
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	f7fe fc1a 	bl	8011854 <_ZN12OneForthBase10initializeEv>
}
 8013020:	bf00      	nop
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN7SidebarC1Ev>:
#include <gui/containers/Sidebar.hpp>

Sidebar::Sidebar()
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	4618      	mov	r0, r3
 8013034:	f7fe fd4c 	bl	8011ad0 <_ZN11SidebarBaseC1Ev>
 8013038:	4a03      	ldr	r2, [pc, #12]	; (8013048 <_ZN7SidebarC1Ev+0x20>)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	601a      	str	r2, [r3, #0]
{

}
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	0802d9e0 	.word	0x0802d9e0

0801304c <_ZN7Sidebar10initializeEv>:

void Sidebar::initialize()
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
    SidebarBase::initialize();
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	4618      	mov	r0, r3
 8013058:	f7fe fff8 	bl	801204c <_ZN11SidebarBase10initializeEv>
}
 801305c:	bf00      	nop
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
    {
    }
 801306c:	bf00      	nop
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr

08013078 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
    {
    }
 8013080:	bf00      	nop
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr

0801308c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801308c:	b480      	push	{r7}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
    {
 8013094:	4a04      	ldr	r2, [pc, #16]	; (80130a8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	601a      	str	r2, [r3, #0]
    }
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4618      	mov	r0, r3
 801309e:	370c      	adds	r7, #12
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr
 80130a8:	0802daa4 	.word	0x0802daa4

080130ac <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
    }
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7ff ffe9 	bl	801308c <_ZN8touchgfx9PresenterD1Ev>
 80130ba:	2104      	movs	r1, #4
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f017 fb3a 	bl	802a736 <_ZdlPvj>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4618      	mov	r0, r3
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
    {
 80130d4:	4a04      	ldr	r2, [pc, #16]	; (80130e8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	601a      	str	r2, [r3, #0]
    }
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4618      	mov	r0, r3
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	0802daa4 	.word	0x0802daa4

080130ec <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	4a06      	ldr	r2, [pc, #24]	; (8013110 <_ZN13ModelListenerC1Ev+0x24>)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	605a      	str	r2, [r3, #4]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	0802da94 	.word	0x0802da94

08013114 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	4a04      	ldr	r2, [pc, #16]	; (8013130 <_ZN13ModelListenerD1Ev+0x1c>)
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	4618      	mov	r0, r3
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr
 8013130:	0802da94 	.word	0x0802da94

08013134 <_ZN13ModelListenerD0Ev>:
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f7ff ffe9 	bl	8013114 <_ZN13ModelListenerD1Ev>
 8013142:	2108      	movs	r1, #8
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f017 faf6 	bl	802a736 <_ZdlPvj>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	4618      	mov	r0, r3
 801314e:	3708      	adds	r7, #8
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <_ZN16Layout2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Layout2Presenter() {};
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	4a09      	ldr	r2, [pc, #36]	; (8013184 <_ZN16Layout2PresenterD1Ev+0x30>)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	4a09      	ldr	r2, [pc, #36]	; (8013188 <_ZN16Layout2PresenterD1Ev+0x34>)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	605a      	str	r2, [r3, #4]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	3304      	adds	r3, #4
 801316c:	4618      	mov	r0, r3
 801316e:	f7ff ffd1 	bl	8013114 <_ZN13ModelListenerD1Ev>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff ff89 	bl	801308c <_ZN8touchgfx9PresenterD1Ev>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4618      	mov	r0, r3
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	0802da6c 	.word	0x0802da6c
 8013188:	0802da84 	.word	0x0802da84

0801318c <_ZThn4_N16Layout2PresenterD1Ev>:
 801318c:	f1a0 0004 	sub.w	r0, r0, #4
 8013190:	e7e0      	b.n	8013154 <_ZN16Layout2PresenterD1Ev>
 8013192:	bf00      	nop

08013194 <_ZN16Layout2PresenterD0Ev>:
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ff ffd9 	bl	8013154 <_ZN16Layout2PresenterD1Ev>
 80131a2:	2110      	movs	r1, #16
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f017 fac6 	bl	802a736 <_ZdlPvj>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4618      	mov	r0, r3
 80131ae:	3708      	adds	r7, #8
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}

080131b4 <_ZThn4_N16Layout2PresenterD0Ev>:
 80131b4:	f1a0 0004 	sub.w	r0, r0, #4
 80131b8:	e7ec      	b.n	8013194 <_ZN16Layout2PresenterD0Ev>
	...

080131bc <_ZN16Layout2PresenterC1ER11Layout2View>:
#include <gui/layout2_screen/Layout2View.hpp>
#include <gui/layout2_screen/Layout2Presenter.hpp>

Layout2Presenter::Layout2Presenter(Layout2View& v)
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
    : view(v)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff ff7f 	bl	80130cc <_ZN8touchgfx9PresenterC1Ev>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3304      	adds	r3, #4
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7ff ff8a 	bl	80130ec <_ZN13ModelListenerC1Ev>
 80131d8:	4a06      	ldr	r2, [pc, #24]	; (80131f4 <_ZN16Layout2PresenterC1ER11Layout2View+0x38>)
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	601a      	str	r2, [r3, #0]
 80131de:	4a06      	ldr	r2, [pc, #24]	; (80131f8 <_ZN16Layout2PresenterC1ER11Layout2View+0x3c>)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	605a      	str	r2, [r3, #4]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	683a      	ldr	r2, [r7, #0]
 80131e8:	60da      	str	r2, [r3, #12]
{

}
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	0802da6c 	.word	0x0802da6c
 80131f8:	0802da84 	.word	0x0802da84

080131fc <_ZN16Layout2Presenter8activateEv>:

void Layout2Presenter::activate()
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]

}
 8013204:	bf00      	nop
 8013206:	370c      	adds	r7, #12
 8013208:	46bd      	mov	sp, r7
 801320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320e:	4770      	bx	lr

08013210 <_ZN16Layout2Presenter10deactivateEv>:

void Layout2Presenter::deactivate()
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]

}
 8013218:	bf00      	nop
 801321a:	370c      	adds	r7, #12
 801321c:	46bd      	mov	sp, r7
 801321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013222:	4770      	bx	lr

08013224 <_ZN11Layout2ViewD1Ev>:

class Layout2View : public Layout2ViewBase
{
public:
    Layout2View();
    virtual ~Layout2View() {}
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	4a05      	ldr	r2, [pc, #20]	; (8013244 <_ZN11Layout2ViewD1Ev+0x20>)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	601a      	str	r2, [r3, #0]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	4618      	mov	r0, r3
 8013236:	f7ff f89f 	bl	8012378 <_ZN15Layout2ViewBaseD1Ev>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	0802dabc 	.word	0x0802dabc

08013248 <_ZN11Layout2ViewD0Ev>:
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7ff ffe7 	bl	8013224 <_ZN11Layout2ViewD1Ev>
 8013256:	f246 4128 	movw	r1, #25640	; 0x6428
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f017 fa6b 	bl	802a736 <_ZdlPvj>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	4618      	mov	r0, r3
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
	...

0801326c <_ZN11Layout2ViewC1Ev>:
#include <gui/layout2_screen/Layout2View.hpp>

Layout2View::Layout2View()
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff f8be 	bl	80123f8 <_ZN15Layout2ViewBaseC1Ev>
 801327c:	4a03      	ldr	r2, [pc, #12]	; (801328c <_ZN11Layout2ViewC1Ev+0x20>)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	601a      	str	r2, [r3, #0]
{

}
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	4618      	mov	r0, r3
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	0802dabc 	.word	0x0802dabc

08013290 <_ZN11Layout2View11setupScreenEv>:

void Layout2View::setupScreen()
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
    Layout2ViewBase::setupScreen();
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff f954 	bl	8012548 <_ZN15Layout2ViewBase11setupScreenEv>
}
 80132a0:	bf00      	nop
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZN11Layout2View14tearDownScreenEv>:

void Layout2View::tearDownScreen()
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
    Layout2ViewBase::tearDownScreen();
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fe ffc6 	bl	8012244 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80132b8:	bf00      	nop
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <_ZN16Layout4PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Layout4Presenter() {};
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	4a09      	ldr	r2, [pc, #36]	; (80132f0 <_ZN16Layout4PresenterD1Ev+0x30>)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	4a09      	ldr	r2, [pc, #36]	; (80132f4 <_ZN16Layout4PresenterD1Ev+0x34>)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	605a      	str	r2, [r3, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	3304      	adds	r3, #4
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff ff1b 	bl	8013114 <_ZN13ModelListenerD1Ev>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff fed3 	bl	801308c <_ZN8touchgfx9PresenterD1Ev>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	0802daf0 	.word	0x0802daf0
 80132f4:	0802db08 	.word	0x0802db08

080132f8 <_ZThn4_N16Layout4PresenterD1Ev>:
 80132f8:	f1a0 0004 	sub.w	r0, r0, #4
 80132fc:	e7e0      	b.n	80132c0 <_ZN16Layout4PresenterD1Ev>
 80132fe:	bf00      	nop

08013300 <_ZN16Layout4PresenterD0Ev>:
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7ff ffd9 	bl	80132c0 <_ZN16Layout4PresenterD1Ev>
 801330e:	2110      	movs	r1, #16
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f017 fa10 	bl	802a736 <_ZdlPvj>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_ZThn4_N16Layout4PresenterD0Ev>:
 8013320:	f1a0 0004 	sub.w	r0, r0, #4
 8013324:	e7ec      	b.n	8013300 <_ZN16Layout4PresenterD0Ev>
	...

08013328 <_ZN16Layout4PresenterC1ER11Layout4View>:
#include <gui/layout4_screen/Layout4View.hpp>
#include <gui/layout4_screen/Layout4Presenter.hpp>

Layout4Presenter::Layout4Presenter(Layout4View& v)
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
    : view(v)
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	4618      	mov	r0, r3
 8013336:	f7ff fec9 	bl	80130cc <_ZN8touchgfx9PresenterC1Ev>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	3304      	adds	r3, #4
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff fed4 	bl	80130ec <_ZN13ModelListenerC1Ev>
 8013344:	4a06      	ldr	r2, [pc, #24]	; (8013360 <_ZN16Layout4PresenterC1ER11Layout4View+0x38>)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	4a06      	ldr	r2, [pc, #24]	; (8013364 <_ZN16Layout4PresenterC1ER11Layout4View+0x3c>)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	605a      	str	r2, [r3, #4]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	683a      	ldr	r2, [r7, #0]
 8013354:	60da      	str	r2, [r3, #12]
{

}
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4618      	mov	r0, r3
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	0802daf0 	.word	0x0802daf0
 8013364:	0802db08 	.word	0x0802db08

08013368 <_ZN16Layout4Presenter8activateEv>:

void Layout4Presenter::activate()
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]

}
 8013370:	bf00      	nop
 8013372:	370c      	adds	r7, #12
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <_ZN16Layout4Presenter10deactivateEv>:

void Layout4Presenter::deactivate()
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]

}
 8013384:	bf00      	nop
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <_ZN11Layout4ViewD1Ev>:

class Layout4View : public Layout4ViewBase
{
public:
    Layout4View();
    virtual ~Layout4View() {}
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	4a05      	ldr	r2, [pc, #20]	; (80133b0 <_ZN11Layout4ViewD1Ev+0x20>)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	601a      	str	r2, [r3, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7ff f947 	bl	8012634 <_ZN15Layout4ViewBaseD1Ev>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	0802db18 	.word	0x0802db18

080133b4 <_ZN11Layout4ViewD0Ev>:
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7ff ffe7 	bl	8013390 <_ZN11Layout4ViewD1Ev>
 80133c2:	f246 11c0 	movw	r1, #25024	; 0x61c0
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f017 f9b5 	bl	802a736 <_ZdlPvj>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	4618      	mov	r0, r3
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
	...

080133d8 <_ZN11Layout4ViewC1Ev>:
#include <gui/layout4_screen/Layout4View.hpp>

Layout4View::Layout4View()
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff f974 	bl	80126d0 <_ZN15Layout4ViewBaseC1Ev>
 80133e8:	4a03      	ldr	r2, [pc, #12]	; (80133f8 <_ZN11Layout4ViewC1Ev+0x20>)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	601a      	str	r2, [r3, #0]
{

}
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	4618      	mov	r0, r3
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	0802db18 	.word	0x0802db18

080133fc <_ZN11Layout4View11setupScreenEv>:

void Layout4View::setupScreen()
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
    Layout4ViewBase::setupScreen();
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff fa3a 	bl	8012880 <_ZN15Layout4ViewBase11setupScreenEv>
}
 801340c:	bf00      	nop
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <_ZN11Layout4View14tearDownScreenEv>:

void Layout4View::tearDownScreen()
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
    Layout4ViewBase::tearDownScreen();
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	4618      	mov	r0, r3
 8013420:	f7fe ff10 	bl	8012244 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013424:	bf00      	nop
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <_ZN24LayoutSelectionPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~LayoutSelectionPresenter() {};
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	4a09      	ldr	r2, [pc, #36]	; (801345c <_ZN24LayoutSelectionPresenterD1Ev+0x30>)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	4a09      	ldr	r2, [pc, #36]	; (8013460 <_ZN24LayoutSelectionPresenterD1Ev+0x34>)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	605a      	str	r2, [r3, #4]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3304      	adds	r3, #4
 8013444:	4618      	mov	r0, r3
 8013446:	f7ff fe65 	bl	8013114 <_ZN13ModelListenerD1Ev>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff fe1d 	bl	801308c <_ZN8touchgfx9PresenterD1Ev>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	3708      	adds	r7, #8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	0802db4c 	.word	0x0802db4c
 8013460:	0802db64 	.word	0x0802db64

08013464 <_ZThn4_N24LayoutSelectionPresenterD1Ev>:
 8013464:	f1a0 0004 	sub.w	r0, r0, #4
 8013468:	e7e0      	b.n	801342c <_ZN24LayoutSelectionPresenterD1Ev>
 801346a:	bf00      	nop

0801346c <_ZN24LayoutSelectionPresenterD0Ev>:
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7ff ffd9 	bl	801342c <_ZN24LayoutSelectionPresenterD1Ev>
 801347a:	2110      	movs	r1, #16
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f017 f95a 	bl	802a736 <_ZdlPvj>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4618      	mov	r0, r3
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <_ZThn4_N24LayoutSelectionPresenterD0Ev>:
 801348c:	f1a0 0004 	sub.w	r0, r0, #4
 8013490:	e7ec      	b.n	801346c <_ZN24LayoutSelectionPresenterD0Ev>
	...

08013494 <_ZN24LayoutSelectionPresenterC1ER19LayoutSelectionView>:
#include <gui/layoutselection_screen/LayoutSelectionView.hpp>
#include <gui/layoutselection_screen/LayoutSelectionPresenter.hpp>

LayoutSelectionPresenter::LayoutSelectionPresenter(LayoutSelectionView& v)
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	6039      	str	r1, [r7, #0]
    : view(v)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7ff fe13 	bl	80130cc <_ZN8touchgfx9PresenterC1Ev>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	3304      	adds	r3, #4
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ff fe1e 	bl	80130ec <_ZN13ModelListenerC1Ev>
 80134b0:	4a06      	ldr	r2, [pc, #24]	; (80134cc <_ZN24LayoutSelectionPresenterC1ER19LayoutSelectionView+0x38>)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	4a06      	ldr	r2, [pc, #24]	; (80134d0 <_ZN24LayoutSelectionPresenterC1ER19LayoutSelectionView+0x3c>)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	605a      	str	r2, [r3, #4]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	683a      	ldr	r2, [r7, #0]
 80134c0:	60da      	str	r2, [r3, #12]
{

}
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	0802db4c 	.word	0x0802db4c
 80134d0:	0802db64 	.word	0x0802db64

080134d4 <_ZN24LayoutSelectionPresenter8activateEv>:

void LayoutSelectionPresenter::activate()
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]

}
 80134dc:	bf00      	nop
 80134de:	370c      	adds	r7, #12
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr

080134e8 <_ZN24LayoutSelectionPresenter10deactivateEv>:

void LayoutSelectionPresenter::deactivate()
{
 80134e8:	b480      	push	{r7}
 80134ea:	b083      	sub	sp, #12
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]

}
 80134f0:	bf00      	nop
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <_ZN19LayoutSelectionViewD1Ev>:

class LayoutSelectionView : public LayoutSelectionViewBase
{
public:
    LayoutSelectionView();
    virtual ~LayoutSelectionView() {}
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	4a05      	ldr	r2, [pc, #20]	; (801351c <_ZN19LayoutSelectionViewD1Ev+0x20>)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff fa17 	bl	8012940 <_ZN23LayoutSelectionViewBaseD1Ev>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	0802db74 	.word	0x0802db74

08013520 <_ZN19LayoutSelectionViewD0Ev>:
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ff ffe7 	bl	80134fc <_ZN19LayoutSelectionViewD1Ev>
 801352e:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f017 f8ff 	bl	802a736 <_ZdlPvj>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4618      	mov	r0, r3
 801353c:	3708      	adds	r7, #8
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
	...

08013544 <_ZN19LayoutSelectionViewC1Ev>:
#include <gui/layoutselection_screen/LayoutSelectionView.hpp>

LayoutSelectionView::LayoutSelectionView()
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fa2a 	bl	80129a8 <_ZN23LayoutSelectionViewBaseC1Ev>
 8013554:	4a03      	ldr	r2, [pc, #12]	; (8013564 <_ZN19LayoutSelectionViewC1Ev+0x20>)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	601a      	str	r2, [r3, #0]
{

}
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	0802db74 	.word	0x0802db74

08013568 <_ZN19LayoutSelectionView11setupScreenEv>:

void LayoutSelectionView::setupScreen()
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
    LayoutSelectionViewBase::setupScreen();
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4618      	mov	r0, r3
 8013574:	f7ff fa88 	bl	8012a88 <_ZN23LayoutSelectionViewBase11setupScreenEv>
}
 8013578:	bf00      	nop
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <_ZN19LayoutSelectionView14tearDownScreenEv>:

void LayoutSelectionView::tearDownScreen()
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    LayoutSelectionViewBase::tearDownScreen();
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	f7fe fe5a 	bl	8012244 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2200      	movs	r2, #0
 80135a4:	601a      	str	r2, [r3, #0]
{

}
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4618      	mov	r0, r3
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr

080135b4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]

}
 80135bc:	bf00      	nop
 80135be:	370c      	adds	r7, #12
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80135c8:	b480      	push	{r7}
 80135ca:	b083      	sub	sp, #12
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
    {
 80135d0:	4a04      	ldr	r2, [pc, #16]	; (80135e4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	601a      	str	r2, [r3, #0]
    }
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr
 80135e4:	0802dbcc 	.word	0x0802dbcc

080135e8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
    }
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f7ff ffe9 	bl	80135c8 <_ZN8touchgfx15TouchControllerD1Ev>
 80135f6:	2104      	movs	r1, #4
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f017 f89c 	bl	802a736 <_ZdlPvj>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	4618      	mov	r0, r3
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <_Z13GetTouchPointP19__I2C_HandleTypeDefhhPtS1_PhS2_>:
    0x2D,
    0x33,
    0x39
};

void GetTouchPoint(I2C_HandleTypeDef* hi2c,uint8_t I2Caddr,uint8_t PointNR,uint16_t* TouchPointY,uint16_t* TouchPointX,uint8_t* TouchType,uint8_t* TouchPressure){
 8013608:	b580      	push	{r7, lr}
 801360a:	b08a      	sub	sp, #40	; 0x28
 801360c:	af02      	add	r7, sp, #8
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	607b      	str	r3, [r7, #4]
 8013612:	460b      	mov	r3, r1
 8013614:	72fb      	strb	r3, [r7, #11]
 8013616:	4613      	mov	r3, r2
 8013618:	72bb      	strb	r3, [r7, #10]
  uint8_t I2CBuffer[5],I2CTransmit;
	I2CTransmit = TouchPointBaseAddr[PointNR-1];
 801361a:	7abb      	ldrb	r3, [r7, #10]
 801361c:	3b01      	subs	r3, #1
 801361e:	4a21      	ldr	r2, [pc, #132]	; (80136a4 <_Z13GetTouchPointP19__I2C_HandleTypeDefhhPtS1_PhS2_+0x9c>)
 8013620:	5cd3      	ldrb	r3, [r2, r3]
 8013622:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Master_Transmit(hi2c,I2Caddr*2,&I2CTransmit,1,100);
 8013624:	7afb      	ldrb	r3, [r7, #11]
 8013626:	b29b      	uxth	r3, r3
 8013628:	005b      	lsls	r3, r3, #1
 801362a:	b299      	uxth	r1, r3
 801362c:	f107 0217 	add.w	r2, r7, #23
 8013630:	2364      	movs	r3, #100	; 0x64
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	2301      	movs	r3, #1
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7ee fe64 	bl	8002304 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(hi2c,(I2Caddr*2)+1,I2CBuffer,5,100);
 801363c:	7afb      	ldrb	r3, [r7, #11]
 801363e:	b29b      	uxth	r3, r3
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	b29b      	uxth	r3, r3
 8013644:	3301      	adds	r3, #1
 8013646:	b299      	uxth	r1, r3
 8013648:	f107 0218 	add.w	r2, r7, #24
 801364c:	2364      	movs	r3, #100	; 0x64
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	2305      	movs	r3, #5
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f7ee ff4a 	bl	80024ec <HAL_I2C_Master_Receive>
	//Get Event Flag from Buffer
	*TouchType = (I2CBuffer[0] & 0xC0) >> 6;
 8013658:	7e3b      	ldrb	r3, [r7, #24]
 801365a:	099b      	lsrs	r3, r3, #6
 801365c:	b2da      	uxtb	r2, r3
 801365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013660:	701a      	strb	r2, [r3, #0]
	*TouchPointY = ((I2CBuffer[0] & 0x0F) << 8) | I2CBuffer[1];
 8013662:	7e3b      	ldrb	r3, [r7, #24]
 8013664:	021b      	lsls	r3, r3, #8
 8013666:	b21b      	sxth	r3, r3
 8013668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801366c:	b21a      	sxth	r2, r3
 801366e:	7e7b      	ldrb	r3, [r7, #25]
 8013670:	b21b      	sxth	r3, r3
 8013672:	4313      	orrs	r3, r2
 8013674:	b21b      	sxth	r3, r3
 8013676:	b29a      	uxth	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	801a      	strh	r2, [r3, #0]
	*TouchPointX = ((I2CBuffer[2] & 0x0F) << 8) | I2CBuffer[3];
 801367c:	7ebb      	ldrb	r3, [r7, #26]
 801367e:	021b      	lsls	r3, r3, #8
 8013680:	b21b      	sxth	r3, r3
 8013682:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013686:	b21a      	sxth	r2, r3
 8013688:	7efb      	ldrb	r3, [r7, #27]
 801368a:	b21b      	sxth	r3, r3
 801368c:	4313      	orrs	r3, r2
 801368e:	b21b      	sxth	r3, r3
 8013690:	b29a      	uxth	r2, r3
 8013692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013694:	801a      	strh	r2, [r3, #0]
	*TouchPressure = I2CBuffer[3];
 8013696:	7efa      	ldrb	r2, [r7, #27]
 8013698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369a:	701a      	strb	r2, [r3, #0]
	//Debug
	//printf("TouchPoint:%d X:%d Y%d Type:%d Pressure:%d\n\r",PointNR,*TouchPointX,*TouchPointY,*TouchType,*TouchPressure);
}
 801369c:	bf00      	nop
 801369e:	3720      	adds	r7, #32
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	0802dba0 	.word	0x0802dba0

080136a8 <_ZN20STM32TouchController4initEv>:

void STM32TouchController::init()
{
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80136b0:	bf00      	nop
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr

080136bc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b08a      	sub	sp, #40	; 0x28
 80136c0:	af04      	add	r7, sp, #16
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
    uint8_t TouchType,Pressure;
    uint16_t Xpos,Ypos;
    GetTouchPoint(&hi2c3,0x38,1,&Ypos,&Xpos,&TouchType,&Pressure);
 80136c8:	f107 0212 	add.w	r2, r7, #18
 80136cc:	f107 0316 	add.w	r3, r7, #22
 80136d0:	9302      	str	r3, [sp, #8]
 80136d2:	f107 0317 	add.w	r3, r7, #23
 80136d6:	9301      	str	r3, [sp, #4]
 80136d8:	f107 0314 	add.w	r3, r7, #20
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	4613      	mov	r3, r2
 80136e0:	2201      	movs	r2, #1
 80136e2:	2138      	movs	r1, #56	; 0x38
 80136e4:	480a      	ldr	r0, [pc, #40]	; (8013710 <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>)
 80136e6:	f7ff ff8f 	bl	8013608 <_Z13GetTouchPointP19__I2C_HandleTypeDefhhPtS1_PhS2_>
    x = Xpos;
 80136ea:	8abb      	ldrh	r3, [r7, #20]
 80136ec:	461a      	mov	r2, r3
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	601a      	str	r2, [r3, #0]
    y = Ypos;
 80136f2:	8a7b      	ldrh	r3, [r7, #18]
 80136f4:	461a      	mov	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	601a      	str	r2, [r3, #0]
    
    if(TouchType==2){
 80136fa:	7dfb      	ldrb	r3, [r7, #23]
 80136fc:	2b02      	cmp	r3, #2
 80136fe:	d101      	bne.n	8013704 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
      return true;
 8013700:	2301      	movs	r3, #1
 8013702:	e000      	b.n	8013706 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013704:	2300      	movs	r3, #0
}
 8013706:	4618      	mov	r0, r3
 8013708:	3718      	adds	r7, #24
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	20014df0 	.word	0x20014df0

08013714 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	4a05      	ldr	r2, [pc, #20]	; (8013734 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff ff4f 	bl	80135c8 <_ZN8touchgfx15TouchControllerD1Ev>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	0802dbb4 	.word	0x0802dbb4

08013738 <_ZN20STM32TouchControllerD0Ev>:
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ff ffe7 	bl	8013714 <_ZN20STM32TouchControllerD1Ev>
 8013746:	2104      	movs	r1, #4
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f016 fff4 	bl	802a736 <_ZdlPvj>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4618      	mov	r0, r3
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	4603      	mov	r3, r0
 8013760:	71fb      	strb	r3, [r7, #7]

}
 8013762:	bf00      	nop
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr

0801376e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801376e:	b480      	push	{r7}
 8013770:	b083      	sub	sp, #12
 8013772:	af00      	add	r7, sp, #0
 8013774:	4603      	mov	r3, r0
 8013776:	71fb      	strb	r3, [r7, #7]

}
 8013778:	bf00      	nop
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	4603      	mov	r3, r0
 801378c:	71fb      	strb	r3, [r7, #7]

}
 801378e:	bf00      	nop
 8013790:	370c      	adds	r7, #12
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr
	...

0801379c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
    {
 80137a4:	4a04      	ldr	r2, [pc, #16]	; (80137b8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	601a      	str	r2, [r3, #0]
    }
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	0802e400 	.word	0x0802e400

080137bc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
    }
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f7ff ffe9 	bl	801379c <_ZN8touchgfx3HALD1Ev>
 80137ca:	217c      	movs	r1, #124	; 0x7c
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f016 ffb2 	bl	802a736 <_ZdlPvj>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	460b      	mov	r3, r1
 80137e6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	78fa      	ldrb	r2, [r7, #3]
 80137ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2201      	movs	r2, #1
 80137f4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80137f8:	bf00      	nop
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013812:	2b00      	cmp	r3, #0
 8013814:	d009      	beq.n	801382a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	685a      	ldr	r2, [r3, #4]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	4610      	mov	r0, r2
 8013824:	4798      	blx	r3
 8013826:	4603      	mov	r3, r0
 8013828:	e000      	b.n	801382c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
            return static_cast<BlitOperations>(0);
 801382a:	2300      	movs	r3, #0
    }
 801382c:	4618      	mov	r0, r3
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f002 fdc5 	bl	80163cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	3390      	adds	r3, #144	; 0x90
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	4798      	blx	r3
    }
 801384e:	bf00      	nop
 8013850:	3708      	adds	r7, #8
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}

08013856 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013856:	b480      	push	{r7}
 8013858:	b083      	sub	sp, #12
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]
 801385e:	6039      	str	r1, [r7, #0]
        return false;
 8013860:	2300      	movs	r3, #0
    }
 8013862:	4618      	mov	r0, r3
 8013864:	370c      	adds	r7, #12
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr
	...

08013870 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
 801387c:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d106      	bne.n	8013892 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013884:	4b11      	ldr	r3, [pc, #68]	; (80138cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013886:	4a12      	ldr	r2, [pc, #72]	; (80138d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013888:	f240 216b 	movw	r1, #619	; 0x26b
 801388c:	4811      	ldr	r0, [pc, #68]	; (80138d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801388e:	f016 ff81 	bl	802a794 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	683a      	ldr	r2, [r7, #0]
 80138a2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	bf14      	ite	ne
 80138aa:	2301      	movne	r3, #1
 80138ac:	2300      	moveq	r3, #0
 80138ae:	b2da      	uxtb	r2, r3
 80138b0:	4b09      	ldr	r3, [pc, #36]	; (80138d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80138b2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	bf14      	ite	ne
 80138ba:	2301      	movne	r3, #1
 80138bc:	2300      	moveq	r3, #0
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	4b06      	ldr	r3, [pc, #24]	; (80138dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80138c2:	701a      	strb	r2, [r3, #0]
    }
 80138c4:	bf00      	nop
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	0802c3d0 	.word	0x0802c3d0
 80138d0:	0802c408 	.word	0x0802c408
 80138d4:	0802c458 	.word	0x0802c458
 80138d8:	20014b32 	.word	0x20014b32
 80138dc:	20014b33 	.word	0x20014b33

080138e0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80138e0:	b480      	push	{r7}
 80138e2:	b083      	sub	sp, #12
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
        return 0;
 80138e8:	2300      	movs	r3, #0
    }
 80138ea:	4618      	mov	r0, r3
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr

080138f6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b082      	sub	sp, #8
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
 80138fe:	460b      	mov	r3, r1
 8013900:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013906:	2b00      	cmp	r3, #0
 8013908:	d004      	beq.n	8013914 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801390e:	887a      	ldrh	r2, [r7, #2]
 8013910:	4610      	mov	r0, r2
 8013912:	4798      	blx	r3
    }
 8013914:	bf00      	nop
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	685a      	ldr	r2, [r3, #4]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	3318      	adds	r3, #24
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	4610      	mov	r0, r2
 8013934:	4798      	blx	r3
 8013936:	4603      	mov	r3, r0
    }
 8013938:	4618      	mov	r0, r3
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013954:	429a      	cmp	r2, r3
 8013956:	d017      	beq.n	8013988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013958:	4b1a      	ldr	r3, [pc, #104]	; (80139c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d12a      	bne.n	80139b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013960:	4b19      	ldr	r3, [pc, #100]	; (80139c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013962:	881a      	ldrh	r2, [r3, #0]
 8013964:	4b19      	ldr	r3, [pc, #100]	; (80139cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013966:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013968:	4b19      	ldr	r3, [pc, #100]	; (80139d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801396a:	881a      	ldrh	r2, [r3, #0]
 801396c:	4b19      	ldr	r3, [pc, #100]	; (80139d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801396e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013970:	4b16      	ldr	r3, [pc, #88]	; (80139cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013972:	881a      	ldrh	r2, [r3, #0]
 8013974:	4b16      	ldr	r3, [pc, #88]	; (80139d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013976:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013978:	4b16      	ldr	r3, [pc, #88]	; (80139d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801397a:	881a      	ldrh	r2, [r3, #0]
 801397c:	4b12      	ldr	r3, [pc, #72]	; (80139c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801397e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013980:	4b10      	ldr	r3, [pc, #64]	; (80139c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013982:	2201      	movs	r2, #1
 8013984:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013986:	e016      	b.n	80139b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013988:	4b0e      	ldr	r3, [pc, #56]	; (80139c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d012      	beq.n	80139b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013990:	4b0f      	ldr	r3, [pc, #60]	; (80139d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013992:	881a      	ldrh	r2, [r3, #0]
 8013994:	4b0d      	ldr	r3, [pc, #52]	; (80139cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013996:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013998:	4b0b      	ldr	r3, [pc, #44]	; (80139c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801399a:	881a      	ldrh	r2, [r3, #0]
 801399c:	4b0d      	ldr	r3, [pc, #52]	; (80139d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801399e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80139a0:	4b0c      	ldr	r3, [pc, #48]	; (80139d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80139a2:	881a      	ldrh	r2, [r3, #0]
 80139a4:	4b0a      	ldr	r3, [pc, #40]	; (80139d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80139a6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80139a8:	4b08      	ldr	r3, [pc, #32]	; (80139cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80139aa:	881a      	ldrh	r2, [r3, #0]
 80139ac:	4b06      	ldr	r3, [pc, #24]	; (80139c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80139ae:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80139b0:	4b04      	ldr	r3, [pc, #16]	; (80139c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	701a      	strb	r2, [r3, #0]
    }
 80139b6:	bf00      	nop
 80139b8:	370c      	adds	r7, #12
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	20014b2c 	.word	0x20014b2c
 80139c8:	20014b28 	.word	0x20014b28
 80139cc:	20014b2e 	.word	0x20014b2e
 80139d0:	20014b2a 	.word	0x20014b2a
 80139d4:	20014b30 	.word	0x20014b30

080139d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f001 ff79 	bl	80158da <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80139e8:	bf00      	nop
 80139ea:	3708      	adds	r7, #8
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	4a05      	ldr	r2, [pc, #20]	; (8013a10 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	601a      	str	r2, [r3, #0]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff fecb 	bl	801379c <_ZN8touchgfx3HALD1Ev>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	0802dde8 	.word	0x0802dde8

08013a14 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b082      	sub	sp, #8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f7ff ffe7 	bl	80139f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013a22:	217c      	movs	r1, #124	; 0x7c
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f016 fe86 	bl	802a736 <_ZdlPvj>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff ffca 	bl	80139d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013a44:	bf00      	nop
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f001 fb8c 	bl	8015174 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013a5c:	bf00      	nop
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}

08013a64 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 fc0c 	bl	801528c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013a74:	4603      	mov	r3, r0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3708      	adds	r7, #8
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}

08013a7e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013a7e:	b580      	push	{r7, lr}
 8013a80:	b082      	sub	sp, #8
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
 8013a86:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6839      	ldr	r1, [r7, #0]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f001 fc0b 	bl	80152a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013a92:	bf00      	nop
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	6078      	str	r0, [r7, #4]
 8013aa2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6839      	ldr	r1, [r7, #0]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f001 fc13 	bl	80152d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	60f8      	str	r0, [r7, #12]
 8013abe:	60b9      	str	r1, [r7, #8]
 8013ac0:	607a      	str	r2, [r7, #4]
 8013ac2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	68b9      	ldr	r1, [r7, #8]
 8013acc:	f001 fc12 	bl	80152f4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8013ad0:	4603      	mov	r3, r0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3710      	adds	r7, #16
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f001 fb77 	bl	80151d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013aea:	bf00      	nop
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b082      	sub	sp, #8
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f001 fb7b 	bl	80151f8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013b02:	bf00      	nop
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f001 fb7d 	bl	8015214 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013b1a:	bf00      	nop
 8013b1c:	3708      	adds	r7, #8
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b082      	sub	sp, #8
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f001 fb7f 	bl	8015230 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013b32:	bf00      	nop
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
	...

08013b3c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	4a05      	ldr	r2, [pc, #20]	; (8013b5c <_ZN11TouchGFXHALD1Ev+0x20>)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	601a      	str	r2, [r3, #0]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7ff ff4f 	bl	80139f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	0802dbe4 	.word	0x0802dbe4

08013b60 <_ZN11TouchGFXHALD0Ev>:
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b082      	sub	sp, #8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff ffe7 	bl	8013b3c <_ZN11TouchGFXHALD1Ev>
 8013b6e:	217c      	movs	r1, #124	; 0x7c
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f016 fde0 	bl	802a736 <_ZdlPvj>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8013b84:	2200      	movs	r2, #0
 8013b86:	2101      	movs	r1, #1
 8013b88:	2001      	movs	r0, #1
 8013b8a:	f7f1 ff33 	bl	80059f4 <osSemaphoreNew>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	4a0f      	ldr	r2, [pc, #60]	; (8013bd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013b92:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8013b94:	4b0e      	ldr	r3, [pc, #56]	; (8013bd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d105      	bne.n	8013ba8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013b9c:	4b0d      	ldr	r3, [pc, #52]	; (8013bd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013b9e:	4a0e      	ldr	r2, [pc, #56]	; (8013bd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013ba0:	2125      	movs	r1, #37	; 0x25
 8013ba2:	480e      	ldr	r0, [pc, #56]	; (8013bdc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013ba4:	f016 fdf6 	bl	802a794 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2104      	movs	r1, #4
 8013bac:	2001      	movs	r0, #1
 8013bae:	f7f2 f87b 	bl	8005ca8 <osMessageQueueNew>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	4a0a      	ldr	r2, [pc, #40]	; (8013be0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013bb6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8013bb8:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d105      	bne.n	8013bcc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013bc0:	4b08      	ldr	r3, [pc, #32]	; (8013be4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8013bc2:	4a05      	ldr	r2, [pc, #20]	; (8013bd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013bc4:	2129      	movs	r1, #41	; 0x29
 8013bc6:	4805      	ldr	r0, [pc, #20]	; (8013bdc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013bc8:	f016 fde4 	bl	802a794 <__assert_func>
}
 8013bcc:	bf00      	nop
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	2000d830 	.word	0x2000d830
 8013bd4:	0802c49c 	.word	0x0802c49c
 8013bd8:	0802c4e8 	.word	0x0802c4e8
 8013bdc:	0802c518 	.word	0x0802c518
 8013be0:	2000d834 	.word	0x2000d834
 8013be4:	0802c544 	.word	0x0802c544

08013be8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013bec:	4b04      	ldr	r3, [pc, #16]	; (8013c00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7f1 ff99 	bl	8005b2c <osSemaphoreAcquire>
}
 8013bfa:	bf00      	nop
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	2000d830 	.word	0x2000d830

08013c04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013c08:	4b03      	ldr	r3, [pc, #12]	; (8013c18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7f1 fff3 	bl	8005bf8 <osSemaphoreRelease>
}
 8013c12:	bf00      	nop
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	2000d830 	.word	0x2000d830

08013c1c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8013c20:	4b03      	ldr	r3, [pc, #12]	; (8013c30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2100      	movs	r1, #0
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f1 ff80 	bl	8005b2c <osSemaphoreAcquire>
}
 8013c2c:	bf00      	nop
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	2000d830 	.word	0x2000d830

08013c34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013c38:	4b03      	ldr	r3, [pc, #12]	; (8013c48 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7f1 ffdb 	bl	8005bf8 <osSemaphoreRelease>
}
 8013c42:	bf00      	nop
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	2000d830 	.word	0x2000d830

08013c4c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8013c50:	4b04      	ldr	r3, [pc, #16]	; (8013c64 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8013c52:	6818      	ldr	r0, [r3, #0]
 8013c54:	2300      	movs	r3, #0
 8013c56:	2200      	movs	r2, #0
 8013c58:	4903      	ldr	r1, [pc, #12]	; (8013c68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8013c5a:	f7f2 f8ab 	bl	8005db4 <osMessageQueuePut>
}
 8013c5e:	bf00      	nop
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	2000d834 	.word	0x2000d834
 8013c68:	20000014 	.word	0x20000014

08013c6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8013c72:	4b09      	ldr	r3, [pc, #36]	; (8013c98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013c74:	6818      	ldr	r0, [r3, #0]
 8013c76:	1d39      	adds	r1, r7, #4
 8013c78:	2300      	movs	r3, #0
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f7f2 f90e 	bl	8005e9c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8013c80:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013c82:	6818      	ldr	r0, [r3, #0]
 8013c84:	1d39      	adds	r1, r7, #4
 8013c86:	f04f 33ff 	mov.w	r3, #4294967295
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	f7f2 f906 	bl	8005e9c <osMessageQueueGet>
}
 8013c90:	bf00      	nop
 8013c92:	3708      	adds	r7, #8
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}
 8013c98:	2000d834 	.word	0x2000d834

08013c9c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8013ca6:	88fb      	ldrh	r3, [r7, #6]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7f1 fe75 	bl	8005998 <osDelay>
}
 8013cae:	bf00      	nop
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
	...

08013cb8 <__NVIC_DisableIRQ>:
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	db12      	blt.n	8013cf0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013cca:	79fb      	ldrb	r3, [r7, #7]
 8013ccc:	f003 021f 	and.w	r2, r3, #31
 8013cd0:	490a      	ldr	r1, [pc, #40]	; (8013cfc <__NVIC_DisableIRQ+0x44>)
 8013cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cd6:	095b      	lsrs	r3, r3, #5
 8013cd8:	2001      	movs	r0, #1
 8013cda:	fa00 f202 	lsl.w	r2, r0, r2
 8013cde:	3320      	adds	r3, #32
 8013ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013ce4:	f3bf 8f4f 	dsb	sy
}
 8013ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013cea:	f3bf 8f6f 	isb	sy
}
 8013cee:	bf00      	nop
}
 8013cf0:	bf00      	nop
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr
 8013cfc:	e000e100 	.word	0xe000e100

08013d00 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
    {
 8013d08:	4a04      	ldr	r2, [pc, #16]	; (8013d1c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
    }
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr
 8013d1c:	0802dcf0 	.word	0x0802dcf0

08013d20 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
    }
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f7ff ffe9 	bl	8013d00 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013d2e:	2104      	movs	r1, #4
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f016 fd00 	bl	802a736 <_ZdlPvj>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3708      	adds	r7, #8
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	3344      	adds	r3, #68	; 0x44
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	4798      	blx	r3
    }
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    {
 8013d64:	4a04      	ldr	r2, [pc, #16]	; (8013d78 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	601a      	str	r2, [r3, #0]
    }
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	370c      	adds	r7, #12
 8013d70:	46bd      	mov	sp, r7
 8013d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d76:	4770      	bx	lr
 8013d78:	0802e84c 	.word	0x0802e84c

08013d7c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
    }
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7ff ffe9 	bl	8013d5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013d8a:	210c      	movs	r1, #12
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f016 fcd2 	bl	802a736 <_ZdlPvj>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4618      	mov	r0, r3
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013d9c:	b480      	push	{r7}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013da6:	4a09      	ldr	r2, [pc, #36]	; (8013dcc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	601a      	str	r2, [r3, #0]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	605a      	str	r2, [r3, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	721a      	strb	r2, [r3, #8]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	725a      	strb	r2, [r3, #9]
    {
    }
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	370c      	adds	r7, #12
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr
 8013dcc:	0802e84c 	.word	0x0802e84c

08013dd0 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8013dd8:	2301      	movs	r3, #1
    }
 8013dda:	4618      	mov	r0, r3
 8013ddc:	370c      	adds	r7, #12
 8013dde:	46bd      	mov	sp, r7
 8013de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de4:	4770      	bx	lr

08013de6 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b082      	sub	sp, #8
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	3328      	adds	r3, #40	; 0x28
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4798      	blx	r3
    }
 8013dfc:	bf00      	nop
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	685a      	ldr	r2, [r3, #4]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	3314      	adds	r3, #20
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4610      	mov	r0, r2
 8013e1c:	4798      	blx	r3
    }
 8013e1e:	bf00      	nop
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
	...

08013e28 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8013e2c:	4b13      	ldr	r3, [pc, #76]	; (8013e7c <DMA2D_IRQHandler+0x54>)
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	f003 0302 	and.w	r3, r3, #2
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	bf14      	ite	ne
 8013e38:	2301      	movne	r3, #1
 8013e3a:	2300      	moveq	r3, #0
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d019      	beq.n	8013e76 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8013e42:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <DMA2D_IRQHandler+0x54>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	bf14      	ite	ne
 8013e4e:	2301      	movne	r3, #1
 8013e50:	2300      	moveq	r3, #0
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00e      	beq.n	8013e76 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8013e58:	4b08      	ldr	r3, [pc, #32]	; (8013e7c <DMA2D_IRQHandler+0x54>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4a07      	ldr	r2, [pc, #28]	; (8013e7c <DMA2D_IRQHandler+0x54>)
 8013e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013e62:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8013e64:	4b05      	ldr	r3, [pc, #20]	; (8013e7c <DMA2D_IRQHandler+0x54>)
 8013e66:	2202      	movs	r2, #2
 8013e68:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013e6a:	f7f5 fdaf 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7ff ffc7 	bl	8013e04 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8013e76:	bf00      	nop
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	4002b000 	.word	0x4002b000

08013e80 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3318      	adds	r3, #24
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7f6 fd47 	bl	800a920 <_ZN8touchgfx9colortypeC1Ev>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4618      	mov	r0, r3
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <_ZN10STM32F7DMAC1Ev>:

STM32F7DMA::STM32F7DMA()
 8013e9c:	b5b0      	push	{r4, r5, r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	330c      	adds	r3, #12
 8013eaa:	4619      	mov	r1, r3
 8013eac:	4610      	mov	r0, r2
 8013eae:	f7ff ff75 	bl	8013d9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013eb2:	4a0e      	ldr	r2, [pc, #56]	; (8013eec <_ZN10STM32F7DMAC1Ev+0x50>)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	601a      	str	r2, [r3, #0]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f103 000c 	add.w	r0, r3, #12
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3320      	adds	r3, #32
 8013ec2:	2260      	movs	r2, #96	; 0x60
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	f002 fbe1 	bl	801668c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	3320      	adds	r3, #32
 8013ece:	245f      	movs	r4, #95	; 0x5f
 8013ed0:	461d      	mov	r5, r3
 8013ed2:	2c00      	cmp	r4, #0
 8013ed4:	db05      	blt.n	8013ee2 <_ZN10STM32F7DMAC1Ev+0x46>
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f7ff ffd2 	bl	8013e80 <_ZN8touchgfx6BlitOpC1Ev>
 8013edc:	3520      	adds	r5, #32
 8013ede:	3c01      	subs	r4, #1
 8013ee0:	e7f7      	b.n	8013ed2 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bdb0      	pop	{r4, r5, r7, pc}
 8013eec:	0802dca0 	.word	0x0802dca0

08013ef0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	4a09      	ldr	r2, [pc, #36]	; (8013f20 <_ZN10STM32F7DMAD1Ev+0x30>)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013efe:	205a      	movs	r0, #90	; 0x5a
 8013f00:	f7ff feda 	bl	8013cb8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	330c      	adds	r3, #12
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f000 fb27 	bl	801455c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff ff23 	bl	8013d5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	0802dca0 	.word	0x0802dca0

08013f24 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
}
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7ff ffdf 	bl	8013ef0 <_ZN10STM32F7DMAD1Ev>
 8013f32:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f016 fbfd 	bl	802a736 <_ZdlPvj>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
	...

08013f48 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013f50:	4b11      	ldr	r3, [pc, #68]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f54:	4a10      	ldr	r2, [pc, #64]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8013f5c:	4b0e      	ldr	r3, [pc, #56]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f64:	60fb      	str	r3, [r7, #12]
 8013f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013f68:	4b0b      	ldr	r3, [pc, #44]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f6a:	691b      	ldr	r3, [r3, #16]
 8013f6c:	4a0a      	ldr	r2, [pc, #40]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013f72:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013f74:	4b08      	ldr	r3, [pc, #32]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	4a07      	ldr	r2, [pc, #28]	; (8013f98 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8013f7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013f7e:	6113      	str	r3, [r2, #16]

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8013f80:	2200      	movs	r2, #0
 8013f82:	2105      	movs	r1, #5
 8013f84:	205a      	movs	r0, #90	; 0x5a
 8013f86:	f7ed fd77 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8013f8a:	205a      	movs	r0, #90	; 0x5a
 8013f8c:	f7ed fd90 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
}
 8013f90:	bf00      	nop
 8013f92:	3710      	adds	r7, #16
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	40023800 	.word	0x40023800

08013f9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013fac:	78fb      	ldrb	r3, [r7, #3]
 8013fae:	2b0b      	cmp	r3, #11
 8013fb0:	d826      	bhi.n	8014000 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8013fb2:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb8:	08013ff5 	.word	0x08013ff5
 8013fbc:	08013fef 	.word	0x08013fef
 8013fc0:	08013fe9 	.word	0x08013fe9
 8013fc4:	08014001 	.word	0x08014001
 8013fc8:	08014001 	.word	0x08014001
 8013fcc:	08014001 	.word	0x08014001
 8013fd0:	08014001 	.word	0x08014001
 8013fd4:	08013ffb 	.word	0x08013ffb
 8013fd8:	08013ffb 	.word	0x08013ffb
 8013fdc:	08013ffb 	.word	0x08013ffb
 8013fe0:	08013ffb 	.word	0x08013ffb
 8013fe4:	08013ffb 	.word	0x08013ffb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	60fb      	str	r3, [r7, #12]
        break;
 8013fec:	e00e      	b.n	801400c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	60fb      	str	r3, [r7, #12]
        break;
 8013ff2:	e00b      	b.n	801400c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8013ff4:	2302      	movs	r3, #2
 8013ff6:	60fb      	str	r3, [r7, #12]
        break;
 8013ff8:	e008      	b.n	801400c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8013ffa:	2305      	movs	r3, #5
 8013ffc:	60fb      	str	r3, [r7, #12]
        break;
 8013ffe:	e005      	b.n	801400c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8014000:	4b05      	ldr	r3, [pc, #20]	; (8014018 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8014002:	4a06      	ldr	r2, [pc, #24]	; (801401c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8014004:	216d      	movs	r1, #109	; 0x6d
 8014006:	4806      	ldr	r0, [pc, #24]	; (8014020 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8014008:	f016 fbc4 	bl	802a794 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801400c:	68fb      	ldr	r3, [r7, #12]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3710      	adds	r7, #16
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	0802c588 	.word	0x0802c588
 801401c:	0802c5a4 	.word	0x0802c5a4
 8014020:	0802c5f0 	.word	0x0802c5f0

08014024 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	460b      	mov	r3, r1
 801402e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014030:	2300      	movs	r3, #0
 8014032:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014034:	78fb      	ldrb	r3, [r7, #3]
 8014036:	2b0a      	cmp	r3, #10
 8014038:	d821      	bhi.n	801407e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801403a:	a201      	add	r2, pc, #4	; (adr r2, 8014040 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014040:	08014079 	.word	0x08014079
 8014044:	08014073 	.word	0x08014073
 8014048:	0801406d 	.word	0x0801406d
 801404c:	0801407f 	.word	0x0801407f
 8014050:	0801407f 	.word	0x0801407f
 8014054:	0801407f 	.word	0x0801407f
 8014058:	0801407f 	.word	0x0801407f
 801405c:	08014073 	.word	0x08014073
 8014060:	08014073 	.word	0x08014073
 8014064:	08014073 	.word	0x08014073
 8014068:	08014073 	.word	0x08014073
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801406c:	2300      	movs	r3, #0
 801406e:	60fb      	str	r3, [r7, #12]
        break;
 8014070:	e00b      	b.n	801408a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8014072:	2301      	movs	r3, #1
 8014074:	60fb      	str	r3, [r7, #12]
        break;
 8014076:	e008      	b.n	801408a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8014078:	2302      	movs	r3, #2
 801407a:	60fb      	str	r3, [r7, #12]
        break;
 801407c:	e005      	b.n	801408a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801407e:	4b05      	ldr	r3, [pc, #20]	; (8014094 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8014080:	4a05      	ldr	r2, [pc, #20]	; (8014098 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8014082:	218e      	movs	r1, #142	; 0x8e
 8014084:	4805      	ldr	r0, [pc, #20]	; (801409c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8014086:	f016 fb85 	bl	802a794 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801408a:	68fb      	ldr	r3, [r7, #12]
}
 801408c:	4618      	mov	r0, r3
 801408e:	3710      	adds	r7, #16
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}
 8014094:	0802c588 	.word	0x0802c588
 8014098:	0802c61c 	.word	0x0802c61c
 801409c:	0802c5f0 	.word	0x0802c5f0

080140a0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80140a8:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	370c      	adds	r7, #12
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr

080140b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80140b8:	b590      	push	{r4, r7, lr}
 80140ba:	b089      	sub	sp, #36	; 0x24
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	7f5b      	ldrb	r3, [r3, #29]
 80140c6:	4619      	mov	r1, r3
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7ff ff67 	bl	8013f9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80140ce:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	7f9b      	ldrb	r3, [r3, #30]
 80140d4:	4619      	mov	r1, r3
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f7ff ff60 	bl	8013f9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80140dc:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	7f9b      	ldrb	r3, [r3, #30]
 80140e2:	4619      	mov	r1, r3
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ff ff9d 	bl	8014024 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80140ea:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	8adb      	ldrh	r3, [r3, #22]
 80140f0:	461a      	mov	r2, r3
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	8a1b      	ldrh	r3, [r3, #16]
 80140f6:	1ad2      	subs	r2, r2, r3
 80140f8:	4b8c      	ldr	r3, [pc, #560]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80140fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	8adb      	ldrh	r3, [r3, #22]
 8014100:	461a      	mov	r2, r3
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	8a1b      	ldrh	r3, [r3, #16]
 8014106:	1ad2      	subs	r2, r2, r3
 8014108:	4b88      	ldr	r3, [pc, #544]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801410a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	8a9b      	ldrh	r3, [r3, #20]
 8014110:	461a      	mov	r2, r3
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	8a1b      	ldrh	r3, [r3, #16]
 8014116:	1ad2      	subs	r2, r2, r3
 8014118:	4b84      	ldr	r3, [pc, #528]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801411a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801411c:	4a83      	ldr	r2, [pc, #524]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	8a5b      	ldrh	r3, [r3, #18]
 8014126:	461a      	mov	r2, r3
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	8a1b      	ldrh	r3, [r3, #16]
 801412c:	041b      	lsls	r3, r3, #16
 801412e:	431a      	orrs	r2, r3
 8014130:	4b7e      	ldr	r3, [pc, #504]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	68da      	ldr	r2, [r3, #12]
 8014138:	4b7c      	ldr	r3, [pc, #496]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801413a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	685a      	ldr	r2, [r3, #4]
 8014140:	4b7a      	ldr	r3, [pc, #488]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014142:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801414c:	d046      	beq.n	80141dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 801414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014152:	f200 80fb 	bhi.w	801434c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
 8014156:	2b80      	cmp	r3, #128	; 0x80
 8014158:	d00e      	beq.n	8014178 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 801415a:	2b80      	cmp	r3, #128	; 0x80
 801415c:	f200 80f6 	bhi.w	801434c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
 8014160:	2b40      	cmp	r3, #64	; 0x40
 8014162:	f000 80cd 	beq.w	8014300 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>
 8014166:	2b40      	cmp	r3, #64	; 0x40
 8014168:	f200 80f0 	bhi.w	801434c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
 801416c:	2b04      	cmp	r3, #4
 801416e:	d067      	beq.n	8014240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
 8014170:	2b20      	cmp	r3, #32
 8014172:	f000 80c5 	beq.w	8014300 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>
 8014176:	e0e9      	b.n	801434c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	7f1b      	ldrb	r3, [r3, #28]
 801417c:	061b      	lsls	r3, r3, #24
 801417e:	4619      	mov	r1, r3
 8014180:	4a6a      	ldr	r2, [pc, #424]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014182:	4b6b      	ldr	r3, [pc, #428]	; (8014330 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 8014184:	430b      	orrs	r3, r1
 8014186:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	3318      	adds	r3, #24
 801418c:	4618      	mov	r0, r3
 801418e:	f7f6 fbe4 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 8014192:	4603      	mov	r3, r0
 8014194:	021b      	lsls	r3, r3, #8
 8014196:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	3318      	adds	r3, #24
 801419e:	4618      	mov	r0, r3
 80141a0:	f7f6 fbdb 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 80141a4:	4603      	mov	r3, r0
 80141a6:	015b      	lsls	r3, r3, #5
 80141a8:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80141ac:	431c      	orrs	r4, r3
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	3318      	adds	r3, #24
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f6 fbd1 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 80141b8:	4603      	mov	r3, r0
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80141c0:	4a5a      	ldr	r2, [pc, #360]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80141c2:	4323      	orrs	r3, r4
 80141c4:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80141c6:	4a59      	ldr	r2, [pc, #356]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	68da      	ldr	r2, [r3, #12]
 80141d0:	4b56      	ldr	r3, [pc, #344]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80141d2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80141d4:	4b55      	ldr	r3, [pc, #340]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80141d6:	4a57      	ldr	r2, [pc, #348]	; (8014334 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80141d8:	601a      	str	r2, [r3, #0]
        break;
 80141da:	e0f8      	b.n	80143ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	7f1b      	ldrb	r3, [r3, #28]
 80141e0:	061b      	lsls	r3, r3, #24
 80141e2:	4619      	mov	r1, r3
 80141e4:	4a51      	ldr	r2, [pc, #324]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80141e6:	4b54      	ldr	r3, [pc, #336]	; (8014338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 80141e8:	430b      	orrs	r3, r1
 80141ea:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	3318      	adds	r3, #24
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7f6 fbb2 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 80141f6:	4603      	mov	r3, r0
 80141f8:	021b      	lsls	r3, r3, #8
 80141fa:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	3318      	adds	r3, #24
 8014202:	4618      	mov	r0, r3
 8014204:	f7f6 fba9 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 8014208:	4603      	mov	r3, r0
 801420a:	015b      	lsls	r3, r3, #5
 801420c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014210:	431c      	orrs	r4, r3
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	3318      	adds	r3, #24
 8014216:	4618      	mov	r0, r3
 8014218:	f7f6 fb9f 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 801421c:	4603      	mov	r3, r0
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014224:	4a41      	ldr	r2, [pc, #260]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014226:	4323      	orrs	r3, r4
 8014228:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801422a:	4a40      	ldr	r2, [pc, #256]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801422c:	69bb      	ldr	r3, [r7, #24]
 801422e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	68da      	ldr	r2, [r3, #12]
 8014234:	4b3d      	ldr	r3, [pc, #244]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014236:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014238:	4b3c      	ldr	r3, [pc, #240]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801423a:	4a3e      	ldr	r2, [pc, #248]	; (8014334 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801423c:	601a      	str	r2, [r3, #0]
        break;
 801423e:	e0c6      	b.n	80143ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	7f1b      	ldrb	r3, [r3, #28]
 8014244:	061b      	lsls	r3, r3, #24
 8014246:	461a      	mov	r2, r3
 8014248:	69fb      	ldr	r3, [r7, #28]
 801424a:	4313      	orrs	r3, r2
 801424c:	4a37      	ldr	r2, [pc, #220]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801424e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014252:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014254:	4a35      	ldr	r2, [pc, #212]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	68da      	ldr	r2, [r3, #12]
 801425e:	4b33      	ldr	r3, [pc, #204]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014260:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	7f5b      	ldrb	r3, [r3, #29]
 8014266:	2b0b      	cmp	r3, #11
 8014268:	d146      	bne.n	80142f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	689b      	ldr	r3, [r3, #8]
 801426e:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	1d1a      	adds	r2, r3, #4
 8014274:	4b2d      	ldr	r3, [pc, #180]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014276:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	881b      	ldrh	r3, [r3, #0]
 801427c:	b2db      	uxtb	r3, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d002      	beq.n	8014288 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
 8014282:	2b01      	cmp	r3, #1
 8014284:	d00d      	beq.n	80142a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 8014286:	e01a      	b.n	80142be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014288:	4b28      	ldr	r3, [pc, #160]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801428a:	69da      	ldr	r2, [r3, #28]
 801428c:	4b2b      	ldr	r3, [pc, #172]	; (801433c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 801428e:	4013      	ands	r3, r2
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	8852      	ldrh	r2, [r2, #2]
 8014294:	3a01      	subs	r2, #1
 8014296:	0212      	lsls	r2, r2, #8
 8014298:	4611      	mov	r1, r2
 801429a:	4a24      	ldr	r2, [pc, #144]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801429c:	430b      	orrs	r3, r1
 801429e:	61d3      	str	r3, [r2, #28]
                break;
 80142a0:	e014      	b.n	80142cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80142a2:	4b22      	ldr	r3, [pc, #136]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142a4:	69da      	ldr	r2, [r3, #28]
 80142a6:	4b25      	ldr	r3, [pc, #148]	; (801433c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 80142a8:	4013      	ands	r3, r2
 80142aa:	693a      	ldr	r2, [r7, #16]
 80142ac:	8852      	ldrh	r2, [r2, #2]
 80142ae:	3a01      	subs	r2, #1
 80142b0:	0212      	lsls	r2, r2, #8
 80142b2:	4313      	orrs	r3, r2
 80142b4:	4a1d      	ldr	r2, [pc, #116]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142b6:	f043 0310 	orr.w	r3, r3, #16
 80142ba:	61d3      	str	r3, [r2, #28]
                break;
 80142bc:	e006      	b.n	80142cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80142be:	4b20      	ldr	r3, [pc, #128]	; (8014340 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80142c0:	4a20      	ldr	r2, [pc, #128]	; (8014344 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80142c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80142c6:	4820      	ldr	r0, [pc, #128]	; (8014348 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80142c8:	f016 fa64 	bl	802a794 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80142cc:	4b17      	ldr	r3, [pc, #92]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142ce:	69db      	ldr	r3, [r3, #28]
 80142d0:	4a16      	ldr	r2, [pc, #88]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142d2:	f043 0320 	orr.w	r3, r3, #32
 80142d6:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80142d8:	4b14      	ldr	r3, [pc, #80]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142da:	69db      	ldr	r3, [r3, #28]
 80142dc:	f003 0320 	and.w	r3, r3, #32
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	bf14      	ite	ne
 80142e4:	2301      	movne	r3, #1
 80142e6:	2300      	moveq	r3, #0
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d001      	beq.n	80142f2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
            {
                __NOP();
 80142ee:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80142f0:	e7f2      	b.n	80142d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80142f2:	4b0e      	ldr	r3, [pc, #56]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142f4:	2210      	movs	r2, #16
 80142f6:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80142f8:	4b0c      	ldr	r3, [pc, #48]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 80142fa:	4a0e      	ldr	r2, [pc, #56]	; (8014334 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80142fc:	601a      	str	r2, [r3, #0]
        break;
 80142fe:	e066      	b.n	80143ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	7f1b      	ldrb	r3, [r3, #28]
 8014304:	061b      	lsls	r3, r3, #24
 8014306:	461a      	mov	r2, r3
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	4313      	orrs	r3, r2
 801430c:	4a07      	ldr	r2, [pc, #28]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 801430e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014312:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014314:	4a05      	ldr	r2, [pc, #20]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	68da      	ldr	r2, [r3, #12]
 801431e:	4b03      	ldr	r3, [pc, #12]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014320:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014322:	4b02      	ldr	r3, [pc, #8]	; (801432c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 8014324:	4a03      	ldr	r2, [pc, #12]	; (8014334 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8014326:	601a      	str	r2, [r3, #0]
        break;
 8014328:	e051      	b.n	80143ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
 801432a:	bf00      	nop
 801432c:	4002b000 	.word	0x4002b000
 8014330:	0002000a 	.word	0x0002000a
 8014334:	00020201 	.word	0x00020201
 8014338:	00020009 	.word	0x00020009
 801433c:	ffff00ef 	.word	0xffff00ef
 8014340:	0802c66c 	.word	0x0802c66c
 8014344:	0802c688 	.word	0x0802c688
 8014348:	0802c5f0 	.word	0x0802c5f0
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	7f1b      	ldrb	r3, [r3, #28]
 8014350:	061b      	lsls	r3, r3, #24
 8014352:	461a      	mov	r2, r3
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	4313      	orrs	r3, r2
 8014358:	4a1f      	ldr	r2, [pc, #124]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801435a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801435e:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	7f5b      	ldrb	r3, [r3, #29]
 8014364:	2b0b      	cmp	r3, #11
 8014366:	d12d      	bne.n	80143c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	689b      	ldr	r3, [r3, #8]
 801436c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	1d1a      	adds	r2, r3, #4
 8014372:	4b19      	ldr	r3, [pc, #100]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8014374:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014376:	4b18      	ldr	r3, [pc, #96]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8014378:	69da      	ldr	r2, [r3, #28]
 801437a:	4b18      	ldr	r3, [pc, #96]	; (80143dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 801437c:	4013      	ands	r3, r2
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	8852      	ldrh	r2, [r2, #2]
 8014382:	3a01      	subs	r2, #1
 8014384:	0212      	lsls	r2, r2, #8
 8014386:	4313      	orrs	r3, r2
 8014388:	4a13      	ldr	r2, [pc, #76]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801438a:	f043 0310 	orr.w	r3, r3, #16
 801438e:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014390:	4b11      	ldr	r3, [pc, #68]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8014392:	69db      	ldr	r3, [r3, #28]
 8014394:	4a10      	ldr	r2, [pc, #64]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8014396:	f043 0320 	orr.w	r3, r3, #32
 801439a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801439c:	4b0e      	ldr	r3, [pc, #56]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801439e:	69db      	ldr	r3, [r3, #28]
 80143a0:	f003 0320 	and.w	r3, r3, #32
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	bf14      	ite	ne
 80143a8:	2301      	movne	r3, #1
 80143aa:	2300      	moveq	r3, #0
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
            {
                __NOP();
 80143b2:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80143b4:	e7f2      	b.n	801439c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80143b6:	4b08      	ldr	r3, [pc, #32]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80143b8:	2210      	movs	r2, #16
 80143ba:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80143bc:	4b06      	ldr	r3, [pc, #24]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80143be:	4a08      	ldr	r2, [pc, #32]	; (80143e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x328>)
 80143c0:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80143c2:	e003      	b.n	80143cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x314>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80143c4:	4b04      	ldr	r3, [pc, #16]	; (80143d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80143c6:	f240 2201 	movw	r2, #513	; 0x201
 80143ca:	601a      	str	r2, [r3, #0]
        break;
 80143cc:	bf00      	nop
    }
}
 80143ce:	bf00      	nop
 80143d0:	3724      	adds	r7, #36	; 0x24
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd90      	pop	{r4, r7, pc}
 80143d6:	bf00      	nop
 80143d8:	4002b000 	.word	0x4002b000
 80143dc:	ffff00ef 	.word	0xffff00ef
 80143e0:	00010201 	.word	0x00010201

080143e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80143e4:	b590      	push	{r4, r7, lr}
 80143e6:	b085      	sub	sp, #20
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	7f9b      	ldrb	r3, [r3, #30]
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7ff fe15 	bl	8014024 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80143fa:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80143fc:	4a53      	ldr	r2, [pc, #332]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	8a5b      	ldrh	r3, [r3, #18]
 8014406:	461a      	mov	r2, r3
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	8a1b      	ldrh	r3, [r3, #16]
 801440c:	041b      	lsls	r3, r3, #16
 801440e:	431a      	orrs	r2, r3
 8014410:	4b4e      	ldr	r3, [pc, #312]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	68da      	ldr	r2, [r3, #12]
 8014418:	4b4c      	ldr	r3, [pc, #304]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801441a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	8adb      	ldrh	r3, [r3, #22]
 8014420:	461a      	mov	r2, r3
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	8a1b      	ldrh	r3, [r3, #16]
 8014426:	1ad2      	subs	r2, r2, r3
 8014428:	4b48      	ldr	r3, [pc, #288]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801442a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b08      	cmp	r3, #8
 8014432:	d14c      	bne.n	80144ce <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xea>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	8adb      	ldrh	r3, [r3, #22]
 8014438:	461a      	mov	r2, r3
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	8a1b      	ldrh	r3, [r3, #16]
 801443e:	1ad2      	subs	r2, r2, r3
 8014440:	4b42      	ldr	r3, [pc, #264]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014442:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	8adb      	ldrh	r3, [r3, #22]
 8014448:	461a      	mov	r2, r3
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	8a1b      	ldrh	r3, [r3, #16]
 801444e:	1ad2      	subs	r2, r2, r3
 8014450:	4b3e      	ldr	r3, [pc, #248]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014452:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014454:	4a3d      	ldr	r2, [pc, #244]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	7f1b      	ldrb	r3, [r3, #28]
 801445e:	061b      	lsls	r3, r3, #24
 8014460:	4619      	mov	r1, r3
 8014462:	4a3a      	ldr	r2, [pc, #232]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014464:	4b3a      	ldr	r3, [pc, #232]	; (8014550 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 8014466:	430b      	orrs	r3, r1
 8014468:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	7f1b      	ldrb	r3, [r3, #28]
 801446e:	061b      	lsls	r3, r3, #24
 8014470:	461c      	mov	r4, r3
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	3318      	adds	r3, #24
 8014476:	4618      	mov	r0, r3
 8014478:	f7f6 fa6f 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 801447c:	4603      	mov	r3, r0
 801447e:	021b      	lsls	r3, r3, #8
 8014480:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8014484:	431c      	orrs	r4, r3
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	3318      	adds	r3, #24
 801448a:	4618      	mov	r0, r3
 801448c:	f7f6 fa65 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 8014490:	4603      	mov	r3, r0
 8014492:	015b      	lsls	r3, r3, #5
 8014494:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014498:	431c      	orrs	r4, r3
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	3318      	adds	r3, #24
 801449e:	4618      	mov	r0, r3
 80144a0:	f7f6 fa5b 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 80144a4:	4603      	mov	r3, r0
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80144ac:	4323      	orrs	r3, r4
 80144ae:	4a27      	ldr	r2, [pc, #156]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80144b4:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	68da      	ldr	r2, [r3, #12]
 80144ba:	4b24      	ldr	r3, [pc, #144]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144bc:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	68da      	ldr	r2, [r3, #12]
 80144c2:	4b22      	ldr	r3, [pc, #136]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144c4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80144c6:	4b21      	ldr	r3, [pc, #132]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144c8:	4a22      	ldr	r2, [pc, #136]	; (8014554 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 80144ca:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80144cc:	e039      	b.n	8014542 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80144ce:	4a1f      	ldr	r2, [pc, #124]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80144d4:	4b1d      	ldr	r3, [pc, #116]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144d6:	2200      	movs	r2, #0
 80144d8:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	7f9b      	ldrb	r3, [r3, #30]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d108      	bne.n	80144f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	3318      	adds	r3, #24
 80144e6:	4c19      	ldr	r4, [pc, #100]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7f6 fa36 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 80144ee:	4603      	mov	r3, r0
 80144f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80144f2:	e023      	b.n	801453c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x158>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	7f1b      	ldrb	r3, [r3, #28]
 80144f8:	061b      	lsls	r3, r3, #24
 80144fa:	461c      	mov	r4, r3
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	3318      	adds	r3, #24
 8014500:	4618      	mov	r0, r3
 8014502:	f7f6 fa2a 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 8014506:	4603      	mov	r3, r0
 8014508:	021b      	lsls	r3, r3, #8
 801450a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 801450e:	431c      	orrs	r4, r3
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	3318      	adds	r3, #24
 8014514:	4618      	mov	r0, r3
 8014516:	f7f6 fa20 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 801451a:	4603      	mov	r3, r0
 801451c:	015b      	lsls	r3, r3, #5
 801451e:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014522:	431c      	orrs	r4, r3
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	3318      	adds	r3, #24
 8014528:	4618      	mov	r0, r3
 801452a:	f7f6 fa16 	bl	800a95a <_ZNK8touchgfx9colortypecvmEv>
 801452e:	4603      	mov	r3, r0
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014536:	4a05      	ldr	r2, [pc, #20]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014538:	4323      	orrs	r3, r4
 801453a:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801453c:	4b03      	ldr	r3, [pc, #12]	; (801454c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801453e:	4a06      	ldr	r2, [pc, #24]	; (8014558 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x174>)
 8014540:	601a      	str	r2, [r3, #0]
}
 8014542:	bf00      	nop
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	bd90      	pop	{r4, r7, pc}
 801454a:	bf00      	nop
 801454c:	4002b000 	.word	0x4002b000
 8014550:	00010009 	.word	0x00010009
 8014554:	00020201 	.word	0x00020201
 8014558:	00030201 	.word	0x00030201

0801455c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	4a05      	ldr	r2, [pc, #20]	; (801457c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	4618      	mov	r0, r3
 801456e:	f7ff fbc7 	bl	8013d00 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	4618      	mov	r0, r3
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	0802e89c 	.word	0x0802e89c

08014580 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7ff ffe7 	bl	801455c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801458e:	2114      	movs	r1, #20
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f016 f8d0 	bl	802a736 <_ZdlPvj>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
        texts = t;
 80145a8:	4a04      	ldr	r2, [pc, #16]	; (80145bc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6013      	str	r3, [r2, #0]
    }
 80145ae:	bf00      	nop
 80145b0:	370c      	adds	r7, #12
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop
 80145bc:	20014bb0 	.word	0x20014bb0

080145c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
 80145cc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80145ce:	4a0b      	ldr	r2, [pc, #44]	; (80145fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	601a      	str	r2, [r3, #0]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	68ba      	ldr	r2, [r7, #8]
 80145d8:	605a      	str	r2, [r3, #4]
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	609a      	str	r2, [r3, #8]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	60da      	str	r2, [r3, #12]
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	69ba      	ldr	r2, [r7, #24]
 80145ea:	611a      	str	r2, [r3, #16]
    {
    }
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	4618      	mov	r0, r3
 80145f0:	3714      	adds	r7, #20
 80145f2:	46bd      	mov	sp, r7
 80145f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	0802ddd8 	.word	0x0802ddd8

08014600 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    {
 8014608:	4a04      	ldr	r2, [pc, #16]	; (801461c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	601a      	str	r2, [r3, #0]
    }
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	370c      	adds	r7, #12
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	0802ddd8 	.word	0x0802ddd8

08014620 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
    }
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f7ff ffe9 	bl	8014600 <_ZN8touchgfx7MVPHeapD1Ev>
 801462e:	2114      	movs	r1, #20
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f016 f880 	bl	802a736 <_ZdlPvj>
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	4618      	mov	r0, r3
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
    {
 8014648:	4a04      	ldr	r2, [pc, #16]	; (801465c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	601a      	str	r2, [r3, #0]
    }
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	4618      	mov	r0, r3
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	0802f778 	.word	0x0802f778

08014660 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
    }
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7ff ffe9 	bl	8014640 <_ZN8touchgfx3LCDD1Ev>
 801466e:	2108      	movs	r1, #8
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f016 f860 	bl	802a736 <_ZdlPvj>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	4618      	mov	r0, r3
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2200      	movs	r2, #0
 801468c:	801a      	strh	r2, [r3, #0]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	805a      	strh	r2, [r3, #2]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	809a      	strh	r2, [r3, #4]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2200      	movs	r2, #0
 801469e:	80da      	strh	r2, [r3, #6]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	811a      	strh	r2, [r3, #8]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	815a      	strh	r2, [r3, #10]
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	819a      	strh	r2, [r3, #12]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2200      	movs	r2, #0
 80146b6:	739a      	strb	r2, [r3, #14]
        {
        }
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b082      	sub	sp, #8
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7ff ffd5 	bl	8014680 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2200      	movs	r2, #0
 80146da:	611a      	str	r2, [r3, #16]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2200      	movs	r2, #0
 80146e0:	829a      	strh	r2, [r3, #20]
    {
    }
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4618      	mov	r0, r3
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 80146fa:	4a4a      	ldr	r2, [pc, #296]	; (8014824 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	601a      	str	r2, [r3, #0]
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	68ba      	ldr	r2, [r7, #8]
 8014704:	605a      	str	r2, [r3, #4]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	609a      	str	r2, [r3, #8]
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	60da      	str	r2, [r3, #12]
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	611a      	str	r2, [r3, #16]
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2200      	movs	r2, #0
 801471c:	615a      	str	r2, [r3, #20]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	619a      	str	r2, [r3, #24]
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	331c      	adds	r3, #28
 8014728:	4618      	mov	r0, r3
 801472a:	f7ff ffcc 	bl	80146c6 <_ZN8touchgfx8GesturesC1Ev>
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	2200      	movs	r2, #0
 8014732:	639a      	str	r2, [r3, #56]	; 0x38
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2200      	movs	r2, #0
 8014738:	63da      	str	r2, [r3, #60]	; 0x3c
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2200      	movs	r2, #0
 801473e:	641a      	str	r2, [r3, #64]	; 0x40
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2200      	movs	r2, #0
 8014744:	645a      	str	r2, [r3, #68]	; 0x44
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2200      	movs	r2, #0
 801474a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2201      	movs	r2, #1
 8014752:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2200      	movs	r2, #0
 801475a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	64da      	str	r2, [r3, #76]	; 0x4c
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	3350      	adds	r3, #80	; 0x50
 8014768:	4618      	mov	r0, r3
 801476a:	f7f6 f902 	bl	800a972 <_ZN8touchgfx4RectC1Ev>
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2201      	movs	r2, #1
 8014772:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2200      	movs	r2, #0
 801477a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2200      	movs	r2, #0
 8014782:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2201      	movs	r2, #1
 801478a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2200      	movs	r2, #0
 8014792:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2200      	movs	r2, #0
 801479a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2200      	movs	r2, #0
 80147a2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2200      	movs	r2, #0
 80147b2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2200      	movs	r2, #0
 80147ba:	671a      	str	r2, [r3, #112]	; 0x70
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2200      	movs	r2, #0
 80147c0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2200      	movs	r2, #0
 80147c8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2201      	movs	r2, #1
 80147d0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2201      	movs	r2, #1
 80147d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80147dc:	4a12      	ldr	r2, [pc, #72]	; (8014828 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80147e2:	4a12      	ldr	r2, [pc, #72]	; (801482c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80147e4:	8b3b      	ldrh	r3, [r7, #24]
 80147e6:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80147e8:	4a11      	ldr	r2, [pc, #68]	; (8014830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80147ea:	8bbb      	ldrh	r3, [r7, #28]
 80147ec:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80147ee:	4b11      	ldr	r3, [pc, #68]	; (8014834 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80147f4:	4b0d      	ldr	r3, [pc, #52]	; (801482c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80147f6:	881a      	ldrh	r2, [r3, #0]
 80147f8:	4b0f      	ldr	r3, [pc, #60]	; (8014838 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 80147fa:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80147fc:	4b0c      	ldr	r3, [pc, #48]	; (8014830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80147fe:	881a      	ldrh	r2, [r3, #0]
 8014800:	4b0e      	ldr	r3, [pc, #56]	; (801483c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8014802:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014804:	8b3a      	ldrh	r2, [r7, #24]
 8014806:	8bbb      	ldrh	r3, [r7, #28]
 8014808:	429a      	cmp	r2, r3
 801480a:	bf34      	ite	cc
 801480c:	2301      	movcc	r3, #1
 801480e:	2300      	movcs	r3, #0
 8014810:	b2db      	uxtb	r3, r3
 8014812:	461a      	mov	r2, r3
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	4618      	mov	r0, r3
 801481e:	3710      	adds	r7, #16
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	0802e400 	.word	0x0802e400
 8014828:	20014b34 	.word	0x20014b34
 801482c:	20014b28 	.word	0x20014b28
 8014830:	20014b2a 	.word	0x20014b2a
 8014834:	20014b2c 	.word	0x20014b2c
 8014838:	20014b2e 	.word	0x20014b2e
 801483c:	20014b30 	.word	0x20014b30

08014840 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
    {
        app.gotoLayout2ScreenNoTransition();
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	4618      	mov	r0, r3
 801484e:	f7f5 faa7 	bl	8009da0 <_ZN23FrontendApplicationBase29gotoLayout2ScreenNoTransitionEv>
    }
 8014852:	bf00      	nop
 8014854:	3708      	adds	r7, #8
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
	...

0801485c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af02      	add	r7, sp, #8
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
 8014868:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	687a      	ldr	r2, [r7, #4]
 8014874:	68b9      	ldr	r1, [r7, #8]
 8014876:	f7ff fea3 	bl	80145c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801487a:	4a04      	ldr	r2, [pc, #16]	; (801488c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	601a      	str	r2, [r3, #0]
    {

    }
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	4618      	mov	r0, r3
 8014884:	3710      	adds	r7, #16
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	0802ddc4 	.word	0x0802ddc4

08014890 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014890:	b580      	push	{r7, lr}
 8014892:	af00      	add	r7, sp, #0
 8014894:	4801      	ldr	r0, [pc, #4]	; (801489c <__tcf_0+0xc>)
 8014896:	f000 f967 	bl	8014b68 <_ZN12FrontendHeapD1Ev>
 801489a:	bd80      	pop	{r7, pc}
 801489c:	2000d838 	.word	0x2000d838

080148a0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80148a0:	b580      	push	{r7, lr}
 80148a2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80148a4:	4b12      	ldr	r3, [pc, #72]	; (80148f0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	f3bf 8f5b 	dmb	ish
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	f003 0301 	and.w	r3, r3, #1
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	bf0c      	ite	eq
 80148b6:	2301      	moveq	r3, #1
 80148b8:	2300      	movne	r3, #0
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d013      	beq.n	80148e8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80148c0:	480b      	ldr	r0, [pc, #44]	; (80148f0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80148c2:	f015 ff3a 	bl	802a73a <__cxa_guard_acquire>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	bf14      	ite	ne
 80148cc:	2301      	movne	r3, #1
 80148ce:	2300      	moveq	r3, #0
 80148d0:	b2db      	uxtb	r3, r3
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d008      	beq.n	80148e8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80148d6:	4807      	ldr	r0, [pc, #28]	; (80148f4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80148d8:	f000 f868 	bl	80149ac <_ZN12FrontendHeapC1Ev>
 80148dc:	4804      	ldr	r0, [pc, #16]	; (80148f0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80148de:	f015 ff38 	bl	802a752 <__cxa_guard_release>
 80148e2:	4805      	ldr	r0, [pc, #20]	; (80148f8 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80148e4:	f015 ff74 	bl	802a7d0 <atexit>
        return instance;
 80148e8:	4b02      	ldr	r3, [pc, #8]	; (80148f4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80148ea:	4618      	mov	r0, r3
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	20013e04 	.word	0x20013e04
 80148f4:	2000d838 	.word	0x2000d838
 80148f8:	08014891 	.word	0x08014891

080148fc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	4a05      	ldr	r2, [pc, #20]	; (801491c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4618      	mov	r0, r3
 801490e:	f7ff fe77 	bl	8014600 <_ZN8touchgfx7MVPHeapD1Ev>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	0802ddc4 	.word	0x0802ddc4

08014920 <_ZN16FrontendHeapBaseD0Ev>:
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f7ff ffe7 	bl	80148fc <_ZN16FrontendHeapBaseD1Ev>
 801492e:	2114      	movs	r1, #20
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f015 ff00 	bl	802a736 <_ZdlPvj>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	4618      	mov	r0, r3
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	4618      	mov	r0, r3
 801494c:	f000 fde0 	bl	8015510 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014950:	4a03      	ldr	r2, [pc, #12]	; (8014960 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	0802dd90 	.word	0x0802dd90

08014964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	4618      	mov	r0, r3
 8014970:	f000 fdce 	bl	8015510 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014974:	4a03      	ldr	r2, [pc, #12]	; (8014984 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	4618      	mov	r0, r3
 801497e:	3708      	adds	r7, #8
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	0802dd5c 	.word	0x0802dd5c

08014988 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	4618      	mov	r0, r3
 8014994:	f000 fdbc 	bl	8015510 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014998:	4a03      	ldr	r2, [pc, #12]	; (80149a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	601a      	str	r2, [r3, #0]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	4618      	mov	r0, r3
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	0802dd28 	.word	0x0802dd28

080149ac <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80149ac:	b5b0      	push	{r4, r5, r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af02      	add	r7, sp, #8
 80149b2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f103 0414 	add.w	r4, r3, #20
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f246 425c 	movw	r2, #25692	; 0x645c
 80149c8:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80149ca:	6879      	ldr	r1, [r7, #4]
 80149cc:	f246 4374 	movw	r3, #25716	; 0x6474
 80149d0:	440b      	add	r3, r1
                     app(model, *this)
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	4613      	mov	r3, r2
 80149d6:	462a      	mov	r2, r5
 80149d8:	4621      	mov	r1, r4
 80149da:	f7ff ff3f 	bl	801485c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80149de:	4a1a      	ldr	r2, [pc, #104]	; (8014a48 <_ZN12FrontendHeapC1Ev+0x9c>)
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	3314      	adds	r3, #20
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7ff ffa9 	bl	8014940 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	332c      	adds	r3, #44	; 0x2c
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7ff ffb6 	bl	8014964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	f246 435c 	movw	r3, #25692	; 0x645c
 80149fe:	4413      	add	r3, r2
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7ff ffc1 	bl	8014988 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014a06:	687a      	ldr	r2, [r7, #4]
 8014a08:	f246 4370 	movw	r3, #25712	; 0x6470
 8014a0c:	4413      	add	r3, r2
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe fdc2 	bl	8013598 <_ZN5ModelC1Ev>
 8014a14:	687a      	ldr	r2, [r7, #4]
 8014a16:	f246 4374 	movw	r3, #25716	; 0x6474
 8014a1a:	4413      	add	r3, r2
 8014a1c:	687a      	ldr	r2, [r7, #4]
 8014a1e:	f246 4170 	movw	r1, #25712	; 0x6470
 8014a22:	4411      	add	r1, r2
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fe fa7e 	bl	8012f28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	f246 4374 	movw	r3, #25716	; 0x6474
 8014a34:	4413      	add	r3, r2
 8014a36:	4619      	mov	r1, r3
 8014a38:	f7ff ff02 	bl	8014840 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bdb0      	pop	{r4, r5, r7, pc}
 8014a46:	bf00      	nop
 8014a48:	0802dd14 	.word	0x0802dd14

08014a4c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b086      	sub	sp, #24
 8014a50:	af02      	add	r7, sp, #8
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
 8014a58:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	8bbb      	ldrh	r3, [r7, #28]
 8014a5e:	9301      	str	r3, [sp, #4]
 8014a60:	8b3b      	ldrh	r3, [r7, #24]
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	68b9      	ldr	r1, [r7, #8]
 8014a6a:	f7ff fe3f 	bl	80146ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014a6e:	4a04      	ldr	r2, [pc, #16]	; (8014a80 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	601a      	str	r2, [r3, #0]
    }
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	0802dde8 	.word	0x0802dde8

08014a84 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b086      	sub	sp, #24
 8014a88:	af02      	add	r7, sp, #8
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	603b      	str	r3, [r7, #0]
 8014a92:	68f8      	ldr	r0, [r7, #12]
 8014a94:	8bbb      	ldrh	r3, [r7, #28]
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	8b3b      	ldrh	r3, [r7, #24]
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	f7ff ffd3 	bl	8014a4c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014aa6:	4a04      	ldr	r2, [pc, #16]	; (8014ab8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	601a      	str	r2, [r3, #0]
    }
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	0802dbe4 	.word	0x0802dbe4

08014abc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	4a04      	ldr	r2, [pc, #16]	; (8014ad8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	601a      	str	r2, [r3, #0]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr
 8014ad8:	0802dbcc 	.word	0x0802dbcc

08014adc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7ff ffe8 	bl	8014abc <_ZN8touchgfx15TouchControllerC1Ev>
 8014aec:	4a03      	ldr	r2, [pc, #12]	; (8014afc <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	601a      	str	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4618      	mov	r0, r3
 8014af6:	3708      	adds	r7, #8
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}
 8014afc:	0802dbb4 	.word	0x0802dbb4

08014b00 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1024, 600);

void touchgfx_init()
{
 8014b00:	b590      	push	{r4, r7, lr}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014b06:	f7fd ffe3 	bl	8012ad0 <_ZN14BitmapDatabase11getInstanceEv>
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	f7fd ffea 	bl	8012ae4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014b10:	4603      	mov	r3, r0
 8014b12:	4619      	mov	r1, r3
 8014b14:	2300      	movs	r3, #0
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f008 fc07 	bl	801d330 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014b22:	4809      	ldr	r0, [pc, #36]	; (8014b48 <touchgfx_init+0x48>)
 8014b24:	f7ff fd3c 	bl	80145a0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014b28:	2000      	movs	r0, #0
 8014b2a:	f7fe f915 	bl	8012d58 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014b2e:	4807      	ldr	r0, [pc, #28]	; (8014b4c <touchgfx_init+0x4c>)
 8014b30:	f008 fb40 	bl	801d1b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014b34:	f7ff feb4 	bl	80148a0 <_ZN12FrontendHeap11getInstanceEv>
 8014b38:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 8014b3a:	4805      	ldr	r0, [pc, #20]	; (8014b50 <touchgfx_init+0x50>)
 8014b3c:	f7fe ff86 	bl	8013a4c <_ZN11TouchGFXHAL10initializeEv>
}
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd90      	pop	{r4, r7, pc}
 8014b48:	20014aa4 	.word	0x20014aa4
 8014b4c:	20000018 	.word	0x20000018
 8014b50:	20014aa8 	.word	0x20014aa8

08014b54 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014b58:	4802      	ldr	r0, [pc, #8]	; (8014b64 <touchgfx_taskEntry+0x10>)
 8014b5a:	f000 feee 	bl	801593a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014b5e:	bf00      	nop
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	20014aa8 	.word	0x20014aa8

08014b68 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	4a11      	ldr	r2, [pc, #68]	; (8014bb8 <_ZN12FrontendHeapD1Ev+0x50>)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	601a      	str	r2, [r3, #0]
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	f246 4374 	movw	r3, #25716	; 0x6474
 8014b7c:	4413      	add	r3, r2
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fe f99c 	bl	8012ebc <_ZN19FrontendApplicationD1Ev>
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	f246 435c 	movw	r3, #25692	; 0x645c
 8014b8a:	4413      	add	r3, r2
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f000 f827 	bl	8014be0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	332c      	adds	r3, #44	; 0x2c
 8014b96:	4618      	mov	r0, r3
 8014b98:	f000 f844 	bl	8014c24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	3314      	adds	r3, #20
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f000 f863 	bl	8014c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ff fea7 	bl	80148fc <_ZN16FrontendHeapBaseD1Ev>
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0802dd14 	.word	0x0802dd14

08014bbc <_ZN12FrontendHeapD0Ev>:
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f7ff ffcf 	bl	8014b68 <_ZN12FrontendHeapD1Ev>
 8014bca:	f246 51cc 	movw	r1, #26060	; 0x65cc
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f015 fdb1 	bl	802a736 <_ZdlPvj>
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
	...

08014be0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	4a05      	ldr	r2, [pc, #20]	; (8014c00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	601a      	str	r2, [r3, #0]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f000 fc8b 	bl	801550c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0802dd28 	.word	0x0802dd28

08014c04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ffe7 	bl	8014be0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c12:	2114      	movs	r1, #20
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f015 fd8e 	bl	802a736 <_ZdlPvj>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	4a05      	ldr	r2, [pc, #20]	; (8014c44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	601a      	str	r2, [r3, #0]
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	4618      	mov	r0, r3
 8014c36:	f000 fc69 	bl	801550c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	0802dd5c 	.word	0x0802dd5c

08014c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f7ff ffe7 	bl	8014c24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c56:	f246 4130 	movw	r1, #25648	; 0x6430
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f015 fd6b 	bl	802a736 <_ZdlPvj>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	4618      	mov	r0, r3
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
	...

08014c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	4a05      	ldr	r2, [pc, #20]	; (8014c8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	601a      	str	r2, [r3, #0]
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f000 fc45 	bl	801550c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	4618      	mov	r0, r3
 8014c86:	3708      	adds	r7, #8
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	0802dd90 	.word	0x0802dd90

08014c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7ff ffe7 	bl	8014c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c9e:	2118      	movs	r1, #24
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f015 fd48 	bl	802a736 <_ZdlPvj>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	4a05      	ldr	r2, [pc, #20]	; (8014cd0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	601a      	str	r2, [r3, #0]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7ff fcbd 	bl	8014640 <_ZN8touchgfx3LCDD1Ev>
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}
 8014cd0:	08030924 	.word	0x08030924

08014cd4 <_ZN8touchgfx8LCD16bppD0Ev>:
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b082      	sub	sp, #8
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f7ff ffe7 	bl	8014cb0 <_ZN8touchgfx8LCD16bppD1Ev>
 8014ce2:	2178      	movs	r1, #120	; 0x78
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f015 fd26 	bl	802a736 <_ZdlPvj>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <_Z41__static_initialization_and_destruction_0ii>:
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af02      	add	r7, sp, #8
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	d119      	bne.n	8014d38 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d114      	bne.n	8014d38 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014d0e:	4818      	ldr	r0, [pc, #96]	; (8014d70 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014d10:	f7ff fee4 	bl	8014adc <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014d14:	4817      	ldr	r0, [pc, #92]	; (8014d74 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014d16:	f7ff f8c1 	bl	8013e9c <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 8014d1a:	4817      	ldr	r0, [pc, #92]	; (8014d78 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014d1c:	f00b fb8c 	bl	8020438 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1024, 600);
 8014d20:	f44f 7316 	mov.w	r3, #600	; 0x258
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d2a:	9300      	str	r3, [sp, #0]
 8014d2c:	4b10      	ldr	r3, [pc, #64]	; (8014d70 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014d2e:	4a12      	ldr	r2, [pc, #72]	; (8014d78 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014d30:	4910      	ldr	r1, [pc, #64]	; (8014d74 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014d32:	4812      	ldr	r0, [pc, #72]	; (8014d7c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014d34:	f7ff fea6 	bl	8014a84 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d113      	bne.n	8014d66 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d10e      	bne.n	8014d66 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014d48:	480c      	ldr	r0, [pc, #48]	; (8014d7c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014d4a:	f7fe fef7 	bl	8013b3c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014d4e:	480c      	ldr	r0, [pc, #48]	; (8014d80 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014d50:	f7f4 fa6e 	bl	8009230 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8014d54:	4808      	ldr	r0, [pc, #32]	; (8014d78 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014d56:	f7ff ffab 	bl	8014cb0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F7DMA dma;
 8014d5a:	4806      	ldr	r0, [pc, #24]	; (8014d74 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014d5c:	f7ff f8c8 	bl	8013ef0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014d60:	4803      	ldr	r0, [pc, #12]	; (8014d70 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014d62:	f7fe fcd7 	bl	8013714 <_ZN20STM32TouchControllerD1Ev>
}
 8014d66:	bf00      	nop
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	20013e08 	.word	0x20013e08
 8014d74:	20013e0c 	.word	0x20013e0c
 8014d78:	20014a2c 	.word	0x20014a2c
 8014d7c:	20014aa8 	.word	0x20014aa8
 8014d80:	20000018 	.word	0x20000018

08014d84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014d8c:	2301      	movs	r3, #1
    }
 8014d8e:	4618      	mov	r0, r3
 8014d90:	370c      	adds	r7, #12
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr

08014d9a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014d9a:	b480      	push	{r7}
 8014d9c:	b083      	sub	sp, #12
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014da2:	230c      	movs	r3, #12
    }
 8014da4:	4618      	mov	r0, r3
 8014da6:	370c      	adds	r7, #12
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014dbc:	887a      	ldrh	r2, [r7, #2]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	005b      	lsls	r3, r3, #1
 8014dc2:	4413      	add	r3, r2
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	3308      	adds	r3, #8
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	4413      	add	r3, r2
    }
 8014dcc:	4618      	mov	r0, r3
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	460b      	mov	r3, r1
 8014de2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014de4:	887a      	ldrh	r2, [r7, #2]
 8014de6:	4613      	mov	r3, r2
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	4413      	add	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	3308      	adds	r3, #8
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	4413      	add	r3, r2
    }
 8014df4:	4618      	mov	r0, r3
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014e08:	2301      	movs	r3, #1
    }
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	370c      	adds	r7, #12
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e14:	4770      	bx	lr

08014e16 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014e16:	b480      	push	{r7}
 8014e18:	b083      	sub	sp, #12
 8014e1a:	af00      	add	r7, sp, #0
 8014e1c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014e1e:	f246 4328 	movw	r3, #25640	; 0x6428
    }
 8014e22:	4618      	mov	r0, r3
 8014e24:	370c      	adds	r7, #12
 8014e26:	46bd      	mov	sp, r7
 8014e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014e2e:	b480      	push	{r7}
 8014e30:	b083      	sub	sp, #12
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	460b      	mov	r3, r1
 8014e38:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014e3a:	887b      	ldrh	r3, [r7, #2]
 8014e3c:	f246 4228 	movw	r2, #25640	; 0x6428
 8014e40:	fb02 f303 	mul.w	r3, r2, r3
 8014e44:	3308      	adds	r3, #8
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	4413      	add	r3, r2
    }
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	370c      	adds	r7, #12
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr

08014e56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Layout2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014e56:	b480      	push	{r7}
 8014e58:	b083      	sub	sp, #12
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
 8014e5e:	460b      	mov	r3, r1
 8014e60:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014e62:	887b      	ldrh	r3, [r7, #2]
 8014e64:	f246 4228 	movw	r2, #25640	; 0x6428
 8014e68:	fb02 f303 	mul.w	r3, r2, r3
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	4413      	add	r3, r2
    }
 8014e72:	4618      	mov	r0, r3
 8014e74:	370c      	adds	r7, #12
 8014e76:	46bd      	mov	sp, r7
 8014e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7c:	4770      	bx	lr

08014e7e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014e7e:	b480      	push	{r7}
 8014e80:	b083      	sub	sp, #12
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014e86:	2301      	movs	r3, #1
    }
 8014e88:	4618      	mov	r0, r3
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr

08014e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014e9c:	2310      	movs	r3, #16
    }
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr

08014eaa <_ZN8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014eaa:	b480      	push	{r7}
 8014eac:	b083      	sub	sp, #12
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014eb6:	887b      	ldrh	r3, [r7, #2]
 8014eb8:	011b      	lsls	r3, r3, #4
 8014eba:	3308      	adds	r3, #8
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	4413      	add	r3, r2
    }
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24SettingsChannelPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014ed8:	887b      	ldrh	r3, [r7, #2]
 8014eda:	011b      	lsls	r3, r3, #4
 8014edc:	3308      	adds	r3, #8
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	4413      	add	r3, r2
    }
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	370c      	adds	r7, #12
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eec:	4770      	bx	lr

08014eee <_GLOBAL__sub_I_touchgfx_init>:
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ef6:	2001      	movs	r0, #1
 8014ef8:	f7ff fefc 	bl	8014cf4 <_Z41__static_initialization_and_destruction_0ii>
 8014efc:	bd80      	pop	{r7, pc}

08014efe <_GLOBAL__sub_D_touchgfx_init>:
 8014efe:	b580      	push	{r7, lr}
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f06:	2000      	movs	r0, #0
 8014f08:	f7ff fef4 	bl	8014cf4 <_Z41__static_initialization_and_destruction_0ii>
 8014f0c:	bd80      	pop	{r7, pc}

08014f0e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b082      	sub	sp, #8
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	3318      	adds	r3, #24
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	4798      	blx	r3
    }
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}

08014f2a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014f2a:	b480      	push	{r7}
 8014f2c:	b083      	sub	sp, #12
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
 8014f32:	460b      	mov	r3, r1
 8014f34:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	78fa      	ldrb	r2, [r7, #3]
 8014f3a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014f3e:	bf00      	nop
 8014f40:	370c      	adds	r7, #12
 8014f42:	46bd      	mov	sp, r7
 8014f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f48:	4770      	bx	lr

08014f4a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014f4a:	b480      	push	{r7}
 8014f4c:	b083      	sub	sp, #12
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014f58:	3301      	adds	r3, #1
 8014f5a:	b2da      	uxtb	r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014f62:	bf00      	nop
 8014f64:	370c      	adds	r7, #12
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr
	...

08014f70 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014f7c:	78fb      	ldrb	r3, [r7, #3]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d002      	beq.n	8014f88 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014f82:	78fb      	ldrb	r3, [r7, #3]
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	d105      	bne.n	8014f94 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	78fa      	ldrb	r2, [r7, #3]
 8014f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014f90:	2301      	movs	r3, #1
 8014f92:	e027      	b.n	8014fe4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014f94:	78fb      	ldrb	r3, [r7, #3]
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	d123      	bne.n	8014fe2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d014      	beq.n	8014fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	3380      	adds	r3, #128	; 0x80
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	4798      	blx	r3
 8014fae:	4603      	mov	r3, r0
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d008      	beq.n	8014fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014fba:	4b0c      	ldr	r3, [pc, #48]	; (8014fec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	f083 0301 	eor.w	r3, r3, #1
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d001      	beq.n	8014fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e000      	b.n	8014fce <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d005      	beq.n	8014fde <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	78fa      	ldrb	r2, [r7, #3]
 8014fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014fda:	2301      	movs	r3, #1
 8014fdc:	e002      	b.n	8014fe4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	e000      	b.n	8014fe4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014fe2:	2300      	movs	r3, #0
    }
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	20014b32 	.word	0x20014b32

08014ff0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	683a      	ldr	r2, [r7, #0]
 8014ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015000:	bf00      	nop
 8015002:	370c      	adds	r7, #12
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr

0801500c <__NVIC_EnableIRQ>:
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	4603      	mov	r3, r0
 8015014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801501a:	2b00      	cmp	r3, #0
 801501c:	db0b      	blt.n	8015036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801501e:	79fb      	ldrb	r3, [r7, #7]
 8015020:	f003 021f 	and.w	r2, r3, #31
 8015024:	4907      	ldr	r1, [pc, #28]	; (8015044 <__NVIC_EnableIRQ+0x38>)
 8015026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801502a:	095b      	lsrs	r3, r3, #5
 801502c:	2001      	movs	r0, #1
 801502e:	fa00 f202 	lsl.w	r2, r0, r2
 8015032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015036:	bf00      	nop
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	e000e100 	.word	0xe000e100

08015048 <__NVIC_DisableIRQ>:
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	4603      	mov	r3, r0
 8015050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015056:	2b00      	cmp	r3, #0
 8015058:	db12      	blt.n	8015080 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	f003 021f 	and.w	r2, r3, #31
 8015060:	490a      	ldr	r1, [pc, #40]	; (801508c <__NVIC_DisableIRQ+0x44>)
 8015062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015066:	095b      	lsrs	r3, r3, #5
 8015068:	2001      	movs	r0, #1
 801506a:	fa00 f202 	lsl.w	r2, r0, r2
 801506e:	3320      	adds	r3, #32
 8015070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015074:	f3bf 8f4f 	dsb	sy
}
 8015078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801507a:	f3bf 8f6f 	isb	sy
}
 801507e:	bf00      	nop
}
 8015080:	bf00      	nop
 8015082:	370c      	adds	r7, #12
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr
 801508c:	e000e100 	.word	0xe000e100

08015090 <__NVIC_SetPriority>:
{
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	4603      	mov	r3, r0
 8015098:	6039      	str	r1, [r7, #0]
 801509a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801509c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	db0a      	blt.n	80150ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	490c      	ldr	r1, [pc, #48]	; (80150dc <__NVIC_SetPriority+0x4c>)
 80150aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150ae:	0112      	lsls	r2, r2, #4
 80150b0:	b2d2      	uxtb	r2, r2
 80150b2:	440b      	add	r3, r1
 80150b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80150b8:	e00a      	b.n	80150d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	b2da      	uxtb	r2, r3
 80150be:	4908      	ldr	r1, [pc, #32]	; (80150e0 <__NVIC_SetPriority+0x50>)
 80150c0:	79fb      	ldrb	r3, [r7, #7]
 80150c2:	f003 030f 	and.w	r3, r3, #15
 80150c6:	3b04      	subs	r3, #4
 80150c8:	0112      	lsls	r2, r2, #4
 80150ca:	b2d2      	uxtb	r2, r2
 80150cc:	440b      	add	r3, r1
 80150ce:	761a      	strb	r2, [r3, #24]
}
 80150d0:	bf00      	nop
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	e000e100 	.word	0xe000e100
 80150e0:	e000ed00 	.word	0xe000ed00

080150e4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80150e4:	b480      	push	{r7}
 80150e6:	b085      	sub	sp, #20
 80150e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80150ea:	4b21      	ldr	r3, [pc, #132]	; (8015170 <SCB_CleanInvalidateDCache+0x8c>)
 80150ec:	2200      	movs	r2, #0
 80150ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80150f2:	f3bf 8f4f 	dsb	sy
}
 80150f6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80150f8:	4b1d      	ldr	r3, [pc, #116]	; (8015170 <SCB_CleanInvalidateDCache+0x8c>)
 80150fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150fe:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	0b5b      	lsrs	r3, r3, #13
 8015104:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015108:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	08db      	lsrs	r3, r3, #3
 801510e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015112:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	015a      	lsls	r2, r3, #5
 8015118:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801511c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801511e:	68ba      	ldr	r2, [r7, #8]
 8015120:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015122:	4913      	ldr	r1, [pc, #76]	; (8015170 <SCB_CleanInvalidateDCache+0x8c>)
 8015124:	4313      	orrs	r3, r2
 8015126:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	1e5a      	subs	r2, r3, #1
 801512e:	60ba      	str	r2, [r7, #8]
 8015130:	2b00      	cmp	r3, #0
 8015132:	bf14      	ite	ne
 8015134:	2301      	movne	r3, #1
 8015136:	2300      	moveq	r3, #0
 8015138:	b2db      	uxtb	r3, r3
 801513a:	2b00      	cmp	r3, #0
 801513c:	d000      	beq.n	8015140 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801513e:	e7e9      	b.n	8015114 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	1e5a      	subs	r2, r3, #1
 8015144:	60fa      	str	r2, [r7, #12]
 8015146:	2b00      	cmp	r3, #0
 8015148:	bf14      	ite	ne
 801514a:	2301      	movne	r3, #1
 801514c:	2300      	moveq	r3, #0
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b00      	cmp	r3, #0
 8015152:	d000      	beq.n	8015156 <SCB_CleanInvalidateDCache+0x72>
    do {
 8015154:	e7d9      	b.n	801510a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8015156:	f3bf 8f4f 	dsb	sy
}
 801515a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801515c:	f3bf 8f6f 	isb	sy
}
 8015160:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015162:	bf00      	nop
 8015164:	3714      	adds	r7, #20
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	e000ed00 	.word	0xe000ed00

08015174 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015174:	b5b0      	push	{r4, r5, r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	4618      	mov	r0, r3
 8015180:	f000 fe9c 	bl	8015ebc <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015184:	687d      	ldr	r5, [r7, #4]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	334c      	adds	r3, #76	; 0x4c
 801518c:	681c      	ldr	r4, [r3, #0]
 801518e:	f005 f82f 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 8015192:	4603      	mov	r3, r0
 8015194:	4619      	mov	r1, r3
 8015196:	4628      	mov	r0, r5
 8015198:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	490d      	ldr	r1, [pc, #52]	; (80151d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801519e:	4618      	mov	r0, r3
 80151a0:	f7ff ff26 	bl	8014ff0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2101      	movs	r1, #1
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7ff fee1 	bl	8014f70 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	3370      	adds	r3, #112	; 0x70
 80151b6:	681c      	ldr	r4, [r3, #0]
 80151b8:	2300      	movs	r3, #0
 80151ba:	2200      	movs	r2, #0
 80151bc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80151c0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2101      	movs	r1, #1
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7ff feaf 	bl	8014f2a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80151cc:	bf00      	nop
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bdb0      	pop	{r4, r5, r7, pc}
 80151d4:	08013c9d 	.word	0x08013c9d

080151d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80151e0:	2109      	movs	r1, #9
 80151e2:	205a      	movs	r0, #90	; 0x5a
 80151e4:	f7ff ff54 	bl	8015090 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80151e8:	2109      	movs	r1, #9
 80151ea:	2058      	movs	r0, #88	; 0x58
 80151ec:	f7ff ff50 	bl	8015090 <__NVIC_SetPriority>
}
 80151f0:	bf00      	nop
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015200:	205a      	movs	r0, #90	; 0x5a
 8015202:	f7ff ff03 	bl	801500c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8015206:	2058      	movs	r0, #88	; 0x58
 8015208:	f7ff ff00 	bl	801500c <__NVIC_EnableIRQ>
}
 801520c:	bf00      	nop
 801520e:	3708      	adds	r7, #8
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}

08015214 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801521c:	205a      	movs	r0, #90	; 0x5a
 801521e:	f7ff ff13 	bl	8015048 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015222:	2058      	movs	r0, #88	; 0x58
 8015224:	f7ff ff10 	bl	8015048 <__NVIC_DisableIRQ>
}
 8015228:	bf00      	nop
 801522a:	3708      	adds	r7, #8
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}

08015230 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015230:	b480      	push	{r7}
 8015232:	b083      	sub	sp, #12
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015238:	4b11      	ldr	r3, [pc, #68]	; (8015280 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	b29b      	uxth	r3, r3
 801523e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015242:	b29b      	uxth	r3, r3
 8015244:	3b01      	subs	r3, #1
 8015246:	b29a      	uxth	r2, r3
 8015248:	4b0e      	ldr	r3, [pc, #56]	; (8015284 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801524a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801524c:	4b0c      	ldr	r3, [pc, #48]	; (8015280 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801524e:	691b      	ldr	r3, [r3, #16]
 8015250:	b29b      	uxth	r3, r3
 8015252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015256:	b29b      	uxth	r3, r3
 8015258:	3b01      	subs	r3, #1
 801525a:	b29a      	uxth	r2, r3
 801525c:	4b0a      	ldr	r3, [pc, #40]	; (8015288 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801525e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015260:	4b08      	ldr	r3, [pc, #32]	; (8015284 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015262:	881a      	ldrh	r2, [r3, #0]
 8015264:	4b06      	ldr	r3, [pc, #24]	; (8015280 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015266:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015268:	4b05      	ldr	r3, [pc, #20]	; (8015280 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801526c:	4a04      	ldr	r2, [pc, #16]	; (8015280 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801526e:	f043 0301 	orr.w	r3, r3, #1
 8015272:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015274:	bf00      	nop
 8015276:	370c      	adds	r7, #12
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr
 8015280:	40016800 	.word	0x40016800
 8015284:	20014b24 	.word	0x20014b24
 8015288:	20014b26 	.word	0x20014b26

0801528c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015294:	4b03      	ldr	r3, [pc, #12]	; (80152a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015298:	4618      	mov	r0, r3
 801529a:	370c      	adds	r7, #12
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr
 80152a4:	40016884 	.word	0x40016884

080152a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80152b2:	4a06      	ldr	r2, [pc, #24]	; (80152cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80152b8:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80152ba:	2201      	movs	r2, #1
 80152bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80152be:	bf00      	nop
 80152c0:	370c      	adds	r7, #12
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	40016884 	.word	0x40016884
 80152d0:	40016800 	.word	0x40016800

080152d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6839      	ldr	r1, [r7, #0]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 faff 	bl	80158e6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 80152e8:	f7ff fefc 	bl	80150e4 <SCB_CleanInvalidateDCache>
}
 80152ec:	bf00      	nop
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	60f8      	str	r0, [r7, #12]
 80152fc:	60b9      	str	r1, [r7, #8]
 80152fe:	607a      	str	r2, [r7, #4]
 8015300:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	68b9      	ldr	r1, [r7, #8]
 801530a:	f000 fc20 	bl	8015b4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801530e:	4603      	mov	r3, r0
}
 8015310:	4618      	mov	r0, r3
 8015312:	3710      	adds	r7, #16
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015318:	b480      	push	{r7}
 801531a:	b085      	sub	sp, #20
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015320:	4b0d      	ldr	r3, [pc, #52]	; (8015358 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015324:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015326:	4b0c      	ldr	r3, [pc, #48]	; (8015358 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	b29b      	uxth	r3, r3
 801532c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015330:	b29b      	uxth	r3, r3
 8015332:	3301      	adds	r3, #1
 8015334:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015336:	89fa      	ldrh	r2, [r7, #14]
 8015338:	89bb      	ldrh	r3, [r7, #12]
 801533a:	429a      	cmp	r2, r3
 801533c:	d304      	bcc.n	8015348 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801533e:	89fa      	ldrh	r2, [r7, #14]
 8015340:	89bb      	ldrh	r3, [r7, #12]
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	b29b      	uxth	r3, r3
 8015346:	e000      	b.n	801534a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015348:	2300      	movs	r3, #0
}
 801534a:	4618      	mov	r0, r3
 801534c:	3714      	adds	r7, #20
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr
 8015356:	bf00      	nop
 8015358:	40016800 	.word	0x40016800

0801535c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 8015364:	f7ff febe 	bl	80150e4 <SCB_CleanInvalidateDCache>
}
 8015368:	bf00      	nop
 801536a:	3708      	adds	r7, #8
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 8015378:	f7ff feb4 	bl	80150e4 <SCB_CleanInvalidateDCache>
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801538c:	4b1a      	ldr	r3, [pc, #104]	; (80153f8 <HAL_LTDC_LineEventCallback+0x74>)
 801538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015390:	4a1a      	ldr	r2, [pc, #104]	; (80153fc <HAL_LTDC_LineEventCallback+0x78>)
 8015392:	8812      	ldrh	r2, [r2, #0]
 8015394:	4293      	cmp	r3, r2
 8015396:	bf0c      	ite	eq
 8015398:	2301      	moveq	r3, #1
 801539a:	2300      	movne	r3, #0
 801539c:	b2db      	uxtb	r3, r3
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d017      	beq.n	80153d2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80153a2:	4b17      	ldr	r3, [pc, #92]	; (8015400 <HAL_LTDC_LineEventCallback+0x7c>)
 80153a4:	881b      	ldrh	r3, [r3, #0]
 80153a6:	4619      	mov	r1, r3
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f7ed fdf3 	bl	8002f94 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80153ae:	f7f4 fb0d 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 80153b2:	4603      	mov	r3, r0
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7ff fdc8 	bl	8014f4a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80153ba:	f7fe fc47 	bl	8013c4c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80153be:	f7f4 fb05 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 80153c2:	4603      	mov	r3, r0
 80153c4:	4618      	mov	r0, r3
 80153c6:	f001 f801 	bl	80163cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80153ca:	2000      	movs	r0, #0
 80153cc:	f7fe f9c4 	bl	8013758 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80153d0:	e00e      	b.n	80153f0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80153d2:	4b0a      	ldr	r3, [pc, #40]	; (80153fc <HAL_LTDC_LineEventCallback+0x78>)
 80153d4:	881b      	ldrh	r3, [r3, #0]
 80153d6:	4619      	mov	r1, r3
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7ed fddb 	bl	8002f94 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80153de:	2000      	movs	r0, #0
 80153e0:	f7fe f9c5 	bl	801376e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80153e4:	f7f4 faf2 	bl	80099cc <_ZN8touchgfx3HAL11getInstanceEv>
 80153e8:	4603      	mov	r3, r0
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7ff fd8f 	bl	8014f0e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80153f0:	bf00      	nop
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	40016800 	.word	0x40016800
 80153fc:	20014b24 	.word	0x20014b24
 8015400:	20014b26 	.word	0x20014b26

08015404 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015404:	8880      	ldrh	r0, [r0, #4]
 8015406:	4770      	bx	lr

08015408 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015408:	2300      	movs	r3, #0
 801540a:	8083      	strh	r3, [r0, #4]
 801540c:	4770      	bx	lr
	...

08015410 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015412:	6803      	ldr	r3, [r0, #0]
 8015414:	460e      	mov	r6, r1
 8015416:	2100      	movs	r1, #0
 8015418:	4605      	mov	r5, r0
 801541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801541c:	4798      	blx	r3
 801541e:	4604      	mov	r4, r0
 8015420:	682b      	ldr	r3, [r5, #0]
 8015422:	4628      	mov	r0, r5
 8015424:	1b34      	subs	r4, r6, r4
 8015426:	6a1b      	ldr	r3, [r3, #32]
 8015428:	b2a4      	uxth	r4, r4
 801542a:	4798      	blx	r3
 801542c:	88ab      	ldrh	r3, [r5, #4]
 801542e:	fbb4 f4f0 	udiv	r4, r4, r0
 8015432:	42a3      	cmp	r3, r4
 8015434:	d805      	bhi.n	8015442 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015436:	4b0e      	ldr	r3, [pc, #56]	; (8015470 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015438:	2120      	movs	r1, #32
 801543a:	4a0e      	ldr	r2, [pc, #56]	; (8015474 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801543c:	480e      	ldr	r0, [pc, #56]	; (8015478 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801543e:	f015 f9a9 	bl	802a794 <__assert_func>
 8015442:	682b      	ldr	r3, [r5, #0]
 8015444:	2100      	movs	r1, #0
 8015446:	4628      	mov	r0, r5
 8015448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801544a:	4798      	blx	r3
 801544c:	682b      	ldr	r3, [r5, #0]
 801544e:	4607      	mov	r7, r0
 8015450:	4628      	mov	r0, r5
 8015452:	6a1b      	ldr	r3, [r3, #32]
 8015454:	4798      	blx	r3
 8015456:	1bf3      	subs	r3, r6, r7
 8015458:	b29b      	uxth	r3, r3
 801545a:	fbb3 f2f0 	udiv	r2, r3, r0
 801545e:	fb02 3010 	mls	r0, r2, r0, r3
 8015462:	b118      	cbz	r0, 801546c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015464:	4b05      	ldr	r3, [pc, #20]	; (801547c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015466:	2121      	movs	r1, #33	; 0x21
 8015468:	4a02      	ldr	r2, [pc, #8]	; (8015474 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801546a:	e7e7      	b.n	801543c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801546c:	4620      	mov	r0, r4
 801546e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015470:	0802de9c 	.word	0x0802de9c
 8015474:	0802e00a 	.word	0x0802e00a
 8015478:	0802deb1 	.word	0x0802deb1
 801547c:	0802dedf 	.word	0x0802dedf

08015480 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015480:	b538      	push	{r3, r4, r5, lr}
 8015482:	6803      	ldr	r3, [r0, #0]
 8015484:	460d      	mov	r5, r1
 8015486:	4604      	mov	r4, r0
 8015488:	6a1b      	ldr	r3, [r3, #32]
 801548a:	4798      	blx	r3
 801548c:	4285      	cmp	r5, r0
 801548e:	d905      	bls.n	801549c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015490:	4b0c      	ldr	r3, [pc, #48]	; (80154c4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015492:	2132      	movs	r1, #50	; 0x32
 8015494:	4a0c      	ldr	r2, [pc, #48]	; (80154c8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015496:	480d      	ldr	r0, [pc, #52]	; (80154cc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015498:	f015 f97c 	bl	802a794 <__assert_func>
 801549c:	6823      	ldr	r3, [r4, #0]
 801549e:	4620      	mov	r0, r4
 80154a0:	88a5      	ldrh	r5, [r4, #4]
 80154a2:	69db      	ldr	r3, [r3, #28]
 80154a4:	4798      	blx	r3
 80154a6:	4285      	cmp	r5, r0
 80154a8:	d303      	bcc.n	80154b2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80154aa:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80154ac:	2133      	movs	r1, #51	; 0x33
 80154ae:	4a06      	ldr	r2, [pc, #24]	; (80154c8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80154b0:	e7f1      	b.n	8015496 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	4620      	mov	r0, r4
 80154b6:	88a1      	ldrh	r1, [r4, #4]
 80154b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ba:	4798      	blx	r3
 80154bc:	88a3      	ldrh	r3, [r4, #4]
 80154be:	3301      	adds	r3, #1
 80154c0:	80a3      	strh	r3, [r4, #4]
 80154c2:	bd38      	pop	{r3, r4, r5, pc}
 80154c4:	0802df59 	.word	0x0802df59
 80154c8:	0802e04d 	.word	0x0802e04d
 80154cc:	0802deb1 	.word	0x0802deb1
 80154d0:	0802df70 	.word	0x0802df70

080154d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80154d4:	b570      	push	{r4, r5, r6, lr}
 80154d6:	6803      	ldr	r3, [r0, #0]
 80154d8:	4616      	mov	r6, r2
 80154da:	4604      	mov	r4, r0
 80154dc:	460d      	mov	r5, r1
 80154de:	6a1b      	ldr	r3, [r3, #32]
 80154e0:	4798      	blx	r3
 80154e2:	4286      	cmp	r6, r0
 80154e4:	d905      	bls.n	80154f2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80154e6:	4b06      	ldr	r3, [pc, #24]	; (8015500 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80154e8:	213c      	movs	r1, #60	; 0x3c
 80154ea:	4a06      	ldr	r2, [pc, #24]	; (8015504 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80154ec:	4806      	ldr	r0, [pc, #24]	; (8015508 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80154ee:	f015 f951 	bl	802a794 <__assert_func>
 80154f2:	6823      	ldr	r3, [r4, #0]
 80154f4:	4629      	mov	r1, r5
 80154f6:	4620      	mov	r0, r4
 80154f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154fe:	4718      	bx	r3
 8015500:	0802df59 	.word	0x0802df59
 8015504:	0802dfc0 	.word	0x0802dfc0
 8015508:	0802deb1 	.word	0x0802deb1

0801550c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801550c:	4770      	bx	lr
	...

08015510 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015510:	4a02      	ldr	r2, [pc, #8]	; (801551c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015512:	6002      	str	r2, [r0, #0]
 8015514:	2200      	movs	r2, #0
 8015516:	8082      	strh	r2, [r0, #4]
 8015518:	4770      	bx	lr
 801551a:	bf00      	nop
 801551c:	0802df94 	.word	0x0802df94

08015520 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015520:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015522:	2000      	movs	r0, #0
 8015524:	b12b      	cbz	r3, 8015532 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015526:	b920      	cbnz	r0, 8015532 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015528:	1a5a      	subs	r2, r3, r1
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	4250      	negs	r0, r2
 801552e:	4150      	adcs	r0, r2
 8015530:	e7f8      	b.n	8015524 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015532:	4770      	bx	lr

08015534 <_ZN8touchgfx9Container9removeAllEv>:
 8015534:	2200      	movs	r2, #0
 8015536:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015538:	b123      	cbz	r3, 8015544 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801553a:	6999      	ldr	r1, [r3, #24]
 801553c:	6281      	str	r1, [r0, #40]	; 0x28
 801553e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015542:	e7f8      	b.n	8015536 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015544:	4770      	bx	lr

08015546 <_ZN8touchgfx9Container6unlinkEv>:
 8015546:	2300      	movs	r3, #0
 8015548:	6283      	str	r3, [r0, #40]	; 0x28
 801554a:	4770      	bx	lr

0801554c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015550:	461f      	mov	r7, r3
 8015552:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015556:	460d      	mov	r5, r1
 8015558:	4616      	mov	r6, r2
 801555a:	b103      	cbz	r3, 801555e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801555c:	6038      	str	r0, [r7, #0]
 801555e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015560:	b314      	cbz	r4, 80155a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015562:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015566:	b1eb      	cbz	r3, 80155a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015568:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801556c:	428d      	cmp	r5, r1
 801556e:	db19      	blt.n	80155a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015570:	b289      	uxth	r1, r1
 8015572:	8923      	ldrh	r3, [r4, #8]
 8015574:	440b      	add	r3, r1
 8015576:	b21b      	sxth	r3, r3
 8015578:	429d      	cmp	r5, r3
 801557a:	da13      	bge.n	80155a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801557c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015580:	4296      	cmp	r6, r2
 8015582:	db0f      	blt.n	80155a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015584:	b292      	uxth	r2, r2
 8015586:	8963      	ldrh	r3, [r4, #10]
 8015588:	4413      	add	r3, r2
 801558a:	b21b      	sxth	r3, r3
 801558c:	429e      	cmp	r6, r3
 801558e:	da09      	bge.n	80155a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015590:	6823      	ldr	r3, [r4, #0]
 8015592:	1ab2      	subs	r2, r6, r2
 8015594:	1a69      	subs	r1, r5, r1
 8015596:	4620      	mov	r0, r4
 8015598:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801559c:	b212      	sxth	r2, r2
 801559e:	463b      	mov	r3, r7
 80155a0:	b209      	sxth	r1, r1
 80155a2:	47c0      	blx	r8
 80155a4:	69a4      	ldr	r4, [r4, #24]
 80155a6:	e7db      	b.n	8015560 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80155a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155ac <_ZNK8touchgfx9Container12getSolidRectEv>:
 80155ac:	2200      	movs	r2, #0
 80155ae:	8002      	strh	r2, [r0, #0]
 80155b0:	8042      	strh	r2, [r0, #2]
 80155b2:	8082      	strh	r2, [r0, #4]
 80155b4:	80c2      	strh	r2, [r0, #6]
 80155b6:	4770      	bx	lr

080155b8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80155b8:	b570      	push	{r4, r5, r6, lr}
 80155ba:	460d      	mov	r5, r1
 80155bc:	4616      	mov	r6, r2
 80155be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155c0:	b13c      	cbz	r4, 80155d2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80155c2:	6823      	ldr	r3, [r4, #0]
 80155c4:	4620      	mov	r0, r4
 80155c6:	4632      	mov	r2, r6
 80155c8:	4629      	mov	r1, r5
 80155ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155cc:	4798      	blx	r3
 80155ce:	69a4      	ldr	r4, [r4, #24]
 80155d0:	e7f6      	b.n	80155c0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80155d2:	bd70      	pop	{r4, r5, r6, pc}

080155d4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	460d      	mov	r5, r1
 80155d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155da:	b134      	cbz	r4, 80155ea <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	4621      	mov	r1, r4
 80155e0:	4628      	mov	r0, r5
 80155e2:	689b      	ldr	r3, [r3, #8]
 80155e4:	4798      	blx	r3
 80155e6:	69a4      	ldr	r4, [r4, #24]
 80155e8:	e7f7      	b.n	80155da <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80155ea:	bd38      	pop	{r3, r4, r5, pc}

080155ec <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80155ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155ee:	b19b      	cbz	r3, 8015618 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80155f0:	428b      	cmp	r3, r1
 80155f2:	d109      	bne.n	8015608 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80155f4:	699a      	ldr	r2, [r3, #24]
 80155f6:	2100      	movs	r1, #0
 80155f8:	6159      	str	r1, [r3, #20]
 80155fa:	6282      	str	r2, [r0, #40]	; 0x28
 80155fc:	b902      	cbnz	r2, 8015600 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80155fe:	4770      	bx	lr
 8015600:	6199      	str	r1, [r3, #24]
 8015602:	4770      	bx	lr
 8015604:	4613      	mov	r3, r2
 8015606:	b13a      	cbz	r2, 8015618 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015608:	699a      	ldr	r2, [r3, #24]
 801560a:	428a      	cmp	r2, r1
 801560c:	d1fa      	bne.n	8015604 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801560e:	698a      	ldr	r2, [r1, #24]
 8015610:	619a      	str	r2, [r3, #24]
 8015612:	2300      	movs	r3, #0
 8015614:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015618:	4770      	bx	lr

0801561a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801561a:	b410      	push	{r4}
 801561c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801561e:	4604      	mov	r4, r0
 8015620:	b92b      	cbnz	r3, 801562e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015622:	6803      	ldr	r3, [r0, #0]
 8015624:	4611      	mov	r1, r2
 8015626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801562c:	4718      	bx	r3
 801562e:	b941      	cbnz	r1, 8015642 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015630:	6193      	str	r3, [r2, #24]
 8015632:	6282      	str	r2, [r0, #40]	; 0x28
 8015634:	6154      	str	r4, [r2, #20]
 8015636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801563a:	4770      	bx	lr
 801563c:	4603      	mov	r3, r0
 801563e:	2800      	cmp	r0, #0
 8015640:	d0f9      	beq.n	8015636 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015642:	4299      	cmp	r1, r3
 8015644:	6998      	ldr	r0, [r3, #24]
 8015646:	d1f9      	bne.n	801563c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015648:	6190      	str	r0, [r2, #24]
 801564a:	618a      	str	r2, [r1, #24]
 801564c:	e7f2      	b.n	8015634 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015650:	4288      	cmp	r0, r1
 8015652:	b508      	push	{r3, lr}
 8015654:	d105      	bne.n	8015662 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015656:	4b11      	ldr	r3, [pc, #68]	; (801569c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015658:	2123      	movs	r1, #35	; 0x23
 801565a:	4a11      	ldr	r2, [pc, #68]	; (80156a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801565c:	4811      	ldr	r0, [pc, #68]	; (80156a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801565e:	f015 f899 	bl	802a794 <__assert_func>
 8015662:	694b      	ldr	r3, [r1, #20]
 8015664:	b11b      	cbz	r3, 801566e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015666:	4b10      	ldr	r3, [pc, #64]	; (80156a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015668:	2124      	movs	r1, #36	; 0x24
 801566a:	4a0d      	ldr	r2, [pc, #52]	; (80156a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801566c:	e7f6      	b.n	801565c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801566e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015672:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015674:	b913      	cbnz	r3, 801567c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015676:	6281      	str	r1, [r0, #40]	; 0x28
 8015678:	bd08      	pop	{r3, pc}
 801567a:	4613      	mov	r3, r2
 801567c:	699a      	ldr	r2, [r3, #24]
 801567e:	b12a      	cbz	r2, 801568c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015680:	428b      	cmp	r3, r1
 8015682:	d1fa      	bne.n	801567a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015684:	4b09      	ldr	r3, [pc, #36]	; (80156ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015686:	2135      	movs	r1, #53	; 0x35
 8015688:	4a05      	ldr	r2, [pc, #20]	; (80156a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801568a:	e7e7      	b.n	801565c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801568c:	428b      	cmp	r3, r1
 801568e:	d103      	bne.n	8015698 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015690:	4b06      	ldr	r3, [pc, #24]	; (80156ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015692:	2138      	movs	r1, #56	; 0x38
 8015694:	4a02      	ldr	r2, [pc, #8]	; (80156a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015696:	e7e1      	b.n	801565c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015698:	6199      	str	r1, [r3, #24]
 801569a:	e7ed      	b.n	8015678 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801569c:	0802e08b 	.word	0x0802e08b
 80156a0:	0802e1dc 	.word	0x0802e1dc
 80156a4:	0802e0b7 	.word	0x0802e0b7
 80156a8:	0802e0ea 	.word	0x0802e0ea
 80156ac:	0802e120 	.word	0x0802e120

080156b0 <_ZN8touchgfx4RectaNERKS0_>:
 80156b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156b4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80156b8:	888c      	ldrh	r4, [r1, #4]
 80156ba:	f9b0 9000 	ldrsh.w	r9, [r0]
 80156be:	443c      	add	r4, r7
 80156c0:	b2a4      	uxth	r4, r4
 80156c2:	fa0f f884 	sxth.w	r8, r4
 80156c6:	45c1      	cmp	r9, r8
 80156c8:	da2f      	bge.n	801572a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80156ca:	8882      	ldrh	r2, [r0, #4]
 80156cc:	444a      	add	r2, r9
 80156ce:	b292      	uxth	r2, r2
 80156d0:	fa0f fe82 	sxth.w	lr, r2
 80156d4:	4577      	cmp	r7, lr
 80156d6:	da28      	bge.n	801572a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80156d8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80156dc:	88cb      	ldrh	r3, [r1, #6]
 80156de:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80156e2:	442b      	add	r3, r5
 80156e4:	b21b      	sxth	r3, r3
 80156e6:	429e      	cmp	r6, r3
 80156e8:	da1f      	bge.n	801572a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80156ea:	88c3      	ldrh	r3, [r0, #6]
 80156ec:	4433      	add	r3, r6
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	fa0f fc83 	sxth.w	ip, r3
 80156f4:	4565      	cmp	r5, ip
 80156f6:	da18      	bge.n	801572a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80156f8:	454f      	cmp	r7, r9
 80156fa:	bfb8      	it	lt
 80156fc:	464f      	movlt	r7, r9
 80156fe:	42b5      	cmp	r5, r6
 8015700:	bfb8      	it	lt
 8015702:	4635      	movlt	r5, r6
 8015704:	45f0      	cmp	r8, lr
 8015706:	bfd8      	it	le
 8015708:	4622      	movle	r2, r4
 801570a:	1bd2      	subs	r2, r2, r7
 801570c:	8082      	strh	r2, [r0, #4]
 801570e:	884a      	ldrh	r2, [r1, #2]
 8015710:	88c9      	ldrh	r1, [r1, #6]
 8015712:	8007      	strh	r7, [r0, #0]
 8015714:	440a      	add	r2, r1
 8015716:	8045      	strh	r5, [r0, #2]
 8015718:	b292      	uxth	r2, r2
 801571a:	b211      	sxth	r1, r2
 801571c:	458c      	cmp	ip, r1
 801571e:	bfa8      	it	ge
 8015720:	4613      	movge	r3, r2
 8015722:	1b5b      	subs	r3, r3, r5
 8015724:	80c3      	strh	r3, [r0, #6]
 8015726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801572a:	2300      	movs	r3, #0
 801572c:	8003      	strh	r3, [r0, #0]
 801572e:	8043      	strh	r3, [r0, #2]
 8015730:	8083      	strh	r3, [r0, #4]
 8015732:	80c3      	strh	r3, [r0, #6]
 8015734:	e7f7      	b.n	8015726 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015736 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015736:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801573a:	2b00      	cmp	r3, #0
 801573c:	dd06      	ble.n	801574c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801573e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015742:	2800      	cmp	r0, #0
 8015744:	bfcc      	ite	gt
 8015746:	2000      	movgt	r0, #0
 8015748:	2001      	movle	r0, #1
 801574a:	4770      	bx	lr
 801574c:	2001      	movs	r0, #1
 801574e:	4770      	bx	lr

08015750 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015754:	2300      	movs	r3, #0
 8015756:	4604      	mov	r4, r0
 8015758:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801575a:	8003      	strh	r3, [r0, #0]
 801575c:	8043      	strh	r3, [r0, #2]
 801575e:	8083      	strh	r3, [r0, #4]
 8015760:	80c3      	strh	r3, [r0, #6]
 8015762:	2d00      	cmp	r5, #0
 8015764:	d040      	beq.n	80157e8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015766:	1d28      	adds	r0, r5, #4
 8015768:	f7ff ffe5 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801576c:	b988      	cbnz	r0, 8015792 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801576e:	4620      	mov	r0, r4
 8015770:	f7ff ffe1 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015774:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015778:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801577c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015780:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015784:	b138      	cbz	r0, 8015796 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015786:	8022      	strh	r2, [r4, #0]
 8015788:	8063      	strh	r3, [r4, #2]
 801578a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801578e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015792:	69ad      	ldr	r5, [r5, #24]
 8015794:	e7e5      	b.n	8015762 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015796:	f9b4 0000 	ldrsh.w	r0, [r4]
 801579a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801579e:	4290      	cmp	r0, r2
 80157a0:	4607      	mov	r7, r0
 80157a2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80157a6:	460e      	mov	r6, r1
 80157a8:	bfa8      	it	ge
 80157aa:	4617      	movge	r7, r2
 80157ac:	4299      	cmp	r1, r3
 80157ae:	4472      	add	r2, lr
 80157b0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80157b4:	bfa8      	it	ge
 80157b6:	461e      	movge	r6, r3
 80157b8:	4440      	add	r0, r8
 80157ba:	4471      	add	r1, lr
 80157bc:	4463      	add	r3, ip
 80157be:	b200      	sxth	r0, r0
 80157c0:	8027      	strh	r7, [r4, #0]
 80157c2:	b212      	sxth	r2, r2
 80157c4:	8066      	strh	r6, [r4, #2]
 80157c6:	b209      	sxth	r1, r1
 80157c8:	b21b      	sxth	r3, r3
 80157ca:	4290      	cmp	r0, r2
 80157cc:	bfac      	ite	ge
 80157ce:	ebc7 0200 	rsbge	r2, r7, r0
 80157d2:	ebc7 0202 	rsblt	r2, r7, r2
 80157d6:	4299      	cmp	r1, r3
 80157d8:	bfac      	ite	ge
 80157da:	ebc6 0301 	rsbge	r3, r6, r1
 80157de:	ebc6 0303 	rsblt	r3, r6, r3
 80157e2:	80a2      	strh	r2, [r4, #4]
 80157e4:	80e3      	strh	r3, [r4, #6]
 80157e6:	e7d4      	b.n	8015792 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80157e8:	4620      	mov	r0, r4
 80157ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80157ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80157f2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80157f6:	b383      	cbz	r3, 801585a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80157f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80157fa:	b374      	cbz	r4, 801585a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80157fc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015800:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015804:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015808:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801580c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015810:	b303      	cbz	r3, 8015854 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015812:	4668      	mov	r0, sp
 8015814:	1d21      	adds	r1, r4, #4
 8015816:	f8ad 5000 	strh.w	r5, [sp]
 801581a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801581e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015822:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015826:	f7ff ff43 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801582a:	4668      	mov	r0, sp
 801582c:	f7ff ff83 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015830:	b980      	cbnz	r0, 8015854 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015832:	f8bd 3000 	ldrh.w	r3, [sp]
 8015836:	4669      	mov	r1, sp
 8015838:	88a2      	ldrh	r2, [r4, #4]
 801583a:	4620      	mov	r0, r4
 801583c:	1a9b      	subs	r3, r3, r2
 801583e:	88e2      	ldrh	r2, [r4, #6]
 8015840:	f8ad 3000 	strh.w	r3, [sp]
 8015844:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015848:	1a9b      	subs	r3, r3, r2
 801584a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801584e:	6823      	ldr	r3, [r4, #0]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	4798      	blx	r3
 8015854:	69a4      	ldr	r4, [r4, #24]
 8015856:	2c00      	cmp	r4, #0
 8015858:	d1d8      	bne.n	801580c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801585a:	b002      	add	sp, #8
 801585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015860 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015862:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015866:	460d      	mov	r5, r1
 8015868:	4616      	mov	r6, r2
 801586a:	b323      	cbz	r3, 80158b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801586c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801586e:	b314      	cbz	r4, 80158b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015870:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015874:	b1eb      	cbz	r3, 80158b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015876:	6828      	ldr	r0, [r5, #0]
 8015878:	466b      	mov	r3, sp
 801587a:	6869      	ldr	r1, [r5, #4]
 801587c:	c303      	stmia	r3!, {r0, r1}
 801587e:	4668      	mov	r0, sp
 8015880:	1d21      	adds	r1, r4, #4
 8015882:	f7ff ff15 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 8015886:	4668      	mov	r0, sp
 8015888:	f7ff ff55 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801588c:	b988      	cbnz	r0, 80158b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801588e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015892:	4669      	mov	r1, sp
 8015894:	88a2      	ldrh	r2, [r4, #4]
 8015896:	4620      	mov	r0, r4
 8015898:	1a9b      	subs	r3, r3, r2
 801589a:	88e2      	ldrh	r2, [r4, #6]
 801589c:	f8ad 3000 	strh.w	r3, [sp]
 80158a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80158a4:	1a9b      	subs	r3, r3, r2
 80158a6:	4632      	mov	r2, r6
 80158a8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80158ac:	6823      	ldr	r3, [r4, #0]
 80158ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158b0:	4798      	blx	r3
 80158b2:	69a4      	ldr	r4, [r4, #24]
 80158b4:	e7db      	b.n	801586e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80158b6:	b002      	add	sp, #8
 80158b8:	bd70      	pop	{r4, r5, r6, pc}

080158ba <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80158ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158be:	4770      	bx	lr

080158c0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80158c0:	4770      	bx	lr

080158c2 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80158c2:	4770      	bx	lr

080158c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	b513      	push	{r0, r1, r4, lr}
 80158c8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80158cc:	2300      	movs	r3, #0
 80158ce:	e9cd 3300 	strd	r3, r3, [sp]
 80158d2:	466b      	mov	r3, sp
 80158d4:	47a0      	blx	r4
 80158d6:	b002      	add	sp, #8
 80158d8:	bd10      	pop	{r4, pc}

080158da <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80158da:	2301      	movs	r3, #1
 80158dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158e0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158e4:	4770      	bx	lr

080158e6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80158e6:	2301      	movs	r3, #1
 80158e8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158ec:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158f0:	4770      	bx	lr

080158f2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80158f2:	6843      	ldr	r3, [r0, #4]
 80158f4:	2201      	movs	r2, #1
 80158f6:	725a      	strb	r2, [r3, #9]
 80158f8:	6840      	ldr	r0, [r0, #4]
 80158fa:	6803      	ldr	r3, [r0, #0]
 80158fc:	691b      	ldr	r3, [r3, #16]
 80158fe:	4718      	bx	r3

08015900 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015900:	6840      	ldr	r0, [r0, #4]
 8015902:	6803      	ldr	r3, [r0, #0]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	4718      	bx	r3

08015908 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015908:	4b04      	ldr	r3, [pc, #16]	; (801591c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	b123      	cbz	r3, 8015918 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801590e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015912:	f080 0001 	eor.w	r0, r0, #1
 8015916:	4770      	bx	lr
 8015918:	2001      	movs	r0, #1
 801591a:	4770      	bx	lr
 801591c:	20014b32 	.word	0x20014b32

08015920 <_ZN8touchgfx3HAL8endFrameEv>:
 8015920:	b510      	push	{r4, lr}
 8015922:	4604      	mov	r4, r0
 8015924:	6840      	ldr	r0, [r0, #4]
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	689b      	ldr	r3, [r3, #8]
 801592a:	4798      	blx	r3
 801592c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015930:	b113      	cbz	r3, 8015938 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015932:	2301      	movs	r3, #1
 8015934:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015938:	bd10      	pop	{r4, pc}

0801593a <_ZN8touchgfx3HAL9taskEntryEv>:
 801593a:	b508      	push	{r3, lr}
 801593c:	6803      	ldr	r3, [r0, #0]
 801593e:	4604      	mov	r4, r0
 8015940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015942:	4798      	blx	r3
 8015944:	6823      	ldr	r3, [r4, #0]
 8015946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015948:	4620      	mov	r0, r4
 801594a:	4798      	blx	r3
 801594c:	f7fe f98e 	bl	8013c6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015954:	e7f8      	b.n	8015948 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015958 <_ZN8touchgfx3HAL4tickEv>:
 8015958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801595a:	6803      	ldr	r3, [r0, #0]
 801595c:	4604      	mov	r4, r0
 801595e:	4d5c      	ldr	r5, [pc, #368]	; (8015ad0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015964:	4798      	blx	r3
 8015966:	2800      	cmp	r0, #0
 8015968:	f000 8097 	beq.w	8015a9a <_ZN8touchgfx3HAL4tickEv+0x142>
 801596c:	2001      	movs	r0, #1
 801596e:	2600      	movs	r6, #0
 8015970:	f7fd fef2 	bl	8013758 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015974:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015978:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801597c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015980:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015984:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015988:	b133      	cbz	r3, 8015998 <_ZN8touchgfx3HAL4tickEv+0x40>
 801598a:	6823      	ldr	r3, [r4, #0]
 801598c:	4620      	mov	r0, r4
 801598e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015992:	4798      	blx	r3
 8015994:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015998:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801599c:	2601      	movs	r6, #1
 801599e:	6862      	ldr	r2, [r4, #4]
 80159a0:	f083 0301 	eor.w	r3, r3, #1
 80159a4:	702e      	strb	r6, [r5, #0]
 80159a6:	7253      	strb	r3, [r2, #9]
 80159a8:	f004 fc22 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 80159ac:	6803      	ldr	r3, [r0, #0]
 80159ae:	4631      	mov	r1, r6
 80159b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159b2:	4798      	blx	r3
 80159b4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80159b8:	b90b      	cbnz	r3, 80159be <_ZN8touchgfx3HAL4tickEv+0x66>
 80159ba:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80159be:	f004 fc17 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	695b      	ldr	r3, [r3, #20]
 80159c6:	4798      	blx	r3
 80159c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159ca:	6803      	ldr	r3, [r0, #0]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	4798      	blx	r3
 80159d0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80159d4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80159d8:	3b01      	subs	r3, #1
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80159e0:	b10a      	cbz	r2, 80159e6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1eb      	bne.n	80159be <_ZN8touchgfx3HAL4tickEv+0x66>
 80159e6:	4a3b      	ldr	r2, [pc, #236]	; (8015ad4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80159e8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80159ec:	7813      	ldrb	r3, [r2, #0]
 80159ee:	3301      	adds	r3, #1
 80159f0:	b25b      	sxtb	r3, r3
 80159f2:	4299      	cmp	r1, r3
 80159f4:	7013      	strb	r3, [r2, #0]
 80159f6:	dc10      	bgt.n	8015a1a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80159f8:	2300      	movs	r3, #0
 80159fa:	68e0      	ldr	r0, [r4, #12]
 80159fc:	a902      	add	r1, sp, #8
 80159fe:	7013      	strb	r3, [r2, #0]
 8015a00:	aa03      	add	r2, sp, #12
 8015a02:	6803      	ldr	r3, [r0, #0]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	4798      	blx	r3
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d051      	beq.n	8015ab2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015a12:	4620      	mov	r0, r4
 8015a14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015a18:	4798      	blx	r3
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	6960      	ldr	r0, [r4, #20]
 8015a1e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a22:	b158      	cbz	r0, 8015a3c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a24:	6803      	ldr	r3, [r0, #0]
 8015a26:	f10d 0107 	add.w	r1, sp, #7
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	4798      	blx	r3
 8015a2e:	b128      	cbz	r0, 8015a3c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a32:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015a36:	6803      	ldr	r3, [r0, #0]
 8015a38:	68db      	ldr	r3, [r3, #12]
 8015a3a:	4798      	blx	r3
 8015a3c:	f104 001c 	add.w	r0, r4, #28
 8015a40:	f013 f9cc 	bl	8028ddc <_ZN8touchgfx8Gestures4tickEv>
 8015a44:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015a48:	b30b      	cbz	r3, 8015a8e <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a4a:	6920      	ldr	r0, [r4, #16]
 8015a4c:	6803      	ldr	r3, [r0, #0]
 8015a4e:	691b      	ldr	r3, [r3, #16]
 8015a50:	4798      	blx	r3
 8015a52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a54:	4606      	mov	r6, r0
 8015a56:	b903      	cbnz	r3, 8015a5a <_ZN8touchgfx3HAL4tickEv+0x102>
 8015a58:	6720      	str	r0, [r4, #112]	; 0x70
 8015a5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a5c:	4a1e      	ldr	r2, [pc, #120]	; (8015ad8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015a5e:	1af3      	subs	r3, r6, r3
 8015a60:	4293      	cmp	r3, r2
 8015a62:	d914      	bls.n	8015a8e <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a64:	6920      	ldr	r0, [r4, #16]
 8015a66:	6803      	ldr	r3, [r0, #0]
 8015a68:	699b      	ldr	r3, [r3, #24]
 8015a6a:	4798      	blx	r3
 8015a6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a6e:	2264      	movs	r2, #100	; 0x64
 8015a70:	1af3      	subs	r3, r6, r3
 8015a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a76:	fbb0 f0f3 	udiv	r0, r0, r3
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	dc1e      	bgt.n	8015abc <_ZN8touchgfx3HAL4tickEv+0x164>
 8015a7e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015a82:	6920      	ldr	r0, [r4, #16]
 8015a84:	2100      	movs	r1, #0
 8015a86:	6803      	ldr	r3, [r0, #0]
 8015a88:	69db      	ldr	r3, [r3, #28]
 8015a8a:	4798      	blx	r3
 8015a8c:	6726      	str	r6, [r4, #112]	; 0x70
 8015a8e:	f004 fbaf 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 8015a92:	6803      	ldr	r3, [r0, #0]
 8015a94:	2100      	movs	r1, #0
 8015a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a98:	4798      	blx	r3
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015aa2:	4798      	blx	r3
 8015aa4:	2001      	movs	r0, #1
 8015aa6:	f7fd fe62 	bl	801376e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015aaa:	2300      	movs	r3, #0
 8015aac:	702b      	strb	r3, [r5, #0]
 8015aae:	b004      	add	sp, #16
 8015ab0:	bd70      	pop	{r4, r5, r6, pc}
 8015ab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	4798      	blx	r3
 8015aba:	e7ae      	b.n	8015a1a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015abc:	2863      	cmp	r0, #99	; 0x63
 8015abe:	bfcb      	itete	gt
 8015ac0:	2300      	movgt	r3, #0
 8015ac2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015ac6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015aca:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015ace:	e7d8      	b.n	8015a82 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015ad0:	20014b38 	.word	0x20014b38
 8015ad4:	20014b39 	.word	0x20014b39
 8015ad8:	05f5e100 	.word	0x05f5e100

08015adc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015adc:	f7fe b892 	b.w	8013c04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015ae0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015ae0:	6581      	str	r1, [r0, #88]	; 0x58
 8015ae2:	301c      	adds	r0, #28
 8015ae4:	f013 b978 	b.w	8028dd8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015ae8 <_ZN8touchgfx3HAL5touchEll>:
 8015ae8:	b530      	push	{r4, r5, lr}
 8015aea:	b087      	sub	sp, #28
 8015aec:	4604      	mov	r4, r0
 8015aee:	a804      	add	r0, sp, #16
 8015af0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015af4:	f004 f98c 	bl	8019e10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015af8:	9b04      	ldr	r3, [sp, #16]
 8015afa:	a906      	add	r1, sp, #24
 8015afc:	a803      	add	r0, sp, #12
 8015afe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015b02:	9b05      	ldr	r3, [sp, #20]
 8015b04:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015b08:	f004 f9c0 	bl	8019e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015b0c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015b10:	f104 001c 	add.w	r0, r4, #28
 8015b14:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015b18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015b1c:	b189      	cbz	r1, 8015b42 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015b1e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015b22:	9300      	str	r3, [sp, #0]
 8015b24:	4613      	mov	r3, r2
 8015b26:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015b2a:	462a      	mov	r2, r5
 8015b2c:	f013 f964 	bl	8028df8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015b30:	b128      	cbz	r0, 8015b3e <_ZN8touchgfx3HAL5touchEll+0x56>
 8015b32:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015b36:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015b38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015b3c:	6623      	str	r3, [r4, #96]	; 0x60
 8015b3e:	b007      	add	sp, #28
 8015b40:	bd30      	pop	{r4, r5, pc}
 8015b42:	f013 f99d 	bl	8028e80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015b46:	2301      	movs	r3, #1
 8015b48:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015b4c:	e7f1      	b.n	8015b32 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015b4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015b4e:	b570      	push	{r4, r5, r6, lr}
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d050      	beq.n	8015bf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b54:	ea81 0002 	eor.w	r0, r1, r2
 8015b58:	07c6      	lsls	r6, r0, #31
 8015b5a:	d508      	bpl.n	8015b6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015b5c:	3a01      	subs	r2, #1
 8015b5e:	18cc      	adds	r4, r1, r3
 8015b60:	42a1      	cmp	r1, r4
 8015b62:	d048      	beq.n	8015bf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b68:	f801 0b01 	strb.w	r0, [r1], #1
 8015b6c:	e7f8      	b.n	8015b60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015b6e:	07d5      	lsls	r5, r2, #31
 8015b70:	bf42      	ittt	mi
 8015b72:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015b76:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015b7a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d915      	bls.n	8015bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b82:	ea82 0001 	eor.w	r0, r2, r1
 8015b86:	0784      	lsls	r4, r0, #30
 8015b88:	d02d      	beq.n	8015be6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015b8a:	1e94      	subs	r4, r2, #2
 8015b8c:	4608      	mov	r0, r1
 8015b8e:	18ce      	adds	r6, r1, r3
 8015b90:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015b94:	f820 5b02 	strh.w	r5, [r0], #2
 8015b98:	1a35      	subs	r5, r6, r0
 8015b9a:	2d01      	cmp	r5, #1
 8015b9c:	d8f8      	bhi.n	8015b90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015b9e:	1e98      	subs	r0, r3, #2
 8015ba0:	f003 0301 	and.w	r3, r3, #1
 8015ba4:	f020 0001 	bic.w	r0, r0, #1
 8015ba8:	3002      	adds	r0, #2
 8015baa:	4401      	add	r1, r0
 8015bac:	4402      	add	r2, r0
 8015bae:	1f14      	subs	r4, r2, #4
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	18ce      	adds	r6, r1, r3
 8015bb4:	1a35      	subs	r5, r6, r0
 8015bb6:	2d03      	cmp	r5, #3
 8015bb8:	d810      	bhi.n	8015bdc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015bba:	089c      	lsrs	r4, r3, #2
 8015bbc:	00a0      	lsls	r0, r4, #2
 8015bbe:	4401      	add	r1, r0
 8015bc0:	3801      	subs	r0, #1
 8015bc2:	4402      	add	r2, r0
 8015bc4:	f06f 0003 	mvn.w	r0, #3
 8015bc8:	fb00 3404 	mla	r4, r0, r4, r3
 8015bcc:	440c      	add	r4, r1
 8015bce:	42a1      	cmp	r1, r4
 8015bd0:	d011      	beq.n	8015bf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015bd2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015bd6:	f801 3b01 	strb.w	r3, [r1], #1
 8015bda:	e7f8      	b.n	8015bce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015bdc:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015be0:	f840 5b04 	str.w	r5, [r0], #4
 8015be4:	e7e6      	b.n	8015bb4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015be6:	0790      	lsls	r0, r2, #30
 8015be8:	d0e1      	beq.n	8015bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015bea:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015bee:	3b02      	subs	r3, #2
 8015bf0:	f821 0b02 	strh.w	r0, [r1], #2
 8015bf4:	e7db      	b.n	8015bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015bf6:	2001      	movs	r0, #1
 8015bf8:	bd70      	pop	{r4, r5, r6, pc}

08015bfa <_ZN8touchgfx3HAL7noTouchEv>:
 8015bfa:	b510      	push	{r4, lr}
 8015bfc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015c00:	4604      	mov	r4, r0
 8015c02:	b153      	cbz	r3, 8015c1a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015c04:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015c08:	2101      	movs	r1, #1
 8015c0a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015c0e:	301c      	adds	r0, #28
 8015c10:	f013 f936 	bl	8028e80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015c14:	2300      	movs	r3, #0
 8015c16:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015c1a:	bd10      	pop	{r4, pc}

08015c1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c20:	4604      	mov	r4, r0
 8015c22:	6980      	ldr	r0, [r0, #24]
 8015c24:	b085      	sub	sp, #20
 8015c26:	460f      	mov	r7, r1
 8015c28:	4690      	mov	r8, r2
 8015c2a:	4699      	mov	r9, r3
 8015c2c:	b930      	cbnz	r0, 8015c3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015c2e:	4b1c      	ldr	r3, [pc, #112]	; (8015ca0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8015c30:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8015c34:	4a1b      	ldr	r2, [pc, #108]	; (8015ca4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015c36:	481c      	ldr	r0, [pc, #112]	; (8015ca8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8015c38:	f014 fdac 	bl	802a794 <__assert_func>
 8015c3c:	ad04      	add	r5, sp, #16
 8015c3e:	2600      	movs	r6, #0
 8015c40:	f845 6d04 	str.w	r6, [r5, #-4]!
 8015c44:	6806      	ldr	r6, [r0, #0]
 8015c46:	9501      	str	r5, [sp, #4]
 8015c48:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015c4c:	9500      	str	r5, [sp, #0]
 8015c4e:	6835      	ldr	r5, [r6, #0]
 8015c50:	47a8      	blx	r5
 8015c52:	4d16      	ldr	r5, [pc, #88]	; (8015cac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015c54:	4606      	mov	r6, r0
 8015c56:	f8a5 9000 	strh.w	r9, [r5]
 8015c5a:	f7f3 fec3 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8015c5e:	6803      	ldr	r3, [r0, #0]
 8015c60:	6a1b      	ldr	r3, [r3, #32]
 8015c62:	4798      	blx	r3
 8015c64:	2801      	cmp	r0, #1
 8015c66:	d012      	beq.n	8015c8e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8015c68:	d306      	bcc.n	8015c78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8015c6a:	280d      	cmp	r0, #13
 8015c6c:	d80b      	bhi.n	8015c86 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015c6e:	4b10      	ldr	r3, [pc, #64]	; (8015cb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015c70:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8015c74:	4a0b      	ldr	r2, [pc, #44]	; (8015ca4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015c76:	e7de      	b.n	8015c36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015c78:	882b      	ldrh	r3, [r5, #0]
 8015c7a:	fb08 7203 	mla	r2, r8, r3, r7
 8015c7e:	9b03      	ldr	r3, [sp, #12]
 8015c80:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015c84:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015c86:	4630      	mov	r0, r6
 8015c88:	b005      	add	sp, #20
 8015c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c8e:	882a      	ldrh	r2, [r5, #0]
 8015c90:	9b03      	ldr	r3, [sp, #12]
 8015c92:	fb08 7202 	mla	r2, r8, r2, r7
 8015c96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015c9a:	1a9a      	subs	r2, r3, r2
 8015c9c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015c9e:	e7f2      	b.n	8015c86 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015ca0:	0802e285 	.word	0x0802e285
 8015ca4:	0802e59e 	.word	0x0802e59e
 8015ca8:	0802e2ca 	.word	0x0802e2ca
 8015cac:	20014b2e 	.word	0x20014b2e
 8015cb0:	0802e2f0 	.word	0x0802e2f0

08015cb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cb8:	4698      	mov	r8, r3
 8015cba:	6803      	ldr	r3, [r0, #0]
 8015cbc:	b087      	sub	sp, #28
 8015cbe:	460e      	mov	r6, r1
 8015cc0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015cc2:	4617      	mov	r7, r2
 8015cc4:	4b0d      	ldr	r3, [pc, #52]	; (8015cfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	f8b3 9000 	ldrh.w	r9, [r3]
 8015ccc:	f7f3 fe8a 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8015cd0:	6803      	ldr	r3, [r0, #0]
 8015cd2:	6a1b      	ldr	r3, [r3, #32]
 8015cd4:	4798      	blx	r3
 8015cd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015cda:	463a      	mov	r2, r7
 8015cdc:	4631      	mov	r1, r6
 8015cde:	9302      	str	r3, [sp, #8]
 8015ce0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015ce4:	9301      	str	r3, [sp, #4]
 8015ce6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015cea:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015cee:	9300      	str	r3, [sp, #0]
 8015cf0:	4620      	mov	r0, r4
 8015cf2:	4643      	mov	r3, r8
 8015cf4:	47a8      	blx	r5
 8015cf6:	b007      	add	sp, #28
 8015cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cfc:	20014b2e 	.word	0x20014b2e

08015d00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	4604      	mov	r4, r0
 8015d06:	b08b      	sub	sp, #44	; 0x2c
 8015d08:	4610      	mov	r0, r2
 8015d0a:	460d      	mov	r5, r1
 8015d0c:	4691      	mov	r9, r2
 8015d0e:	461e      	mov	r6, r3
 8015d10:	f007 fa68 	bl	801d1e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	f000 80a0 	beq.w	8015e5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015d1a:	6823      	ldr	r3, [r4, #0]
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8015d22:	af0a      	add	r7, sp, #40	; 0x28
 8015d24:	6a1b      	ldr	r3, [r3, #32]
 8015d26:	4798      	blx	r3
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f8df a164 	ldr.w	sl, [pc, #356]	; 8015e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8015d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d32:	4798      	blx	r3
 8015d34:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d38:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8015d3c:	4638      	mov	r0, r7
 8015d3e:	9301      	str	r3, [sp, #4]
 8015d40:	f8ba 3000 	ldrh.w	r3, [sl]
 8015d44:	9302      	str	r3, [sp, #8]
 8015d46:	4b4f      	ldr	r3, [pc, #316]	; (8015e84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8015d48:	881a      	ldrh	r2, [r3, #0]
 8015d4a:	4698      	mov	r8, r3
 8015d4c:	9203      	str	r2, [sp, #12]
 8015d4e:	4a4e      	ldr	r2, [pc, #312]	; (8015e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8015d50:	8812      	ldrh	r2, [r2, #0]
 8015d52:	9204      	str	r2, [sp, #16]
 8015d54:	4a4d      	ldr	r2, [pc, #308]	; (8015e8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8015d56:	7812      	ldrb	r2, [r2, #0]
 8015d58:	2a00      	cmp	r2, #0
 8015d5a:	f040 8081 	bne.w	8015e60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8015d5e:	f007 fafb 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d62:	f8ab 0000 	strh.w	r0, [fp]
 8015d66:	4638      	mov	r0, r7
 8015d68:	f007 fb30 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d6c:	f8aa 0000 	strh.w	r0, [sl]
 8015d70:	4638      	mov	r0, r7
 8015d72:	f007 faf1 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d76:	f8a8 0000 	strh.w	r0, [r8]
 8015d7a:	4638      	mov	r0, r7
 8015d7c:	f007 fb26 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d80:	4b41      	ldr	r3, [pc, #260]	; (8015e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8015d82:	8018      	strh	r0, [r3, #0]
 8015d84:	4648      	mov	r0, r9
 8015d86:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8015d8a:	f007 fa2b 	bl	801d1e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d8e:	2200      	movs	r2, #0
 8015d90:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015d94:	4611      	mov	r1, r2
 8015d96:	4628      	mov	r0, r5
 8015d98:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015d9c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015da0:	f7f4 feec 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
 8015da4:	2301      	movs	r3, #1
 8015da6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015daa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015dae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	dd5c      	ble.n	8015e70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8015db6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	dd58      	ble.n	8015e70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8015dbe:	462a      	mov	r2, r5
 8015dc0:	ab08      	add	r3, sp, #32
 8015dc2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015dc6:	6851      	ldr	r1, [r2, #4]
 8015dc8:	c303      	stmia	r3!, {r0, r1}
 8015dca:	4631      	mov	r1, r6
 8015dcc:	a808      	add	r0, sp, #32
 8015dce:	f7ff fc6f 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 8015dd2:	a807      	add	r0, sp, #28
 8015dd4:	f007 fc52 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015dd8:	4606      	mov	r6, r0
 8015dda:	f7f3 fe03 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8015dde:	6803      	ldr	r3, [r0, #0]
 8015de0:	6a1b      	ldr	r3, [r3, #32]
 8015de2:	4798      	blx	r3
 8015de4:	4286      	cmp	r6, r0
 8015de6:	d04a      	beq.n	8015e7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8015de8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015dea:	b150      	cbz	r0, 8015e02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8015dec:	a807      	add	r0, sp, #28
 8015dee:	f007 fc45 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015df2:	4606      	mov	r6, r0
 8015df4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015df6:	6803      	ldr	r3, [r0, #0]
 8015df8:	6a1b      	ldr	r3, [r3, #32]
 8015dfa:	4798      	blx	r3
 8015dfc:	1a33      	subs	r3, r6, r0
 8015dfe:	4258      	negs	r0, r3
 8015e00:	4158      	adcs	r0, r3
 8015e02:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015e06:	2600      	movs	r6, #0
 8015e08:	696b      	ldr	r3, [r5, #20]
 8015e0a:	a908      	add	r1, sp, #32
 8015e0c:	682a      	ldr	r2, [r5, #0]
 8015e0e:	4628      	mov	r0, r5
 8015e10:	9305      	str	r3, [sp, #20]
 8015e12:	616e      	str	r6, [r5, #20]
 8015e14:	6892      	ldr	r2, [r2, #8]
 8015e16:	4790      	blx	r2
 8015e18:	9b05      	ldr	r3, [sp, #20]
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	4649      	mov	r1, r9
 8015e1e:	616b      	str	r3, [r5, #20]
 8015e20:	4628      	mov	r0, r5
 8015e22:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015e26:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015e2a:	f7f4 fea7 	bl	800ab7c <_ZN8touchgfx8Drawable5setXYEss>
 8015e2e:	9a01      	ldr	r2, [sp, #4]
 8015e30:	4b17      	ldr	r3, [pc, #92]	; (8015e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8015e32:	4620      	mov	r0, r4
 8015e34:	801a      	strh	r2, [r3, #0]
 8015e36:	9a02      	ldr	r2, [sp, #8]
 8015e38:	4b16      	ldr	r3, [pc, #88]	; (8015e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8015e3a:	801a      	strh	r2, [r3, #0]
 8015e3c:	9a03      	ldr	r2, [sp, #12]
 8015e3e:	4b11      	ldr	r3, [pc, #68]	; (8015e84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8015e40:	801a      	strh	r2, [r3, #0]
 8015e42:	4b11      	ldr	r3, [pc, #68]	; (8015e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8015e44:	9a04      	ldr	r2, [sp, #16]
 8015e46:	801a      	strh	r2, [r3, #0]
 8015e48:	6823      	ldr	r3, [r4, #0]
 8015e4a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8015e4e:	6a1b      	ldr	r3, [r3, #32]
 8015e50:	4798      	blx	r3
 8015e52:	6823      	ldr	r3, [r4, #0]
 8015e54:	4620      	mov	r0, r4
 8015e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e58:	4798      	blx	r3
 8015e5a:	b00b      	add	sp, #44	; 0x2c
 8015e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e60:	f007 fab4 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015e64:	f8ab 0000 	strh.w	r0, [fp]
 8015e68:	4638      	mov	r0, r7
 8015e6a:	f007 fa75 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015e6e:	e77d      	b.n	8015d6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8015e70:	462a      	mov	r2, r5
 8015e72:	ab08      	add	r3, sp, #32
 8015e74:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015e78:	6851      	ldr	r1, [r2, #4]
 8015e7a:	c303      	stmia	r3!, {r0, r1}
 8015e7c:	e7a9      	b.n	8015dd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8015e7e:	2000      	movs	r0, #0
 8015e80:	e7bf      	b.n	8015e02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8015e82:	bf00      	nop
 8015e84:	20014b28 	.word	0x20014b28
 8015e88:	20014b2a 	.word	0x20014b2a
 8015e8c:	20014b2c 	.word	0x20014b2c
 8015e90:	20014b2e 	.word	0x20014b2e
 8015e94:	20014b30 	.word	0x20014b30

08015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015e98:	4b07      	ldr	r3, [pc, #28]	; (8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015e9a:	b510      	push	{r4, lr}
 8015e9c:	781b      	ldrb	r3, [r3, #0]
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	b13b      	cbz	r3, 8015eb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015ea2:	6803      	ldr	r3, [r0, #0]
 8015ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ea6:	4798      	blx	r3
 8015ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015eaa:	4283      	cmp	r3, r0
 8015eac:	d101      	bne.n	8015eb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015eae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015eb0:	bd10      	pop	{r4, pc}
 8015eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015eb4:	e7fc      	b.n	8015eb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015eb6:	bf00      	nop
 8015eb8:	20014b32 	.word	0x20014b32

08015ebc <_ZN8touchgfx3HAL10initializeEv>:
 8015ebc:	b510      	push	{r4, lr}
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	f7fd fe5e 	bl	8013b80 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015ec4:	6860      	ldr	r0, [r4, #4]
 8015ec6:	6803      	ldr	r3, [r0, #0]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	4798      	blx	r3
 8015ecc:	68e0      	ldr	r0, [r4, #12]
 8015ece:	6803      	ldr	r3, [r0, #0]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	4798      	blx	r3
 8015ed4:	6823      	ldr	r3, [r4, #0]
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ede:	4718      	bx	r3

08015ee0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015ee0:	b508      	push	{r3, lr}
 8015ee2:	290d      	cmp	r1, #13
 8015ee4:	d817      	bhi.n	8015f16 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015ee6:	e8df f001 	tbb	[pc, r1]
 8015eea:	090b      	.short	0x090b
 8015eec:	0d0d0d07 	.word	0x0d0d0d07
 8015ef0:	1414140d 	.word	0x1414140d
 8015ef4:	0d0d1414 	.word	0x0d0d1414
 8015ef8:	2020      	movs	r0, #32
 8015efa:	bd08      	pop	{r3, pc}
 8015efc:	2018      	movs	r0, #24
 8015efe:	e7fc      	b.n	8015efa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f00:	2010      	movs	r0, #16
 8015f02:	e7fa      	b.n	8015efa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f04:	4b05      	ldr	r3, [pc, #20]	; (8015f1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015f06:	f44f 7111 	mov.w	r1, #580	; 0x244
 8015f0a:	4a05      	ldr	r2, [pc, #20]	; (8015f20 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015f0c:	4805      	ldr	r0, [pc, #20]	; (8015f24 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015f0e:	f014 fc41 	bl	802a794 <__assert_func>
 8015f12:	2008      	movs	r0, #8
 8015f14:	e7f1      	b.n	8015efa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f16:	2000      	movs	r0, #0
 8015f18:	e7ef      	b.n	8015efa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f1a:	bf00      	nop
 8015f1c:	0802e3c3 	.word	0x0802e3c3
 8015f20:	0802e760 	.word	0x0802e760
 8015f24:	0802e2ca 	.word	0x0802e2ca

08015f28 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015f28:	b570      	push	{r4, r5, r6, lr}
 8015f2a:	460d      	mov	r5, r1
 8015f2c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015f30:	4616      	mov	r6, r2
 8015f32:	461c      	mov	r4, r3
 8015f34:	f7ff ffd4 	bl	8015ee0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015f38:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015f3c:	10c0      	asrs	r0, r0, #3
 8015f3e:	fb06 5101 	mla	r1, r6, r1, r5
 8015f42:	fb00 4001 	mla	r0, r0, r1, r4
 8015f46:	bd70      	pop	{r4, r5, r6, pc}

08015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f4c:	b08a      	sub	sp, #40	; 0x28
 8015f4e:	f04f 0c00 	mov.w	ip, #0
 8015f52:	4604      	mov	r4, r0
 8015f54:	469a      	mov	sl, r3
 8015f56:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015f5a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015f5e:	f1b8 0f02 	cmp.w	r8, #2
 8015f62:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015f66:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015f6a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015f6e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015f72:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015f76:	f8cd c020 	str.w	ip, [sp, #32]
 8015f7a:	d030      	beq.n	8015fde <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015f7c:	2bff      	cmp	r3, #255	; 0xff
 8015f7e:	d12c      	bne.n	8015fda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015f80:	4560      	cmp	r0, ip
 8015f82:	bf14      	ite	ne
 8015f84:	2004      	movne	r0, #4
 8015f86:	2001      	moveq	r0, #1
 8015f88:	9204      	str	r2, [sp, #16]
 8015f8a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015f8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015f92:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015f96:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015f9a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	f7ff ff78 	bl	8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fa8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015fac:	4603      	mov	r3, r0
 8015fae:	4651      	mov	r1, sl
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	e9cd 9700 	strd	r9, r7, [sp]
 8015fb6:	f7ff ffb7 	bl	8015f28 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015fba:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015fbe:	9005      	str	r0, [sp, #20]
 8015fc0:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015fc4:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015fc8:	b106      	cbz	r6, 8015fcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015fca:	b98d      	cbnz	r5, 8015ff0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015fcc:	4b12      	ldr	r3, [pc, #72]	; (8016018 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015fce:	f240 11c3 	movw	r1, #451	; 0x1c3
 8015fd2:	4a12      	ldr	r2, [pc, #72]	; (801601c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015fd4:	4812      	ldr	r0, [pc, #72]	; (8016020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015fd6:	f014 fbdd 	bl	802a794 <__assert_func>
 8015fda:	2004      	movs	r0, #4
 8015fdc:	e7d4      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015fde:	2bff      	cmp	r3, #255	; 0xff
 8015fe0:	d104      	bne.n	8015fec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	bf14      	ite	ne
 8015fe6:	2040      	movne	r0, #64	; 0x40
 8015fe8:	2020      	moveq	r0, #32
 8015fea:	e7cd      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015fec:	2040      	movs	r0, #64	; 0x40
 8015fee:	e7cb      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015ff0:	6823      	ldr	r3, [r4, #0]
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	9d02      	ldr	r5, [sp, #8]
 8015ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff8:	4798      	blx	r3
 8015ffa:	4228      	tst	r0, r5
 8015ffc:	d104      	bne.n	8016008 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015ffe:	4b09      	ldr	r3, [pc, #36]	; (8016024 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016000:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8016004:	4a05      	ldr	r2, [pc, #20]	; (801601c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016006:	e7e5      	b.n	8015fd4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016008:	6860      	ldr	r0, [r4, #4]
 801600a:	a902      	add	r1, sp, #8
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	4798      	blx	r3
 8016012:	b00a      	add	sp, #40	; 0x28
 8016014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016018:	0802e346 	.word	0x0802e346
 801601c:	0802e602 	.word	0x0802e602
 8016020:	0802e2ca 	.word	0x0802e2ca
 8016024:	0802e37e 	.word	0x0802e37e

08016028 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016028:	b510      	push	{r4, lr}
 801602a:	b08a      	sub	sp, #40	; 0x28
 801602c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016030:	9408      	str	r4, [sp, #32]
 8016032:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8016036:	9407      	str	r4, [sp, #28]
 8016038:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801603c:	9406      	str	r4, [sp, #24]
 801603e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016042:	9405      	str	r4, [sp, #20]
 8016044:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016048:	9404      	str	r4, [sp, #16]
 801604a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801604e:	9403      	str	r4, [sp, #12]
 8016050:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016054:	9402      	str	r4, [sp, #8]
 8016056:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801605a:	e9cd 3400 	strd	r3, r4, [sp]
 801605e:	4613      	mov	r3, r2
 8016060:	2200      	movs	r2, #0
 8016062:	f7ff ff71 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016066:	b00a      	add	sp, #40	; 0x28
 8016068:	bd10      	pop	{r4, pc}
	...

0801606c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801606e:	b08b      	sub	sp, #44	; 0x2c
 8016070:	4616      	mov	r6, r2
 8016072:	460d      	mov	r5, r1
 8016074:	461f      	mov	r7, r3
 8016076:	4604      	mov	r4, r0
 8016078:	f7f3 fcb4 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 801607c:	6803      	ldr	r3, [r0, #0]
 801607e:	6a1b      	ldr	r3, [r3, #32]
 8016080:	4798      	blx	r3
 8016082:	4b0e      	ldr	r3, [pc, #56]	; (80160bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016084:	2200      	movs	r2, #0
 8016086:	4629      	mov	r1, r5
 8016088:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	4620      	mov	r0, r4
 8016090:	9306      	str	r3, [sp, #24]
 8016092:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016096:	9305      	str	r3, [sp, #20]
 8016098:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801609c:	9304      	str	r3, [sp, #16]
 801609e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80160a2:	9303      	str	r3, [sp, #12]
 80160a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80160a8:	9302      	str	r3, [sp, #8]
 80160aa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80160ae:	e9cd 7300 	strd	r7, r3, [sp]
 80160b2:	4633      	mov	r3, r6
 80160b4:	f7ff ff48 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80160b8:	b00b      	add	sp, #44	; 0x2c
 80160ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160bc:	20014b2e 	.word	0x20014b2e

080160c0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80160c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c4:	461f      	mov	r7, r3
 80160c6:	4b14      	ldr	r3, [pc, #80]	; (8016118 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80160c8:	b08a      	sub	sp, #40	; 0x28
 80160ca:	4616      	mov	r6, r2
 80160cc:	f8b3 8000 	ldrh.w	r8, [r3]
 80160d0:	460d      	mov	r5, r1
 80160d2:	4604      	mov	r4, r0
 80160d4:	f7f3 fc86 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80160d8:	6803      	ldr	r3, [r0, #0]
 80160da:	6a1b      	ldr	r3, [r3, #32]
 80160dc:	4798      	blx	r3
 80160de:	2302      	movs	r3, #2
 80160e0:	9008      	str	r0, [sp, #32]
 80160e2:	2200      	movs	r2, #0
 80160e4:	4629      	mov	r1, r5
 80160e6:	4620      	mov	r0, r4
 80160e8:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80160ec:	2301      	movs	r3, #1
 80160ee:	9305      	str	r3, [sp, #20]
 80160f0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80160f4:	9304      	str	r3, [sp, #16]
 80160f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80160fa:	9303      	str	r3, [sp, #12]
 80160fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016100:	9302      	str	r3, [sp, #8]
 8016102:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016106:	e9cd 7300 	strd	r7, r3, [sp]
 801610a:	4633      	mov	r3, r6
 801610c:	f7ff ff1c 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016110:	b00a      	add	sp, #40	; 0x28
 8016112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016116:	bf00      	nop
 8016118:	20014b2e 	.word	0x20014b2e

0801611c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	b08b      	sub	sp, #44	; 0x2c
 8016122:	469b      	mov	fp, r3
 8016124:	4604      	mov	r4, r0
 8016126:	4692      	mov	sl, r2
 8016128:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801612c:	2600      	movs	r6, #0
 801612e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016132:	4689      	mov	r9, r1
 8016134:	2fff      	cmp	r7, #255	; 0xff
 8016136:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801613a:	9608      	str	r6, [sp, #32]
 801613c:	bf14      	ite	ne
 801613e:	2308      	movne	r3, #8
 8016140:	2302      	moveq	r3, #2
 8016142:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016146:	f7ff fea7 	bl	8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801614a:	465a      	mov	r2, fp
 801614c:	4603      	mov	r3, r0
 801614e:	4651      	mov	r1, sl
 8016150:	4620      	mov	r0, r4
 8016152:	e9cd 8500 	strd	r8, r5, [sp]
 8016156:	f7ff fee7 	bl	8015f28 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801615a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801615e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016162:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016166:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801616a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801616e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	9d02      	ldr	r5, [sp, #8]
 8016176:	9005      	str	r0, [sp, #20]
 8016178:	4620      	mov	r0, r4
 801617a:	f8ad 601c 	strh.w	r6, [sp, #28]
 801617e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016182:	f8cd 9020 	str.w	r9, [sp, #32]
 8016186:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801618c:	4798      	blx	r3
 801618e:	4228      	tst	r0, r5
 8016190:	d106      	bne.n	80161a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016192:	4b07      	ldr	r3, [pc, #28]	; (80161b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016194:	f240 11fb 	movw	r1, #507	; 0x1fb
 8016198:	4a06      	ldr	r2, [pc, #24]	; (80161b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801619a:	4807      	ldr	r0, [pc, #28]	; (80161b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801619c:	f014 fafa 	bl	802a794 <__assert_func>
 80161a0:	6860      	ldr	r0, [r4, #4]
 80161a2:	a902      	add	r1, sp, #8
 80161a4:	6803      	ldr	r3, [r0, #0]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	4798      	blx	r3
 80161aa:	b00b      	add	sp, #44	; 0x2c
 80161ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b0:	0802e37e 	.word	0x0802e37e
 80161b4:	0802e6cb 	.word	0x0802e6cb
 80161b8:	0802e2ca 	.word	0x0802e2ca

080161bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80161bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80161c0:	461f      	mov	r7, r3
 80161c2:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80161c4:	460d      	mov	r5, r1
 80161c6:	4616      	mov	r6, r2
 80161c8:	f8b3 8000 	ldrh.w	r8, [r3]
 80161cc:	4604      	mov	r4, r0
 80161ce:	f7f3 fc09 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80161d2:	6803      	ldr	r3, [r0, #0]
 80161d4:	6a1b      	ldr	r3, [r3, #32]
 80161d6:	4798      	blx	r3
 80161d8:	463b      	mov	r3, r7
 80161da:	4632      	mov	r2, r6
 80161dc:	4629      	mov	r1, r5
 80161de:	e9cd 8000 	strd	r8, r0, [sp]
 80161e2:	4620      	mov	r0, r4
 80161e4:	f7ff fea0 	bl	8015f28 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80161e8:	b002      	add	sp, #8
 80161ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ee:	bf00      	nop
 80161f0:	20014b2e 	.word	0x20014b2e

080161f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80161f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f8:	4698      	mov	r8, r3
 80161fa:	b088      	sub	sp, #32
 80161fc:	2300      	movs	r3, #0
 80161fe:	4617      	mov	r7, r2
 8016200:	4604      	mov	r4, r0
 8016202:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016206:	9306      	str	r3, [sp, #24]
 8016208:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801620c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016210:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016214:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016218:	e9cd 3100 	strd	r3, r1, [sp]
 801621c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016220:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016224:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016228:	f88d 301c 	strb.w	r3, [sp, #28]
 801622c:	f7ff fe34 	bl	8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016230:	4642      	mov	r2, r8
 8016232:	4603      	mov	r3, r0
 8016234:	4639      	mov	r1, r7
 8016236:	4620      	mov	r0, r4
 8016238:	f7ff ffc0 	bl	80161bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801623c:	4b16      	ldr	r3, [pc, #88]	; (8016298 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801623e:	9003      	str	r0, [sp, #12]
 8016240:	881b      	ldrh	r3, [r3, #0]
 8016242:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016246:	f7f3 fbcd 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 801624a:	6803      	ldr	r3, [r0, #0]
 801624c:	6a1b      	ldr	r3, [r3, #32]
 801624e:	4798      	blx	r3
 8016250:	f88d 001e 	strb.w	r0, [sp, #30]
 8016254:	f88d 001d 	strb.w	r0, [sp, #29]
 8016258:	b106      	cbz	r6, 801625c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801625a:	b935      	cbnz	r5, 801626a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801625c:	4b0f      	ldr	r3, [pc, #60]	; (801629c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801625e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8016262:	4a0f      	ldr	r2, [pc, #60]	; (80162a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016264:	480f      	ldr	r0, [pc, #60]	; (80162a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016266:	f014 fa95 	bl	802a794 <__assert_func>
 801626a:	6823      	ldr	r3, [r4, #0]
 801626c:	4620      	mov	r0, r4
 801626e:	9d00      	ldr	r5, [sp, #0]
 8016270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016272:	4798      	blx	r3
 8016274:	4228      	tst	r0, r5
 8016276:	d104      	bne.n	8016282 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016278:	4b0b      	ldr	r3, [pc, #44]	; (80162a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801627a:	f240 11e1 	movw	r1, #481	; 0x1e1
 801627e:	4a08      	ldr	r2, [pc, #32]	; (80162a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016280:	e7f0      	b.n	8016264 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016284:	4669      	mov	r1, sp
 8016286:	6860      	ldr	r0, [r4, #4]
 8016288:	9306      	str	r3, [sp, #24]
 801628a:	6803      	ldr	r3, [r0, #0]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	4798      	blx	r3
 8016290:	b008      	add	sp, #32
 8016292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016296:	bf00      	nop
 8016298:	20014b2e 	.word	0x20014b2e
 801629c:	0802e346 	.word	0x0802e346
 80162a0:	0802e4b4 	.word	0x0802e4b4
 80162a4:	0802e2ca 	.word	0x0802e2ca
 80162a8:	0802e37e 	.word	0x0802e37e

080162ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80162ac:	b570      	push	{r4, r5, r6, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	4604      	mov	r4, r0
 80162b2:	466b      	mov	r3, sp
 80162b4:	e883 0006 	stmia.w	r3, {r1, r2}
 80162b8:	4b1f      	ldr	r3, [pc, #124]	; (8016338 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	b933      	cbnz	r3, 80162cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80162be:	4b1f      	ldr	r3, [pc, #124]	; (801633c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80162c0:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80162c4:	4a1e      	ldr	r2, [pc, #120]	; (8016340 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80162c6:	481f      	ldr	r0, [pc, #124]	; (8016344 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80162c8:	f014 fa64 	bl	802a794 <__assert_func>
 80162cc:	2300      	movs	r3, #0
 80162ce:	f8bd 5000 	ldrh.w	r5, [sp]
 80162d2:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80162d6:	9308      	str	r3, [sp, #32]
 80162d8:	2301      	movs	r3, #1
 80162da:	9302      	str	r3, [sp, #8]
 80162dc:	6803      	ldr	r3, [r0, #0]
 80162de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162e0:	4798      	blx	r3
 80162e2:	4632      	mov	r2, r6
 80162e4:	4629      	mov	r1, r5
 80162e6:	4603      	mov	r3, r0
 80162e8:	4620      	mov	r0, r4
 80162ea:	f7ff ff67 	bl	80161bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80162f0:	9003      	str	r0, [sp, #12]
 80162f2:	9305      	str	r3, [sp, #20]
 80162f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80162f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016300:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016304:	4b10      	ldr	r3, [pc, #64]	; (8016348 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016306:	881b      	ldrh	r3, [r3, #0]
 8016308:	f8ad 301c 	strh.w	r3, [sp, #28]
 801630c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016310:	f7f3 fb68 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8016314:	6803      	ldr	r3, [r0, #0]
 8016316:	6a1b      	ldr	r3, [r3, #32]
 8016318:	4798      	blx	r3
 801631a:	23ff      	movs	r3, #255	; 0xff
 801631c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016320:	a902      	add	r1, sp, #8
 8016322:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016326:	6860      	ldr	r0, [r4, #4]
 8016328:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801632c:	6803      	ldr	r3, [r0, #0]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	4798      	blx	r3
 8016332:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016334:	b00a      	add	sp, #40	; 0x28
 8016336:	bd70      	pop	{r4, r5, r6, pc}
 8016338:	20014b33 	.word	0x20014b33
 801633c:	0802e217 	.word	0x0802e217
 8016340:	0802e558 	.word	0x0802e558
 8016344:	0802e2ca 	.word	0x0802e2ca
 8016348:	20014b2e 	.word	0x20014b2e

0801634c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801634e:	b08b      	sub	sp, #44	; 0x2c
 8016350:	4604      	mov	r4, r0
 8016352:	466d      	mov	r5, sp
 8016354:	e885 0006 	stmia.w	r5, {r1, r2}
 8016358:	461d      	mov	r5, r3
 801635a:	2300      	movs	r3, #0
 801635c:	f8bd 6000 	ldrh.w	r6, [sp]
 8016360:	9308      	str	r3, [sp, #32]
 8016362:	2301      	movs	r3, #1
 8016364:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016368:	9302      	str	r3, [sp, #8]
 801636a:	6803      	ldr	r3, [r0, #0]
 801636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801636e:	4798      	blx	r3
 8016370:	463a      	mov	r2, r7
 8016372:	4631      	mov	r1, r6
 8016374:	4603      	mov	r3, r0
 8016376:	4620      	mov	r0, r4
 8016378:	f7ff ff20 	bl	80161bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801637c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016380:	9003      	str	r0, [sp, #12]
 8016382:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016386:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801638a:	9505      	str	r5, [sp, #20]
 801638c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016390:	4b0d      	ldr	r3, [pc, #52]	; (80163c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016392:	881b      	ldrh	r3, [r3, #0]
 8016394:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801639a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801639e:	f7f3 fb21 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80163a2:	6803      	ldr	r3, [r0, #0]
 80163a4:	6a1b      	ldr	r3, [r3, #32]
 80163a6:	4798      	blx	r3
 80163a8:	23ff      	movs	r3, #255	; 0xff
 80163aa:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80163ae:	a902      	add	r1, sp, #8
 80163b0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80163b4:	6860      	ldr	r0, [r4, #4]
 80163b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163ba:	6803      	ldr	r3, [r0, #0]
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	4798      	blx	r3
 80163c0:	4628      	mov	r0, r5
 80163c2:	b00b      	add	sp, #44	; 0x2c
 80163c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163c6:	bf00      	nop
 80163c8:	20014b2e 	.word	0x20014b2e

080163cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80163d2:	4604      	mov	r4, r0
 80163d4:	b19b      	cbz	r3, 80163fe <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80163d6:	2002      	movs	r0, #2
 80163d8:	f7fd f9d4 	bl	8013784 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80163dc:	2300      	movs	r3, #0
 80163de:	4620      	mov	r0, r4
 80163e0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80163e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80163e8:	6823      	ldr	r3, [r4, #0]
 80163ea:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80163ee:	f7ff fd53 	bl	8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163f2:	4601      	mov	r1, r0
 80163f4:	4620      	mov	r0, r4
 80163f6:	462b      	mov	r3, r5
 80163f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163fc:	4718      	bx	r3
 80163fe:	bd70      	pop	{r4, r5, r6, pc}

08016400 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8016400:	b538      	push	{r3, r4, r5, lr}
 8016402:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8016406:	4604      	mov	r4, r0
 8016408:	460d      	mov	r5, r1
 801640a:	428a      	cmp	r2, r1
 801640c:	d008      	beq.n	8016420 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 801640e:	2a01      	cmp	r2, #1
 8016410:	6803      	ldr	r3, [r0, #0]
 8016412:	d106      	bne.n	8016422 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8016414:	b929      	cbnz	r1, 8016422 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8016416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801641a:	4798      	blx	r3
 801641c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016426:	4620      	mov	r0, r4
 8016428:	e7f7      	b.n	801641a <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

0801642c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801642c:	4b0d      	ldr	r3, [pc, #52]	; (8016464 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801642e:	b510      	push	{r4, lr}
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	4604      	mov	r4, r0
 8016434:	b95b      	cbnz	r3, 801644e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016436:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801643a:	2b02      	cmp	r3, #2
 801643c:	d007      	beq.n	801644e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801643e:	6840      	ldr	r0, [r0, #4]
 8016440:	f000 f930 	bl	80166a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016444:	b118      	cbz	r0, 801644e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016446:	6862      	ldr	r2, [r4, #4]
 8016448:	7a53      	ldrb	r3, [r2, #9]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d0fc      	beq.n	8016448 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801644e:	f7fd fbcb 	bl	8013be8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016452:	4620      	mov	r0, r4
 8016454:	2100      	movs	r1, #0
 8016456:	f7ff ffd3 	bl	8016400 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 801645a:	4620      	mov	r0, r4
 801645c:	f7ff fd1c 	bl	8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016460:	bd10      	pop	{r4, pc}
 8016462:	bf00      	nop
 8016464:	20014b32 	.word	0x20014b32

08016468 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016468:	4770      	bx	lr

0801646a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801646a:	2000      	movs	r0, #0
 801646c:	4770      	bx	lr

0801646e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801646e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016472:	1a13      	subs	r3, r2, r0
 8016474:	4258      	negs	r0, r3
 8016476:	4158      	adcs	r0, r3
 8016478:	4770      	bx	lr

0801647a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801647a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801647e:	1a9b      	subs	r3, r3, r2
 8016480:	2b00      	cmp	r3, #0
 8016482:	bfdc      	itt	le
 8016484:	6882      	ldrle	r2, [r0, #8]
 8016486:	189b      	addle	r3, r3, r2
 8016488:	2b01      	cmp	r3, #1
 801648a:	bfcc      	ite	gt
 801648c:	2000      	movgt	r0, #0
 801648e:	2001      	movle	r0, #1
 8016490:	4770      	bx	lr

08016492 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016492:	6902      	ldr	r2, [r0, #16]
 8016494:	6840      	ldr	r0, [r0, #4]
 8016496:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801649a:	4770      	bx	lr

0801649c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801649c:	6803      	ldr	r3, [r0, #0]
 801649e:	691b      	ldr	r3, [r3, #16]
 80164a0:	4718      	bx	r3

080164a2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80164a2:	4770      	bx	lr

080164a4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80164a4:	4770      	bx	lr
	...

080164a8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80164a8:	2301      	movs	r3, #1
 80164aa:	b570      	push	{r4, r5, r6, lr}
 80164ac:	7203      	strb	r3, [r0, #8]
 80164ae:	4604      	mov	r4, r0
 80164b0:	6840      	ldr	r0, [r0, #4]
 80164b2:	6803      	ldr	r3, [r0, #0]
 80164b4:	699b      	ldr	r3, [r3, #24]
 80164b6:	4798      	blx	r3
 80164b8:	6803      	ldr	r3, [r0, #0]
 80164ba:	4605      	mov	r5, r0
 80164bc:	2b08      	cmp	r3, #8
 80164be:	d01e      	beq.n	80164fe <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80164c0:	d80b      	bhi.n	80164da <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80164c2:	2b02      	cmp	r3, #2
 80164c4:	d027      	beq.n	8016516 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80164c6:	2b04      	cmp	r3, #4
 80164c8:	d011      	beq.n	80164ee <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d028      	beq.n	8016520 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80164ce:	4b17      	ldr	r3, [pc, #92]	; (801652c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80164d0:	218c      	movs	r1, #140	; 0x8c
 80164d2:	4a17      	ldr	r2, [pc, #92]	; (8016530 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80164d4:	4817      	ldr	r0, [pc, #92]	; (8016534 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80164d6:	f014 f95d 	bl	802a794 <__assert_func>
 80164da:	2b40      	cmp	r3, #64	; 0x40
 80164dc:	d020      	beq.n	8016520 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80164de:	d801      	bhi.n	80164e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80164e0:	2b20      	cmp	r3, #32
 80164e2:	e7f3      	b.n	80164cc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80164e4:	2b80      	cmp	r3, #128	; 0x80
 80164e6:	d01b      	beq.n	8016520 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80164e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164ec:	e7ee      	b.n	80164cc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80164ee:	6823      	ldr	r3, [r4, #0]
 80164f0:	7f01      	ldrb	r1, [r0, #28]
 80164f2:	4620      	mov	r0, r4
 80164f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164f6:	4798      	blx	r3
 80164f8:	6823      	ldr	r3, [r4, #0]
 80164fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164fc:	e006      	b.n	801650c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80164fe:	6823      	ldr	r3, [r4, #0]
 8016500:	7f01      	ldrb	r1, [r0, #28]
 8016502:	4620      	mov	r0, r4
 8016504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016506:	4798      	blx	r3
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801650c:	4629      	mov	r1, r5
 801650e:	4620      	mov	r0, r4
 8016510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016514:	4718      	bx	r3
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	4620      	mov	r0, r4
 801651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801651c:	4798      	blx	r3
 801651e:	e7f3      	b.n	8016508 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	4620      	mov	r0, r4
 8016524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016526:	4798      	blx	r3
 8016528:	e7e6      	b.n	80164f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801652a:	bf00      	nop
 801652c:	0802e7a9 	.word	0x0802e7a9
 8016530:	0802e8b8 	.word	0x0802e8b8
 8016534:	0802e7ce 	.word	0x0802e7ce

08016538 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	4604      	mov	r4, r0
 801653c:	460e      	mov	r6, r1
 801653e:	6860      	ldr	r0, [r4, #4]
 8016540:	6803      	ldr	r3, [r0, #0]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	4798      	blx	r3
 8016546:	2800      	cmp	r0, #0
 8016548:	d1f9      	bne.n	801653e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801654a:	4d0d      	ldr	r5, [pc, #52]	; (8016580 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801654c:	6828      	ldr	r0, [r5, #0]
 801654e:	6803      	ldr	r3, [r0, #0]
 8016550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016552:	4798      	blx	r3
 8016554:	f7fd fb62 	bl	8013c1c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016558:	6828      	ldr	r0, [r5, #0]
 801655a:	2101      	movs	r1, #1
 801655c:	f7ff ff50 	bl	8016400 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8016560:	6860      	ldr	r0, [r4, #4]
 8016562:	4631      	mov	r1, r6
 8016564:	6803      	ldr	r3, [r0, #0]
 8016566:	689b      	ldr	r3, [r3, #8]
 8016568:	4798      	blx	r3
 801656a:	6823      	ldr	r3, [r4, #0]
 801656c:	4620      	mov	r0, r4
 801656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016570:	4798      	blx	r3
 8016572:	6828      	ldr	r0, [r5, #0]
 8016574:	6803      	ldr	r3, [r0, #0]
 8016576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801657a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801657c:	4718      	bx	r3
 801657e:	bf00      	nop
 8016580:	20014b34 	.word	0x20014b34

08016584 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016584:	b508      	push	{r3, lr}
 8016586:	f7fd fb2f 	bl	8013be8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801658a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801658e:	f7fd bb39 	b.w	8013c04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016592 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016592:	b510      	push	{r4, lr}
 8016594:	4604      	mov	r4, r0
 8016596:	6840      	ldr	r0, [r0, #4]
 8016598:	6803      	ldr	r3, [r0, #0]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	4798      	blx	r3
 801659e:	b948      	cbnz	r0, 80165b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80165a0:	7a63      	ldrb	r3, [r4, #9]
 80165a2:	b13b      	cbz	r3, 80165b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80165a4:	7a23      	ldrb	r3, [r4, #8]
 80165a6:	b92b      	cbnz	r3, 80165b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80165a8:	6823      	ldr	r3, [r4, #0]
 80165aa:	4620      	mov	r0, r4
 80165ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165b2:	4718      	bx	r3
 80165b4:	bd10      	pop	{r4, pc}
	...

080165b8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80165b8:	b510      	push	{r4, lr}
 80165ba:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80165be:	1b12      	subs	r2, r2, r4
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	bfdc      	itt	le
 80165c4:	6883      	ldrle	r3, [r0, #8]
 80165c6:	18d2      	addle	r2, r2, r3
 80165c8:	2a01      	cmp	r2, #1
 80165ca:	dd18      	ble.n	80165fe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80165cc:	6843      	ldr	r3, [r0, #4]
 80165ce:	f101 021c 	add.w	r2, r1, #28
 80165d2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80165d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80165da:	4291      	cmp	r1, r2
 80165dc:	f843 4b04 	str.w	r4, [r3], #4
 80165e0:	d1f9      	bne.n	80165d6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80165e2:	880a      	ldrh	r2, [r1, #0]
 80165e4:	801a      	strh	r2, [r3, #0]
 80165e6:	788a      	ldrb	r2, [r1, #2]
 80165e8:	709a      	strb	r2, [r3, #2]
 80165ea:	68c3      	ldr	r3, [r0, #12]
 80165ec:	6882      	ldr	r2, [r0, #8]
 80165ee:	f3bf 8f5b 	dmb	ish
 80165f2:	3301      	adds	r3, #1
 80165f4:	429a      	cmp	r2, r3
 80165f6:	bfd8      	it	le
 80165f8:	1a9b      	suble	r3, r3, r2
 80165fa:	60c3      	str	r3, [r0, #12]
 80165fc:	bd10      	pop	{r4, pc}
 80165fe:	4b03      	ldr	r3, [pc, #12]	; (801660c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016600:	2139      	movs	r1, #57	; 0x39
 8016602:	4a03      	ldr	r2, [pc, #12]	; (8016610 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016604:	4803      	ldr	r0, [pc, #12]	; (8016614 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016606:	f014 f8c5 	bl	802a794 <__assert_func>
 801660a:	bf00      	nop
 801660c:	0802e7f4 	.word	0x0802e7f4
 8016610:	0802e8e8 	.word	0x0802e8e8
 8016614:	0802e7ce 	.word	0x0802e7ce

08016618 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016618:	b510      	push	{r4, lr}
 801661a:	6803      	ldr	r3, [r0, #0]
 801661c:	4604      	mov	r4, r0
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	4798      	blx	r3
 8016622:	b128      	cbz	r0, 8016630 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016624:	4b07      	ldr	r3, [pc, #28]	; (8016644 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016626:	213f      	movs	r1, #63	; 0x3f
 8016628:	4a07      	ldr	r2, [pc, #28]	; (8016648 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801662a:	4808      	ldr	r0, [pc, #32]	; (801664c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801662c:	f014 f8b2 	bl	802a794 <__assert_func>
 8016630:	6923      	ldr	r3, [r4, #16]
 8016632:	68a2      	ldr	r2, [r4, #8]
 8016634:	f3bf 8f5b 	dmb	ish
 8016638:	3301      	adds	r3, #1
 801663a:	429a      	cmp	r2, r3
 801663c:	bfd8      	it	le
 801663e:	1a9b      	suble	r3, r3, r2
 8016640:	6123      	str	r3, [r4, #16]
 8016642:	bd10      	pop	{r4, pc}
 8016644:	0802e817 	.word	0x0802e817
 8016648:	0802e936 	.word	0x0802e936
 801664c:	0802e7ce 	.word	0x0802e7ce

08016650 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016650:	b570      	push	{r4, r5, r6, lr}
 8016652:	4604      	mov	r4, r0
 8016654:	6840      	ldr	r0, [r0, #4]
 8016656:	6803      	ldr	r3, [r0, #0]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	4798      	blx	r3
 801665c:	4605      	mov	r5, r0
 801665e:	b930      	cbnz	r0, 801666e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016660:	7a23      	ldrb	r3, [r4, #8]
 8016662:	b123      	cbz	r3, 801666e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016664:	6860      	ldr	r0, [r4, #4]
 8016666:	6803      	ldr	r3, [r0, #0]
 8016668:	695b      	ldr	r3, [r3, #20]
 801666a:	4798      	blx	r3
 801666c:	7225      	strb	r5, [r4, #8]
 801666e:	6860      	ldr	r0, [r4, #4]
 8016670:	6803      	ldr	r3, [r0, #0]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4798      	blx	r3
 8016676:	b928      	cbnz	r0, 8016684 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016678:	6823      	ldr	r3, [r4, #0]
 801667a:	4620      	mov	r0, r4
 801667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016682:	4718      	bx	r3
 8016684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016688:	f7fd bad4 	b.w	8013c34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801668c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801668c:	b510      	push	{r4, lr}
 801668e:	6082      	str	r2, [r0, #8]
 8016690:	2200      	movs	r2, #0
 8016692:	4c03      	ldr	r4, [pc, #12]	; (80166a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016694:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016698:	e9c0 4100 	strd	r4, r1, [r0]
 801669c:	bd10      	pop	{r4, pc}
 801669e:	bf00      	nop
 80166a0:	0802e89c 	.word	0x0802e89c

080166a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80166a4:	6840      	ldr	r0, [r0, #4]
 80166a6:	6803      	ldr	r3, [r0, #0]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	4718      	bx	r3

080166ac <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
 80166ac:	2001      	movs	r0, #1
 80166ae:	4770      	bx	lr

080166b0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh>:
 80166b0:	4413      	add	r3, r2
 80166b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166b6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80166ba:	7a45      	ldrb	r5, [r0, #9]
 80166bc:	7a03      	ldrb	r3, [r0, #8]
 80166be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80166c0:	436b      	muls	r3, r5
 80166c2:	1c5d      	adds	r5, r3, #1
 80166c4:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80166c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166ca:	122d      	asrs	r5, r5, #8
 80166cc:	eb06 0c03 	add.w	ip, r6, r3
 80166d0:	2dff      	cmp	r5, #255	; 0xff
 80166d2:	d136      	bne.n	8016742 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x92>
 80166d4:	4f3a      	ldr	r7, [pc, #232]	; (80167c0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x110>)
 80166d6:	f816 eb01 	ldrb.w	lr, [r6], #1
 80166da:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80166de:	d107      	bne.n	80166f0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x40>
 80166e0:	8a83      	ldrh	r3, [r0, #20]
 80166e2:	800b      	strh	r3, [r1, #0]
 80166e4:	45b4      	cmp	ip, r6
 80166e6:	f101 0102 	add.w	r1, r1, #2
 80166ea:	d1f4      	bne.n	80166d6 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x26>
 80166ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f0:	f8b1 8000 	ldrh.w	r8, [r1]
 80166f4:	ea6f 020e 	mvn.w	r2, lr
 80166f8:	8ac4      	ldrh	r4, [r0, #22]
 80166fa:	b2d2      	uxtb	r2, r2
 80166fc:	ea08 0307 	and.w	r3, r8, r7
 8016700:	f408 69fc 	and.w	r9, r8, #2016	; 0x7e0
 8016704:	f008 081f 	and.w	r8, r8, #31
 8016708:	4353      	muls	r3, r2
 801670a:	fb02 f909 	mul.w	r9, r2, r9
 801670e:	fb0e 3404 	mla	r4, lr, r4, r3
 8016712:	fb02 f208 	mul.w	r2, r2, r8
 8016716:	fb94 f4f5 	sdiv	r4, r4, r5
 801671a:	ea04 0307 	and.w	r3, r4, r7
 801671e:	8b04      	ldrh	r4, [r0, #24]
 8016720:	fb0e 9404 	mla	r4, lr, r4, r9
 8016724:	fb94 f4f5 	sdiv	r4, r4, r5
 8016728:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801672c:	431c      	orrs	r4, r3
 801672e:	8b43      	ldrh	r3, [r0, #26]
 8016730:	fb0e 2303 	mla	r3, lr, r3, r2
 8016734:	fb93 f3f5 	sdiv	r3, r3, r5
 8016738:	f003 031f 	and.w	r3, r3, #31
 801673c:	431c      	orrs	r4, r3
 801673e:	800c      	strh	r4, [r1, #0]
 8016740:	e7d0      	b.n	80166e4 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x34>
 8016742:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80167c0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x110>
 8016746:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801674a:	f816 3b01 	ldrb.w	r3, [r6], #1
 801674e:	f8b1 9000 	ldrh.w	r9, [r1]
 8016752:	fb13 f305 	smulbb	r3, r3, r5
 8016756:	8ac4      	ldrh	r4, [r0, #22]
 8016758:	f409 6afc 	and.w	sl, r9, #2016	; 0x7e0
 801675c:	4566      	cmp	r6, ip
 801675e:	b29b      	uxth	r3, r3
 8016760:	f103 0201 	add.w	r2, r3, #1
 8016764:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016768:	ea09 0208 	and.w	r2, r9, r8
 801676c:	f009 091f 	and.w	r9, r9, #31
 8016770:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016774:	ea6f 0703 	mvn.w	r7, r3
 8016778:	b2ff      	uxtb	r7, r7
 801677a:	fb07 f202 	mul.w	r2, r7, r2
 801677e:	fb07 fa0a 	mul.w	sl, r7, sl
 8016782:	fb03 2404 	mla	r4, r3, r4, r2
 8016786:	8b02      	ldrh	r2, [r0, #24]
 8016788:	fb07 f709 	mul.w	r7, r7, r9
 801678c:	fb03 a202 	mla	r2, r3, r2, sl
 8016790:	fb94 f4fe 	sdiv	r4, r4, lr
 8016794:	fb92 f2fe 	sdiv	r2, r2, lr
 8016798:	ea04 0408 	and.w	r4, r4, r8
 801679c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80167a0:	ea44 0402 	orr.w	r4, r4, r2
 80167a4:	8b42      	ldrh	r2, [r0, #26]
 80167a6:	fb03 7302 	mla	r3, r3, r2, r7
 80167aa:	fb93 f3fe 	sdiv	r3, r3, lr
 80167ae:	f003 031f 	and.w	r3, r3, #31
 80167b2:	ea44 0403 	orr.w	r4, r4, r3
 80167b6:	f821 4b02 	strh.w	r4, [r1], #2
 80167ba:	d1c6      	bne.n	801674a <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x9a>
 80167bc:	e796      	b.n	80166ec <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x3c>
 80167be:	bf00      	nop
 80167c0:	fffff800 	.word	0xfffff800

080167c4 <_ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_>:
 80167c4:	b510      	push	{r4, lr}
 80167c6:	8ac4      	ldrh	r4, [r0, #22]
 80167c8:	1224      	asrs	r4, r4, #8
 80167ca:	700c      	strb	r4, [r1, #0]
 80167cc:	8b01      	ldrh	r1, [r0, #24]
 80167ce:	10c9      	asrs	r1, r1, #3
 80167d0:	7011      	strb	r1, [r2, #0]
 80167d2:	7e82      	ldrb	r2, [r0, #26]
 80167d4:	00d2      	lsls	r2, r2, #3
 80167d6:	701a      	strb	r2, [r3, #0]
 80167d8:	9b02      	ldr	r3, [sp, #8]
 80167da:	7a42      	ldrb	r2, [r0, #9]
 80167dc:	2001      	movs	r0, #1
 80167de:	701a      	strb	r2, [r3, #0]
 80167e0:	bd10      	pop	{r4, pc}

080167e2 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
 80167e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167e6:	4617      	mov	r7, r2
 80167e8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80167ec:	b085      	sub	sp, #20
 80167ee:	4698      	mov	r8, r3
 80167f0:	443a      	add	r2, r7
 80167f2:	4604      	mov	r4, r0
 80167f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167f6:	460d      	mov	r5, r1
 80167f8:	60c2      	str	r2, [r0, #12]
 80167fa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80167fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016800:	441a      	add	r2, r3
 8016802:	6803      	ldr	r3, [r0, #0]
 8016804:	6102      	str	r2, [r0, #16]
 8016806:	695b      	ldr	r3, [r3, #20]
 8016808:	4798      	blx	r3
 801680a:	2800      	cmp	r0, #0
 801680c:	d039      	beq.n	8016882 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa0>
 801680e:	4447      	add	r7, r8
 8016810:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8016814:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016816:	4437      	add	r7, r6
 8016818:	6823      	ldr	r3, [r4, #0]
 801681a:	f10d 020f 	add.w	r2, sp, #15
 801681e:	a903      	add	r1, sp, #12
 8016820:	4620      	mov	r0, r4
 8016822:	9200      	str	r2, [sp, #0]
 8016824:	f10d 020d 	add.w	r2, sp, #13
 8016828:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801682c:	f10d 030e 	add.w	r3, sp, #14
 8016830:	47c0      	blx	r8
 8016832:	b1f8      	cbz	r0, 8016874 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x92>
 8016834:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016838:	7a20      	ldrb	r0, [r4, #8]
 801683a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801683e:	4358      	muls	r0, r3
 8016840:	f89d c00e 	ldrb.w	ip, [sp, #14]
 8016844:	1c43      	adds	r3, r0, #1
 8016846:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801684a:	7830      	ldrb	r0, [r6, #0]
 801684c:	121b      	asrs	r3, r3, #8
 801684e:	fb10 f003 	smulbb	r0, r0, r3
 8016852:	b283      	uxth	r3, r0
 8016854:	1c58      	adds	r0, r3, #1
 8016856:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801685a:	6823      	ldr	r3, [r4, #0]
 801685c:	1200      	asrs	r0, r0, #8
 801685e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016862:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016866:	28ff      	cmp	r0, #255	; 0xff
 8016868:	d10e      	bne.n	8016888 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa6>
 801686a:	f8cd c000 	str.w	ip, [sp]
 801686e:	4629      	mov	r1, r5
 8016870:	4620      	mov	r0, r4
 8016872:	47c0      	blx	r8
 8016874:	68e3      	ldr	r3, [r4, #12]
 8016876:	3601      	adds	r6, #1
 8016878:	3502      	adds	r5, #2
 801687a:	3301      	adds	r3, #1
 801687c:	42b7      	cmp	r7, r6
 801687e:	60e3      	str	r3, [r4, #12]
 8016880:	d1ca      	bne.n	8016818 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x36>
 8016882:	b005      	add	sp, #20
 8016884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016888:	8829      	ldrh	r1, [r5, #0]
 801688a:	fa1f fe80 	uxth.w	lr, r0
 801688e:	43c0      	mvns	r0, r0
 8016890:	fb12 f20e 	smulbb	r2, r2, lr
 8016894:	ea4f 2921 	mov.w	r9, r1, asr #8
 8016898:	fb13 f30e 	smulbb	r3, r3, lr
 801689c:	b2c0      	uxtb	r0, r0
 801689e:	fb1c fc0e 	smulbb	ip, ip, lr
 80168a2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80168a6:	fb09 2200 	mla	r2, r9, r0, r2
 80168aa:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80168ae:	00c9      	lsls	r1, r1, #3
 80168b0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80168b4:	b292      	uxth	r2, r2
 80168b6:	b2c9      	uxtb	r1, r1
 80168b8:	fb09 3300 	mla	r3, r9, r0, r3
 80168bc:	fb01 c000 	mla	r0, r1, r0, ip
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	b280      	uxth	r0, r0
 80168c4:	1c59      	adds	r1, r3, #1
 80168c6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80168ca:	1c51      	adds	r1, r2, #1
 80168cc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80168d0:	1c41      	adds	r1, r0, #1
 80168d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80168d6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80168da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80168de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80168e2:	9000      	str	r0, [sp, #0]
 80168e4:	e7c3      	b.n	801686e <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x8c>
	...

080168e8 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:
 80168e8:	00db      	lsls	r3, r3, #3
 80168ea:	f89d 0000 	ldrb.w	r0, [sp]
 80168ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80168f2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80168f6:	4803      	ldr	r0, [pc, #12]	; (8016904 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 80168f8:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 80168fc:	4313      	orrs	r3, r2
 80168fe:	800b      	strh	r3, [r1, #0]
 8016900:	4770      	bx	lr
 8016902:	bf00      	nop
 8016904:	fffff800 	.word	0xfffff800

08016908 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016908:	6281      	str	r1, [r0, #40]	; 0x28
 801690a:	4770      	bx	lr

0801690c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801690c:	b513      	push	{r0, r1, r4, lr}
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	4604      	mov	r4, r0
 8016912:	4601      	mov	r1, r0
 8016914:	4668      	mov	r0, sp
 8016916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016918:	4798      	blx	r3
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	4669      	mov	r1, sp
 801691e:	4620      	mov	r0, r4
 8016920:	691b      	ldr	r3, [r3, #16]
 8016922:	4798      	blx	r3
 8016924:	b002      	add	sp, #8
 8016926:	bd10      	pop	{r4, pc}

08016928 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016928:	b510      	push	{r4, lr}
 801692a:	2200      	movs	r2, #0
 801692c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016930:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016934:	8002      	strh	r2, [r0, #0]
 8016936:	8042      	strh	r2, [r0, #2]
 8016938:	8084      	strh	r4, [r0, #4]
 801693a:	80c1      	strh	r1, [r0, #6]
 801693c:	bd10      	pop	{r4, pc}

0801693e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801693e:	2200      	movs	r2, #0
 8016940:	8002      	strh	r2, [r0, #0]
 8016942:	8042      	strh	r2, [r0, #2]
 8016944:	8082      	strh	r2, [r0, #4]
 8016946:	80c2      	strh	r2, [r0, #6]
 8016948:	4770      	bx	lr
	...

0801694c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801694c:	b508      	push	{r3, lr}
 801694e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016950:	b928      	cbnz	r0, 801695e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016952:	4b03      	ldr	r3, [pc, #12]	; (8016960 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016954:	2123      	movs	r1, #35	; 0x23
 8016956:	4a03      	ldr	r2, [pc, #12]	; (8016964 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016958:	4803      	ldr	r0, [pc, #12]	; (8016968 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801695a:	f013 ff1b 	bl	802a794 <__assert_func>
 801695e:	bd08      	pop	{r3, pc}
 8016960:	0802e9b8 	.word	0x0802e9b8
 8016964:	0802ea98 	.word	0x0802ea98
 8016968:	0802e9df 	.word	0x0802e9df

0801696c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016970:	b089      	sub	sp, #36	; 0x24
 8016972:	4604      	mov	r4, r0
 8016974:	6808      	ldr	r0, [r1, #0]
 8016976:	f04f 0a00 	mov.w	sl, #0
 801697a:	6849      	ldr	r1, [r1, #4]
 801697c:	ab02      	add	r3, sp, #8
 801697e:	f04f 0b01 	mov.w	fp, #1
 8016982:	c303      	stmia	r3!, {r0, r1}
 8016984:	4b3f      	ldr	r3, [pc, #252]	; (8016a84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016986:	4621      	mov	r1, r4
 8016988:	a804      	add	r0, sp, #16
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	2b01      	cmp	r3, #1
 801698e:	6823      	ldr	r3, [r4, #0]
 8016990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016992:	bf1f      	itttt	ne
 8016994:	f10d 0906 	addne.w	r9, sp, #6
 8016998:	ae03      	addne	r6, sp, #12
 801699a:	f10d 050e 	addne.w	r5, sp, #14
 801699e:	f10d 080a 	addne.w	r8, sp, #10
 80169a2:	bf01      	itttt	eq
 80169a4:	f10d 090e 	addeq.w	r9, sp, #14
 80169a8:	f10d 0606 	addeq.w	r6, sp, #6
 80169ac:	ad03      	addeq	r5, sp, #12
 80169ae:	f10d 0808 	addeq.w	r8, sp, #8
 80169b2:	4798      	blx	r3
 80169b4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80169b8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d056      	beq.n	8016a6e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80169c0:	4293      	cmp	r3, r2
 80169c2:	bfa8      	it	ge
 80169c4:	4613      	movge	r3, r2
 80169c6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80169ca:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80169ce:	2f00      	cmp	r7, #0
 80169d0:	dd34      	ble.n	8016a3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80169d2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80169d6:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80169da:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80169de:	4484      	add	ip, r0
 80169e0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80169e4:	f9b6 e000 	ldrsh.w	lr, [r6]
 80169e8:	fa0f fc8c 	sxth.w	ip, ip
 80169ec:	f9b9 1000 	ldrsh.w	r1, [r9]
 80169f0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80169f4:	4562      	cmp	r2, ip
 80169f6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80169fa:	f8ad e01c 	strh.w	lr, [sp, #28]
 80169fe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016a02:	da29      	bge.n	8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a04:	4472      	add	r2, lr
 8016a06:	b212      	sxth	r2, r2
 8016a08:	4290      	cmp	r0, r2
 8016a0a:	da25      	bge.n	8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a0c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016a10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016a14:	4402      	add	r2, r0
 8016a16:	b212      	sxth	r2, r2
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	da1d      	bge.n	8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a1c:	440b      	add	r3, r1
 8016a1e:	b21b      	sxth	r3, r3
 8016a20:	4298      	cmp	r0, r3
 8016a22:	da19      	bge.n	8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a24:	6823      	ldr	r3, [r4, #0]
 8016a26:	a906      	add	r1, sp, #24
 8016a28:	4620      	mov	r0, r4
 8016a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a2c:	4798      	blx	r3
 8016a2e:	b998      	cbnz	r0, 8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a30:	107f      	asrs	r7, r7, #1
 8016a32:	f04f 0a01 	mov.w	sl, #1
 8016a36:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016a3a:	e7c6      	b.n	80169ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016a3c:	d10c      	bne.n	8016a58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a3e:	f8ad b006 	strh.w	fp, [sp, #6]
 8016a42:	f8b8 2000 	ldrh.w	r2, [r8]
 8016a46:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016a4a:	440a      	add	r2, r1
 8016a4c:	f8a8 2000 	strh.w	r2, [r8]
 8016a50:	882b      	ldrh	r3, [r5, #0]
 8016a52:	1a5b      	subs	r3, r3, r1
 8016a54:	802b      	strh	r3, [r5, #0]
 8016a56:	e7ad      	b.n	80169b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016a58:	f1ba 0f00 	cmp.w	sl, #0
 8016a5c:	d0f1      	beq.n	8016a42 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016a5e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016a62:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016a66:	429a      	cmp	r2, r3
 8016a68:	bf08      	it	eq
 8016a6a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016a6c:	e7e9      	b.n	8016a42 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016a6e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016a72:	429a      	cmp	r2, r3
 8016a74:	bf04      	itt	eq
 8016a76:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016a7a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016a7c:	b009      	add	sp, #36	; 0x24
 8016a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a82:	bf00      	nop
 8016a84:	20014b2c 	.word	0x20014b2c

08016a88 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016a88:	2200      	movs	r2, #0
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	8082      	strh	r2, [r0, #4]
 8016a8e:	80c2      	strh	r2, [r0, #6]
 8016a90:	8102      	strh	r2, [r0, #8]
 8016a92:	8142      	strh	r2, [r0, #10]
 8016a94:	8182      	strh	r2, [r0, #12]
 8016a96:	81c2      	strh	r2, [r0, #14]
 8016a98:	8202      	strh	r2, [r0, #16]
 8016a9a:	8242      	strh	r2, [r0, #18]
 8016a9c:	61c2      	str	r2, [r0, #28]
 8016a9e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016aa2:	6282      	str	r2, [r0, #40]	; 0x28
 8016aa4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016aa8:	4905      	ldr	r1, [pc, #20]	; (8016ac0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016aaa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016aae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016ab2:	6001      	str	r1, [r0, #0]
 8016ab4:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016ab6:	22ff      	movs	r2, #255	; 0xff
 8016ab8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	0802ea24 	.word	0x0802ea24

08016ac4 <_ZN8touchgfx17AbstractDataGraph8setScaleEi>:
 8016ac4:	62c1      	str	r1, [r0, #44]	; 0x2c
 8016ac6:	4770      	bx	lr

08016ac8 <_ZNK8touchgfx17AbstractDataGraph19getXAxisScaleScaledEv>:
 8016ac8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016aca:	4770      	bx	lr

08016acc <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8016acc:	2300      	movs	r3, #0
 8016ace:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 8016ad2:	4770      	bx	lr

08016ad4 <_ZNK8touchgfx17AbstractDataGraph18indexToGlobalIndexEs>:
 8016ad4:	4608      	mov	r0, r1
 8016ad6:	4770      	bx	lr

08016ad8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8016ad8:	b530      	push	{r4, r5, lr}
 8016ada:	460d      	mov	r5, r1
 8016adc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8016ade:	8949      	ldrh	r1, [r1, #10]
 8016ae0:	b085      	sub	sp, #20
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	1ac9      	subs	r1, r1, r3
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	f10d 0206 	add.w	r2, sp, #6
 8016aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016af0:	b209      	sxth	r1, r1
 8016af2:	4798      	blx	r3
 8016af4:	b1a0      	cbz	r0, 8016b20 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016af6:	792b      	ldrb	r3, [r5, #4]
 8016af8:	b993      	cbnz	r3, 8016b20 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016afa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8016afe:	b178      	cbz	r0, 8016b20 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016b00:	6803      	ldr	r3, [r0, #0]
 8016b02:	68db      	ldr	r3, [r3, #12]
 8016b04:	4798      	blx	r3
 8016b06:	b158      	cbz	r0, 8016b20 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016b08:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016b0c:	aa02      	add	r2, sp, #8
 8016b0e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8016b12:	4621      	mov	r1, r4
 8016b14:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016b18:	9503      	str	r5, [sp, #12]
 8016b1a:	6803      	ldr	r3, [r0, #0]
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	4798      	blx	r3
 8016b20:	b005      	add	sp, #20
 8016b22:	bd30      	pop	{r4, r5, pc}

08016b24 <_ZNK8touchgfx17AbstractDataGraph20getXAxisOffsetScaledEv>:
 8016b24:	2000      	movs	r0, #0
 8016b26:	4770      	bx	lr

08016b28 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>:
 8016b28:	b410      	push	{r4}
 8016b2a:	6804      	ldr	r4, [r0, #0]
 8016b2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016b2e:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
 8016b32:	435a      	muls	r2, r3
 8016b34:	4359      	muls	r1, r3
 8016b36:	4623      	mov	r3, r4
 8016b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b3c:	4718      	bx	r3

08016b3e <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMinEv>:
 8016b3e:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8016b42:	4770      	bx	lr

08016b44 <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMaxEv>:
 8016b44:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8016b48:	4770      	bx	lr

08016b4a <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMinAsFloatEv>:
 8016b4a:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
 8016b4e:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8016b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016b5a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016b5e:	4770      	bx	lr

08016b60 <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMaxAsFloatEv>:
 8016b60:	edd0 7a51 	vldr	s15, [r0, #324]	; 0x144
 8016b64:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8016b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b6c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016b70:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016b74:	4770      	bx	lr

08016b76 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEi>:
 8016b76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8016b78:	6803      	ldr	r3, [r0, #0]
 8016b7a:	4351      	muls	r1, r2
 8016b7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8016b80:	4718      	bx	r3

08016b82 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisScaleAsFloatEv>:
 8016b82:	b510      	push	{r4, lr}
 8016b84:	6803      	ldr	r3, [r0, #0]
 8016b86:	4604      	mov	r4, r0
 8016b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016b8c:	4798      	blx	r3
 8016b8e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016b92:	ee07 0a90 	vmov	s15, r0
 8016b96:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b9e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016ba2:	bd10      	pop	{r4, pc}

08016ba4 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEi>:
 8016ba4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8016ba6:	6803      	ldr	r3, [r0, #0]
 8016ba8:	4351      	muls	r1, r2
 8016baa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8016bae:	4718      	bx	r3

08016bb0 <_ZNK8touchgfx22AbstractDataGraphWithY21getXAxisOffsetAsFloatEv>:
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	6803      	ldr	r3, [r0, #0]
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016bba:	4798      	blx	r3
 8016bbc:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016bc0:	ee07 0a90 	vmov	s15, r0
 8016bc4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bcc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016bd0:	bd10      	pop	{r4, pc}

08016bd2 <_ZN8touchgfx22AbstractDataGraphWithY14beforeAddValueEv>:
 8016bd2:	4770      	bx	lr

08016bd4 <_ZNK8touchgfx22AbstractDataGraphWithY9realIndexEs>:
 8016bd4:	4608      	mov	r0, r1
 8016bd6:	4770      	bx	lr

08016bd8 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointXScaledEs>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	6803      	ldr	r3, [r0, #0]
 8016bdc:	4604      	mov	r4, r0
 8016bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016be2:	4798      	blx	r3
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	4605      	mov	r5, r0
 8016be8:	4620      	mov	r0, r4
 8016bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016bee:	4798      	blx	r3
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	4345      	muls	r5, r0
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016bfa:	4798      	blx	r3
 8016bfc:	4428      	add	r0, r5
 8016bfe:	bd38      	pop	{r3, r4, r5, pc}

08016c00 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointYScaledEs>:
 8016c00:	b510      	push	{r4, lr}
 8016c02:	6803      	ldr	r3, [r0, #0]
 8016c04:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 8016c08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8016c0c:	4798      	blx	r3
 8016c0e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016c12:	bd10      	pop	{r4, pc}

08016c14 <_ZN8touchgfx22AbstractDataGraphWithY19setXAxisScaleScaledEi>:
 8016c14:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 8016c18:	4770      	bx	lr

08016c1a <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisScaleScaledEv>:
 8016c1a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8016c1e:	4770      	bx	lr

08016c20 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMinScaledEv>:
 8016c20:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8016c24:	4770      	bx	lr

08016c26 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMaxScaledEv>:
 8016c26:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8016c2a:	4770      	bx	lr

08016c2c <_ZN8touchgfx22AbstractDataGraphWithY20setXAxisOffsetScaledEi>:
 8016c2c:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8016c30:	4770      	bx	lr

08016c32 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisOffsetScaledEv>:
 8016c32:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8016c36:	4770      	bx	lr

08016c38 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenXQ5Es>:
 8016c38:	6803      	ldr	r3, [r0, #0]
 8016c3a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016c3e:	4718      	bx	r3

08016c40 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenYQ5Es>:
 8016c40:	b570      	push	{r4, r5, r6, lr}
 8016c42:	6803      	ldr	r3, [r0, #0]
 8016c44:	4604      	mov	r4, r0
 8016c46:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 8016c4a:	f8d3 50d0 	ldr.w	r5, [r3, #208]	; 0xd0
 8016c4e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8016c52:	4798      	blx	r3
 8016c54:	462b      	mov	r3, r5
 8016c56:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c60:	4718      	bx	r3
	...

08016c64 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>:
 8016c64:	4291      	cmp	r1, r2
 8016c66:	b510      	push	{r4, lr}
 8016c68:	4604      	mov	r4, r0
 8016c6a:	d106      	bne.n	8016c7a <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x16>
 8016c6c:	4b12      	ldr	r3, [pc, #72]	; (8016cb8 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x54>)
 8016c6e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8016c72:	4a12      	ldr	r2, [pc, #72]	; (8016cbc <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x58>)
 8016c74:	4812      	ldr	r0, [pc, #72]	; (8016cc0 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x5c>)
 8016c76:	f013 fd8d 	bl	802a794 <__assert_func>
 8016c7a:	bfc2      	ittt	gt
 8016c7c:	460b      	movgt	r3, r1
 8016c7e:	4611      	movgt	r1, r2
 8016c80:	461a      	movgt	r2, r3
 8016c82:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8016c86:	428b      	cmp	r3, r1
 8016c88:	d103      	bne.n	8016c92 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x2e>
 8016c8a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	d011      	beq.n	8016cb6 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x52>
 8016c92:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8016c96:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8016c9a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 8016c9e:	f004 fa05 	bl	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016ca2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016ca6:	f004 fa01 	bl	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016caa:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8016cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cb2:	f004 b9fb 	b.w	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016cb6:	bd10      	pop	{r4, pc}
 8016cb8:	0802eae6 	.word	0x0802eae6
 8016cbc:	0802ed50 	.word	0x0802ed50
 8016cc0:	0802eaf1 	.word	0x0802eaf1

08016cc4 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii>:
 8016cc4:	4291      	cmp	r1, r2
 8016cc6:	b510      	push	{r4, lr}
 8016cc8:	4604      	mov	r4, r0
 8016cca:	d106      	bne.n	8016cda <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x16>
 8016ccc:	4b12      	ldr	r3, [pc, #72]	; (8016d18 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x54>)
 8016cce:	f240 21b9 	movw	r1, #697	; 0x2b9
 8016cd2:	4a12      	ldr	r2, [pc, #72]	; (8016d1c <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x58>)
 8016cd4:	4812      	ldr	r0, [pc, #72]	; (8016d20 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x5c>)
 8016cd6:	f013 fd5d 	bl	802a794 <__assert_func>
 8016cda:	bfc2      	ittt	gt
 8016cdc:	460b      	movgt	r3, r1
 8016cde:	4611      	movgt	r1, r2
 8016ce0:	461a      	movgt	r2, r3
 8016ce2:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8016ce6:	428b      	cmp	r3, r1
 8016ce8:	d103      	bne.n	8016cf2 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x2e>
 8016cea:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	d011      	beq.n	8016d16 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x52>
 8016cf2:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8016cf6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8016cfa:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
 8016cfe:	f004 f9d5 	bl	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d02:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016d06:	f004 f9d1 	bl	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d0a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8016d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d12:	f004 b9cb 	b.w	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d16:	bd10      	pop	{r4, pc}
 8016d18:	0802eae6 	.word	0x0802eae6
 8016d1c:	0802ed98 	.word	0x0802ed98
 8016d20:	0802eaf1 	.word	0x0802eaf1

08016d24 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8016d24:	b530      	push	{r4, r5, lr}
 8016d26:	790b      	ldrb	r3, [r1, #4]
 8016d28:	b085      	sub	sp, #20
 8016d2a:	4604      	mov	r4, r0
 8016d2c:	460d      	mov	r5, r1
 8016d2e:	2b02      	cmp	r3, #2
 8016d30:	d020      	beq.n	8016d74 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016d32:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8016d34:	f10d 0206 	add.w	r2, sp, #6
 8016d38:	88c9      	ldrh	r1, [r1, #6]
 8016d3a:	1ac9      	subs	r1, r1, r3
 8016d3c:	6803      	ldr	r3, [r0, #0]
 8016d3e:	b209      	sxth	r1, r1
 8016d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016d44:	4798      	blx	r3
 8016d46:	b1a8      	cbz	r0, 8016d74 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016d48:	792b      	ldrb	r3, [r5, #4]
 8016d4a:	2b01      	cmp	r3, #1
 8016d4c:	d812      	bhi.n	8016d74 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016d4e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 8016d52:	b178      	cbz	r0, 8016d74 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016d54:	6803      	ldr	r3, [r0, #0]
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	4798      	blx	r3
 8016d5a:	b158      	cbz	r0, 8016d74 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016d5c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016d60:	aa02      	add	r2, sp, #8
 8016d62:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 8016d66:	4621      	mov	r1, r4
 8016d68:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016d6c:	9503      	str	r5, [sp, #12]
 8016d6e:	6803      	ldr	r3, [r0, #0]
 8016d70:	689b      	ldr	r3, [r3, #8]
 8016d72:	4798      	blx	r3
 8016d74:	b005      	add	sp, #20
 8016d76:	bd30      	pop	{r4, r5, pc}

08016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016d78:	6800      	ldr	r0, [r0, #0]
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	bfbd      	ittte	lt
 8016d7e:	380f      	sublt	r0, #15
 8016d80:	2320      	movlt	r3, #32
 8016d82:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016d86:	3010      	addge	r0, #16
 8016d88:	bfa8      	it	ge
 8016d8a:	1140      	asrge	r0, r0, #5
 8016d8c:	4770      	bx	lr

08016d8e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
 8016d8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d90:	ab01      	add	r3, sp, #4
 8016d92:	4615      	mov	r5, r2
 8016d94:	f004 fb46 	bl	801b424 <_ZN8touchgfx6muldivElllRl>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	462a      	mov	r2, r5
 8016d9c:	9901      	ldr	r1, [sp, #4]
 8016d9e:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8016da2:	f04f 0020 	mov.w	r0, #32
 8016da6:	db04      	blt.n	8016db2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
 8016da8:	f004 fb5b 	bl	801b462 <_ZN8touchgfx6muldivElll>
 8016dac:	4420      	add	r0, r4
 8016dae:	b003      	add	sp, #12
 8016db0:	bd30      	pop	{r4, r5, pc}
 8016db2:	f004 fb56 	bl	801b462 <_ZN8touchgfx6muldivElll>
 8016db6:	1a20      	subs	r0, r4, r0
 8016db8:	e7f9      	b.n	8016dae <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>:
 8016dba:	ee07 0a90 	vmov	s15, r0
 8016dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016dc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dce:	db08      	blt.n	8016de2 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi+0x28>
 8016dd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016dd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016dd8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016ddc:	ee17 0a90 	vmov	r0, s15
 8016de0:	4770      	bx	lr
 8016de2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016dea:	ee17 3a90 	vmov	r3, s15
 8016dee:	1e58      	subs	r0, r3, #1
 8016df0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016df4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016df8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8016dfc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016e00:	ee10 3a10 	vmov	r3, s0
 8016e04:	4403      	add	r3, r0
 8016e06:	4618      	mov	r0, r3
 8016e08:	4770      	bx	lr

08016e0a <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEff>:
 8016e0a:	b570      	push	{r4, r5, r6, lr}
 8016e0c:	ed2d 8b02 	vpush	{d8}
 8016e10:	eeb0 8a60 	vmov.f32	s16, s1
 8016e14:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8016e16:	4604      	mov	r4, r0
 8016e18:	4628      	mov	r0, r5
 8016e1a:	f7ff ffce 	bl	8016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8016e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8016e22:	4606      	mov	r6, r0
 8016e24:	4628      	mov	r0, r5
 8016e26:	f7ff ffc8 	bl	8016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8016e2a:	6823      	ldr	r3, [r4, #0]
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	4631      	mov	r1, r6
 8016e30:	4620      	mov	r0, r4
 8016e32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016e36:	ecbd 8b02 	vpop	{d8}
 8016e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e3e:	4718      	bx	r3

08016e40 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEf>:
 8016e40:	b510      	push	{r4, lr}
 8016e42:	4604      	mov	r4, r0
 8016e44:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016e46:	f7ff ffb8 	bl	8016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8016e4a:	4601      	mov	r1, r0
 8016e4c:	6823      	ldr	r3, [r4, #0]
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8016e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e58:	4718      	bx	r3

08016e5a <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEf>:
 8016e5a:	b510      	push	{r4, lr}
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016e60:	f7ff ffab 	bl	8016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8016e64:	4601      	mov	r1, r0
 8016e66:	6823      	ldr	r3, [r4, #0]
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8016e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e72:	4718      	bx	r3

08016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>:
 8016e74:	2800      	cmp	r0, #0
 8016e76:	db07      	blt.n	8016e88 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii+0x14>
 8016e78:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8016e7c:	fb90 f0f1 	sdiv	r0, r0, r1
 8016e80:	2102      	movs	r1, #2
 8016e82:	fb90 f0f1 	sdiv	r0, r0, r1
 8016e86:	4770      	bx	lr
 8016e88:	f06f 0301 	mvn.w	r3, #1
 8016e8c:	fb03 1000 	mla	r0, r3, r0, r1
 8016e90:	3801      	subs	r0, #1
 8016e92:	fb90 f0f1 	sdiv	r0, r0, r1
 8016e96:	2102      	movs	r1, #2
 8016e98:	fb90 f0f1 	sdiv	r0, r0, r1
 8016e9c:	4240      	negs	r0, r0
 8016e9e:	4770      	bx	lr

08016ea0 <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMinAsIntEv>:
 8016ea0:	b508      	push	{r3, lr}
 8016ea2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016ea4:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8016ea8:	f7ff ffe4 	bl	8016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8016eac:	bd08      	pop	{r3, pc}

08016eae <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMaxAsIntEv>:
 8016eae:	b508      	push	{r3, lr}
 8016eb0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016eb2:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8016eb6:	f7ff ffdd 	bl	8016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8016eba:	bd08      	pop	{r3, pc}

08016ebc <_ZNK8touchgfx22AbstractDataGraphWithY18getXAxisScaleAsIntEv>:
 8016ebc:	b510      	push	{r4, lr}
 8016ebe:	6803      	ldr	r3, [r0, #0]
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016ec6:	4798      	blx	r3
 8016ec8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016eca:	f7ff ffd3 	bl	8016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8016ece:	bd10      	pop	{r4, pc}

08016ed0 <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisOffsetAsIntEv>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	6803      	ldr	r3, [r0, #0]
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016eda:	4798      	blx	r3
 8016edc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016ede:	f7ff ffc9 	bl	8016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8016ee2:	bd10      	pop	{r4, pc}

08016ee4 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>:
 8016ee4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8016ee8:	4770      	bx	lr

08016eea <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8016eea:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
 8016eee:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016ef2:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
 8016ef6:	f8a0 2112 	strh.w	r2, [r0, #274]	; 0x112
 8016efa:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
 8016efe:	4770      	bx	lr

08016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>:
 8016f00:	f9b0 0110 	ldrsh.w	r0, [r0, #272]	; 0x110
 8016f04:	4770      	bx	lr

08016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>:
 8016f06:	f9b0 0112 	ldrsh.w	r0, [r0, #274]	; 0x112
 8016f0a:	4770      	bx	lr

08016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>:
 8016f0c:	f8b0 3112 	ldrh.w	r3, [r0, #274]	; 0x112
 8016f10:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
 8016f14:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8016f16:	4413      	add	r3, r2
 8016f18:	1ac0      	subs	r0, r0, r3
 8016f1a:	b200      	sxth	r0, r0
 8016f1c:	4770      	bx	lr

08016f1e <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_>:
 8016f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f22:	4690      	mov	r8, r2
 8016f24:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 8016f28:	4604      	mov	r4, r0
 8016f2a:	461e      	mov	r6, r3
 8016f2c:	9d06      	ldr	r5, [sp, #24]
 8016f2e:	b92a      	cbnz	r2, 8016f3c <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8016f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f34:	802b      	strh	r3, [r5, #0]
 8016f36:	8033      	strh	r3, [r6, #0]
 8016f38:	2000      	movs	r0, #0
 8016f3a:	e009      	b.n	8016f50 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 8016f3c:	f7ff ffe6 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8016f40:	2801      	cmp	r0, #1
 8016f42:	d107      	bne.n	8016f54 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x36>
 8016f44:	2300      	movs	r3, #0
 8016f46:	8033      	strh	r3, [r6, #0]
 8016f48:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	802b      	strh	r3, [r5, #0]
 8016f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f54:	f9b4 c112 	ldrsh.w	ip, [r4, #274]	; 0x112
 8016f58:	1e42      	subs	r2, r0, #1
 8016f5a:	f8d4 713c 	ldr.w	r7, [r4, #316]	; 0x13c
 8016f5e:	eba1 0c0c 	sub.w	ip, r1, ip
 8016f62:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8016f66:	ea4f 104c 	mov.w	r0, ip, lsl #5
 8016f6a:	1af9      	subs	r1, r7, r3
 8016f6c:	f004 fa79 	bl	801b462 <_ZN8touchgfx6muldivElll>
 8016f70:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8016f74:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8016f78:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	1ac9      	subs	r1, r1, r3
 8016f80:	f7ff ffc4 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8016f84:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 8016f88:	1e42      	subs	r2, r0, #1
 8016f8a:	eba8 0803 	sub.w	r8, r8, r3
 8016f8e:	ea4f 1048 	mov.w	r0, r8, lsl #5
 8016f92:	f004 fa66 	bl	801b462 <_ZN8touchgfx6muldivElll>
 8016f96:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8016f9a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016f9e:	4287      	cmp	r7, r0
 8016fa0:	bfc2      	ittt	gt
 8016fa2:	463b      	movgt	r3, r7
 8016fa4:	4607      	movgt	r7, r0
 8016fa6:	4618      	movgt	r0, r3
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	bfb5      	itete	lt
 8016fac:	2320      	movlt	r3, #32
 8016fae:	301f      	addge	r0, #31
 8016fb0:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016fb4:	1140      	asrge	r0, r0, #5
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	da03      	bge.n	8016fc2 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xa4>
 8016fba:	2000      	movs	r0, #0
 8016fbc:	8028      	strh	r0, [r5, #0]
 8016fbe:	8030      	strh	r0, [r6, #0]
 8016fc0:	e7c6      	b.n	8016f50 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 8016fc2:	2320      	movs	r3, #32
 8016fc4:	fb97 f7f3 	sdiv	r7, r7, r3
 8016fc8:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	; 0x11a
 8016fcc:	3b01      	subs	r3, #1
 8016fce:	429f      	cmp	r7, r3
 8016fd0:	dd03      	ble.n	8016fda <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xbc>
 8016fd2:	b218      	sxth	r0, r3
 8016fd4:	8028      	strh	r0, [r5, #0]
 8016fd6:	8030      	strh	r0, [r6, #0]
 8016fd8:	e7ae      	b.n	8016f38 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016fda:	4283      	cmp	r3, r0
 8016fdc:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8016fe0:	bfb8      	it	lt
 8016fe2:	b218      	sxthlt	r0, r3
 8016fe4:	8037      	strh	r7, [r6, #0]
 8016fe6:	bfa8      	it	ge
 8016fe8:	b200      	sxthge	r0, r0
 8016fea:	8028      	strh	r0, [r5, #0]
 8016fec:	2001      	movs	r0, #1
 8016fee:	e7af      	b.n	8016f50 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>

08016ff0 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenXQ5Ei>:
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 8016ff8:	1b4e      	subs	r6, r1, r5
 8016ffa:	f7ff ff87 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8016ffe:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8017002:	1e41      	subs	r1, r0, #1
 8017004:	4630      	mov	r0, r6
 8017006:	1b52      	subs	r2, r2, r5
 8017008:	f7ff fec1 	bl	8016d8e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801700c:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 8017010:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8017014:	bd70      	pop	{r4, r5, r6, pc}

08017016 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>:
 8017016:	f9b0 003c 	ldrsh.w	r0, [r0, #60]	; 0x3c
 801701a:	4770      	bx	lr

0801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>:
 801701c:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
 8017020:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
 8017024:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8017026:	4413      	add	r3, r2
 8017028:	1ac0      	subs	r0, r0, r3
 801702a:	b200      	sxth	r0, r0
 801702c:	4770      	bx	lr

0801702e <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenYQ5Ei>:
 801702e:	b570      	push	{r4, r5, r6, lr}
 8017030:	4605      	mov	r5, r0
 8017032:	460e      	mov	r6, r1
 8017034:	f7ff fff2 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017038:	1e41      	subs	r1, r0, #1
 801703a:	f9b5 4110 	ldrsh.w	r4, [r5, #272]	; 0x110
 801703e:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8017042:	4404      	add	r4, r0
 8017044:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8017048:	1af0      	subs	r0, r6, r3
 801704a:	3c01      	subs	r4, #1
 801704c:	1ad2      	subs	r2, r2, r3
 801704e:	f7ff fe9e 	bl	8016d8e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8017052:	0164      	lsls	r4, r4, #5
 8017054:	1a20      	subs	r0, r4, r0
 8017056:	bd70      	pop	{r4, r5, r6, pc}

08017058 <_ZNK8touchgfx17AbstractDataGraph34getGraphAreaHeightIncludingPaddingEv>:
 8017058:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 801705c:	4770      	bx	lr

0801705e <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>:
 801705e:	f9b0 011c 	ldrsh.w	r0, [r0, #284]	; 0x11c
 8017062:	4770      	bx	lr

08017064 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8017064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017066:	4604      	mov	r4, r0
 8017068:	3034      	adds	r0, #52	; 0x34
 801706a:	460d      	mov	r5, r1
 801706c:	f7fe faf0 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017070:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8017074:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8017078:	4628      	mov	r0, r5
 801707a:	9200      	str	r2, [sp, #0]
 801707c:	2200      	movs	r2, #0
 801707e:	4611      	mov	r1, r2
 8017080:	f7f3 fd23 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 8017084:	b003      	add	sp, #12
 8017086:	bd30      	pop	{r4, r5, pc}

08017088 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>:
 8017088:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801708c:	4770      	bx	lr

0801708e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>:
 801708e:	b507      	push	{r0, r1, r2, lr}
 8017090:	6803      	ldr	r3, [r0, #0]
 8017092:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8017096:	4798      	blx	r3
 8017098:	ab02      	add	r3, sp, #8
 801709a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801709e:	4618      	mov	r0, r3
 80170a0:	f7ff fe6a 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80170a4:	b200      	sxth	r0, r0
 80170a6:	b003      	add	sp, #12
 80170a8:	f85d fb04 	ldr.w	pc, [sp], #4

080170ac <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80170ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ae:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 80170b2:	b085      	sub	sp, #20
 80170b4:	4605      	mov	r5, r0
 80170b6:	460f      	mov	r7, r1
 80170b8:	4616      	mov	r6, r2
 80170ba:	b333      	cbz	r3, 801710a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5e>
 80170bc:	6803      	ldr	r3, [r0, #0]
 80170be:	f10d 020e 	add.w	r2, sp, #14
 80170c2:	9200      	str	r2, [sp, #0]
 80170c4:	460a      	mov	r2, r1
 80170c6:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
 80170ca:	ab03      	add	r3, sp, #12
 80170cc:	47a0      	blx	r4
 80170ce:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80170d2:	4628      	mov	r0, r5
 80170d4:	f7ff ffdb 	bl	801708e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 80170d8:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80170dc:	4604      	mov	r4, r0
 80170de:	4628      	mov	r0, r5
 80170e0:	f7ff ffd5 	bl	801708e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 80170e4:	1bc0      	subs	r0, r0, r7
 80170e6:	1be4      	subs	r4, r4, r7
 80170e8:	2800      	cmp	r0, #0
 80170ea:	bfb8      	it	lt
 80170ec:	4240      	neglt	r0, r0
 80170ee:	2c00      	cmp	r4, #0
 80170f0:	bfb8      	it	lt
 80170f2:	4264      	neglt	r4, r4
 80170f4:	42a0      	cmp	r0, r4
 80170f6:	f04f 0001 	mov.w	r0, #1
 80170fa:	bfac      	ite	ge
 80170fc:	f9bd 300c 	ldrshge.w	r3, [sp, #12]
 8017100:	f9bd 300e 	ldrshlt.w	r3, [sp, #14]
 8017104:	8033      	strh	r3, [r6, #0]
 8017106:	b005      	add	sp, #20
 8017108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801710a:	4618      	mov	r0, r3
 801710c:	e7fb      	b.n	8017106 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5a>

0801710e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>:
 801710e:	b507      	push	{r0, r1, r2, lr}
 8017110:	6803      	ldr	r3, [r0, #0]
 8017112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017116:	4798      	blx	r3
 8017118:	ab02      	add	r3, sp, #8
 801711a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801711e:	4618      	mov	r0, r3
 8017120:	f7ff fe2a 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017124:	b200      	sxth	r0, r0
 8017126:	b003      	add	sp, #12
 8017128:	f85d fb04 	ldr.w	pc, [sp], #4

0801712c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801712c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017130:	4605      	mov	r5, r0
 8017132:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 8017136:	4689      	mov	r9, r1
 8017138:	4692      	mov	sl, r2
 801713a:	469b      	mov	fp, r3
 801713c:	b338      	cbz	r0, 801718e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x62>
 801713e:	2700      	movs	r7, #0
 8017140:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8017144:	b23e      	sxth	r6, r7
 8017146:	f9b5 311a 	ldrsh.w	r3, [r5, #282]	; 0x11a
 801714a:	42b3      	cmp	r3, r6
 801714c:	dd1e      	ble.n	801718c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x60>
 801714e:	4631      	mov	r1, r6
 8017150:	4628      	mov	r0, r5
 8017152:	f7ff ff9c 	bl	801708e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 8017156:	eba0 0409 	sub.w	r4, r0, r9
 801715a:	4631      	mov	r1, r6
 801715c:	4628      	mov	r0, r5
 801715e:	2c00      	cmp	r4, #0
 8017160:	f107 0701 	add.w	r7, r7, #1
 8017164:	bfb8      	it	lt
 8017166:	4264      	neglt	r4, r4
 8017168:	f7ff ffd1 	bl	801710e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>
 801716c:	eba0 000a 	sub.w	r0, r0, sl
 8017170:	b224      	sxth	r4, r4
 8017172:	2800      	cmp	r0, #0
 8017174:	bfb8      	it	lt
 8017176:	4240      	neglt	r0, r0
 8017178:	fb10 f000 	smulbb	r0, r0, r0
 801717c:	fb04 0004 	mla	r0, r4, r4, r0
 8017180:	4540      	cmp	r0, r8
 8017182:	bfbc      	itt	lt
 8017184:	f8ab 6000 	strhlt.w	r6, [fp]
 8017188:	4680      	movlt	r8, r0
 801718a:	e7db      	b.n	8017144 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801718c:	2001      	movs	r0, #1
 801718e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017192 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8017192:	b538      	push	{r3, r4, r5, lr}
 8017194:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 8017198:	460d      	mov	r5, r1
 801719a:	428b      	cmp	r3, r1
 801719c:	dd08      	ble.n	80171b0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801719e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80171a0:	b134      	cbz	r4, 80171b0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80171a2:	6823      	ldr	r3, [r4, #0]
 80171a4:	4620      	mov	r0, r4
 80171a6:	4629      	mov	r1, r5
 80171a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171aa:	4798      	blx	r3
 80171ac:	69a4      	ldr	r4, [r4, #24]
 80171ae:	e7f7      	b.n	80171a0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 80171b0:	bd38      	pop	{r3, r4, r5, pc}

080171b2 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>:
 80171b2:	3034      	adds	r0, #52	; 0x34
 80171b4:	f003 bf7a 	b.w	801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>

080171b8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 80171b8:	b570      	push	{r4, r5, r6, lr}
 80171ba:	4606      	mov	r6, r0
 80171bc:	460d      	mov	r5, r1
 80171be:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 80171c2:	b134      	cbz	r4, 80171d2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	4620      	mov	r0, r4
 80171c8:	4629      	mov	r1, r5
 80171ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171cc:	4798      	blx	r3
 80171ce:	69a4      	ldr	r4, [r4, #24]
 80171d0:	e7f7      	b.n	80171c2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80171d2:	f8d6 410c 	ldr.w	r4, [r6, #268]	; 0x10c
 80171d6:	b134      	cbz	r4, 80171e6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80171d8:	6823      	ldr	r3, [r4, #0]
 80171da:	4620      	mov	r0, r4
 80171dc:	4629      	mov	r1, r5
 80171de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171e0:	4798      	blx	r3
 80171e2:	69a4      	ldr	r4, [r4, #24]
 80171e4:	e7f7      	b.n	80171d6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80171e6:	bd70      	pop	{r4, r5, r6, pc}

080171e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80171e8:	b570      	push	{r4, r5, r6, lr}
 80171ea:	6803      	ldr	r3, [r0, #0]
 80171ec:	4605      	mov	r5, r0
 80171ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80171f2:	4798      	blx	r3
 80171f4:	682b      	ldr	r3, [r5, #0]
 80171f6:	4604      	mov	r4, r0
 80171f8:	4628      	mov	r0, r5
 80171fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80171fe:	4798      	blx	r3
 8017200:	4284      	cmp	r4, r0
 8017202:	4606      	mov	r6, r0
 8017204:	bfc2      	ittt	gt
 8017206:	b223      	sxthgt	r3, r4
 8017208:	4604      	movgt	r4, r0
 801720a:	461e      	movgt	r6, r3
 801720c:	42a6      	cmp	r6, r4
 801720e:	db05      	blt.n	801721c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x34>
 8017210:	b221      	sxth	r1, r4
 8017212:	4628      	mov	r0, r5
 8017214:	f7ff ffd0 	bl	80171b8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8017218:	3401      	adds	r4, #1
 801721a:	e7f7      	b.n	801720c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x24>
 801721c:	bd70      	pop	{r4, r5, r6, pc}

0801721e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 801721e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017220:	4604      	mov	r4, r0
 8017222:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8017224:	b15d      	cbz	r5, 801723e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8017226:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801722a:	4628      	mov	r0, r5
 801722c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8017230:	9200      	str	r2, [sp, #0]
 8017232:	2200      	movs	r2, #0
 8017234:	4611      	mov	r1, r2
 8017236:	f7f3 fc48 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 801723a:	69ad      	ldr	r5, [r5, #24]
 801723c:	e7f2      	b.n	8017224 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 801723e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8017242:	b15d      	cbz	r5, 801725c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8017244:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 8017248:	4628      	mov	r0, r5
 801724a:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 801724e:	9200      	str	r2, [sp, #0]
 8017250:	2200      	movs	r2, #0
 8017252:	4611      	mov	r1, r2
 8017254:	f7f3 fc39 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 8017258:	69ad      	ldr	r5, [r5, #24]
 801725a:	e7f2      	b.n	8017242 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801725c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8017260:	b15d      	cbz	r5, 801727a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8017262:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 8017266:	4628      	mov	r0, r5
 8017268:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801726c:	9200      	str	r2, [sp, #0]
 801726e:	2200      	movs	r2, #0
 8017270:	4611      	mov	r1, r2
 8017272:	f7f3 fc2a 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 8017276:	69ad      	ldr	r5, [r5, #24]
 8017278:	e7f2      	b.n	8017260 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801727a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801727e:	b15d      	cbz	r5, 8017298 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8017280:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
 8017284:	4628      	mov	r0, r5
 8017286:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 801728a:	9200      	str	r2, [sp, #0]
 801728c:	2200      	movs	r2, #0
 801728e:	4611      	mov	r1, r2
 8017290:	f7f3 fc1b 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 8017294:	69ad      	ldr	r5, [r5, #24]
 8017296:	e7f2      	b.n	801727e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8017298:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 801729c:	b15d      	cbz	r5, 80172b6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 801729e:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
 80172a2:	4628      	mov	r0, r5
 80172a4:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
 80172a8:	9200      	str	r2, [sp, #0]
 80172aa:	2200      	movs	r2, #0
 80172ac:	4611      	mov	r1, r2
 80172ae:	f7f3 fc0c 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 80172b2:	69ad      	ldr	r5, [r5, #24]
 80172b4:	e7f2      	b.n	801729c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 80172b6:	6823      	ldr	r3, [r4, #0]
 80172b8:	4620      	mov	r0, r4
 80172ba:	695b      	ldr	r3, [r3, #20]
 80172bc:	b003      	add	sp, #12
 80172be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172c2:	4718      	bx	r3

080172c4 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 80172c4:	b430      	push	{r4, r5}
 80172c6:	b28a      	uxth	r2, r1
 80172c8:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
 80172cc:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
 80172d0:	1b15      	subs	r5, r2, r4
 80172d2:	f8a0 10ec 	strh.w	r1, [r0, #236]	; 0xec
 80172d6:	8101      	strh	r1, [r0, #8]
 80172d8:	f8a0 5090 	strh.w	r5, [r0, #144]	; 0x90
 80172dc:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80172e0:	442c      	add	r4, r5
 80172e2:	1b12      	subs	r2, r2, r4
 80172e4:	bc30      	pop	{r4, r5}
 80172e6:	8782      	strh	r2, [r0, #60]	; 0x3c
 80172e8:	f7ff bf99 	b.w	801721e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080172ec <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 80172ec:	b430      	push	{r4, r5}
 80172ee:	b28a      	uxth	r2, r1
 80172f0:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 80172f4:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 80172f8:	1b15      	subs	r5, r2, r4
 80172fa:	f8a0 1096 	strh.w	r1, [r0, #150]	; 0x96
 80172fe:	8141      	strh	r1, [r0, #10]
 8017300:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
 8017304:	f8b0 50c2 	ldrh.w	r5, [r0, #194]	; 0xc2
 8017308:	442c      	add	r4, r5
 801730a:	1b12      	subs	r2, r2, r4
 801730c:	bc30      	pop	{r4, r5}
 801730e:	87c2      	strh	r2, [r0, #62]	; 0x3e
 8017310:	f7ff bf85 	b.w	801721e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08017314 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8017314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017318:	fa1f fa83 	uxth.w	sl, r3
 801731c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8017320:	4615      	mov	r5, r2
 8017322:	4699      	mov	r9, r3
 8017324:	fa1f f887 	uxth.w	r8, r7
 8017328:	8903      	ldrh	r3, [r0, #8]
 801732a:	4452      	add	r2, sl
 801732c:	4604      	mov	r4, r0
 801732e:	8940      	ldrh	r0, [r0, #10]
 8017330:	460e      	mov	r6, r1
 8017332:	1a9b      	subs	r3, r3, r2
 8017334:	eb08 0201 	add.w	r2, r8, r1
 8017338:	1a80      	subs	r0, r0, r2
 801733a:	b21b      	sxth	r3, r3
 801733c:	460a      	mov	r2, r1
 801733e:	4629      	mov	r1, r5
 8017340:	b200      	sxth	r0, r0
 8017342:	9000      	str	r0, [sp, #0]
 8017344:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8017348:	f7f3 fbbf 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 801734c:	2200      	movs	r2, #0
 801734e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017352:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8017356:	4611      	mov	r1, r2
 8017358:	9600      	str	r6, [sp, #0]
 801735a:	f7f3 fbb6 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 801735e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017362:	2200      	movs	r2, #0
 8017364:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	462b      	mov	r3, r5
 801736c:	4611      	mov	r1, r2
 801736e:	f7f3 fbac 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 8017372:	8921      	ldrh	r1, [r4, #8]
 8017374:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017378:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801737c:	eba1 010a 	sub.w	r1, r1, sl
 8017380:	2200      	movs	r2, #0
 8017382:	9300      	str	r3, [sp, #0]
 8017384:	464b      	mov	r3, r9
 8017386:	b209      	sxth	r1, r1
 8017388:	f7f3 fb9f 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 801738c:	8962      	ldrh	r2, [r4, #10]
 801738e:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8017392:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017396:	eba2 0208 	sub.w	r2, r2, r8
 801739a:	9700      	str	r7, [sp, #0]
 801739c:	2100      	movs	r1, #0
 801739e:	b212      	sxth	r2, r2
 80173a0:	f7f3 fb93 	bl	800aaca <_ZN8touchgfx8Drawable11setPositionEssss>
 80173a4:	4620      	mov	r0, r4
 80173a6:	b002      	add	sp, #8
 80173a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173ac:	f7ff bf37 	b.w	801721e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080173b0 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 80173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b4:	b085      	sub	sp, #20
 80173b6:	4604      	mov	r4, r0
 80173b8:	2601      	movs	r6, #1
 80173ba:	2500      	movs	r5, #0
 80173bc:	9103      	str	r1, [sp, #12]
 80173be:	f7f3 fce3 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 80173c2:	4b26      	ldr	r3, [pc, #152]	; (801745c <_ZN8touchgfx17AbstractDataGraphC1Es+0xac>)
 80173c4:	f104 0b34 	add.w	fp, r4, #52	; 0x34
 80173c8:	f104 0960 	add.w	r9, r4, #96	; 0x60
 80173cc:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80173d0:	6023      	str	r3, [r4, #0]
 80173d2:	23ff      	movs	r3, #255	; 0xff
 80173d4:	62e6      	str	r6, [r4, #44]	; 0x2c
 80173d6:	4658      	mov	r0, fp
 80173d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80173dc:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 80173e0:	f7f3 fcd2 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 80173e4:	4648      	mov	r0, r9
 80173e6:	f7f3 fccf 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 80173ea:	f104 07e4 	add.w	r7, r4, #228	; 0xe4
 80173ee:	4640      	mov	r0, r8
 80173f0:	f7f3 fcca 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 80173f4:	4650      	mov	r0, sl
 80173f6:	f7f3 fcc7 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 80173fa:	4638      	mov	r0, r7
 80173fc:	f7f3 fcc4 	bl	800ad88 <_ZN8touchgfx9ContainerC1Ev>
 8017400:	9903      	ldr	r1, [sp, #12]
 8017402:	4620      	mov	r0, r4
 8017404:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8017408:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
 801740c:	4659      	mov	r1, fp
 801740e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8017412:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
 8017416:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
 801741a:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 801741e:	f7fe f917 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017422:	4651      	mov	r1, sl
 8017424:	4620      	mov	r0, r4
 8017426:	f7fe f913 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801742a:	4649      	mov	r1, r9
 801742c:	4620      	mov	r0, r4
 801742e:	f7fe f90f 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017432:	4641      	mov	r1, r8
 8017434:	4620      	mov	r0, r4
 8017436:	f7fe f90b 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801743a:	4639      	mov	r1, r7
 801743c:	4620      	mov	r0, r4
 801743e:	f7fe f907 	bl	8015650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017442:	4620      	mov	r0, r4
 8017444:	9500      	str	r5, [sp, #0]
 8017446:	462b      	mov	r3, r5
 8017448:	462a      	mov	r2, r5
 801744a:	4629      	mov	r1, r5
 801744c:	f7ff ff62 	bl	8017314 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8017450:	4620      	mov	r0, r4
 8017452:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8017456:	b005      	add	sp, #20
 8017458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745c:	0802eb44 	.word	0x0802eb44

08017460 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>:
 8017460:	460b      	mov	r3, r1
 8017462:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017464:	4291      	cmp	r1, r2
 8017466:	4618      	mov	r0, r3
 8017468:	d001      	beq.n	801746e <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii+0xe>
 801746a:	f003 bffa 	b.w	801b462 <_ZN8touchgfx6muldivElll>
 801746e:	4770      	bx	lr

08017470 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>:
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8017474:	4604      	mov	r4, r0
 8017476:	62c1      	str	r1, [r0, #44]	; 0x2c
 8017478:	462a      	mov	r2, r5
 801747a:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
 801747e:	f7ff ffef 	bl	8017460 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 8017482:	462a      	mov	r2, r5
 8017484:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8017488:	4620      	mov	r0, r4
 801748a:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 801748e:	f7ff ffe7 	bl	8017460 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 8017492:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8017496:	bd38      	pop	{r3, r4, r5, pc}

08017498 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>:
 8017498:	b570      	push	{r4, r5, r6, lr}
 801749a:	4604      	mov	r4, r0
 801749c:	460d      	mov	r5, r1
 801749e:	4616      	mov	r6, r2
 80174a0:	f7ff ff86 	bl	80173b0 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80174a4:	2100      	movs	r1, #0
 80174a6:	4b0d      	ldr	r3, [pc, #52]	; (80174dc <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x44>)
 80174a8:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 80174ac:	6023      	str	r3, [r4, #0]
 80174ae:	428d      	cmp	r5, r1
 80174b0:	f04f 0301 	mov.w	r3, #1
 80174b4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 80174b8:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 80174bc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 80174c0:	dc06      	bgt.n	80174d0 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x38>
 80174c2:	4b07      	ldr	r3, [pc, #28]	; (80174e0 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x48>)
 80174c4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80174c8:	4a06      	ldr	r2, [pc, #24]	; (80174e4 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x4c>)
 80174ca:	4807      	ldr	r0, [pc, #28]	; (80174e8 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x50>)
 80174cc:	f013 f962 	bl	802a794 <__assert_func>
 80174d0:	4620      	mov	r0, r4
 80174d2:	1e6a      	subs	r2, r5, #1
 80174d4:	f7ff fbc6 	bl	8016c64 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>
 80174d8:	4620      	mov	r0, r4
 80174da:	bd70      	pop	{r4, r5, r6, pc}
 80174dc:	0802ec34 	.word	0x0802ec34
 80174e0:	0802eb2f 	.word	0x0802eb2f
 80174e4:	0802ede6 	.word	0x0802ede6
 80174e8:	0802eaf1 	.word	0x0802eaf1

080174ec <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>:
 80174ec:	b570      	push	{r4, r5, r6, lr}
 80174ee:	6803      	ldr	r3, [r0, #0]
 80174f0:	4604      	mov	r4, r0
 80174f2:	460d      	mov	r5, r1
 80174f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80174f8:	4798      	blx	r3
 80174fa:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80174fe:	4629      	mov	r1, r5
 8017500:	4620      	mov	r0, r4
 8017502:	3301      	adds	r3, #1
 8017504:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8017508:	6823      	ldr	r3, [r4, #0]
 801750a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801750e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8017512:	4718      	bx	r3

08017514 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>:
 8017514:	b510      	push	{r4, lr}
 8017516:	4604      	mov	r4, r0
 8017518:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801751a:	f7ff fc4e 	bl	8016dba <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801751e:	4601      	mov	r1, r0
 8017520:	4620      	mov	r0, r4
 8017522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017526:	f7ff bfe1 	b.w	80174ec <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801752a <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
 801752a:	4770      	bx	lr

0801752c <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
 801752c:	6341      	str	r1, [r0, #52]	; 0x34
 801752e:	4770      	bx	lr

08017530 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
 8017530:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017532:	4770      	bx	lr

08017534 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:
 8017534:	2001      	movs	r0, #1
 8017536:	4770      	bx	lr

08017538 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
 8017538:	4770      	bx	lr

0801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>:
 801753a:	6803      	ldr	r3, [r0, #0]
 801753c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8017540:	4718      	bx	r3

08017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>:
 8017542:	6803      	ldr	r3, [r0, #0]
 8017544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017548:	4718      	bx	r3

0801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>:
 801754a:	6803      	ldr	r3, [r0, #0]
 801754c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8017550:	4718      	bx	r3

08017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017554:	4604      	mov	r4, r0
 8017556:	4608      	mov	r0, r1
 8017558:	460d      	mov	r5, r1
 801755a:	f7fe f8ec 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801755e:	b978      	cbnz	r0, 8017580 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017560:	4620      	mov	r0, r4
 8017562:	f7fe f8e8 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017566:	f9b5 6000 	ldrsh.w	r6, [r5]
 801756a:	b150      	cbz	r0, 8017582 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801756c:	8026      	strh	r6, [r4, #0]
 801756e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017572:	8063      	strh	r3, [r4, #2]
 8017574:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017578:	80a3      	strh	r3, [r4, #4]
 801757a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801757e:	80e3      	strh	r3, [r4, #6]
 8017580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017582:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017586:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801758a:	42b1      	cmp	r1, r6
 801758c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017590:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017594:	460f      	mov	r7, r1
 8017596:	88ed      	ldrh	r5, [r5, #6]
 8017598:	bfa8      	it	ge
 801759a:	4637      	movge	r7, r6
 801759c:	4293      	cmp	r3, r2
 801759e:	4618      	mov	r0, r3
 80175a0:	4466      	add	r6, ip
 80175a2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80175a6:	bfa8      	it	ge
 80175a8:	4610      	movge	r0, r2
 80175aa:	442a      	add	r2, r5
 80175ac:	88e5      	ldrh	r5, [r4, #6]
 80175ae:	4461      	add	r1, ip
 80175b0:	b236      	sxth	r6, r6
 80175b2:	8027      	strh	r7, [r4, #0]
 80175b4:	442b      	add	r3, r5
 80175b6:	b209      	sxth	r1, r1
 80175b8:	b212      	sxth	r2, r2
 80175ba:	8060      	strh	r0, [r4, #2]
 80175bc:	b21b      	sxth	r3, r3
 80175be:	428e      	cmp	r6, r1
 80175c0:	bfac      	ite	ge
 80175c2:	ebc7 0106 	rsbge	r1, r7, r6
 80175c6:	ebc7 0101 	rsblt	r1, r7, r1
 80175ca:	429a      	cmp	r2, r3
 80175cc:	bfac      	ite	ge
 80175ce:	ebc0 0202 	rsbge	r2, r0, r2
 80175d2:	ebc0 0203 	rsblt	r2, r0, r3
 80175d6:	80a1      	strh	r1, [r4, #4]
 80175d8:	80e2      	strh	r2, [r4, #6]
 80175da:	e7d1      	b.n	8017580 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080175dc <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80175dc:	6800      	ldr	r0, [r0, #0]
 80175de:	2800      	cmp	r0, #0
 80175e0:	bfb9      	ittee	lt
 80175e2:	2320      	movlt	r3, #32
 80175e4:	fb90 f0f3 	sdivlt	r0, r0, r3
 80175e8:	301f      	addge	r0, #31
 80175ea:	1140      	asrge	r0, r0, #5
 80175ec:	4770      	bx	lr

080175ee <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.9>:
 80175ee:	b507      	push	{r0, r1, r2, lr}
 80175f0:	ab02      	add	r3, sp, #8
 80175f2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7ff fbbe 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80175fc:	0140      	lsls	r0, r0, #5
 80175fe:	b003      	add	sp, #12
 8017600:	f85d fb04 	ldr.w	pc, [sp], #4

08017604 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 8017604:	b510      	push	{r4, lr}
 8017606:	4604      	mov	r4, r0
 8017608:	f7ff fa3e 	bl	8016a88 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801760c:	4b02      	ldr	r3, [pc, #8]	; (8017618 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x14>)
 801760e:	4620      	mov	r0, r4
 8017610:	6023      	str	r3, [r4, #0]
 8017612:	2301      	movs	r3, #1
 8017614:	6323      	str	r3, [r4, #48]	; 0x30
 8017616:	bd10      	pop	{r4, pc}
 8017618:	0802cfbc 	.word	0x0802cfbc

0801761c <_ZN8touchgfx20AbstractGraphElement8setScaleEi>:
 801761c:	6301      	str	r1, [r0, #48]	; 0x30
 801761e:	4770      	bx	lr

08017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>:
 8017620:	680b      	ldr	r3, [r1, #0]
 8017622:	4608      	mov	r0, r1
 8017624:	4611      	mov	r1, r2
 8017626:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801762a:	4718      	bx	r3

0801762c <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>:
 801762c:	b410      	push	{r4}
 801762e:	6940      	ldr	r0, [r0, #20]
 8017630:	6940      	ldr	r0, [r0, #20]
 8017632:	6804      	ldr	r4, [r0, #0]
 8017634:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
 8017638:	46a4      	mov	ip, r4
 801763a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801763e:	4760      	bx	ip

08017640 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8017640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017642:	9906      	ldr	r1, [sp, #24]
 8017644:	4606      	mov	r6, r0
 8017646:	461c      	mov	r4, r3
 8017648:	2020      	movs	r0, #32
 801764a:	4291      	cmp	r1, r2
 801764c:	bfbc      	itt	lt
 801764e:	9206      	strlt	r2, [sp, #24]
 8017650:	460a      	movlt	r2, r1
 8017652:	9907      	ldr	r1, [sp, #28]
 8017654:	428b      	cmp	r3, r1
 8017656:	bfc4      	itt	gt
 8017658:	460c      	movgt	r4, r1
 801765a:	9307      	strgt	r3, [sp, #28]
 801765c:	fb92 f5f0 	sdiv	r5, r2, r0
 8017660:	fb94 f4f0 	sdiv	r4, r4, r0
 8017664:	a806      	add	r0, sp, #24
 8017666:	f7ff ffb9 	bl	80175dc <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801766a:	4607      	mov	r7, r0
 801766c:	a807      	add	r0, sp, #28
 801766e:	f7ff ffb5 	bl	80175dc <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017672:	1b7a      	subs	r2, r7, r5
 8017674:	1b00      	subs	r0, r0, r4
 8017676:	8035      	strh	r5, [r6, #0]
 8017678:	8074      	strh	r4, [r6, #2]
 801767a:	80f0      	strh	r0, [r6, #6]
 801767c:	4630      	mov	r0, r6
 801767e:	80b2      	strh	r2, [r6, #4]
 8017680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017682 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8017682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017684:	9c08      	ldr	r4, [sp, #32]
 8017686:	2602      	movs	r6, #2
 8017688:	4605      	mov	r5, r0
 801768a:	3401      	adds	r4, #1
 801768c:	fb94 f4f6 	sdiv	r4, r4, r6
 8017690:	18a6      	adds	r6, r4, r2
 8017692:	191f      	adds	r7, r3, r4
 8017694:	1b12      	subs	r2, r2, r4
 8017696:	1b1b      	subs	r3, r3, r4
 8017698:	e9cd 6700 	strd	r6, r7, [sp]
 801769c:	f7ff ffd0 	bl	8017640 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80176a0:	4628      	mov	r0, r5
 80176a2:	b003      	add	sp, #12
 80176a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176a6 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 80176a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176aa:	6943      	ldr	r3, [r0, #20]
 80176ac:	b089      	sub	sp, #36	; 0x24
 80176ae:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
 80176b2:	460d      	mov	r5, r1
 80176b4:	695c      	ldr	r4, [r3, #20]
 80176b6:	4680      	mov	r8, r0
 80176b8:	ea4f 1949 	mov.w	r9, r9, lsl #5
 80176bc:	af02      	add	r7, sp, #8
 80176be:	4620      	mov	r0, r4
 80176c0:	f7ff ff43 	bl	801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>
 80176c4:	4606      	mov	r6, r0
 80176c6:	4629      	mov	r1, r5
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7ff ff3a 	bl	8017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>
 80176ce:	4632      	mov	r2, r6
 80176d0:	4603      	mov	r3, r0
 80176d2:	f8cd 9000 	str.w	r9, [sp]
 80176d6:	4641      	mov	r1, r8
 80176d8:	4638      	mov	r0, r7
 80176da:	f7ff ffd2 	bl	8017682 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80176de:	2d00      	cmp	r5, #0
 80176e0:	ae06      	add	r6, sp, #24
 80176e2:	dd18      	ble.n	8017716 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x70>
 80176e4:	f105 3aff 	add.w	sl, r5, #4294967295
 80176e8:	4620      	mov	r0, r4
 80176ea:	fa0f fa8a 	sxth.w	sl, sl
 80176ee:	4651      	mov	r1, sl
 80176f0:	f7ff ff2b 	bl	801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>
 80176f4:	4683      	mov	fp, r0
 80176f6:	4651      	mov	r1, sl
 80176f8:	4620      	mov	r0, r4
 80176fa:	f7ff ff22 	bl	8017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>
 80176fe:	4641      	mov	r1, r8
 8017700:	4603      	mov	r3, r0
 8017702:	f8cd 9000 	str.w	r9, [sp]
 8017706:	4630      	mov	r0, r6
 8017708:	465a      	mov	r2, fp
 801770a:	f7ff ffba 	bl	8017682 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801770e:	4631      	mov	r1, r6
 8017710:	4638      	mov	r0, r7
 8017712:	f7ff ff1e 	bl	8017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017716:	4620      	mov	r0, r4
 8017718:	f7ff fcb6 	bl	8017088 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 801771c:	3801      	subs	r0, #1
 801771e:	4285      	cmp	r5, r0
 8017720:	da16      	bge.n	8017750 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xaa>
 8017722:	3501      	adds	r5, #1
 8017724:	4620      	mov	r0, r4
 8017726:	b22d      	sxth	r5, r5
 8017728:	4629      	mov	r1, r5
 801772a:	f7ff ff0e 	bl	801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>
 801772e:	4682      	mov	sl, r0
 8017730:	4629      	mov	r1, r5
 8017732:	4620      	mov	r0, r4
 8017734:	f7ff ff05 	bl	8017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>
 8017738:	4641      	mov	r1, r8
 801773a:	4603      	mov	r3, r0
 801773c:	f8cd 9000 	str.w	r9, [sp]
 8017740:	4630      	mov	r0, r6
 8017742:	4652      	mov	r2, sl
 8017744:	f7ff ff9d 	bl	8017682 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8017748:	4631      	mov	r1, r6
 801774a:	4638      	mov	r0, r7
 801774c:	f7ff ff01 	bl	8017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017750:	4620      	mov	r0, r4
 8017752:	f7ff fbd5 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017756:	4681      	mov	r9, r0
 8017758:	4620      	mov	r0, r4
 801775a:	f7ff fc5c 	bl	8017016 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801775e:	4605      	mov	r5, r0
 8017760:	4620      	mov	r0, r4
 8017762:	f7ff fc5b 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017766:	f8ad 0016 	strh.w	r0, [sp, #22]
 801776a:	2300      	movs	r3, #0
 801776c:	f8ad 9012 	strh.w	r9, [sp, #18]
 8017770:	f8ad 5014 	strh.w	r5, [sp, #20]
 8017774:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017778:	e897 0003 	ldmia.w	r7, {r0, r1}
 801777c:	e886 0003 	stmia.w	r6, {r0, r1}
 8017780:	a904      	add	r1, sp, #16
 8017782:	4630      	mov	r0, r6
 8017784:	f7fd ff94 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 8017788:	f8d8 3000 	ldr.w	r3, [r8]
 801778c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017790:	691b      	ldr	r3, [r3, #16]
 8017792:	e887 0003 	stmia.w	r7, {r0, r1}
 8017796:	4639      	mov	r1, r7
 8017798:	4640      	mov	r0, r8
 801779a:	4798      	blx	r3
 801779c:	b009      	add	sp, #36	; 0x24
 801779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177a2 <_ZNK8touchgfx20AbstractGraphElement23getGraphRangeYMinScaledEPKNS_17AbstractDataGraphE>:
 80177a2:	680b      	ldr	r3, [r1, #0]
 80177a4:	4608      	mov	r0, r1
 80177a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80177aa:	4718      	bx	r3

080177ac <_ZNK8touchgfx20AbstractGraphElement23getGraphRangeYMaxScaledEPKNS_17AbstractDataGraphE>:
 80177ac:	680b      	ldr	r3, [r1, #0]
 80177ae:	4608      	mov	r0, r1
 80177b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80177b4:	4718      	bx	r3
	...

080177b8 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 80177b8:	b510      	push	{r4, lr}
 80177ba:	4604      	mov	r4, r0
 80177bc:	f7ff ff22 	bl	8017604 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 80177c0:	4b02      	ldr	r3, [pc, #8]	; (80177cc <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x14>)
 80177c2:	4620      	mov	r0, r4
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	2300      	movs	r3, #0
 80177c8:	6363      	str	r3, [r4, #52]	; 0x34
 80177ca:	bd10      	pop	{r4, pc}
 80177cc:	0802f050 	.word	0x0802f050

080177d0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 80177d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	da05      	bge.n	80177e4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 80177d8:	b29b      	uxth	r3, r3
 80177da:	880a      	ldrh	r2, [r1, #0]
 80177dc:	441a      	add	r2, r3
 80177de:	425b      	negs	r3, r3
 80177e0:	800a      	strh	r2, [r1, #0]
 80177e2:	808b      	strh	r3, [r1, #4]
 80177e4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	da05      	bge.n	80177f8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 80177ec:	b29b      	uxth	r3, r3
 80177ee:	884a      	ldrh	r2, [r1, #2]
 80177f0:	441a      	add	r2, r3
 80177f2:	425b      	negs	r3, r3
 80177f4:	804a      	strh	r2, [r1, #2]
 80177f6:	80cb      	strh	r3, [r1, #6]
 80177f8:	4770      	bx	lr
	...

080177fc <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 80177fc:	b510      	push	{r4, lr}
 80177fe:	4604      	mov	r4, r0
 8017800:	f7ff ffda 	bl	80177b8 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 8017804:	4b05      	ldr	r3, [pc, #20]	; (801781c <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x20>)
 8017806:	4620      	mov	r0, r4
 8017808:	6023      	str	r3, [r4, #0]
 801780a:	230a      	movs	r3, #10
 801780c:	63a3      	str	r3, [r4, #56]	; 0x38
 801780e:	2301      	movs	r3, #1
 8017810:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8017814:	2300      	movs	r3, #0
 8017816:	6423      	str	r3, [r4, #64]	; 0x40
 8017818:	bd10      	pop	{r4, pc}
 801781a:	bf00      	nop
 801781c:	0802efc8 	.word	0x0802efc8

08017820 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8017820:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017822:	460b      	mov	r3, r1
 8017824:	b120      	cbz	r0, 8017830 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x10>
 8017826:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8017828:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801782a:	4618      	mov	r0, r3
 801782c:	f7ff be18 	b.w	8017460 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 8017830:	4770      	bx	lr

08017832 <_ZN8touchgfx20GraphElementGridBase17setIntervalScaledEi>:
 8017832:	2900      	cmp	r1, #0
 8017834:	bfb8      	it	lt
 8017836:	4249      	neglt	r1, r1
 8017838:	6381      	str	r1, [r0, #56]	; 0x38
 801783a:	4770      	bx	lr

0801783c <_ZN8touchgfx20GraphElementGridBase11setIntervalEi>:
 801783c:	2900      	cmp	r1, #0
 801783e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017840:	bfb8      	it	lt
 8017842:	4249      	neglt	r1, r1
 8017844:	4359      	muls	r1, r3
 8017846:	f7ff bff4 	b.w	8017832 <_ZN8touchgfx20GraphElementGridBase17setIntervalScaledEi>

0801784a <_ZNK8touchgfx20GraphElementGridBase16getIntervalAsIntEv>:
 801784a:	b508      	push	{r3, lr}
 801784c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801784e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017850:	f7ff fb10 	bl	8016e74 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8017854:	bd08      	pop	{r3, pc}

08017856 <_ZN8touchgfx20GraphElementGridBase12setMajorGridERKS0_>:
 8017856:	6401      	str	r1, [r0, #64]	; 0x40
 8017858:	4770      	bx	lr

0801785a <_ZN8touchgfx20GraphElementGridBase12setLineWidthEh>:
 801785a:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 801785e:	4770      	bx	lr

08017860 <_ZNK8touchgfx17GraphElementGridX8drawLineERKNS_4RectEssssNS_9colortypeEh>:
 8017860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017862:	b085      	sub	sp, #20
 8017864:	460f      	mov	r7, r1
 8017866:	4606      	mov	r6, r0
 8017868:	f8ad 3002 	strh.w	r3, [sp, #2]
 801786c:	466c      	mov	r4, sp
 801786e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8017872:	ad02      	add	r5, sp, #8
 8017874:	4621      	mov	r1, r4
 8017876:	f8ad 2000 	strh.w	r2, [sp]
 801787a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801787e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017882:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017886:	f7ff ffa3 	bl	80177d0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 801788a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801788e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017892:	4639      	mov	r1, r7
 8017894:	4628      	mov	r0, r5
 8017896:	f7fd ff0b 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801789a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801789e:	e884 0003 	stmia.w	r4, {r0, r1}
 80178a2:	4620      	mov	r0, r4
 80178a4:	f7fd ff47 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 80178a8:	b968      	cbnz	r0, 80178c6 <_ZNK8touchgfx17GraphElementGridX8drawLineERKNS_4RectEssssNS_9colortypeEh+0x66>
 80178aa:	6833      	ldr	r3, [r6, #0]
 80178ac:	4621      	mov	r1, r4
 80178ae:	4630      	mov	r0, r6
 80178b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178b2:	4798      	blx	r3
 80178b4:	f7f2 f896 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80178b8:	6803      	ldr	r3, [r0, #0]
 80178ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80178bc:	4621      	mov	r1, r4
 80178be:	699d      	ldr	r5, [r3, #24]
 80178c0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80178c4:	47a8      	blx	r5
 80178c6:	b005      	add	sp, #20
 80178c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178ca <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE>:
 80178ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ce:	6943      	ldr	r3, [r0, #20]
 80178d0:	b093      	sub	sp, #76	; 0x4c
 80178d2:	4604      	mov	r4, r0
 80178d4:	460f      	mov	r7, r1
 80178d6:	695d      	ldr	r5, [r3, #20]
 80178d8:	6803      	ldr	r3, [r0, #0]
 80178da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80178dc:	4798      	blx	r3
 80178de:	4606      	mov	r6, r0
 80178e0:	4628      	mov	r0, r5
 80178e2:	f7ff faff 	bl	8016ee4 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 80178e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d065      	beq.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 80178ee:	fb16 f000 	smulbb	r0, r6, r0
 80178f2:	b280      	uxth	r0, r0
 80178f4:	1c43      	adds	r3, r0, #1
 80178f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80178fa:	1206      	asrs	r6, r0, #8
 80178fc:	d05d      	beq.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 80178fe:	4628      	mov	r0, r5
 8017900:	f7ff fafe 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017904:	4681      	mov	r9, r0
 8017906:	4628      	mov	r0, r5
 8017908:	f7ff fb85 	bl	8017016 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801790c:	4680      	mov	r8, r0
 801790e:	4628      	mov	r0, r5
 8017910:	f7ff fb84 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017914:	2300      	movs	r3, #0
 8017916:	4639      	mov	r1, r7
 8017918:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 801791c:	a810      	add	r0, sp, #64	; 0x40
 801791e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017922:	f8ad 9042 	strh.w	r9, [sp, #66]	; 0x42
 8017926:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801792a:	f7fd fec1 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801792e:	4620      	mov	r0, r4
 8017930:	f7ff ff8b 	bl	801784a <_ZNK8touchgfx20GraphElementGridBase16getIntervalAsIntEv>
 8017934:	4607      	mov	r7, r0
 8017936:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017938:	b108      	cbz	r0, 801793e <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x74>
 801793a:	f7ff ff86 	bl	801784a <_ZNK8touchgfx20GraphElementGridBase16getIntervalAsIntEv>
 801793e:	b2f3      	uxtb	r3, r6
 8017940:	4680      	mov	r8, r0
 8017942:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8017946:	9309      	str	r3, [sp, #36]	; 0x24
 8017948:	0103      	lsls	r3, r0, #4
 801794a:	4628      	mov	r0, r5
 801794c:	9306      	str	r3, [sp, #24]
 801794e:	f7ff fad7 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017952:	9007      	str	r0, [sp, #28]
 8017954:	4628      	mov	r0, r5
 8017956:	f7ff fb61 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801795a:	2f00      	cmp	r7, #0
 801795c:	9008      	str	r0, [sp, #32]
 801795e:	d12f      	bne.n	80179c0 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf6>
 8017960:	f1b8 0f00 	cmp.w	r8, #0
 8017964:	d129      	bne.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 8017966:	4642      	mov	r2, r8
 8017968:	4629      	mov	r1, r5
 801796a:	4620      	mov	r0, r4
 801796c:	f7ff fe58 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017970:	9b06      	ldr	r3, [sp, #24]
 8017972:	1ac3      	subs	r3, r0, r3
 8017974:	a812      	add	r0, sp, #72	; 0x48
 8017976:	f840 3d0c 	str.w	r3, [r0, #-12]!
 801797a:	f7ff f9fd 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801797e:	4607      	mov	r7, r0
 8017980:	4628      	mov	r0, r5
 8017982:	f7ff fac0 	bl	8016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 8017986:	1a38      	subs	r0, r7, r0
 8017988:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801798c:	b206      	sxth	r6, r0
 801798e:	42f3      	cmn	r3, r6
 8017990:	d413      	bmi.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 8017992:	4628      	mov	r0, r5
 8017994:	f7ff faba 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8017998:	42b0      	cmp	r0, r6
 801799a:	dd0e      	ble.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 801799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801799e:	b23a      	sxth	r2, r7
 80179a0:	a910      	add	r1, sp, #64	; 0x40
 80179a2:	4620      	mov	r0, r4
 80179a4:	9303      	str	r3, [sp, #12]
 80179a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179a8:	9302      	str	r3, [sp, #8]
 80179aa:	9b08      	ldr	r3, [sp, #32]
 80179ac:	9301      	str	r3, [sp, #4]
 80179ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80179b2:	9300      	str	r3, [sp, #0]
 80179b4:	9b07      	ldr	r3, [sp, #28]
 80179b6:	f7ff ff53 	bl	8017860 <_ZNK8touchgfx17GraphElementGridX8drawLineERKNS_4RectEssssNS_9colortypeEh>
 80179ba:	b013      	add	sp, #76	; 0x4c
 80179bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c0:	ddfb      	ble.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 80179c2:	682b      	ldr	r3, [r5, #0]
 80179c4:	4628      	mov	r0, r5
 80179c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80179ca:	4798      	blx	r3
 80179cc:	682b      	ldr	r3, [r5, #0]
 80179ce:	4683      	mov	fp, r0
 80179d0:	4628      	mov	r0, r5
 80179d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179d6:	4798      	blx	r3
 80179d8:	eba0 030b 	sub.w	r3, r0, fp
 80179dc:	4681      	mov	r9, r0
 80179de:	2b00      	cmp	r3, #0
 80179e0:	bfb8      	it	lt
 80179e2:	425b      	neglt	r3, r3
 80179e4:	fb93 f3f7 	sdiv	r3, r3, r7
 80179e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80179ec:	dce5      	bgt.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 80179ee:	465a      	mov	r2, fp
 80179f0:	4629      	mov	r1, r5
 80179f2:	4620      	mov	r0, r4
 80179f4:	f7ff fe14 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 80179f8:	4606      	mov	r6, r0
 80179fa:	464a      	mov	r2, r9
 80179fc:	4629      	mov	r1, r5
 80179fe:	4620      	mov	r0, r4
 8017a00:	f7ff fe0e 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017a04:	42b0      	cmp	r0, r6
 8017a06:	bfbe      	ittt	lt
 8017a08:	465b      	movlt	r3, fp
 8017a0a:	46cb      	movlt	fp, r9
 8017a0c:	4699      	movlt	r9, r3
 8017a0e:	fb9b f6f7 	sdiv	r6, fp, r7
 8017a12:	fb99 f3f7 	sdiv	r3, r9, r7
 8017a16:	45cb      	cmp	fp, r9
 8017a18:	bfb4      	ite	lt
 8017a1a:	2201      	movlt	r2, #1
 8017a1c:	f04f 32ff 	movge.w	r2, #4294967295
 8017a20:	1ab6      	subs	r6, r6, r2
 8017a22:	4413      	add	r3, r2
 8017a24:	429e      	cmp	r6, r3
 8017a26:	bfb4      	ite	lt
 8017a28:	f04f 0a01 	movlt.w	sl, #1
 8017a2c:	f04f 3aff 	movge.w	sl, #4294967295
 8017a30:	f1b8 0f00 	cmp.w	r8, #0
 8017a34:	d136      	bne.n	8017aa4 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x1da>
 8017a36:	fb07 f90a 	mul.w	r9, r7, sl
 8017a3a:	eb0a 0803 	add.w	r8, sl, r3
 8017a3e:	4377      	muls	r7, r6
 8017a40:	45b0      	cmp	r8, r6
 8017a42:	d0ba      	beq.n	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 8017a44:	463a      	mov	r2, r7
 8017a46:	4629      	mov	r1, r5
 8017a48:	4620      	mov	r0, r4
 8017a4a:	f7ff fde9 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017a4e:	9b06      	ldr	r3, [sp, #24]
 8017a50:	1ac0      	subs	r0, r0, r3
 8017a52:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a54:	a80f      	add	r0, sp, #60	; 0x3c
 8017a56:	f7ff f98f 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017a5a:	4683      	mov	fp, r0
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f7ff fa52 	bl	8016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 8017a62:	ebab 0000 	sub.w	r0, fp, r0
 8017a66:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8017a6a:	b203      	sxth	r3, r0
 8017a6c:	42da      	cmn	r2, r3
 8017a6e:	9304      	str	r3, [sp, #16]
 8017a70:	d415      	bmi.n	8017a9e <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x1d4>
 8017a72:	4628      	mov	r0, r5
 8017a74:	f7ff fa4a 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8017a78:	9b04      	ldr	r3, [sp, #16]
 8017a7a:	4298      	cmp	r0, r3
 8017a7c:	dd0f      	ble.n	8017a9e <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x1d4>
 8017a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a80:	fa0f f28b 	sxth.w	r2, fp
 8017a84:	a910      	add	r1, sp, #64	; 0x40
 8017a86:	4620      	mov	r0, r4
 8017a88:	9303      	str	r3, [sp, #12]
 8017a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a8c:	9302      	str	r3, [sp, #8]
 8017a8e:	9b08      	ldr	r3, [sp, #32]
 8017a90:	9301      	str	r3, [sp, #4]
 8017a92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017a96:	9300      	str	r3, [sp, #0]
 8017a98:	9b07      	ldr	r3, [sp, #28]
 8017a9a:	f7ff fee1 	bl	8017860 <_ZNK8touchgfx17GraphElementGridX8drawLineERKNS_4RectEssssNS_9colortypeEh>
 8017a9e:	4456      	add	r6, sl
 8017aa0:	444f      	add	r7, r9
 8017aa2:	e7cd      	b.n	8017a40 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x176>
 8017aa4:	fb9b fbf8 	sdiv	fp, fp, r8
 8017aa8:	fb99 f9f8 	sdiv	r9, r9, r8
 8017aac:	ebab 0302 	sub.w	r3, fp, r2
 8017ab0:	4491      	add	r9, r2
 8017ab2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8017ab6:	4629      	mov	r1, r5
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	454b      	cmp	r3, r9
 8017abc:	bfb4      	ite	lt
 8017abe:	2301      	movlt	r3, #1
 8017ac0:	f04f 33ff 	movge.w	r3, #4294967295
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ac8:	9b04      	ldr	r3, [sp, #16]
 8017aca:	fb03 f208 	mul.w	r2, r3, r8
 8017ace:	f7ff fda7 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017ad2:	f84b 0d0c 	str.w	r0, [fp, #-12]!
 8017ad6:	4658      	mov	r0, fp
 8017ad8:	f7ff f94e 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017adc:	fb06 f207 	mul.w	r2, r6, r7
 8017ae0:	b203      	sxth	r3, r0
 8017ae2:	4629      	mov	r1, r5
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	9305      	str	r3, [sp, #20]
 8017ae8:	f7ff fd9a 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017aec:	900f      	str	r0, [sp, #60]	; 0x3c
 8017aee:	4658      	mov	r0, fp
 8017af0:	f7ff f942 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017af4:	fb0a f207 	mul.w	r2, sl, r7
 8017af8:	b203      	sxth	r3, r0
 8017afa:	920b      	str	r2, [sp, #44]	; 0x2c
 8017afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017afe:	444a      	add	r2, r9
 8017b00:	920c      	str	r2, [sp, #48]	; 0x30
 8017b02:	9a05      	ldr	r2, [sp, #20]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	dc14      	bgt.n	8017b32 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x268>
 8017b08:	eb06 090a 	add.w	r9, r6, sl
 8017b0c:	fb07 f909 	mul.w	r9, r7, r9
 8017b10:	9a05      	ldr	r2, [sp, #20]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	db48      	blt.n	8017ba8 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x2de>
 8017b16:	464a      	mov	r2, r9
 8017b18:	4629      	mov	r1, r5
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	4456      	add	r6, sl
 8017b1e:	f7ff fd7f 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017b22:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b24:	4658      	mov	r0, fp
 8017b26:	f7ff f927 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b2c:	b203      	sxth	r3, r0
 8017b2e:	4491      	add	r9, r2
 8017b30:	e7ee      	b.n	8017b10 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x246>
 8017b32:	fb07 f206 	mul.w	r2, r7, r6
 8017b36:	4629      	mov	r1, r5
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f7ff fd71 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017b3e:	9b06      	ldr	r3, [sp, #24]
 8017b40:	1ac0      	subs	r0, r0, r3
 8017b42:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b44:	4658      	mov	r0, fp
 8017b46:	f7ff f917 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017b4a:	4681      	mov	r9, r0
 8017b4c:	4628      	mov	r0, r5
 8017b4e:	f7ff f9da 	bl	8016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 8017b52:	eba9 0000 	sub.w	r0, r9, r0
 8017b56:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8017b5a:	b203      	sxth	r3, r0
 8017b5c:	42da      	cmn	r2, r3
 8017b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8017b60:	d415      	bmi.n	8017b8e <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x2c4>
 8017b62:	4628      	mov	r0, r5
 8017b64:	f7ff f9d2 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8017b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b6a:	4298      	cmp	r0, r3
 8017b6c:	dd0f      	ble.n	8017b8e <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x2c4>
 8017b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b70:	fa0f f289 	sxth.w	r2, r9
 8017b74:	a910      	add	r1, sp, #64	; 0x40
 8017b76:	4620      	mov	r0, r4
 8017b78:	9303      	str	r3, [sp, #12]
 8017b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b7c:	9302      	str	r3, [sp, #8]
 8017b7e:	9b08      	ldr	r3, [sp, #32]
 8017b80:	9301      	str	r3, [sp, #4]
 8017b82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017b86:	9300      	str	r3, [sp, #0]
 8017b88:	9b07      	ldr	r3, [sp, #28]
 8017b8a:	f7ff fe69 	bl	8017860 <_ZNK8touchgfx17GraphElementGridX8drawLineERKNS_4RectEssssNS_9colortypeEh>
 8017b8e:	4456      	add	r6, sl
 8017b90:	4629      	mov	r1, r5
 8017b92:	4620      	mov	r0, r4
 8017b94:	fb06 f207 	mul.w	r2, r6, r7
 8017b98:	f7ff fd42 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017b9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b9e:	4658      	mov	r0, fp
 8017ba0:	f7ff f8ea 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017ba4:	b203      	sxth	r3, r0
 8017ba6:	e7ac      	b.n	8017b02 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x238>
 8017ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017baa:	930d      	str	r3, [sp, #52]	; 0x34
 8017bac:	9b04      	ldr	r3, [sp, #16]
 8017bae:	4413      	add	r3, r2
 8017bb0:	9304      	str	r3, [sp, #16]
 8017bb2:	9a04      	ldr	r2, [sp, #16]
 8017bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	f43f aeff 	beq.w	80179ba <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0xf0>
 8017bbc:	fb02 f208 	mul.w	r2, r2, r8
 8017bc0:	4629      	mov	r1, r5
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	f7ff fd2c 	bl	8017620 <_ZNK8touchgfx20AbstractGraphElement16valueToScreenXQ5EPKNS_17AbstractDataGraphEi>
 8017bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8017bca:	4658      	mov	r0, fp
 8017bcc:	f7ff f8d4 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017bd0:	b203      	sxth	r3, r0
 8017bd2:	9305      	str	r3, [sp, #20]
 8017bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bd6:	e794      	b.n	8017b02 <_ZNK8touchgfx17GraphElementGridX4drawERKNS_4RectE+0x238>

08017bd8 <_ZNK8touchgfx17GraphElementGridY8drawLineERKNS_4RectEssssNS_9colortypeEh>:
 8017bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bda:	b085      	sub	sp, #20
 8017bdc:	460f      	mov	r7, r1
 8017bde:	4606      	mov	r6, r0
 8017be0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017be4:	466c      	mov	r4, sp
 8017be6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017bea:	ad02      	add	r5, sp, #8
 8017bec:	4621      	mov	r1, r4
 8017bee:	f8ad 2000 	strh.w	r2, [sp]
 8017bf2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017bf6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8017bfa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017bfe:	f7ff fde7 	bl	80177d0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8017c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8017c0a:	4639      	mov	r1, r7
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	f7fd fd4f 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 8017c12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017c16:	e884 0003 	stmia.w	r4, {r0, r1}
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f7fd fd8b 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c20:	b968      	cbnz	r0, 8017c3e <_ZNK8touchgfx17GraphElementGridY8drawLineERKNS_4RectEssssNS_9colortypeEh+0x66>
 8017c22:	6833      	ldr	r3, [r6, #0]
 8017c24:	4621      	mov	r1, r4
 8017c26:	4630      	mov	r0, r6
 8017c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c2a:	4798      	blx	r3
 8017c2c:	f7f1 feda 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8017c30:	6803      	ldr	r3, [r0, #0]
 8017c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c34:	4621      	mov	r1, r4
 8017c36:	699d      	ldr	r5, [r3, #24]
 8017c38:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8017c3c:	47a8      	blx	r5
 8017c3e:	b005      	add	sp, #20
 8017c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c42 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE>:
 8017c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c46:	6943      	ldr	r3, [r0, #20]
 8017c48:	b093      	sub	sp, #76	; 0x4c
 8017c4a:	4605      	mov	r5, r0
 8017c4c:	460e      	mov	r6, r1
 8017c4e:	695c      	ldr	r4, [r3, #20]
 8017c50:	6803      	ldr	r3, [r0, #0]
 8017c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017c54:	4798      	blx	r3
 8017c56:	4607      	mov	r7, r0
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f7ff f943 	bl	8016ee4 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 8017c5e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d065      	beq.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017c66:	fb17 f000 	smulbb	r0, r7, r0
 8017c6a:	b283      	uxth	r3, r0
 8017c6c:	1c58      	adds	r0, r3, #1
 8017c6e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017c72:	1200      	asrs	r0, r0, #8
 8017c74:	d05d      	beq.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017c76:	b2c3      	uxtb	r3, r0
 8017c78:	4620      	mov	r0, r4
 8017c7a:	9307      	str	r3, [sp, #28]
 8017c7c:	f7ff f943 	bl	8016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 8017c80:	4680      	mov	r8, r0
 8017c82:	4620      	mov	r0, r4
 8017c84:	f7ff f942 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8017c88:	4607      	mov	r7, r0
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f7ff f9e4 	bl	8017058 <_ZNK8touchgfx17AbstractDataGraph34getGraphAreaHeightIncludingPaddingEv>
 8017c90:	2300      	movs	r3, #0
 8017c92:	4631      	mov	r1, r6
 8017c94:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 8017c98:	a810      	add	r0, sp, #64	; 0x40
 8017c9a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017c9e:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8017ca2:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
 8017ca6:	f7fd fd03 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 8017caa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017cac:	4620      	mov	r0, r4
 8017cae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8017cb0:	f7ff fbd6 	bl	8017460 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 8017cb4:	4621      	mov	r1, r4
 8017cb6:	4606      	mov	r6, r0
 8017cb8:	4628      	mov	r0, r5
 8017cba:	f7ff fdb1 	bl	8017820 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>
 8017cbe:	4682      	mov	sl, r0
 8017cc0:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 8017cc4:	0103      	lsls	r3, r0, #4
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	9306      	str	r3, [sp, #24]
 8017cca:	f7ff f91c 	bl	8016f06 <_ZNK8touchgfx17AbstractDataGraph23getGraphAreaPaddingLeftEv>
 8017cce:	9008      	str	r0, [sp, #32]
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f7ff f91b 	bl	8016f0c <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8017cd6:	9009      	str	r0, [sp, #36]	; 0x24
 8017cd8:	f1ba 0f00 	cmp.w	sl, #0
 8017cdc:	d12c      	bne.n	8017d38 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf6>
 8017cde:	bb5e      	cbnz	r6, 8017d38 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf6>
 8017ce0:	4631      	mov	r1, r6
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f7ff fc29 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017ce8:	9b06      	ldr	r3, [sp, #24]
 8017cea:	1ac3      	subs	r3, r0, r3
 8017cec:	a812      	add	r0, sp, #72	; 0x48
 8017cee:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8017cf2:	f7ff f841 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017cf6:	4607      	mov	r7, r0
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f7ff f901 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017cfe:	1a38      	subs	r0, r7, r0
 8017d00:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8017d04:	b206      	sxth	r6, r0
 8017d06:	42f3      	cmn	r3, r6
 8017d08:	d413      	bmi.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017d0a:	4620      	mov	r0, r4
 8017d0c:	f7ff f986 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017d10:	42b0      	cmp	r0, r6
 8017d12:	dd0e      	ble.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017d14:	9b07      	ldr	r3, [sp, #28]
 8017d16:	a910      	add	r1, sp, #64	; 0x40
 8017d18:	9a08      	ldr	r2, [sp, #32]
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	9303      	str	r3, [sp, #12]
 8017d1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017d20:	9302      	str	r3, [sp, #8]
 8017d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d24:	9301      	str	r3, [sp, #4]
 8017d26:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8017d2a:	9300      	str	r3, [sp, #0]
 8017d2c:	b23b      	sxth	r3, r7
 8017d2e:	f7ff ff53 	bl	8017bd8 <_ZNK8touchgfx17GraphElementGridY8drawLineERKNS_4RectEssssNS_9colortypeEh>
 8017d32:	b013      	add	sp, #76	; 0x4c
 8017d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d38:	2e00      	cmp	r6, #0
 8017d3a:	ddfa      	ble.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017d3c:	4621      	mov	r1, r4
 8017d3e:	4628      	mov	r0, r5
 8017d40:	f7ff fd2f 	bl	80177a2 <_ZNK8touchgfx20AbstractGraphElement23getGraphRangeYMinScaledEPKNS_17AbstractDataGraphE>
 8017d44:	4607      	mov	r7, r0
 8017d46:	4621      	mov	r1, r4
 8017d48:	4628      	mov	r0, r5
 8017d4a:	f7ff fd2f 	bl	80177ac <_ZNK8touchgfx20AbstractGraphElement23getGraphRangeYMaxScaledEPKNS_17AbstractDataGraphE>
 8017d4e:	1bc3      	subs	r3, r0, r7
 8017d50:	4683      	mov	fp, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	bfb8      	it	lt
 8017d56:	425b      	neglt	r3, r3
 8017d58:	fb93 f3f6 	sdiv	r3, r3, r6
 8017d5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8017d60:	dce7      	bgt.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017d62:	4639      	mov	r1, r7
 8017d64:	4620      	mov	r0, r4
 8017d66:	f7ff fbe8 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017d6a:	4680      	mov	r8, r0
 8017d6c:	4659      	mov	r1, fp
 8017d6e:	4620      	mov	r0, r4
 8017d70:	f7ff fbe3 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017d74:	4540      	cmp	r0, r8
 8017d76:	bfbe      	ittt	lt
 8017d78:	463b      	movlt	r3, r7
 8017d7a:	465f      	movlt	r7, fp
 8017d7c:	469b      	movlt	fp, r3
 8017d7e:	fb97 f8f6 	sdiv	r8, r7, r6
 8017d82:	fb9b f2f6 	sdiv	r2, fp, r6
 8017d86:	455f      	cmp	r7, fp
 8017d88:	bfb4      	ite	lt
 8017d8a:	2301      	movlt	r3, #1
 8017d8c:	f04f 33ff 	movge.w	r3, #4294967295
 8017d90:	eba8 0803 	sub.w	r8, r8, r3
 8017d94:	441a      	add	r2, r3
 8017d96:	4590      	cmp	r8, r2
 8017d98:	bfb4      	ite	lt
 8017d9a:	f04f 0901 	movlt.w	r9, #1
 8017d9e:	f04f 39ff 	movge.w	r9, #4294967295
 8017da2:	f1ba 0f00 	cmp.w	sl, #0
 8017da6:	d136      	bne.n	8017e16 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x1d4>
 8017da8:	fb06 fa09 	mul.w	sl, r6, r9
 8017dac:	eb09 0702 	add.w	r7, r9, r2
 8017db0:	fb08 f606 	mul.w	r6, r8, r6
 8017db4:	4547      	cmp	r7, r8
 8017db6:	d0bc      	beq.n	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017db8:	4631      	mov	r1, r6
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f7ff fbbd 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017dc0:	9b06      	ldr	r3, [sp, #24]
 8017dc2:	1ac0      	subs	r0, r0, r3
 8017dc4:	900f      	str	r0, [sp, #60]	; 0x3c
 8017dc6:	a80f      	add	r0, sp, #60	; 0x3c
 8017dc8:	f7fe ffd6 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017dcc:	4683      	mov	fp, r0
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f7ff f896 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017dd4:	ebab 0000 	sub.w	r0, fp, r0
 8017dd8:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8017ddc:	b203      	sxth	r3, r0
 8017dde:	42da      	cmn	r2, r3
 8017de0:	9304      	str	r3, [sp, #16]
 8017de2:	d415      	bmi.n	8017e10 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x1ce>
 8017de4:	4620      	mov	r0, r4
 8017de6:	f7ff f919 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017dea:	9b04      	ldr	r3, [sp, #16]
 8017dec:	4298      	cmp	r0, r3
 8017dee:	dd0f      	ble.n	8017e10 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x1ce>
 8017df0:	9b07      	ldr	r3, [sp, #28]
 8017df2:	a910      	add	r1, sp, #64	; 0x40
 8017df4:	9a08      	ldr	r2, [sp, #32]
 8017df6:	4628      	mov	r0, r5
 8017df8:	9303      	str	r3, [sp, #12]
 8017dfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017dfc:	9302      	str	r3, [sp, #8]
 8017dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e00:	9301      	str	r3, [sp, #4]
 8017e02:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	fa0f f38b 	sxth.w	r3, fp
 8017e0c:	f7ff fee4 	bl	8017bd8 <_ZNK8touchgfx17GraphElementGridY8drawLineERKNS_4RectEssssNS_9colortypeEh>
 8017e10:	44c8      	add	r8, r9
 8017e12:	4456      	add	r6, sl
 8017e14:	e7ce      	b.n	8017db4 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x172>
 8017e16:	fb9b fbfa 	sdiv	fp, fp, sl
 8017e1a:	fb97 f7fa 	sdiv	r7, r7, sl
 8017e1e:	eb0b 0203 	add.w	r2, fp, r3
 8017e22:	1aff      	subs	r7, r7, r3
 8017e24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8017e28:	4620      	mov	r0, r4
 8017e2a:	4297      	cmp	r7, r2
 8017e2c:	bfb4      	ite	lt
 8017e2e:	2301      	movlt	r3, #1
 8017e30:	f04f 33ff 	movge.w	r3, #4294967295
 8017e34:	fb07 f10a 	mul.w	r1, r7, sl
 8017e38:	920c      	str	r2, [sp, #48]	; 0x30
 8017e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8017e3c:	f7ff fb7d 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017e40:	f84b 0d0c 	str.w	r0, [fp, #-12]!
 8017e44:	4658      	mov	r0, fp
 8017e46:	f7fe ff97 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017e4a:	fb08 f106 	mul.w	r1, r8, r6
 8017e4e:	b203      	sxth	r3, r0
 8017e50:	4620      	mov	r0, r4
 8017e52:	9305      	str	r3, [sp, #20]
 8017e54:	f7ff fb71 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e5a:	4658      	mov	r0, fp
 8017e5c:	f7fe ff8c 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017e60:	fb09 f206 	mul.w	r2, r9, r6
 8017e64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017e66:	b203      	sxth	r3, r0
 8017e68:	920b      	str	r2, [sp, #44]	; 0x2c
 8017e6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e6c:	f8cd b010 	str.w	fp, [sp, #16]
 8017e70:	188a      	adds	r2, r1, r2
 8017e72:	920c      	str	r2, [sp, #48]	; 0x30
 8017e74:	9a05      	ldr	r2, [sp, #20]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	dc13      	bgt.n	8017ea2 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x260>
 8017e7a:	eb08 0b09 	add.w	fp, r8, r9
 8017e7e:	fb06 fb0b 	mul.w	fp, r6, fp
 8017e82:	9a05      	ldr	r2, [sp, #20]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	db45      	blt.n	8017f14 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x2d2>
 8017e88:	4659      	mov	r1, fp
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f7ff fb55 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017e90:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e92:	9804      	ldr	r0, [sp, #16]
 8017e94:	44c8      	add	r8, r9
 8017e96:	f7fe ff6f 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e9c:	b203      	sxth	r3, r0
 8017e9e:	4493      	add	fp, r2
 8017ea0:	e7ef      	b.n	8017e82 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x240>
 8017ea2:	fb06 f108 	mul.w	r1, r6, r8
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	f7ff fb47 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017eac:	9b06      	ldr	r3, [sp, #24]
 8017eae:	1ac0      	subs	r0, r0, r3
 8017eb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8017eb2:	9804      	ldr	r0, [sp, #16]
 8017eb4:	f7fe ff60 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017eb8:	4683      	mov	fp, r0
 8017eba:	4620      	mov	r0, r4
 8017ebc:	f7ff f820 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 8017ec0:	ebab 0000 	sub.w	r0, fp, r0
 8017ec4:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8017ec8:	b203      	sxth	r3, r0
 8017eca:	42da      	cmn	r2, r3
 8017ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8017ece:	d415      	bmi.n	8017efc <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x2ba>
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f7ff f8a3 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8017ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ed8:	4298      	cmp	r0, r3
 8017eda:	dd0f      	ble.n	8017efc <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x2ba>
 8017edc:	9b07      	ldr	r3, [sp, #28]
 8017ede:	a910      	add	r1, sp, #64	; 0x40
 8017ee0:	9a08      	ldr	r2, [sp, #32]
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	9303      	str	r3, [sp, #12]
 8017ee6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017ee8:	9302      	str	r3, [sp, #8]
 8017eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eec:	9301      	str	r3, [sp, #4]
 8017eee:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8017ef2:	9300      	str	r3, [sp, #0]
 8017ef4:	fa0f f38b 	sxth.w	r3, fp
 8017ef8:	f7ff fe6e 	bl	8017bd8 <_ZNK8touchgfx17GraphElementGridY8drawLineERKNS_4RectEssssNS_9colortypeEh>
 8017efc:	44c8      	add	r8, r9
 8017efe:	4620      	mov	r0, r4
 8017f00:	fb08 f106 	mul.w	r1, r8, r6
 8017f04:	f7ff fb19 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017f08:	900f      	str	r0, [sp, #60]	; 0x3c
 8017f0a:	9804      	ldr	r0, [sp, #16]
 8017f0c:	f7fe ff34 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017f10:	b203      	sxth	r3, r0
 8017f12:	e7af      	b.n	8017e74 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x232>
 8017f14:	930d      	str	r3, [sp, #52]	; 0x34
 8017f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f18:	441f      	add	r7, r3
 8017f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f1c:	42bb      	cmp	r3, r7
 8017f1e:	f43f af08 	beq.w	8017d32 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0xf0>
 8017f22:	fb07 f10a 	mul.w	r1, r7, sl
 8017f26:	4620      	mov	r0, r4
 8017f28:	f7ff fb07 	bl	801753a <_ZNK8touchgfx20AbstractGraphElement16valueToScreenYQ5EPKNS_17AbstractDataGraphEi.constprop.7>
 8017f2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8017f2e:	9804      	ldr	r0, [sp, #16]
 8017f30:	f7fe ff22 	bl	8016d78 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017f34:	b203      	sxth	r3, r0
 8017f36:	9305      	str	r3, [sp, #20]
 8017f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f3a:	e79b      	b.n	8017e74 <_ZNK8touchgfx17GraphElementGridY4drawERKNS_4RectE+0x232>

08017f3c <_ZN8touchgfx16GraphElementLineC1Ev>:
 8017f3c:	b510      	push	{r4, lr}
 8017f3e:	4604      	mov	r4, r0
 8017f40:	f7ff fb60 	bl	8017604 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 8017f44:	4b03      	ldr	r3, [pc, #12]	; (8017f54 <_ZN8touchgfx16GraphElementLineC1Ev+0x18>)
 8017f46:	4620      	mov	r0, r4
 8017f48:	6023      	str	r3, [r4, #0]
 8017f4a:	2302      	movs	r3, #2
 8017f4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8017f50:	bd10      	pop	{r4, pc}
 8017f52:	bf00      	nop
 8017f54:	0802ee38 	.word	0x0802ee38

08017f58 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>:
 8017f58:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 8017f5c:	4770      	bx	lr

08017f5e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8017f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f62:	b087      	sub	sp, #28
 8017f64:	461e      	mov	r6, r3
 8017f66:	4691      	mov	r9, r2
 8017f68:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017f6c:	9101      	str	r1, [sp, #4]
 8017f6e:	429e      	cmp	r6, r3
 8017f70:	9304      	str	r3, [sp, #16]
 8017f72:	d06b      	beq.n	801804c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xee>
 8017f74:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8017f78:	4631      	mov	r1, r6
 8017f7a:	4610      	mov	r0, r2
 8017f7c:	4634      	mov	r4, r6
 8017f7e:	015b      	lsls	r3, r3, #5
 8017f80:	f04f 0b01 	mov.w	fp, #1
 8017f84:	9302      	str	r3, [sp, #8]
 8017f86:	f7ff fae0 	bl	801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>
 8017f8a:	f7ff fb30 	bl	80175ee <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.9>
 8017f8e:	4631      	mov	r1, r6
 8017f90:	4607      	mov	r7, r0
 8017f92:	4648      	mov	r0, r9
 8017f94:	f7ff fad5 	bl	8017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>
 8017f98:	f7ff fb29 	bl	80175ee <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.9>
 8017f9c:	4639      	mov	r1, r7
 8017f9e:	4602      	mov	r2, r0
 8017fa0:	4680      	mov	r8, r0
 8017fa2:	9801      	ldr	r0, [sp, #4]
 8017fa4:	f011 f9e7 	bl	8029376 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017fa8:	445c      	add	r4, fp
 8017faa:	4648      	mov	r0, r9
 8017fac:	2500      	movs	r5, #0
 8017fae:	b224      	sxth	r4, r4
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	f7ff faca 	bl	801754a <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.10>
 8017fb6:	f7ff fb1a 	bl	80175ee <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.9>
 8017fba:	4621      	mov	r1, r4
 8017fbc:	9000      	str	r0, [sp, #0]
 8017fbe:	4648      	mov	r0, r9
 8017fc0:	f7ff fabf 	bl	8017542 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.8>
 8017fc4:	f7ff fb13 	bl	80175ee <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.9>
 8017fc8:	9b00      	ldr	r3, [sp, #0]
 8017fca:	eba0 0108 	sub.w	r1, r0, r8
 8017fce:	4682      	mov	sl, r0
 8017fd0:	1bdb      	subs	r3, r3, r7
 8017fd2:	fb03 f203 	mul.w	r2, r3, r3
 8017fd6:	fb01 2201 	mla	r2, r1, r1, r2
 8017fda:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8017fde:	bfb4      	ite	lt
 8017fe0:	f44f 4080 	movlt.w	r0, #16384	; 0x4000
 8017fe4:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 8017fe8:	eb05 0c00 	add.w	ip, r5, r0
 8017fec:	4594      	cmp	ip, r2
 8017fee:	bf9c      	itt	ls
 8017ff0:	eb00 050c 	addls.w	r5, r0, ip
 8017ff4:	eba2 020c 	subls.w	r2, r2, ip
 8017ff8:	0880      	lsrs	r0, r0, #2
 8017ffa:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8017ffe:	d1f3      	bne.n	8017fe8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x8a>
 8018000:	b315      	cbz	r5, 8018048 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xea>
 8018002:	462a      	mov	r2, r5
 8018004:	9802      	ldr	r0, [sp, #8]
 8018006:	9305      	str	r3, [sp, #20]
 8018008:	f003 fa2b 	bl	801b462 <_ZN8touchgfx6muldivElll>
 801800c:	2302      	movs	r3, #2
 801800e:	fb90 f2f3 	sdiv	r2, r0, r3
 8018012:	9b05      	ldr	r3, [sp, #20]
 8018014:	9203      	str	r2, [sp, #12]
 8018016:	462a      	mov	r2, r5
 8018018:	4619      	mov	r1, r3
 801801a:	9802      	ldr	r0, [sp, #8]
 801801c:	f003 fa21 	bl	801b462 <_ZN8touchgfx6muldivElll>
 8018020:	2302      	movs	r3, #2
 8018022:	fb90 f5f3 	sdiv	r5, r0, r3
 8018026:	9b03      	ldr	r3, [sp, #12]
 8018028:	eb05 0208 	add.w	r2, r5, r8
 801802c:	9801      	ldr	r0, [sp, #4]
 801802e:	46d0      	mov	r8, sl
 8018030:	1af9      	subs	r1, r7, r3
 8018032:	f011 f92f 	bl	8029294 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018036:	9b00      	ldr	r3, [sp, #0]
 8018038:	9903      	ldr	r1, [sp, #12]
 801803a:	eb0a 0205 	add.w	r2, sl, r5
 801803e:	9801      	ldr	r0, [sp, #4]
 8018040:	1a59      	subs	r1, r3, r1
 8018042:	f011 f927 	bl	8029294 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018046:	9f00      	ldr	r7, [sp, #0]
 8018048:	42a6      	cmp	r6, r4
 801804a:	db02      	blt.n	8018052 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xf4>
 801804c:	b007      	add	sp, #28
 801804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018052:	9b04      	ldr	r3, [sp, #16]
 8018054:	42a3      	cmp	r3, r4
 8018056:	bf08      	it	eq
 8018058:	f04f 3bff 	moveq.w	fp, #4294967295
 801805c:	e7a4      	b.n	8017fa8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x4a>

0801805e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801805e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018062:	6943      	ldr	r3, [r0, #20]
 8018064:	b0b5      	sub	sp, #212	; 0xd4
 8018066:	4606      	mov	r6, r0
 8018068:	460f      	mov	r7, r1
 801806a:	695d      	ldr	r5, [r3, #20]
 801806c:	4628      	mov	r0, r5
 801806e:	f7ff f80b 	bl	8017088 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 8018072:	2801      	cmp	r0, #1
 8018074:	dc04      	bgt.n	8018080 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x22>
 8018076:	2501      	movs	r5, #1
 8018078:	4628      	mov	r0, r5
 801807a:	b035      	add	sp, #212	; 0xd4
 801807c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018080:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8018084:	ac34      	add	r4, sp, #208	; 0xd0
 8018086:	011b      	lsls	r3, r3, #4
 8018088:	f844 3dbc 	str.w	r3, [r4, #-188]!
 801808c:	4620      	mov	r0, r4
 801808e:	f7ff faa5 	bl	80175dc <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8018092:	8839      	ldrh	r1, [r7, #0]
 8018094:	88ba      	ldrh	r2, [r7, #4]
 8018096:	b280      	uxth	r0, r0
 8018098:	f10d 030a 	add.w	r3, sp, #10
 801809c:	440a      	add	r2, r1
 801809e:	1a09      	subs	r1, r1, r0
 80180a0:	9300      	str	r3, [sp, #0]
 80180a2:	ab02      	add	r3, sp, #8
 80180a4:	4402      	add	r2, r0
 80180a6:	b209      	sxth	r1, r1
 80180a8:	4630      	mov	r0, r6
 80180aa:	b212      	sxth	r2, r2
 80180ac:	f7ff fabe 	bl	801762c <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	d0e0      	beq.n	8018076 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x18>
 80180b4:	4628      	mov	r0, r5
 80180b6:	f7fe ff23 	bl	8016f00 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 80180ba:	4681      	mov	r9, r0
 80180bc:	4628      	mov	r0, r5
 80180be:	f7fe ffaa 	bl	8017016 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 80180c2:	4680      	mov	r8, r0
 80180c4:	4628      	mov	r0, r5
 80180c6:	f7fe ffa9 	bl	801701c <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 80180ca:	2300      	movs	r3, #0
 80180cc:	4639      	mov	r1, r7
 80180ce:	f8ad 0012 	strh.w	r0, [sp, #18]
 80180d2:	a803      	add	r0, sp, #12
 80180d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80180d8:	f8ad 900e 	strh.w	r9, [sp, #14]
 80180dc:	f8ad 8010 	strh.w	r8, [sp, #16]
 80180e0:	f7fd fae6 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 80180e4:	aa03      	add	r2, sp, #12
 80180e6:	4631      	mov	r1, r6
 80180e8:	4620      	mov	r0, r4
 80180ea:	f010 ff7b 	bl	8028fe4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80180ee:	4628      	mov	r0, r5
 80180f0:	f7fe ffb5 	bl	801705e <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>
 80180f4:	1e07      	subs	r7, r0, #0
 80180f6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80180fa:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80180fe:	dd03      	ble.n	8018108 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 8018100:	42bb      	cmp	r3, r7
 8018102:	da01      	bge.n	8018108 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 8018104:	42ba      	cmp	r2, r7
 8018106:	da11      	bge.n	801812c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xce>
 8018108:	9200      	str	r2, [sp, #0]
 801810a:	462a      	mov	r2, r5
 801810c:	4621      	mov	r1, r4
 801810e:	4630      	mov	r0, r6
 8018110:	f7ff ff25 	bl	8017f5e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8018114:	4628      	mov	r0, r5
 8018116:	f7fe fee5 	bl	8016ee4 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 801811a:	4601      	mov	r1, r0
 801811c:	4620      	mov	r0, r4
 801811e:	f011 fa2e 	bl	802957e <_ZN8touchgfx6Canvas6renderEh>
 8018122:	4605      	mov	r5, r0
 8018124:	4620      	mov	r0, r4
 8018126:	f011 fa69 	bl	80295fc <_ZN8touchgfx6CanvasD1Ev>
 801812a:	e7a5      	b.n	8018078 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 801812c:	1e7a      	subs	r2, r7, #1
 801812e:	4621      	mov	r1, r4
 8018130:	4630      	mov	r0, r6
 8018132:	b212      	sxth	r2, r2
 8018134:	9200      	str	r2, [sp, #0]
 8018136:	462a      	mov	r2, r5
 8018138:	f7ff ff11 	bl	8017f5e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801813c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8018140:	9300      	str	r3, [sp, #0]
 8018142:	463b      	mov	r3, r7
 8018144:	e7e1      	b.n	801810a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>

08018146 <_ZNK8touchgfx21DataGraphWrapAndClear18indexToGlobalIndexEs>:
 8018146:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 801814a:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801814e:	4419      	add	r1, r3
 8018150:	1a08      	subs	r0, r1, r0
 8018152:	4770      	bx	lr

08018154 <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi>:
 8018154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018156:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 801815a:	460f      	mov	r7, r1
 801815c:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 8018160:	4604      	mov	r4, r0
 8018162:	1c6b      	adds	r3, r5, #1
 8018164:	4629      	mov	r1, r5
 8018166:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801816a:	6803      	ldr	r3, [r0, #0]
 801816c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8018170:	4798      	blx	r3
 8018172:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8018176:	b915      	cbnz	r5, 801817e <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi+0x2a>
 8018178:	4620      	mov	r0, r4
 801817a:	f7ff f835 	bl	80171e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801817e:	4620      	mov	r0, r4
 8018180:	4629      	mov	r1, r5
 8018182:	f7ff f806 	bl	8017192 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8018186:	4628      	mov	r0, r5
 8018188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801818a <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv>:
 801818a:	b510      	push	{r4, lr}
 801818c:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 8018190:	4604      	mov	r4, r0
 8018192:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 8018196:	429a      	cmp	r2, r3
 8018198:	db0b      	blt.n	80181b2 <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv+0x28>
 801819a:	f7ff f825 	bl	80171e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801819e:	6823      	ldr	r3, [r4, #0]
 80181a0:	4620      	mov	r0, r4
 80181a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80181a6:	4798      	blx	r3
 80181a8:	4620      	mov	r0, r4
 80181aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ae:	f7ff b800 	b.w	80171b2 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 80181b2:	bd10      	pop	{r4, pc}

080181b4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>:
 80181b4:	b510      	push	{r4, lr}
 80181b6:	4604      	mov	r4, r0
 80181b8:	f7ff f96e 	bl	8017498 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 80181bc:	4b01      	ldr	r3, [pc, #4]	; (80181c4 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi+0x10>)
 80181be:	4620      	mov	r0, r4
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	bd10      	pop	{r4, pc}
 80181c4:	0802f0d8 	.word	0x0802f0d8

080181c8 <_ZNK8touchgfx15DataGraphScroll9realIndexEs>:
 80181c8:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 80181cc:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 80181d0:	429a      	cmp	r2, r3
 80181d2:	db07      	blt.n	80181e4 <_ZNK8touchgfx15DataGraphScroll9realIndexEs+0x1c>
 80181d4:	f9b0 0148 	ldrsh.w	r0, [r0, #328]	; 0x148
 80181d8:	4408      	add	r0, r1
 80181da:	fb90 f1f3 	sdiv	r1, r0, r3
 80181de:	fb03 0111 	mls	r1, r3, r1, r0
 80181e2:	b209      	sxth	r1, r1
 80181e4:	4608      	mov	r0, r1
 80181e6:	4770      	bx	lr

080181e8 <_ZNK8touchgfx15DataGraphScroll10indexToXQ5Es>:
 80181e8:	0148      	lsls	r0, r1, #5
 80181ea:	4770      	bx	lr

080181ec <_ZN8touchgfx15DataGraphScroll5clearEv>:
 80181ec:	b510      	push	{r4, lr}
 80181ee:	4604      	mov	r4, r0
 80181f0:	f7fe fc6c 	bl	8016acc <_ZN8touchgfx17AbstractDataGraph5clearEv>
 80181f4:	2300      	movs	r3, #0
 80181f6:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 80181fa:	bd10      	pop	{r4, pc}

080181fc <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv>:
 80181fc:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 8018200:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 8018204:	429a      	cmp	r2, r3
 8018206:	d101      	bne.n	801820c <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv+0x10>
 8018208:	f7fe bfee 	b.w	80171e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801820c:	4770      	bx	lr

0801820e <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs>:
 801820e:	b538      	push	{r3, r4, r5, lr}
 8018210:	f9b0 4118 	ldrsh.w	r4, [r0, #280]	; 0x118
 8018214:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 8018218:	42a5      	cmp	r5, r4
 801821a:	da04      	bge.n	8018226 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x18>
 801821c:	6803      	ldr	r3, [r0, #0]
 801821e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8018222:	4798      	blx	r3
 8018224:	bd38      	pop	{r3, r4, r5, pc}
 8018226:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 801822a:	4408      	add	r0, r1
 801822c:	1b00      	subs	r0, r0, r4
 801822e:	e7f9      	b.n	8018224 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x16>

08018230 <_ZN8touchgfx15DataGraphScroll8addValueEi>:
 8018230:	b570      	push	{r4, r5, r6, lr}
 8018232:	f9b0 5148 	ldrsh.w	r5, [r0, #328]	; 0x148
 8018236:	4604      	mov	r4, r0
 8018238:	f9b0 2118 	ldrsh.w	r2, [r0, #280]	; 0x118
 801823c:	1c6b      	adds	r3, r5, #1
 801823e:	f9b0 611a 	ldrsh.w	r6, [r0, #282]	; 0x11a
 8018242:	b21b      	sxth	r3, r3
 8018244:	42ae      	cmp	r6, r5
 8018246:	fb93 f0f2 	sdiv	r0, r3, r2
 801824a:	bf08      	it	eq
 801824c:	f8a4 311a 	strheq.w	r3, [r4, #282]	; 0x11a
 8018250:	4296      	cmp	r6, r2
 8018252:	fb02 3010 	mls	r0, r2, r0, r3
 8018256:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 801825a:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
 801825e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018262:	d107      	bne.n	8018274 <_ZN8touchgfx15DataGraphScroll8addValueEi+0x44>
 8018264:	4620      	mov	r0, r4
 8018266:	f7fe ffa4 	bl	80171b2 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 801826a:	4620      	mov	r0, r4
 801826c:	f7fe ffbc 	bl	80171e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8018270:	4628      	mov	r0, r5
 8018272:	bd70      	pop	{r4, r5, r6, pc}
 8018274:	4629      	mov	r1, r5
 8018276:	4620      	mov	r0, r4
 8018278:	f7fe ff8b 	bl	8017192 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801827c:	e7f8      	b.n	8018270 <_ZN8touchgfx15DataGraphScroll8addValueEi+0x40>
	...

08018280 <_ZN8touchgfx15DataGraphScrollC1EsPi>:
 8018280:	b510      	push	{r4, lr}
 8018282:	4604      	mov	r4, r0
 8018284:	f7ff f908 	bl	8017498 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 8018288:	4b03      	ldr	r3, [pc, #12]	; (8018298 <_ZN8touchgfx15DataGraphScrollC1EsPi+0x18>)
 801828a:	4620      	mov	r0, r4
 801828c:	6023      	str	r3, [r4, #0]
 801828e:	2300      	movs	r3, #0
 8018290:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 8018294:	bd10      	pop	{r4, pc}
 8018296:	bf00      	nop
 8018298:	0802f1fc 	.word	0x0802f1fc

0801829c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801829c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801829e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80182a4:	4299      	cmp	r1, r3
 80182a6:	d029      	beq.n	80182fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80182a8:	4b15      	ldr	r3, [pc, #84]	; (8018300 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	b92b      	cbnz	r3, 80182ba <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80182ae:	4b15      	ldr	r3, [pc, #84]	; (8018304 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80182b0:	21b1      	movs	r1, #177	; 0xb1
 80182b2:	4a15      	ldr	r2, [pc, #84]	; (8018308 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80182b4:	4815      	ldr	r0, [pc, #84]	; (801830c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80182b6:	f012 fa6d 	bl	802a794 <__assert_func>
 80182ba:	4a15      	ldr	r2, [pc, #84]	; (8018310 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80182bc:	8812      	ldrh	r2, [r2, #0]
 80182be:	428a      	cmp	r2, r1
 80182c0:	d803      	bhi.n	80182ca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80182c2:	4b14      	ldr	r3, [pc, #80]	; (8018314 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80182c4:	21b2      	movs	r1, #178	; 0xb2
 80182c6:	4a10      	ldr	r2, [pc, #64]	; (8018308 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80182c8:	e7f4      	b.n	80182b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80182ca:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80182ce:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80182d2:	4b11      	ldr	r3, [pc, #68]	; (8018318 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80182d4:	7854      	ldrb	r4, [r2, #1]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80182dc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80182e0:	682b      	ldr	r3, [r5, #0]
 80182e2:	69de      	ldr	r6, [r3, #28]
 80182e4:	4b0d      	ldr	r3, [pc, #52]	; (801831c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80182e6:	6818      	ldr	r0, [r3, #0]
 80182e8:	f7fa fd8c 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 80182ec:	2300      	movs	r3, #0
 80182ee:	4602      	mov	r2, r0
 80182f0:	4621      	mov	r1, r4
 80182f2:	9300      	str	r3, [sp, #0]
 80182f4:	4628      	mov	r0, r5
 80182f6:	47b0      	blx	r6
 80182f8:	b002      	add	sp, #8
 80182fa:	bd70      	pop	{r4, r5, r6, pc}
 80182fc:	2000      	movs	r0, #0
 80182fe:	e7fb      	b.n	80182f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018300:	20014ba4 	.word	0x20014ba4
 8018304:	0802f31c 	.word	0x0802f31c
 8018308:	0802f454 	.word	0x0802f454
 801830c:	0802f35e 	.word	0x0802f35e
 8018310:	20014ba8 	.word	0x20014ba8
 8018314:	0802f387 	.word	0x0802f387
 8018318:	20014bac 	.word	0x20014bac
 801831c:	20014bb0 	.word	0x20014bb0

08018320 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018328:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801832a:	b08c      	sub	sp, #48	; 0x30
 801832c:	4604      	mov	r4, r0
 801832e:	4293      	cmp	r3, r2
 8018330:	4688      	mov	r8, r1
 8018332:	d05f      	beq.n	80183f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018334:	4e31      	ldr	r6, [pc, #196]	; (80183fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8018336:	6832      	ldr	r2, [r6, #0]
 8018338:	b92a      	cbnz	r2, 8018346 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801833a:	4b31      	ldr	r3, [pc, #196]	; (8018400 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801833c:	21b1      	movs	r1, #177	; 0xb1
 801833e:	4a31      	ldr	r2, [pc, #196]	; (8018404 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018340:	4831      	ldr	r0, [pc, #196]	; (8018408 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018342:	f012 fa27 	bl	802a794 <__assert_func>
 8018346:	4d31      	ldr	r5, [pc, #196]	; (801840c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8018348:	8829      	ldrh	r1, [r5, #0]
 801834a:	4299      	cmp	r1, r3
 801834c:	d803      	bhi.n	8018356 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801834e:	4b30      	ldr	r3, [pc, #192]	; (8018410 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018350:	21b2      	movs	r1, #178	; 0xb2
 8018352:	4a2c      	ldr	r2, [pc, #176]	; (8018404 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018354:	e7f4      	b.n	8018340 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8018356:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801835a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801835e:	4b2d      	ldr	r3, [pc, #180]	; (8018414 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018366:	2a00      	cmp	r2, #0
 8018368:	d044      	beq.n	80183f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801836a:	784b      	ldrb	r3, [r1, #1]
 801836c:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018370:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018374:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018378:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801837c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018380:	4b25      	ldr	r3, [pc, #148]	; (8018418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018382:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801838c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018390:	9207      	str	r2, [sp, #28]
 8018392:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018394:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018398:	9009      	str	r0, [sp, #36]	; 0x24
 801839a:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801839e:	f88d 9020 	strb.w	r9, [sp, #32]
 80183a2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80183a6:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80183aa:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80183ae:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80183b2:	b10a      	cbz	r2, 80183b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80183b4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80183b6:	b907      	cbnz	r7, 80183ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80183b8:	689f      	ldr	r7, [r3, #8]
 80183ba:	f10d 0914 	add.w	r9, sp, #20
 80183be:	4621      	mov	r1, r4
 80183c0:	4648      	mov	r0, r9
 80183c2:	f002 ff21 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183c6:	6833      	ldr	r3, [r6, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d0b6      	beq.n	801833a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80183cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80183ce:	882b      	ldrh	r3, [r5, #0]
 80183d0:	428b      	cmp	r3, r1
 80183d2:	d9bc      	bls.n	801834e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80183d4:	4b11      	ldr	r3, [pc, #68]	; (801841c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80183d6:	6818      	ldr	r0, [r3, #0]
 80183d8:	f7fa fd14 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 80183dc:	2300      	movs	r3, #0
 80183de:	9001      	str	r0, [sp, #4]
 80183e0:	4638      	mov	r0, r7
 80183e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80183e6:	ab07      	add	r3, sp, #28
 80183e8:	9300      	str	r3, [sp, #0]
 80183ea:	4643      	mov	r3, r8
 80183ec:	e899 0006 	ldmia.w	r9, {r1, r2}
 80183f0:	f7fa fc99 	bl	8012d26 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80183f4:	b00c      	add	sp, #48	; 0x30
 80183f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183fa:	bf00      	nop
 80183fc:	20014ba4 	.word	0x20014ba4
 8018400:	0802f31c 	.word	0x0802f31c
 8018404:	0802f454 	.word	0x0802f454
 8018408:	0802f35e 	.word	0x0802f35e
 801840c:	20014ba8 	.word	0x20014ba8
 8018410:	0802f387 	.word	0x0802f387
 8018414:	20014bac 	.word	0x20014bac
 8018418:	20014b34 	.word	0x20014b34
 801841c:	20014bb0 	.word	0x20014bb0

08018420 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018420:	b40e      	push	{r1, r2, r3}
 8018422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801842a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801842c:	b09b      	sub	sp, #108	; 0x6c
 801842e:	4604      	mov	r4, r0
 8018430:	4293      	cmp	r3, r2
 8018432:	d061      	beq.n	80184f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8018434:	aa24      	add	r2, sp, #144	; 0x90
 8018436:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801850c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801843a:	9203      	str	r2, [sp, #12]
 801843c:	f8da 2000 	ldr.w	r2, [sl]
 8018440:	b92a      	cbnz	r2, 801844e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018442:	4b2e      	ldr	r3, [pc, #184]	; (80184fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8018444:	21b1      	movs	r1, #177	; 0xb1
 8018446:	4a2e      	ldr	r2, [pc, #184]	; (8018500 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8018448:	482e      	ldr	r0, [pc, #184]	; (8018504 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801844a:	f012 f9a3 	bl	802a794 <__assert_func>
 801844e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8018510 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8018452:	f8b8 1000 	ldrh.w	r1, [r8]
 8018456:	4299      	cmp	r1, r3
 8018458:	d803      	bhi.n	8018462 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801845a:	4b2b      	ldr	r3, [pc, #172]	; (8018508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 801845c:	21b2      	movs	r1, #178	; 0xb2
 801845e:	4a28      	ldr	r2, [pc, #160]	; (8018500 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8018460:	e7f2      	b.n	8018448 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8018462:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8018514 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8018466:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801846a:	f8d9 3000 	ldr.w	r3, [r9]
 801846e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	4638      	mov	r0, r7
 8018476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018478:	4798      	blx	r3
 801847a:	4606      	mov	r6, r0
 801847c:	b205      	sxth	r5, r0
 801847e:	a804      	add	r0, sp, #16
 8018480:	f003 fb7f 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	4638      	mov	r0, r7
 8018488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801848a:	4798      	blx	r3
 801848c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801848e:	4603      	mov	r3, r0
 8018490:	9a03      	ldr	r2, [sp, #12]
 8018492:	a804      	add	r0, sp, #16
 8018494:	f003 fbba 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018498:	f8da 3000 	ldr.w	r3, [sl]
 801849c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d0ce      	beq.n	8018442 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80184a4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80184a6:	f8b8 0000 	ldrh.w	r0, [r8]
 80184aa:	4290      	cmp	r0, r2
 80184ac:	d9d5      	bls.n	801845a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80184ae:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 80184b2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80184b6:	f8d9 3000 	ldr.w	r3, [r9]
 80184ba:	787a      	ldrb	r2, [r7, #1]
 80184bc:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 80184c0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80184c4:	9700      	str	r7, [sp, #0]
 80184c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80184ca:	a804      	add	r0, sp, #16
 80184cc:	f001 fa4b 	bl	8019966 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80184d0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80184d4:	b203      	sxth	r3, r0
 80184d6:	18a9      	adds	r1, r5, r2
 80184d8:	2900      	cmp	r1, #0
 80184da:	dd0b      	ble.n	80184f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80184dc:	3b01      	subs	r3, #1
 80184de:	fb13 f302 	smulbb	r3, r3, r2
 80184e2:	fb16 3300 	smlabb	r3, r6, r0, r3
 80184e6:	b21d      	sxth	r5, r3
 80184e8:	4628      	mov	r0, r5
 80184ea:	b01b      	add	sp, #108	; 0x6c
 80184ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184f0:	b003      	add	sp, #12
 80184f2:	4770      	bx	lr
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	dcf7      	bgt.n	80184e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80184f8:	2500      	movs	r5, #0
 80184fa:	e7f5      	b.n	80184e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80184fc:	0802f31c 	.word	0x0802f31c
 8018500:	0802f454 	.word	0x0802f454
 8018504:	0802f35e 	.word	0x0802f35e
 8018508:	0802f387 	.word	0x0802f387
 801850c:	20014ba4 	.word	0x20014ba4
 8018510:	20014ba8 	.word	0x20014ba8
 8018514:	20014bac 	.word	0x20014bac

08018518 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018518:	b570      	push	{r4, r5, r6, lr}
 801851a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801851e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018520:	4604      	mov	r4, r0
 8018522:	4299      	cmp	r1, r3
 8018524:	d01e      	beq.n	8018564 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8018526:	6803      	ldr	r3, [r0, #0]
 8018528:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801852a:	4b0f      	ldr	r3, [pc, #60]	; (8018568 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	b92b      	cbnz	r3, 801853c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018530:	4b0e      	ldr	r3, [pc, #56]	; (801856c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8018532:	21b1      	movs	r1, #177	; 0xb1
 8018534:	4a0e      	ldr	r2, [pc, #56]	; (8018570 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018536:	480f      	ldr	r0, [pc, #60]	; (8018574 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8018538:	f012 f92c 	bl	802a794 <__assert_func>
 801853c:	4b0e      	ldr	r3, [pc, #56]	; (8018578 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801853e:	881b      	ldrh	r3, [r3, #0]
 8018540:	428b      	cmp	r3, r1
 8018542:	d803      	bhi.n	801854c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8018544:	4b0d      	ldr	r3, [pc, #52]	; (801857c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8018546:	21b2      	movs	r1, #178	; 0xb2
 8018548:	4a09      	ldr	r2, [pc, #36]	; (8018570 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801854a:	e7f4      	b.n	8018536 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801854c:	4b0c      	ldr	r3, [pc, #48]	; (8018580 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801854e:	6818      	ldr	r0, [r3, #0]
 8018550:	f7fa fc58 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 8018554:	2300      	movs	r3, #0
 8018556:	4601      	mov	r1, r0
 8018558:	46ac      	mov	ip, r5
 801855a:	4620      	mov	r0, r4
 801855c:	461a      	mov	r2, r3
 801855e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018562:	4760      	bx	ip
 8018564:	2000      	movs	r0, #0
 8018566:	bd70      	pop	{r4, r5, r6, pc}
 8018568:	20014ba4 	.word	0x20014ba4
 801856c:	0802f31c 	.word	0x0802f31c
 8018570:	0802f454 	.word	0x0802f454
 8018574:	0802f35e 	.word	0x0802f35e
 8018578:	20014ba8 	.word	0x20014ba8
 801857c:	0802f387 	.word	0x0802f387
 8018580:	20014bb0 	.word	0x20014bb0

08018584 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018584:	b538      	push	{r3, r4, r5, lr}
 8018586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801858a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801858c:	4604      	mov	r4, r0
 801858e:	429a      	cmp	r2, r3
 8018590:	d014      	beq.n	80185bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018592:	6803      	ldr	r3, [r0, #0]
 8018594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018596:	4798      	blx	r3
 8018598:	6823      	ldr	r3, [r4, #0]
 801859a:	4605      	mov	r5, r0
 801859c:	4620      	mov	r0, r4
 801859e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80185a0:	4798      	blx	r3
 80185a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80185a6:	b22d      	sxth	r5, r5
 80185a8:	4601      	mov	r1, r0
 80185aa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80185ae:	bf06      	itte	eq
 80185b0:	4602      	moveq	r2, r0
 80185b2:	4629      	moveq	r1, r5
 80185b4:	462a      	movne	r2, r5
 80185b6:	4620      	mov	r0, r4
 80185b8:	f7f2 fb3c 	bl	800ac34 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80185bc:	bd38      	pop	{r3, r4, r5, pc}

080185be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80185be:	888a      	ldrh	r2, [r1, #4]
 80185c0:	8582      	strh	r2, [r0, #44]	; 0x2c
 80185c2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80185c6:	b922      	cbnz	r2, 80185d2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80185c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80185cc:	b90b      	cbnz	r3, 80185d2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80185ce:	f7ff bfd9 	b.w	8018584 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80185d2:	4770      	bx	lr

080185d4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80185d4:	2300      	movs	r3, #0
 80185d6:	8083      	strh	r3, [r0, #4]
 80185d8:	80c3      	strh	r3, [r0, #6]
 80185da:	8003      	strh	r3, [r0, #0]
 80185dc:	8043      	strh	r3, [r0, #2]
 80185de:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80185e2:	2bff      	cmp	r3, #255	; 0xff
 80185e4:	bf01      	itttt	eq
 80185e6:	890b      	ldrheq	r3, [r1, #8]
 80185e8:	8083      	strheq	r3, [r0, #4]
 80185ea:	894b      	ldrheq	r3, [r1, #10]
 80185ec:	80c3      	strheq	r3, [r0, #6]
 80185ee:	4770      	bx	lr

080185f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80185f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185f2:	4604      	mov	r4, r0
 80185f4:	466b      	mov	r3, sp
 80185f6:	6808      	ldr	r0, [r1, #0]
 80185f8:	6849      	ldr	r1, [r1, #4]
 80185fa:	c303      	stmia	r3!, {r0, r1}
 80185fc:	6823      	ldr	r3, [r4, #0]
 80185fe:	4669      	mov	r1, sp
 8018600:	4620      	mov	r0, r4
 8018602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018604:	4798      	blx	r3
 8018606:	4b08      	ldr	r3, [pc, #32]	; (8018628 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801860e:	b10a      	cbz	r2, 8018614 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018610:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018612:	b900      	cbnz	r0, 8018616 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018614:	6898      	ldr	r0, [r3, #8]
 8018616:	6803      	ldr	r3, [r0, #0]
 8018618:	4669      	mov	r1, sp
 801861a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801861c:	699d      	ldr	r5, [r3, #24]
 801861e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018622:	47a8      	blx	r5
 8018624:	b003      	add	sp, #12
 8018626:	bd30      	pop	{r4, r5, pc}
 8018628:	20014b34 	.word	0x20014b34

0801862c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018634:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018636:	b08c      	sub	sp, #48	; 0x30
 8018638:	4604      	mov	r4, r0
 801863a:	4293      	cmp	r3, r2
 801863c:	460e      	mov	r6, r1
 801863e:	d05d      	beq.n	80186fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018640:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018720 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018644:	f8d8 2000 	ldr.w	r2, [r8]
 8018648:	b92a      	cbnz	r2, 8018656 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801864a:	4b2e      	ldr	r3, [pc, #184]	; (8018704 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801864c:	21b1      	movs	r1, #177	; 0xb1
 801864e:	4a2e      	ldr	r2, [pc, #184]	; (8018708 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018650:	482e      	ldr	r0, [pc, #184]	; (801870c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018652:	f012 f89f 	bl	802a794 <__assert_func>
 8018656:	4f2e      	ldr	r7, [pc, #184]	; (8018710 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018658:	8839      	ldrh	r1, [r7, #0]
 801865a:	4299      	cmp	r1, r3
 801865c:	d803      	bhi.n	8018666 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801865e:	4b2d      	ldr	r3, [pc, #180]	; (8018714 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018660:	21b2      	movs	r1, #178	; 0xb2
 8018662:	4a29      	ldr	r2, [pc, #164]	; (8018708 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018664:	e7f4      	b.n	8018650 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018666:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801866a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801866e:	4b2a      	ldr	r3, [pc, #168]	; (8018718 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018676:	2a00      	cmp	r2, #0
 8018678:	d040      	beq.n	80186fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801867a:	784b      	ldrb	r3, [r1, #1]
 801867c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018680:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018684:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018688:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801868c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018690:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018694:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018698:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801869c:	ad05      	add	r5, sp, #20
 801869e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80186a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80186a4:	9207      	str	r2, [sp, #28]
 80186a6:	f88d 9020 	strb.w	r9, [sp, #32]
 80186aa:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80186ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80186b2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80186b6:	9009      	str	r0, [sp, #36]	; 0x24
 80186b8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80186bc:	f7f1 f992 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80186c0:	4621      	mov	r1, r4
 80186c2:	4681      	mov	r9, r0
 80186c4:	4628      	mov	r0, r5
 80186c6:	f002 fd9f 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186ca:	f8d8 3000 	ldr.w	r3, [r8]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d0bb      	beq.n	801864a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80186d2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80186d4:	883b      	ldrh	r3, [r7, #0]
 80186d6:	428b      	cmp	r3, r1
 80186d8:	d9c1      	bls.n	801865e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80186da:	4b10      	ldr	r3, [pc, #64]	; (801871c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80186dc:	6818      	ldr	r0, [r3, #0]
 80186de:	f7fa fb91 	bl	8012e04 <_ZNK8touchgfx5Texts7getTextEt>
 80186e2:	2300      	movs	r3, #0
 80186e4:	9303      	str	r3, [sp, #12]
 80186e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80186e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80186ec:	ab07      	add	r3, sp, #28
 80186ee:	4648      	mov	r0, r9
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	4633      	mov	r3, r6
 80186f4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80186f8:	f7fa fb15 	bl	8012d26 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80186fc:	b00c      	add	sp, #48	; 0x30
 80186fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018702:	bf00      	nop
 8018704:	0802f31c 	.word	0x0802f31c
 8018708:	0802f560 	.word	0x0802f560
 801870c:	0802f35e 	.word	0x0802f35e
 8018710:	20014ba8 	.word	0x20014ba8
 8018714:	0802f387 	.word	0x0802f387
 8018718:	20014bac 	.word	0x20014bac
 801871c:	20014bb0 	.word	0x20014bb0
 8018720:	20014ba4 	.word	0x20014ba4

08018724 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8018724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018728:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801872a:	4604      	mov	r4, r0
 801872c:	460e      	mov	r6, r1
 801872e:	b08e      	sub	sp, #56	; 0x38
 8018730:	b218      	sxth	r0, r3
 8018732:	8921      	ldrh	r1, [r4, #8]
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	8962      	ldrh	r2, [r4, #10]
 8018738:	f8ad 0000 	strh.w	r0, [sp]
 801873c:	b29b      	uxth	r3, r3
 801873e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8018742:	1ac9      	subs	r1, r1, r3
 8018744:	1ad3      	subs	r3, r2, r3
 8018746:	b209      	sxth	r1, r1
 8018748:	b21b      	sxth	r3, r3
 801874a:	2900      	cmp	r1, #0
 801874c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018750:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018754:	dd5e      	ble.n	8018814 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8018756:	2b00      	cmp	r3, #0
 8018758:	dd5c      	ble.n	8018814 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801875a:	6830      	ldr	r0, [r6, #0]
 801875c:	ab02      	add	r3, sp, #8
 801875e:	6871      	ldr	r1, [r6, #4]
 8018760:	c303      	stmia	r3!, {r0, r1}
 8018762:	4669      	mov	r1, sp
 8018764:	a802      	add	r0, sp, #8
 8018766:	f7fc ffa3 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801876a:	4620      	mov	r0, r4
 801876c:	a902      	add	r1, sp, #8
 801876e:	f7ff ff3f 	bl	80185f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8018772:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8018774:	2800      	cmp	r0, #0
 8018776:	d05f      	beq.n	8018838 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018778:	8963      	ldrh	r3, [r4, #10]
 801877a:	b202      	sxth	r2, r0
 801877c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018780:	2500      	movs	r5, #0
 8018782:	1a1f      	subs	r7, r3, r0
 8018784:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8018788:	f8ad 101c 	strh.w	r1, [sp, #28]
 801878c:	b21b      	sxth	r3, r3
 801878e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018792:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018796:	af04      	add	r7, sp, #16
 8018798:	1a09      	subs	r1, r1, r0
 801879a:	9506      	str	r5, [sp, #24]
 801879c:	f8ad 201e 	strh.w	r2, [sp, #30]
 80187a0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80187a4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80187a8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80187ac:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80187b0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80187b4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80187b8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80187bc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80187c0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80187c4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80187c8:	ab06      	add	r3, sp, #24
 80187ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80187ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80187d2:	e887 0003 	stmia.w	r7, {r0, r1}
 80187d6:	4631      	mov	r1, r6
 80187d8:	4638      	mov	r0, r7
 80187da:	f7fc ff69 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 80187de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	dd12      	ble.n	801880c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80187e6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	dd0e      	ble.n	801880c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80187ee:	6823      	ldr	r3, [r4, #0]
 80187f0:	4639      	mov	r1, r7
 80187f2:	4620      	mov	r0, r4
 80187f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187f6:	4798      	blx	r3
 80187f8:	f7f1 f8f4 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 80187fc:	6803      	ldr	r3, [r0, #0]
 80187fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018800:	4639      	mov	r1, r7
 8018802:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8018806:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801880a:	47c0      	blx	r8
 801880c:	3501      	adds	r5, #1
 801880e:	2d04      	cmp	r5, #4
 8018810:	d1da      	bne.n	80187c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8018812:	e011      	b.n	8018838 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018814:	6830      	ldr	r0, [r6, #0]
 8018816:	ab06      	add	r3, sp, #24
 8018818:	6871      	ldr	r1, [r6, #4]
 801881a:	c303      	stmia	r3!, {r0, r1}
 801881c:	6823      	ldr	r3, [r4, #0]
 801881e:	a906      	add	r1, sp, #24
 8018820:	4620      	mov	r0, r4
 8018822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018824:	4798      	blx	r3
 8018826:	f7f1 f8dd 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 801882a:	6803      	ldr	r3, [r0, #0]
 801882c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801882e:	a906      	add	r1, sp, #24
 8018830:	699d      	ldr	r5, [r3, #24]
 8018832:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018836:	47a8      	blx	r5
 8018838:	b00e      	add	sp, #56	; 0x38
 801883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801883e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801883e:	b570      	push	{r4, r5, r6, lr}
 8018840:	880b      	ldrh	r3, [r1, #0]
 8018842:	460d      	mov	r5, r1
 8018844:	4604      	mov	r4, r0
 8018846:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018848:	4608      	mov	r0, r1
 801884a:	f004 fd85 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801884e:	4606      	mov	r6, r0
 8018850:	4628      	mov	r0, r5
 8018852:	f004 fdbb 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018856:	6823      	ldr	r3, [r4, #0]
 8018858:	4605      	mov	r5, r0
 801885a:	b231      	sxth	r1, r6
 801885c:	4620      	mov	r0, r4
 801885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018860:	4798      	blx	r3
 8018862:	6823      	ldr	r3, [r4, #0]
 8018864:	b229      	sxth	r1, r5
 8018866:	4620      	mov	r0, r4
 8018868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801886a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801886e:	4718      	bx	r3

08018870 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018870:	b510      	push	{r4, lr}
 8018872:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018876:	4604      	mov	r4, r0
 8018878:	2bff      	cmp	r3, #255	; 0xff
 801887a:	d006      	beq.n	801888a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801887c:	2300      	movs	r3, #0
 801887e:	8003      	strh	r3, [r0, #0]
 8018880:	8043      	strh	r3, [r0, #2]
 8018882:	8083      	strh	r3, [r0, #4]
 8018884:	80c3      	strh	r3, [r0, #6]
 8018886:	4620      	mov	r0, r4
 8018888:	bd10      	pop	{r4, pc}
 801888a:	3126      	adds	r1, #38	; 0x26
 801888c:	f004 fdd8 	bl	801d440 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018890:	e7f9      	b.n	8018886 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08018894 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018898:	4604      	mov	r4, r0
 801889a:	b088      	sub	sp, #32
 801889c:	2500      	movs	r5, #0
 801889e:	460f      	mov	r7, r1
 80188a0:	f854 3b26 	ldr.w	r3, [r4], #38
 80188a4:	a904      	add	r1, sp, #16
 80188a6:	4606      	mov	r6, r0
 80188a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80188ae:	4798      	blx	r3
 80188b0:	4620      	mov	r0, r4
 80188b2:	f004 fd51 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188b6:	4680      	mov	r8, r0
 80188b8:	4620      	mov	r0, r4
 80188ba:	f004 fd87 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188be:	9506      	str	r5, [sp, #24]
 80188c0:	ad06      	add	r5, sp, #24
 80188c2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80188c6:	4639      	mov	r1, r7
 80188c8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80188cc:	4628      	mov	r0, r5
 80188ce:	f7fc feef 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 80188d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	dd19      	ble.n	801890e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80188da:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	dd15      	ble.n	801890e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80188e2:	4b0c      	ldr	r3, [pc, #48]	; (8018914 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80188ea:	b10a      	cbz	r2, 80188f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80188ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80188ee:	b900      	cbnz	r0, 80188f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80188f0:	6898      	ldr	r0, [r3, #8]
 80188f2:	2701      	movs	r7, #1
 80188f4:	6801      	ldr	r1, [r0, #0]
 80188f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80188fa:	9702      	str	r7, [sp, #8]
 80188fc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018900:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018904:	e9cd 5600 	strd	r5, r6, [sp]
 8018908:	688d      	ldr	r5, [r1, #8]
 801890a:	4621      	mov	r1, r4
 801890c:	47a8      	blx	r5
 801890e:	b008      	add	sp, #32
 8018910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018914:	20014b34 	.word	0x20014b34

08018918 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018918:	4b02      	ldr	r3, [pc, #8]	; (8018924 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801891a:	6018      	str	r0, [r3, #0]
 801891c:	4b02      	ldr	r3, [pc, #8]	; (8018928 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801891e:	6019      	str	r1, [r3, #0]
 8018920:	4770      	bx	lr
 8018922:	bf00      	nop
 8018924:	20014b3c 	.word	0x20014b3c
 8018928:	20014b50 	.word	0x20014b50

0801892c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	4c2b      	ldr	r4, [pc, #172]	; (80189dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8018930:	4b2b      	ldr	r3, [pc, #172]	; (80189e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8018932:	6821      	ldr	r1, [r4, #0]
 8018934:	681a      	ldr	r2, [r3, #0]
 8018936:	4281      	cmp	r1, r0
 8018938:	4d2a      	ldr	r5, [pc, #168]	; (80189e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801893a:	492b      	ldr	r1, [pc, #172]	; (80189e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801893c:	d108      	bne.n	8018950 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801893e:	682b      	ldr	r3, [r5, #0]
 8018940:	4293      	cmp	r3, r2
 8018942:	d105      	bne.n	8018950 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8018944:	6808      	ldr	r0, [r1, #0]
 8018946:	280f      	cmp	r0, #15
 8018948:	bf94      	ite	ls
 801894a:	2000      	movls	r0, #0
 801894c:	2001      	movhi	r0, #1
 801894e:	bd38      	pop	{r3, r4, r5, pc}
 8018950:	4b26      	ldr	r3, [pc, #152]	; (80189ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8018952:	6020      	str	r0, [r4, #0]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	602a      	str	r2, [r5, #0]
 8018958:	4298      	cmp	r0, r3
 801895a:	d905      	bls.n	8018968 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801895c:	4b24      	ldr	r3, [pc, #144]	; (80189f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801895e:	2137      	movs	r1, #55	; 0x37
 8018960:	4a24      	ldr	r2, [pc, #144]	; (80189f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018962:	4825      	ldr	r0, [pc, #148]	; (80189f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8018964:	f011 ff16 	bl	802a794 <__assert_func>
 8018968:	f010 0403 	ands.w	r4, r0, #3
 801896c:	bf1f      	itttt	ne
 801896e:	f1c4 0504 	rsbne	r5, r4, #4
 8018972:	3b04      	subne	r3, #4
 8018974:	1952      	addne	r2, r2, r5
 8018976:	191b      	addne	r3, r3, r4
 8018978:	4d20      	ldr	r5, [pc, #128]	; (80189fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801897a:	4402      	add	r2, r0
 801897c:	1a1b      	subs	r3, r3, r0
 801897e:	3001      	adds	r0, #1
 8018980:	602a      	str	r2, [r5, #0]
 8018982:	f020 0401 	bic.w	r4, r0, #1
 8018986:	42a3      	cmp	r3, r4
 8018988:	d203      	bcs.n	8018992 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801898a:	4b19      	ldr	r3, [pc, #100]	; (80189f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801898c:	214a      	movs	r1, #74	; 0x4a
 801898e:	4a19      	ldr	r2, [pc, #100]	; (80189f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018990:	e7e7      	b.n	8018962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018992:	f010 0002 	ands.w	r0, r0, #2
 8018996:	bf1f      	itttt	ne
 8018998:	f1c0 0504 	rsbne	r5, r0, #4
 801899c:	1952      	addne	r2, r2, r5
 801899e:	1f05      	subne	r5, r0, #4
 80189a0:	195b      	addne	r3, r3, r5
 80189a2:	4422      	add	r2, r4
 80189a4:	4d16      	ldr	r5, [pc, #88]	; (8018a00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80189a6:	1b1b      	subs	r3, r3, r4
 80189a8:	602a      	str	r2, [r5, #0]
 80189aa:	429c      	cmp	r4, r3
 80189ac:	d903      	bls.n	80189b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80189ae:	4b10      	ldr	r3, [pc, #64]	; (80189f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80189b0:	215d      	movs	r1, #93	; 0x5d
 80189b2:	4a10      	ldr	r2, [pc, #64]	; (80189f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80189b4:	e7d5      	b.n	8018962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80189b6:	b120      	cbz	r0, 80189c2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80189b8:	f1c0 0504 	rsb	r5, r0, #4
 80189bc:	3804      	subs	r0, #4
 80189be:	442a      	add	r2, r5
 80189c0:	4403      	add	r3, r0
 80189c2:	1b1b      	subs	r3, r3, r4
 80189c4:	4422      	add	r2, r4
 80189c6:	480f      	ldr	r0, [pc, #60]	; (8018a04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80189c8:	2b0f      	cmp	r3, #15
 80189ca:	600b      	str	r3, [r1, #0]
 80189cc:	6002      	str	r2, [r0, #0]
 80189ce:	d803      	bhi.n	80189d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80189d0:	4b0d      	ldr	r3, [pc, #52]	; (8018a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80189d2:	2170      	movs	r1, #112	; 0x70
 80189d4:	4a07      	ldr	r2, [pc, #28]	; (80189f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80189d6:	e7c4      	b.n	8018962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80189d8:	2001      	movs	r0, #1
 80189da:	e7b8      	b.n	801894e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80189dc:	20014b44 	.word	0x20014b44
 80189e0:	20014b3c 	.word	0x20014b3c
 80189e4:	20014b4c 	.word	0x20014b4c
 80189e8:	20014b54 	.word	0x20014b54
 80189ec:	20014b50 	.word	0x20014b50
 80189f0:	0802f65c 	.word	0x0802f65c
 80189f4:	0802f724 	.word	0x0802f724
 80189f8:	0802f695 	.word	0x0802f695
 80189fc:	20014b58 	.word	0x20014b58
 8018a00:	20014b48 	.word	0x20014b48
 8018a04:	20014b40 	.word	0x20014b40
 8018a08:	0802f6df 	.word	0x0802f6df

08018a0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8018a0c:	4b04      	ldr	r3, [pc, #16]	; (8018a20 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8018a0e:	6818      	ldr	r0, [r3, #0]
 8018a10:	b120      	cbz	r0, 8018a1c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8018a12:	4b04      	ldr	r3, [pc, #16]	; (8018a24 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8018a14:	6818      	ldr	r0, [r3, #0]
 8018a16:	3000      	adds	r0, #0
 8018a18:	bf18      	it	ne
 8018a1a:	2001      	movne	r0, #1
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	20014b3c 	.word	0x20014b3c
 8018a24:	20014b50 	.word	0x20014b50

08018a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8018a28:	4b01      	ldr	r3, [pc, #4]	; (8018a30 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8018a2a:	6818      	ldr	r0, [r3, #0]
 8018a2c:	4770      	bx	lr
 8018a2e:	bf00      	nop
 8018a30:	20014b44 	.word	0x20014b44

08018a34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8018a34:	4b01      	ldr	r3, [pc, #4]	; (8018a3c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8018a36:	6818      	ldr	r0, [r3, #0]
 8018a38:	4770      	bx	lr
 8018a3a:	bf00      	nop
 8018a3c:	20014b4c 	.word	0x20014b4c

08018a40 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8018a40:	4b01      	ldr	r3, [pc, #4]	; (8018a48 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8018a42:	6818      	ldr	r0, [r3, #0]
 8018a44:	4770      	bx	lr
 8018a46:	bf00      	nop
 8018a48:	20014b58 	.word	0x20014b58

08018a4c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8018a4c:	4b01      	ldr	r3, [pc, #4]	; (8018a54 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8018a4e:	6818      	ldr	r0, [r3, #0]
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop
 8018a54:	20014b48 	.word	0x20014b48

08018a58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018a58:	4b01      	ldr	r3, [pc, #4]	; (8018a60 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018a5a:	6818      	ldr	r0, [r3, #0]
 8018a5c:	4770      	bx	lr
 8018a5e:	bf00      	nop
 8018a60:	20014b40 	.word	0x20014b40

08018a64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018a64:	4b01      	ldr	r3, [pc, #4]	; (8018a6c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018a66:	6818      	ldr	r0, [r3, #0]
 8018a68:	4770      	bx	lr
 8018a6a:	bf00      	nop
 8018a6c:	20014b54 	.word	0x20014b54

08018a70 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018a70:	2000      	movs	r0, #0
 8018a72:	4770      	bx	lr

08018a74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a78:	b08d      	sub	sp, #52	; 0x34
 8018a7a:	4688      	mov	r8, r1
 8018a7c:	f8d3 c000 	ldr.w	ip, [r3]
 8018a80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018a82:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018a86:	680f      	ldr	r7, [r1, #0]
 8018a88:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018a8c:	eba7 070c 	sub.w	r7, r7, ip
 8018a90:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018a94:	edd3 6a07 	vldr	s13, [r3, #28]
 8018a98:	42bc      	cmp	r4, r7
 8018a9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018a9c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018aa0:	bfa8      	it	ge
 8018aa2:	463c      	movge	r4, r7
 8018aa4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018aa8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018aac:	ee07 4a90 	vmov	s15, r4
 8018ab0:	eb09 0e0c 	add.w	lr, r9, ip
 8018ab4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018ab8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018abc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018ac0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018ac4:	4571      	cmp	r1, lr
 8018ac6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018aca:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018ace:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018ad2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018ad6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018ada:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018ade:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018ae2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018ae6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018aea:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018aee:	f340 808c 	ble.w	8018c0a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018af2:	eba1 060e 	sub.w	r6, r1, lr
 8018af6:	fb96 f5f4 	sdiv	r5, r6, r4
 8018afa:	ee07 5a10 	vmov	s14, r5
 8018afe:	2d00      	cmp	r5, #0
 8018b00:	fb04 6615 	mls	r6, r4, r5, r6
 8018b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b08:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018b0c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018b10:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018b14:	dd12      	ble.n	8018b3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018b16:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018b1a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018b1e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018b22:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b2a:	bf14      	ite	ne
 8018b2c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018b30:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018b34:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018b38:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018b3c:	fb05 f204 	mul.w	r2, r5, r4
 8018b40:	1abf      	subs	r7, r7, r2
 8018b42:	4494      	add	ip, r2
 8018b44:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018b48:	4411      	add	r1, r2
 8018b4a:	eb09 020c 	add.w	r2, r9, ip
 8018b4e:	b209      	sxth	r1, r1
 8018b50:	443a      	add	r2, r7
 8018b52:	428a      	cmp	r2, r1
 8018b54:	bfc4      	itt	gt
 8018b56:	eba1 0209 	subgt.w	r2, r1, r9
 8018b5a:	eba2 070c 	subgt.w	r7, r2, ip
 8018b5e:	2f00      	cmp	r7, #0
 8018b60:	dd50      	ble.n	8018c04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018b62:	fb97 f1f4 	sdiv	r1, r7, r4
 8018b66:	fb04 7211 	mls	r2, r4, r1, r7
 8018b6a:	b90a      	cbnz	r2, 8018b70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018b6c:	3901      	subs	r1, #1
 8018b6e:	4622      	mov	r2, r4
 8018b70:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018b74:	6840      	ldr	r0, [r0, #4]
 8018b76:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018b7a:	44b6      	add	lr, r6
 8018b7c:	f8d0 a000 	ldr.w	sl, [r0]
 8018b80:	2900      	cmp	r1, #0
 8018b82:	bfcc      	ite	gt
 8018b84:	46a1      	movgt	r9, r4
 8018b86:	4691      	movle	r9, r2
 8018b88:	900b      	str	r0, [sp, #44]	; 0x2c
 8018b8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018b8c:	fb04 e505 	mla	r5, r4, r5, lr
 8018b90:	eef0 6a42 	vmov.f32	s13, s4
 8018b94:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018b98:	9008      	str	r0, [sp, #32]
 8018b9a:	eeb0 7a61 	vmov.f32	s14, s3
 8018b9e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018ba0:	695b      	ldr	r3, [r3, #20]
 8018ba2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ba6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018baa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018bae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018bb0:	445b      	add	r3, fp
 8018bb2:	9307      	str	r3, [sp, #28]
 8018bb4:	ee16 3a90 	vmov	r3, s13
 8018bb8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018bbc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018bc0:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018bc4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018bc8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018bcc:	ee17 7a90 	vmov	r7, s15
 8018bd0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018bd4:	fb97 f7f4 	sdiv	r7, r7, r4
 8018bd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018bdc:	ee17 ca90 	vmov	ip, s15
 8018be0:	fb9c fcf4 	sdiv	ip, ip, r4
 8018be4:	fb0c 3306 	mla	r3, ip, r6, r3
 8018be8:	9302      	str	r3, [sp, #8]
 8018bea:	ee17 3a10 	vmov	r3, s14
 8018bee:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018bf2:	fb07 3706 	mla	r7, r7, r6, r3
 8018bf6:	eba9 0306 	sub.w	r3, r9, r6
 8018bfa:	e9cd 4700 	strd	r4, r7, [sp]
 8018bfe:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018c02:	47a0      	blx	r4
 8018c04:	b00d      	add	sp, #52	; 0x34
 8018c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0a:	2500      	movs	r5, #0
 8018c0c:	462e      	mov	r6, r5
 8018c0e:	e799      	b.n	8018b44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c14:	b0db      	sub	sp, #364	; 0x16c
 8018c16:	461d      	mov	r5, r3
 8018c18:	4614      	mov	r4, r2
 8018c1a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018c1e:	910f      	str	r1, [sp, #60]	; 0x3c
 8018c20:	4629      	mov	r1, r5
 8018c22:	930a      	str	r3, [sp, #40]	; 0x28
 8018c24:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018c28:	9009      	str	r0, [sp, #36]	; 0x24
 8018c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c2c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018c30:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018c34:	9310      	str	r3, [sp, #64]	; 0x40
 8018c36:	6803      	ldr	r3, [r0, #0]
 8018c38:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8018c3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018c3e:	47b8      	blx	r7
 8018c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c42:	6058      	str	r0, [r3, #4]
 8018c44:	2800      	cmp	r0, #0
 8018c46:	f000 83a1 	beq.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018c4a:	682b      	ldr	r3, [r5, #0]
 8018c4c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018c50:	ed94 7a02 	vldr	s14, [r4, #8]
 8018c54:	9314      	str	r3, [sp, #80]	; 0x50
 8018c56:	686b      	ldr	r3, [r5, #4]
 8018c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c5c:	9315      	str	r3, [sp, #84]	; 0x54
 8018c5e:	4bc1      	ldr	r3, [pc, #772]	; (8018f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018c60:	7819      	ldrb	r1, [r3, #0]
 8018c62:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018c66:	2900      	cmp	r1, #0
 8018c68:	bf16      	itet	ne
 8018c6a:	4619      	movne	r1, r3
 8018c6c:	4611      	moveq	r1, r2
 8018c6e:	4613      	movne	r3, r2
 8018c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c74:	9116      	str	r1, [sp, #88]	; 0x58
 8018c76:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018c7a:	f240 8387 	bls.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018c7e:	ed94 7a07 	vldr	s14, [r4, #28]
 8018c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8a:	f240 837f 	bls.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018c8e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8018c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c9a:	f240 8377 	bls.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018c9e:	6822      	ldr	r2, [r4, #0]
 8018ca0:	4bb1      	ldr	r3, [pc, #708]	; (8018f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	f2c0 8372 	blt.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018ca8:	49b0      	ldr	r1, [pc, #704]	; (8018f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018caa:	6963      	ldr	r3, [r4, #20]
 8018cac:	428a      	cmp	r2, r1
 8018cae:	f300 836d 	bgt.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cb2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018cb6:	48ae      	ldr	r0, [pc, #696]	; (8018f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018cb8:	33ff      	adds	r3, #255	; 0xff
 8018cba:	4283      	cmp	r3, r0
 8018cbc:	f200 8366 	bhi.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018cc2:	4dac      	ldr	r5, [pc, #688]	; (8018f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018cc4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018cc8:	33ff      	adds	r3, #255	; 0xff
 8018cca:	42ab      	cmp	r3, r5
 8018ccc:	f200 835e 	bhi.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cd0:	6862      	ldr	r2, [r4, #4]
 8018cd2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018cd6:	33ff      	adds	r3, #255	; 0xff
 8018cd8:	4283      	cmp	r3, r0
 8018cda:	f200 8357 	bhi.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cde:	69a1      	ldr	r1, [r4, #24]
 8018ce0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018ce4:	33ff      	adds	r3, #255	; 0xff
 8018ce6:	4283      	cmp	r3, r0
 8018ce8:	f200 8350 	bhi.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018cee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8018cf2:	30ff      	adds	r0, #255	; 0xff
 8018cf4:	42a8      	cmp	r0, r5
 8018cf6:	f200 8349 	bhi.w	801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018cfa:	428a      	cmp	r2, r1
 8018cfc:	f280 8110 	bge.w	8018f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018d00:	429a      	cmp	r2, r3
 8018d02:	f300 8119 	bgt.w	8018f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018d06:	4299      	cmp	r1, r3
 8018d08:	f280 811d 	bge.w	8018f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018d0c:	2502      	movs	r5, #2
 8018d0e:	2701      	movs	r7, #1
 8018d10:	46a9      	mov	r9, r5
 8018d12:	46b8      	mov	r8, r7
 8018d14:	f04f 0a00 	mov.w	sl, #0
 8018d18:	4621      	mov	r1, r4
 8018d1a:	a849      	add	r0, sp, #292	; 0x124
 8018d1c:	f003 fcea 	bl	801c6f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018d20:	4622      	mov	r2, r4
 8018d22:	4653      	mov	r3, sl
 8018d24:	a949      	add	r1, sp, #292	; 0x124
 8018d26:	f8cd 9000 	str.w	r9, [sp]
 8018d2a:	a819      	add	r0, sp, #100	; 0x64
 8018d2c:	f003 fe12 	bl	801c954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018d30:	4622      	mov	r2, r4
 8018d32:	4653      	mov	r3, sl
 8018d34:	a949      	add	r1, sp, #292	; 0x124
 8018d36:	f8cd 8000 	str.w	r8, [sp]
 8018d3a:	a829      	add	r0, sp, #164	; 0xa4
 8018d3c:	f003 fe0a 	bl	801c954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018d40:	4643      	mov	r3, r8
 8018d42:	4622      	mov	r2, r4
 8018d44:	a949      	add	r1, sp, #292	; 0x124
 8018d46:	f8cd 9000 	str.w	r9, [sp]
 8018d4a:	a839      	add	r0, sp, #228	; 0xe4
 8018d4c:	f003 fe02 	bl	801c954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018d50:	42af      	cmp	r7, r5
 8018d52:	af12      	add	r7, sp, #72	; 0x48
 8018d54:	bfb7      	itett	lt
 8018d56:	2300      	movlt	r3, #0
 8018d58:	2301      	movge	r3, #1
 8018d5a:	ad29      	addlt	r5, sp, #164	; 0xa4
 8018d5c:	ac19      	addlt	r4, sp, #100	; 0x64
 8018d5e:	bfb1      	iteee	lt
 8018d60:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018d62:	ad19      	addge	r5, sp, #100	; 0x64
 8018d64:	930e      	strge	r3, [sp, #56]	; 0x38
 8018d66:	ac29      	addge	r4, sp, #164	; 0xa4
 8018d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018d6e:	e887 0003 	stmia.w	r7, {r0, r1}
 8018d72:	b928      	cbnz	r0, 8018d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018d74:	4b80      	ldr	r3, [pc, #512]	; (8018f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018d76:	6818      	ldr	r0, [r3, #0]
 8018d78:	6803      	ldr	r3, [r0, #0]
 8018d7a:	6a1b      	ldr	r3, [r3, #32]
 8018d7c:	4798      	blx	r3
 8018d7e:	6038      	str	r0, [r7, #0]
 8018d80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d82:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d8a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8018d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d90:	6963      	ldr	r3, [r4, #20]
 8018d92:	440b      	add	r3, r1
 8018d94:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d98:	4408      	add	r0, r1
 8018d9a:	b200      	sxth	r0, r0
 8018d9c:	4283      	cmp	r3, r0
 8018d9e:	900d      	str	r0, [sp, #52]	; 0x34
 8018da0:	f280 80dd 	bge.w	8018f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018da4:	428b      	cmp	r3, r1
 8018da6:	da08      	bge.n	8018dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018da8:	2a00      	cmp	r2, #0
 8018daa:	dd06      	ble.n	8018dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018dac:	1acb      	subs	r3, r1, r3
 8018dae:	429a      	cmp	r2, r3
 8018db0:	f2c0 80e4 	blt.w	8018f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	f300 80e2 	bgt.w	8018f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018dba:	6967      	ldr	r7, [r4, #20]
 8018dbc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018dc2:	443b      	add	r3, r7
 8018dc4:	461f      	mov	r7, r3
 8018dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dc8:	1bdf      	subs	r7, r3, r7
 8018dca:	4297      	cmp	r7, r2
 8018dcc:	bfa8      	it	ge
 8018dce:	4617      	movge	r7, r2
 8018dd0:	2f00      	cmp	r7, #0
 8018dd2:	f340 8166 	ble.w	80190a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018dd6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018dd8:	6829      	ldr	r1, [r5, #0]
 8018dda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018dde:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018de2:	4411      	add	r1, r2
 8018de4:	6820      	ldr	r0, [r4, #0]
 8018de6:	4299      	cmp	r1, r3
 8018de8:	dd1a      	ble.n	8018e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018dea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018dee:	4402      	add	r2, r0
 8018df0:	440b      	add	r3, r1
 8018df2:	b21b      	sxth	r3, r3
 8018df4:	429a      	cmp	r2, r3
 8018df6:	dc13      	bgt.n	8018e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018df8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018dfa:	a912      	add	r1, sp, #72	; 0x48
 8018dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	9206      	str	r2, [sp, #24]
 8018e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e06:	9500      	str	r5, [sp, #0]
 8018e08:	9205      	str	r2, [sp, #20]
 8018e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e0c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018e10:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018e12:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018e16:	aa49      	add	r2, sp, #292	; 0x124
 8018e18:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8018e1c:	4623      	mov	r3, r4
 8018e1e:	47c8      	blx	r9
 8018e20:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018e24:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018e28:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e30:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018e34:	68a1      	ldr	r1, [r4, #8]
 8018e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e3a:	ed94 6a08 	vldr	s12, [r4, #32]
 8018e3e:	edd4 6a07 	vldr	s13, [r4, #28]
 8018e42:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e4a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e52:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e56:	441a      	add	r2, r3
 8018e58:	6963      	ldr	r3, [r4, #20]
 8018e5a:	3301      	adds	r3, #1
 8018e5c:	6022      	str	r2, [r4, #0]
 8018e5e:	6163      	str	r3, [r4, #20]
 8018e60:	69a3      	ldr	r3, [r4, #24]
 8018e62:	3b01      	subs	r3, #1
 8018e64:	61a3      	str	r3, [r4, #24]
 8018e66:	6923      	ldr	r3, [r4, #16]
 8018e68:	440b      	add	r3, r1
 8018e6a:	68e1      	ldr	r1, [r4, #12]
 8018e6c:	428b      	cmp	r3, r1
 8018e6e:	6123      	str	r3, [r4, #16]
 8018e70:	db15      	blt.n	8018e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018e72:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018e76:	3201      	adds	r2, #1
 8018e78:	1a5b      	subs	r3, r3, r1
 8018e7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e7e:	6022      	str	r2, [r4, #0]
 8018e80:	6123      	str	r3, [r4, #16]
 8018e82:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e86:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018e8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e8e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e92:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e9a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e9e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018ea2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018ea6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018eae:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018eb2:	68a9      	ldr	r1, [r5, #8]
 8018eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018eb8:	ed95 6a08 	vldr	s12, [r5, #32]
 8018ebc:	edd5 6a07 	vldr	s13, [r5, #28]
 8018ec0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018ec4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018ec8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018ecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018ed0:	edc5 6a07 	vstr	s13, [r5, #28]
 8018ed4:	441a      	add	r2, r3
 8018ed6:	696b      	ldr	r3, [r5, #20]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	602a      	str	r2, [r5, #0]
 8018edc:	616b      	str	r3, [r5, #20]
 8018ede:	69ab      	ldr	r3, [r5, #24]
 8018ee0:	3b01      	subs	r3, #1
 8018ee2:	61ab      	str	r3, [r5, #24]
 8018ee4:	692b      	ldr	r3, [r5, #16]
 8018ee6:	440b      	add	r3, r1
 8018ee8:	68e9      	ldr	r1, [r5, #12]
 8018eea:	428b      	cmp	r3, r1
 8018eec:	612b      	str	r3, [r5, #16]
 8018eee:	db15      	blt.n	8018f1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018ef0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018ef4:	3201      	adds	r2, #1
 8018ef6:	1a5b      	subs	r3, r3, r1
 8018ef8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018efc:	602a      	str	r2, [r5, #0]
 8018efe:	612b      	str	r3, [r5, #16]
 8018f00:	edc5 6a07 	vstr	s13, [r5, #28]
 8018f04:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018f08:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018f0c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018f10:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f18:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018f1c:	3f01      	subs	r7, #1
 8018f1e:	e757      	b.n	8018dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018f20:	4299      	cmp	r1, r3
 8018f22:	dc13      	bgt.n	8018f4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018f24:	429a      	cmp	r2, r3
 8018f26:	da14      	bge.n	8018f52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018f28:	2502      	movs	r5, #2
 8018f2a:	2703      	movs	r7, #3
 8018f2c:	f04f 0800 	mov.w	r8, #0
 8018f30:	46a9      	mov	r9, r5
 8018f32:	f04f 0a01 	mov.w	sl, #1
 8018f36:	e6ef      	b.n	8018d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018f38:	2501      	movs	r5, #1
 8018f3a:	2700      	movs	r7, #0
 8018f3c:	46a9      	mov	r9, r5
 8018f3e:	46b8      	mov	r8, r7
 8018f40:	f04f 0a02 	mov.w	sl, #2
 8018f44:	e6e8      	b.n	8018d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018f46:	2501      	movs	r5, #1
 8018f48:	2702      	movs	r7, #2
 8018f4a:	e6e1      	b.n	8018d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018f4c:	2500      	movs	r5, #0
 8018f4e:	2701      	movs	r7, #1
 8018f50:	e7f4      	b.n	8018f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018f52:	2702      	movs	r7, #2
 8018f54:	2503      	movs	r5, #3
 8018f56:	f04f 0900 	mov.w	r9, #0
 8018f5a:	46b8      	mov	r8, r7
 8018f5c:	e7e9      	b.n	8018f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018f5e:	4613      	mov	r3, r2
 8018f60:	e728      	b.n	8018db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018f62:	bf00      	nop
 8018f64:	20014b2c 	.word	0x20014b2c
 8018f68:	fffd8f01 	.word	0xfffd8f01
 8018f6c:	00027100 	.word	0x00027100
 8018f70:	0004e1ff 	.word	0x0004e1ff
 8018f74:	0004e1fe 	.word	0x0004e1fe
 8018f78:	20014b34 	.word	0x20014b34
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018f80:	469e      	mov	lr, r3
 8018f82:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018f84:	469c      	mov	ip, r3
 8018f86:	9111      	str	r1, [sp, #68]	; 0x44
 8018f88:	f04f 0900 	mov.w	r9, #0
 8018f8c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018f90:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018f94:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018f98:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018f9c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018fa0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018fa4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018fa8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018fac:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018fb0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018fb4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018fb8:	f1bc 0f00 	cmp.w	ip, #0
 8018fbc:	d147      	bne.n	801904e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018fbe:	eb03 0c07 	add.w	ip, r3, r7
 8018fc2:	1ad7      	subs	r7, r2, r3
 8018fc4:	f1b9 0f00 	cmp.w	r9, #0
 8018fc8:	d009      	beq.n	8018fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018fca:	9029      	str	r0, [sp, #164]	; 0xa4
 8018fcc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018fd0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018fd4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018fd8:	912d      	str	r1, [sp, #180]	; 0xb4
 8018fda:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018fde:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018fe0:	f04f 0800 	mov.w	r8, #0
 8018fe4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018fe8:	9111      	str	r1, [sp, #68]	; 0x44
 8018fea:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018fee:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018ff2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018ff6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018ffa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018ffe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019002:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019006:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801900a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801900e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019012:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019016:	f1be 0f00 	cmp.w	lr, #0
 801901a:	d031      	beq.n	8019080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801901c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801901e:	4450      	add	r0, sl
 8019020:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019024:	4431      	add	r1, r6
 8019026:	ee37 7a04 	vadd.f32	s14, s14, s8
 801902a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801902e:	4549      	cmp	r1, r9
 8019030:	db08      	blt.n	8019044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019032:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019036:	3001      	adds	r0, #1
 8019038:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801903c:	eba1 0109 	sub.w	r1, r1, r9
 8019040:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019044:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019048:	f04f 0801 	mov.w	r8, #1
 801904c:	e7e3      	b.n	8019016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801904e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019050:	4450      	add	r0, sl
 8019052:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019056:	4431      	add	r1, r6
 8019058:	ee77 7a84 	vadd.f32	s15, s15, s8
 801905c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019060:	4541      	cmp	r1, r8
 8019062:	db08      	blt.n	8019076 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019064:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019068:	3001      	adds	r0, #1
 801906a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801906e:	eba1 0108 	sub.w	r1, r1, r8
 8019072:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019076:	f10c 3cff 	add.w	ip, ip, #4294967295
 801907a:	f04f 0901 	mov.w	r9, #1
 801907e:	e79b      	b.n	8018fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019080:	449c      	add	ip, r3
 8019082:	1aff      	subs	r7, r7, r3
 8019084:	f1b8 0f00 	cmp.w	r8, #0
 8019088:	d009      	beq.n	801909e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801908a:	9019      	str	r0, [sp, #100]	; 0x64
 801908c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019090:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019094:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019098:	911d      	str	r1, [sp, #116]	; 0x74
 801909a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801909e:	1ad2      	subs	r2, r2, r3
 80190a0:	e68b      	b.n	8018dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80190a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	f000 80d1 	beq.w	801924e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80190ac:	ad19      	add	r5, sp, #100	; 0x64
 80190ae:	ac39      	add	r4, sp, #228	; 0xe4
 80190b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80190b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80190b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80190ba:	930c      	str	r3, [sp, #48]	; 0x30
 80190bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190be:	6963      	ldr	r3, [r4, #20]
 80190c0:	440b      	add	r3, r1
 80190c2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80190c6:	4408      	add	r0, r1
 80190c8:	b200      	sxth	r0, r0
 80190ca:	4283      	cmp	r3, r0
 80190cc:	900d      	str	r0, [sp, #52]	; 0x34
 80190ce:	f280 80c1 	bge.w	8019254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80190d2:	428b      	cmp	r3, r1
 80190d4:	da08      	bge.n	80190e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80190d6:	2a00      	cmp	r2, #0
 80190d8:	dd06      	ble.n	80190e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80190da:	1acb      	subs	r3, r1, r3
 80190dc:	429a      	cmp	r2, r3
 80190de:	f2c0 80bb 	blt.w	8019258 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f300 80b9 	bgt.w	801925a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80190e8:	6967      	ldr	r7, [r4, #20]
 80190ea:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80190ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190f0:	443b      	add	r3, r7
 80190f2:	461f      	mov	r7, r3
 80190f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190f6:	1bdf      	subs	r7, r3, r7
 80190f8:	4297      	cmp	r7, r2
 80190fa:	bfa8      	it	ge
 80190fc:	4617      	movge	r7, r2
 80190fe:	2f00      	cmp	r7, #0
 8019100:	f340 813c 	ble.w	801937c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019104:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019106:	6829      	ldr	r1, [r5, #0]
 8019108:	f9b3 2000 	ldrsh.w	r2, [r3]
 801910c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019110:	4411      	add	r1, r2
 8019112:	6820      	ldr	r0, [r4, #0]
 8019114:	4299      	cmp	r1, r3
 8019116:	dd1a      	ble.n	801914e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019118:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801911c:	4402      	add	r2, r0
 801911e:	440b      	add	r3, r1
 8019120:	b21b      	sxth	r3, r3
 8019122:	429a      	cmp	r2, r3
 8019124:	dc13      	bgt.n	801914e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019126:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019128:	a912      	add	r1, sp, #72	; 0x48
 801912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	9206      	str	r2, [sp, #24]
 8019132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019134:	9500      	str	r5, [sp, #0]
 8019136:	9205      	str	r2, [sp, #20]
 8019138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801913a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801913e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019140:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019144:	aa49      	add	r2, sp, #292	; 0x124
 8019146:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801914a:	4623      	mov	r3, r4
 801914c:	47c8      	blx	r9
 801914e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019152:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019156:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801915a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801915e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019162:	68a1      	ldr	r1, [r4, #8]
 8019164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019168:	ed94 6a08 	vldr	s12, [r4, #32]
 801916c:	edd4 6a07 	vldr	s13, [r4, #28]
 8019170:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019174:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019178:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801917c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019180:	edc4 6a07 	vstr	s13, [r4, #28]
 8019184:	441a      	add	r2, r3
 8019186:	6963      	ldr	r3, [r4, #20]
 8019188:	3301      	adds	r3, #1
 801918a:	6022      	str	r2, [r4, #0]
 801918c:	6163      	str	r3, [r4, #20]
 801918e:	69a3      	ldr	r3, [r4, #24]
 8019190:	3b01      	subs	r3, #1
 8019192:	61a3      	str	r3, [r4, #24]
 8019194:	6923      	ldr	r3, [r4, #16]
 8019196:	440b      	add	r3, r1
 8019198:	68e1      	ldr	r1, [r4, #12]
 801919a:	428b      	cmp	r3, r1
 801919c:	6123      	str	r3, [r4, #16]
 801919e:	db15      	blt.n	80191cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80191a0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80191a4:	3201      	adds	r2, #1
 80191a6:	1a5b      	subs	r3, r3, r1
 80191a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80191ac:	6022      	str	r2, [r4, #0]
 80191ae:	6123      	str	r3, [r4, #16]
 80191b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80191b4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80191b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80191bc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80191c0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80191c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80191cc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80191d0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80191d4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80191d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80191dc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80191e0:	68a9      	ldr	r1, [r5, #8]
 80191e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80191e6:	ed95 6a08 	vldr	s12, [r5, #32]
 80191ea:	edd5 6a07 	vldr	s13, [r5, #28]
 80191ee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80191f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80191f6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80191fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80191fe:	edc5 6a07 	vstr	s13, [r5, #28]
 8019202:	441a      	add	r2, r3
 8019204:	696b      	ldr	r3, [r5, #20]
 8019206:	3301      	adds	r3, #1
 8019208:	602a      	str	r2, [r5, #0]
 801920a:	616b      	str	r3, [r5, #20]
 801920c:	69ab      	ldr	r3, [r5, #24]
 801920e:	3b01      	subs	r3, #1
 8019210:	61ab      	str	r3, [r5, #24]
 8019212:	692b      	ldr	r3, [r5, #16]
 8019214:	440b      	add	r3, r1
 8019216:	68e9      	ldr	r1, [r5, #12]
 8019218:	428b      	cmp	r3, r1
 801921a:	612b      	str	r3, [r5, #16]
 801921c:	db15      	blt.n	801924a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801921e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019222:	3201      	adds	r2, #1
 8019224:	1a5b      	subs	r3, r3, r1
 8019226:	ee76 6a26 	vadd.f32	s13, s12, s13
 801922a:	602a      	str	r2, [r5, #0]
 801922c:	612b      	str	r3, [r5, #16]
 801922e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019232:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019236:	ee36 7a87 	vadd.f32	s14, s13, s14
 801923a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801923e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019246:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801924a:	3f01      	subs	r7, #1
 801924c:	e757      	b.n	80190fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801924e:	ad39      	add	r5, sp, #228	; 0xe4
 8019250:	ac19      	add	r4, sp, #100	; 0x64
 8019252:	e72d      	b.n	80190b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019254:	4613      	mov	r3, r2
 8019256:	e744      	b.n	80190e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019258:	4613      	mov	r3, r2
 801925a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801925c:	469e      	mov	lr, r3
 801925e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019262:	461f      	mov	r7, r3
 8019264:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019268:	f04f 0900 	mov.w	r9, #0
 801926c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019270:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019274:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019278:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801927c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019280:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019282:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019286:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801928a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801928e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019292:	960e      	str	r6, [sp, #56]	; 0x38
 8019294:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019298:	2f00      	cmp	r7, #0
 801929a:	d146      	bne.n	801932a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801929c:	449c      	add	ip, r3
 801929e:	1ad7      	subs	r7, r2, r3
 80192a0:	f1b9 0f00 	cmp.w	r9, #0
 80192a4:	d009      	beq.n	80192ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80192a6:	9039      	str	r0, [sp, #228]	; 0xe4
 80192a8:	913d      	str	r1, [sp, #244]	; 0xf4
 80192aa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80192ae:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80192b2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80192b6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80192ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80192bc:	f04f 0800 	mov.w	r8, #0
 80192c0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80192c4:	910e      	str	r1, [sp, #56]	; 0x38
 80192c6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80192ca:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80192ce:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80192d2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80192d6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80192da:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80192de:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80192e2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80192e6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80192ea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80192ee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80192f2:	f1be 0f00 	cmp.w	lr, #0
 80192f6:	d030      	beq.n	801935a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80192f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80192fa:	4450      	add	r0, sl
 80192fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019300:	4431      	add	r1, r6
 8019302:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019306:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801930a:	4549      	cmp	r1, r9
 801930c:	db08      	blt.n	8019320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801930e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019312:	3001      	adds	r0, #1
 8019314:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019318:	eba1 0109 	sub.w	r1, r1, r9
 801931c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019320:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019324:	f04f 0801 	mov.w	r8, #1
 8019328:	e7e3      	b.n	80192f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801932a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801932c:	4450      	add	r0, sl
 801932e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019332:	4431      	add	r1, r6
 8019334:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019338:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801933c:	4541      	cmp	r1, r8
 801933e:	db08      	blt.n	8019352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019340:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019344:	3001      	adds	r0, #1
 8019346:	ee37 7a25 	vadd.f32	s14, s14, s11
 801934a:	eba1 0108 	sub.w	r1, r1, r8
 801934e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019352:	3f01      	subs	r7, #1
 8019354:	f04f 0901 	mov.w	r9, #1
 8019358:	e79e      	b.n	8019298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801935a:	449c      	add	ip, r3
 801935c:	1aff      	subs	r7, r7, r3
 801935e:	f1b8 0f00 	cmp.w	r8, #0
 8019362:	d009      	beq.n	8019378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019364:	9019      	str	r0, [sp, #100]	; 0x64
 8019366:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801936a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801936e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019372:	911d      	str	r1, [sp, #116]	; 0x74
 8019374:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019378:	1ad2      	subs	r2, r2, r3
 801937a:	e6b5      	b.n	80190e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801937c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	b923      	cbnz	r3, 801938c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019382:	4b04      	ldr	r3, [pc, #16]	; (8019394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019384:	6818      	ldr	r0, [r3, #0]
 8019386:	6803      	ldr	r3, [r0, #0]
 8019388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801938a:	4798      	blx	r3
 801938c:	b05b      	add	sp, #364	; 0x16c
 801938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019392:	bf00      	nop
 8019394:	20014b34 	.word	0x20014b34

08019398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019398:	b570      	push	{r4, r5, r6, lr}
 801939a:	4604      	mov	r4, r0
 801939c:	2500      	movs	r5, #0
 801939e:	9804      	ldr	r0, [sp, #16]
 80193a0:	7223      	strb	r3, [r4, #8]
 80193a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80193a6:	8025      	strh	r5, [r4, #0]
 80193a8:	6061      	str	r1, [r4, #4]
 80193aa:	7263      	strb	r3, [r4, #9]
 80193ac:	60e0      	str	r0, [r4, #12]
 80193ae:	8222      	strh	r2, [r4, #16]
 80193b0:	8265      	strh	r5, [r4, #18]
 80193b2:	82a5      	strh	r5, [r4, #20]
 80193b4:	82e5      	strh	r5, [r4, #22]
 80193b6:	8325      	strh	r5, [r4, #24]
 80193b8:	8365      	strh	r5, [r4, #26]
 80193ba:	83a5      	strh	r5, [r4, #28]
 80193bc:	77a5      	strb	r5, [r4, #30]
 80193be:	6803      	ldr	r3, [r0, #0]
 80193c0:	695b      	ldr	r3, [r3, #20]
 80193c2:	4798      	blx	r3
 80193c4:	4606      	mov	r6, r0
 80193c6:	b1f8      	cbz	r0, 8019408 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80193c8:	68e0      	ldr	r0, [r4, #12]
 80193ca:	4631      	mov	r1, r6
 80193cc:	6803      	ldr	r3, [r0, #0]
 80193ce:	68db      	ldr	r3, [r3, #12]
 80193d0:	4798      	blx	r3
 80193d2:	7b43      	ldrb	r3, [r0, #13]
 80193d4:	7a82      	ldrb	r2, [r0, #10]
 80193d6:	4605      	mov	r5, r0
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193de:	4313      	orrs	r3, r2
 80193e0:	83a3      	strh	r3, [r4, #28]
 80193e2:	7a63      	ldrb	r3, [r4, #9]
 80193e4:	2b04      	cmp	r3, #4
 80193e6:	d10f      	bne.n	8019408 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80193e8:	68e0      	ldr	r0, [r4, #12]
 80193ea:	462a      	mov	r2, r5
 80193ec:	4631      	mov	r1, r6
 80193ee:	6803      	ldr	r3, [r0, #0]
 80193f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193f2:	4798      	blx	r3
 80193f4:	7b6b      	ldrb	r3, [r5, #13]
 80193f6:	005b      	lsls	r3, r3, #1
 80193f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80193fc:	7aab      	ldrb	r3, [r5, #10]
 80193fe:	4313      	orrs	r3, r2
 8019400:	4418      	add	r0, r3
 8019402:	8ba3      	ldrh	r3, [r4, #28]
 8019404:	4418      	add	r0, r3
 8019406:	83a0      	strh	r0, [r4, #28]
 8019408:	4620      	mov	r0, r4
 801940a:	bd70      	pop	{r4, r5, r6, pc}

0801940c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019410:	2400      	movs	r4, #0
 8019412:	b085      	sub	sp, #20
 8019414:	4681      	mov	r9, r0
 8019416:	4688      	mov	r8, r1
 8019418:	4692      	mov	sl, r2
 801941a:	469b      	mov	fp, r3
 801941c:	4627      	mov	r7, r4
 801941e:	4625      	mov	r5, r4
 8019420:	4626      	mov	r6, r4
 8019422:	4554      	cmp	r4, sl
 8019424:	da2a      	bge.n	801947c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019426:	2300      	movs	r3, #0
 8019428:	9303      	str	r3, [sp, #12]
 801942a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801942e:	429d      	cmp	r5, r3
 8019430:	d004      	beq.n	801943c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019432:	f242 030b 	movw	r3, #8203	; 0x200b
 8019436:	429d      	cmp	r5, r3
 8019438:	bf18      	it	ne
 801943a:	462f      	movne	r7, r5
 801943c:	ab03      	add	r3, sp, #12
 801943e:	4642      	mov	r2, r8
 8019440:	4659      	mov	r1, fp
 8019442:	4648      	mov	r0, r9
 8019444:	f002 fedc 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019448:	4605      	mov	r5, r0
 801944a:	b1b8      	cbz	r0, 801947c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801944c:	280a      	cmp	r0, #10
 801944e:	d015      	beq.n	801947c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019450:	9a03      	ldr	r2, [sp, #12]
 8019452:	b18a      	cbz	r2, 8019478 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019454:	7b50      	ldrb	r0, [r2, #13]
 8019456:	4639      	mov	r1, r7
 8019458:	7a93      	ldrb	r3, [r2, #10]
 801945a:	0040      	lsls	r0, r0, #1
 801945c:	8895      	ldrh	r5, [r2, #4]
 801945e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019462:	4303      	orrs	r3, r0
 8019464:	4640      	mov	r0, r8
 8019466:	9301      	str	r3, [sp, #4]
 8019468:	f8d8 3000 	ldr.w	r3, [r8]
 801946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801946e:	4798      	blx	r3
 8019470:	9b01      	ldr	r3, [sp, #4]
 8019472:	4418      	add	r0, r3
 8019474:	4406      	add	r6, r0
 8019476:	b2b6      	uxth	r6, r6
 8019478:	3401      	adds	r4, #1
 801947a:	e7d2      	b.n	8019422 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801947c:	4630      	mov	r0, r6
 801947e:	b005      	add	sp, #20
 8019480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019484:	2a02      	cmp	r2, #2
 8019486:	b530      	push	{r4, r5, lr}
 8019488:	d011      	beq.n	80194ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801948a:	2a03      	cmp	r2, #3
 801948c:	d01c      	beq.n	80194c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801948e:	2a01      	cmp	r2, #1
 8019490:	d10c      	bne.n	80194ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019492:	888b      	ldrh	r3, [r1, #4]
 8019494:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019498:	8801      	ldrh	r1, [r0, #0]
 801949a:	1a9b      	subs	r3, r3, r2
 801949c:	8844      	ldrh	r4, [r0, #2]
 801949e:	1a5b      	subs	r3, r3, r1
 80194a0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80194a4:	8004      	strh	r4, [r0, #0]
 80194a6:	8043      	strh	r3, [r0, #2]
 80194a8:	8081      	strh	r1, [r0, #4]
 80194aa:	80c2      	strh	r2, [r0, #6]
 80194ac:	bd30      	pop	{r4, r5, pc}
 80194ae:	88cb      	ldrh	r3, [r1, #6]
 80194b0:	88c2      	ldrh	r2, [r0, #6]
 80194b2:	1a9b      	subs	r3, r3, r2
 80194b4:	8842      	ldrh	r2, [r0, #2]
 80194b6:	1a9b      	subs	r3, r3, r2
 80194b8:	888a      	ldrh	r2, [r1, #4]
 80194ba:	8881      	ldrh	r1, [r0, #4]
 80194bc:	8043      	strh	r3, [r0, #2]
 80194be:	1a52      	subs	r2, r2, r1
 80194c0:	8801      	ldrh	r1, [r0, #0]
 80194c2:	1a52      	subs	r2, r2, r1
 80194c4:	8002      	strh	r2, [r0, #0]
 80194c6:	e7f1      	b.n	80194ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80194c8:	88cb      	ldrh	r3, [r1, #6]
 80194ca:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80194ce:	8841      	ldrh	r1, [r0, #2]
 80194d0:	1a9b      	subs	r3, r3, r2
 80194d2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80194d6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80194da:	1a5b      	subs	r3, r3, r1
 80194dc:	8045      	strh	r5, [r0, #2]
 80194de:	8082      	strh	r2, [r0, #4]
 80194e0:	8003      	strh	r3, [r0, #0]
 80194e2:	80c4      	strh	r4, [r0, #6]
 80194e4:	e7e2      	b.n	80194ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080194e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80194e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ea:	b09f      	sub	sp, #124	; 0x7c
 80194ec:	9116      	str	r1, [sp, #88]	; 0x58
 80194ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80194f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80194f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80194f4:	8809      	ldrh	r1, [r1, #0]
 80194f6:	889b      	ldrh	r3, [r3, #4]
 80194f8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80194fc:	440b      	add	r3, r1
 80194fe:	9212      	str	r2, [sp, #72]	; 0x48
 8019500:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019504:	b21b      	sxth	r3, r3
 8019506:	9011      	str	r0, [sp, #68]	; 0x44
 8019508:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801950c:	9310      	str	r3, [sp, #64]	; 0x40
 801950e:	f8d8 3000 	ldr.w	r3, [r8]
 8019512:	7a59      	ldrb	r1, [r3, #9]
 8019514:	7a1b      	ldrb	r3, [r3, #8]
 8019516:	9114      	str	r1, [sp, #80]	; 0x50
 8019518:	9315      	str	r3, [sp, #84]	; 0x54
 801951a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801951c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019520:	2a00      	cmp	r2, #0
 8019522:	d067      	beq.n	80195f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019524:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019528:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801952a:	2b04      	cmp	r3, #4
 801952c:	bf14      	ite	ne
 801952e:	2301      	movne	r3, #1
 8019530:	2302      	moveq	r3, #2
 8019532:	4413      	add	r3, r2
 8019534:	f04f 0900 	mov.w	r9, #0
 8019538:	930f      	str	r3, [sp, #60]	; 0x3c
 801953a:	464c      	mov	r4, r9
 801953c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019540:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019544:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019548:	4293      	cmp	r3, r2
 801954a:	f280 808c 	bge.w	8019666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801954e:	2300      	movs	r3, #0
 8019550:	931c      	str	r3, [sp, #112]	; 0x70
 8019552:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019556:	429c      	cmp	r4, r3
 8019558:	d006      	beq.n	8019568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801955c:	f242 020b 	movw	r2, #8203	; 0x200b
 8019560:	4294      	cmp	r4, r2
 8019562:	bf18      	it	ne
 8019564:	4623      	movne	r3, r4
 8019566:	930d      	str	r3, [sp, #52]	; 0x34
 8019568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801956a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801956c:	f8d8 2000 	ldr.w	r2, [r8]
 8019570:	428b      	cmp	r3, r1
 8019572:	db41      	blt.n	80195f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019574:	6813      	ldr	r3, [r2, #0]
 8019576:	4610      	mov	r0, r2
 8019578:	695b      	ldr	r3, [r3, #20]
 801957a:	4798      	blx	r3
 801957c:	4604      	mov	r4, r0
 801957e:	f8d8 0000 	ldr.w	r0, [r8]
 8019582:	aa1d      	add	r2, sp, #116	; 0x74
 8019584:	4621      	mov	r1, r4
 8019586:	6803      	ldr	r3, [r0, #0]
 8019588:	689e      	ldr	r6, [r3, #8]
 801958a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801958e:	47b0      	blx	r6
 8019590:	901c      	str	r0, [sp, #112]	; 0x70
 8019592:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019596:	429c      	cmp	r4, r3
 8019598:	f000 80ea 	beq.w	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801959c:	f242 030b 	movw	r3, #8203	; 0x200b
 80195a0:	429c      	cmp	r4, r3
 80195a2:	f000 80e5 	beq.w	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80195a6:	2c00      	cmp	r4, #0
 80195a8:	f000 80f7 	beq.w	801979a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80195ac:	2c0a      	cmp	r4, #10
 80195ae:	d060      	beq.n	8019672 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80195b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80195b2:	b36a      	cbz	r2, 8019610 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80195b4:	8894      	ldrh	r4, [r2, #4]
 80195b6:	f1bb 0f00 	cmp.w	fp, #0
 80195ba:	d03b      	beq.n	8019634 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80195bc:	f892 900d 	ldrb.w	r9, [r2, #13]
 80195c0:	f1bb 0f01 	cmp.w	fp, #1
 80195c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80195c8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80195cc:	f892 900a 	ldrb.w	r9, [r2, #10]
 80195d0:	ea49 0903 	orr.w	r9, r9, r3
 80195d4:	d134      	bne.n	8019640 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80195d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195d8:	eba5 0509 	sub.w	r5, r5, r9
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d14f      	bne.n	8019680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80195e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80195e2:	eb09 0305 	add.w	r3, r9, r5
 80195e6:	4413      	add	r3, r2
 80195e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80195ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80195ee:	4293      	cmp	r3, r2
 80195f0:	da51      	bge.n	8019696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80195f2:	e038      	b.n	8019666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80195f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80195f6:	e79d      	b.n	8019534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 80195f8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80195fc:	4659      	mov	r1, fp
 80195fe:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019600:	9301      	str	r3, [sp, #4]
 8019602:	ab1d      	add	r3, sp, #116	; 0x74
 8019604:	9300      	str	r3, [sp, #0]
 8019606:	ab1c      	add	r3, sp, #112	; 0x70
 8019608:	f002 fe52 	bl	801c2b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801960c:	4604      	mov	r4, r0
 801960e:	e7c0      	b.n	8019592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019610:	f8d8 0000 	ldr.w	r0, [r8]
 8019614:	6803      	ldr	r3, [r0, #0]
 8019616:	691b      	ldr	r3, [r3, #16]
 8019618:	4798      	blx	r3
 801961a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801961e:	4298      	cmp	r0, r3
 8019620:	f000 80a6 	beq.w	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019624:	f242 030b 	movw	r3, #8203	; 0x200b
 8019628:	4298      	cmp	r0, r3
 801962a:	f000 80a1 	beq.w	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801962e:	f1bb 0f00 	cmp.w	fp, #0
 8019632:	d100      	bne.n	8019636 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019634:	444d      	add	r5, r9
 8019636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019638:	2a00      	cmp	r2, #0
 801963a:	d1bf      	bne.n	80195bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801963c:	4691      	mov	r9, r2
 801963e:	e097      	b.n	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019642:	2b00      	cmp	r3, #0
 8019644:	f000 80ab 	beq.w	801979e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019648:	f1bb 0f00 	cmp.w	fp, #0
 801964c:	d118      	bne.n	8019680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801964e:	f8d8 0000 	ldr.w	r0, [r8]
 8019652:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019654:	6803      	ldr	r3, [r0, #0]
 8019656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019658:	4798      	blx	r3
 801965a:	4405      	add	r5, r0
 801965c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801965e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019660:	1aeb      	subs	r3, r5, r3
 8019662:	4293      	cmp	r3, r2
 8019664:	dd17      	ble.n	8019696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019666:	2c00      	cmp	r4, #0
 8019668:	f000 8097 	beq.w	801979a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801966c:	2c0a      	cmp	r4, #10
 801966e:	f040 8085 	bne.w	801977c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019672:	240a      	movs	r4, #10
 8019674:	fab4 f084 	clz	r0, r4
 8019678:	0940      	lsrs	r0, r0, #5
 801967a:	b01f      	add	sp, #124	; 0x7c
 801967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019680:	f8d8 0000 	ldr.w	r0, [r8]
 8019684:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801968a:	4798      	blx	r3
 801968c:	f1bb 0f01 	cmp.w	fp, #1
 8019690:	eba5 0500 	sub.w	r5, r5, r0
 8019694:	d0a4      	beq.n	80195e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019696:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019698:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801969a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801969e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80196a2:	7b43      	ldrb	r3, [r0, #13]
 80196a4:	4429      	add	r1, r5
 80196a6:	015b      	lsls	r3, r3, #5
 80196a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80196ac:	7983      	ldrb	r3, [r0, #6]
 80196ae:	4313      	orrs	r3, r2
 80196b0:	440b      	add	r3, r1
 80196b2:	42b3      	cmp	r3, r6
 80196b4:	db5c      	blt.n	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80196b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196b8:	4299      	cmp	r1, r3
 80196ba:	da59      	bge.n	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80196bc:	f8d8 0000 	ldr.w	r0, [r8]
 80196c0:	42ae      	cmp	r6, r5
 80196c2:	6803      	ldr	r3, [r0, #0]
 80196c4:	bfcc      	ite	gt
 80196c6:	1b76      	subgt	r6, r6, r5
 80196c8:	2600      	movle	r6, #0
 80196ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196cc:	bfc8      	it	gt
 80196ce:	b2b6      	uxthgt	r6, r6
 80196d0:	4798      	blx	r3
 80196d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80196d4:	7b5a      	ldrb	r2, [r3, #13]
 80196d6:	00d1      	lsls	r1, r2, #3
 80196d8:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80196dc:	7a19      	ldrb	r1, [r3, #8]
 80196de:	4339      	orrs	r1, r7
 80196e0:	0657      	lsls	r7, r2, #25
 80196e2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80196e4:	bf48      	it	mi
 80196e6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80196ea:	4407      	add	r7, r0
 80196ec:	bf48      	it	mi
 80196ee:	b209      	sxthmi	r1, r1
 80196f0:	1a7f      	subs	r7, r7, r1
 80196f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80196f4:	b2bf      	uxth	r7, r7
 80196f6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80196fa:	fa0f fa87 	sxth.w	sl, r7
 80196fe:	4551      	cmp	r1, sl
 8019700:	dd3a      	ble.n	8019778 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019702:	0112      	lsls	r2, r2, #4
 8019704:	79d8      	ldrb	r0, [r3, #7]
 8019706:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801970a:	4302      	orrs	r2, r0
 801970c:	4492      	add	sl, r2
 801970e:	4551      	cmp	r1, sl
 8019710:	dc2e      	bgt.n	8019770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019712:	1bcf      	subs	r7, r1, r7
 8019714:	468a      	mov	sl, r1
 8019716:	b2bf      	uxth	r7, r7
 8019718:	9319      	str	r3, [sp, #100]	; 0x64
 801971a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801971c:	f8d8 0000 	ldr.w	r0, [r8]
 8019720:	681a      	ldr	r2, [r3, #0]
 8019722:	6801      	ldr	r1, [r0, #0]
 8019724:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8019726:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019728:	9313      	str	r3, [sp, #76]	; 0x4c
 801972a:	9218      	str	r2, [sp, #96]	; 0x60
 801972c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801972e:	4788      	blx	r1
 8019730:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019734:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019736:	910b      	str	r1, [sp, #44]	; 0x2c
 8019738:	f898 100e 	ldrb.w	r1, [r8, #14]
 801973c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801973e:	910a      	str	r1, [sp, #40]	; 0x28
 8019740:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019744:	9109      	str	r1, [sp, #36]	; 0x24
 8019746:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801974a:	9305      	str	r3, [sp, #20]
 801974c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801974e:	9206      	str	r2, [sp, #24]
 8019750:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019754:	442e      	add	r6, r5
 8019756:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801975a:	b236      	sxth	r6, r6
 801975c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801975e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019762:	9600      	str	r6, [sp, #0]
 8019764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	9811      	ldr	r0, [sp, #68]	; 0x44
 801976a:	685b      	ldr	r3, [r3, #4]
 801976c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801976e:	47b0      	blx	r6
 8019770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019772:	3301      	adds	r3, #1
 8019774:	930e      	str	r3, [sp, #56]	; 0x38
 8019776:	e6e5      	b.n	8019544 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019778:	2700      	movs	r7, #0
 801977a:	e7cd      	b.n	8019718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801977c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801977e:	3501      	adds	r5, #1
 8019780:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019782:	429d      	cmp	r5, r3
 8019784:	f6bf af76 	bge.w	8019674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019788:	4659      	mov	r1, fp
 801978a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801978c:	f7f9 fa1a 	bl	8012bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019790:	4604      	mov	r4, r0
 8019792:	b110      	cbz	r0, 801979a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019794:	280a      	cmp	r0, #10
 8019796:	d1f2      	bne.n	801977e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8019798:	e76b      	b.n	8019672 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801979a:	2400      	movs	r4, #0
 801979c:	e76a      	b.n	8019674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801979e:	f1bb 0f00 	cmp.w	fp, #0
 80197a2:	f43f af5b 	beq.w	801965c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80197a6:	e776      	b.n	8019696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080197a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80197a8:	b530      	push	{r4, r5, lr}
 80197aa:	8a44      	ldrh	r4, [r0, #18]
 80197ac:	8ac5      	ldrh	r5, [r0, #22]
 80197ae:	82c3      	strh	r3, [r0, #22]
 80197b0:	442c      	add	r4, r5
 80197b2:	1ae4      	subs	r4, r4, r3
 80197b4:	8b03      	ldrh	r3, [r0, #24]
 80197b6:	8244      	strh	r4, [r0, #18]
 80197b8:	8a84      	ldrh	r4, [r0, #20]
 80197ba:	4422      	add	r2, r4
 80197bc:	440c      	add	r4, r1
 80197be:	1a59      	subs	r1, r3, r1
 80197c0:	8342      	strh	r2, [r0, #26]
 80197c2:	8284      	strh	r4, [r0, #20]
 80197c4:	8301      	strh	r1, [r0, #24]
 80197c6:	bd30      	pop	{r4, r5, pc}

080197c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80197c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197cc:	7a43      	ldrb	r3, [r0, #9]
 80197ce:	b087      	sub	sp, #28
 80197d0:	4604      	mov	r4, r0
 80197d2:	460f      	mov	r7, r1
 80197d4:	1eda      	subs	r2, r3, #3
 80197d6:	b2d2      	uxtb	r2, r2
 80197d8:	2900      	cmp	r1, #0
 80197da:	d036      	beq.n	801984a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80197dc:	2a01      	cmp	r2, #1
 80197de:	d932      	bls.n	8019846 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80197e0:	1e58      	subs	r0, r3, #1
 80197e2:	f1d0 0b00 	rsbs	fp, r0, #0
 80197e6:	eb4b 0b00 	adc.w	fp, fp, r0
 80197ea:	1e99      	subs	r1, r3, #2
 80197ec:	424b      	negs	r3, r1
 80197ee:	414b      	adcs	r3, r1
 80197f0:	9303      	str	r3, [sp, #12]
 80197f2:	2300      	movs	r3, #0
 80197f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80197f8:	2500      	movs	r5, #0
 80197fa:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80197fe:	46a9      	mov	r9, r5
 8019800:	8265      	strh	r5, [r4, #18]
 8019802:	82a5      	strh	r5, [r4, #20]
 8019804:	2300      	movs	r3, #0
 8019806:	9305      	str	r3, [sp, #20]
 8019808:	8823      	ldrh	r3, [r4, #0]
 801980a:	2b20      	cmp	r3, #32
 801980c:	d02b      	beq.n	8019866 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801980e:	eba3 020a 	sub.w	r2, r3, sl
 8019812:	4256      	negs	r6, r2
 8019814:	4156      	adcs	r6, r2
 8019816:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801981a:	4293      	cmp	r3, r2
 801981c:	d004      	beq.n	8019828 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801981e:	4553      	cmp	r3, sl
 8019820:	bf16      	itet	ne
 8019822:	4699      	movne	r9, r3
 8019824:	2601      	moveq	r6, #1
 8019826:	2600      	movne	r6, #0
 8019828:	ab05      	add	r3, sp, #20
 801982a:	68e2      	ldr	r2, [r4, #12]
 801982c:	7a21      	ldrb	r1, [r4, #8]
 801982e:	6860      	ldr	r0, [r4, #4]
 8019830:	f002 fce6 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019834:	8020      	strh	r0, [r4, #0]
 8019836:	b9c8      	cbnz	r0, 801986c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019838:	8b22      	ldrh	r2, [r4, #24]
 801983a:	2300      	movs	r3, #0
 801983c:	4611      	mov	r1, r2
 801983e:	4620      	mov	r0, r4
 8019840:	f7ff ffb2 	bl	80197a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019844:	e066      	b.n	8019914 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019846:	468b      	mov	fp, r1
 8019848:	e7cf      	b.n	80197ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801984a:	3b01      	subs	r3, #1
 801984c:	2a01      	cmp	r2, #1
 801984e:	9103      	str	r1, [sp, #12]
 8019850:	468b      	mov	fp, r1
 8019852:	bf8c      	ite	hi
 8019854:	2200      	movhi	r2, #0
 8019856:	2201      	movls	r2, #1
 8019858:	2b01      	cmp	r3, #1
 801985a:	9202      	str	r2, [sp, #8]
 801985c:	bf8c      	ite	hi
 801985e:	2300      	movhi	r3, #0
 8019860:	2301      	movls	r3, #1
 8019862:	9301      	str	r3, [sp, #4]
 8019864:	e7c8      	b.n	80197f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019866:	4699      	mov	r9, r3
 8019868:	2601      	movs	r6, #1
 801986a:	e7dd      	b.n	8019828 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801986c:	8ae3      	ldrh	r3, [r4, #22]
 801986e:	280a      	cmp	r0, #10
 8019870:	f103 0301 	add.w	r3, r3, #1
 8019874:	82e3      	strh	r3, [r4, #22]
 8019876:	d0df      	beq.n	8019838 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019878:	9a05      	ldr	r2, [sp, #20]
 801987a:	bb42      	cbnz	r2, 80198ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801987c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019880:	4298      	cmp	r0, r3
 8019882:	d001      	beq.n	8019888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019884:	4550      	cmp	r0, sl
 8019886:	d1bd      	bne.n	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019888:	8823      	ldrh	r3, [r4, #0]
 801988a:	8b21      	ldrh	r1, [r4, #24]
 801988c:	2b20      	cmp	r3, #32
 801988e:	d001      	beq.n	8019894 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019890:	4553      	cmp	r3, sl
 8019892:	d131      	bne.n	80198f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019894:	2e00      	cmp	r6, #0
 8019896:	bf0a      	itet	eq
 8019898:	460d      	moveq	r5, r1
 801989a:	4630      	movne	r0, r6
 801989c:	2001      	moveq	r0, #1
 801989e:	440a      	add	r2, r1
 80198a0:	8aa3      	ldrh	r3, [r4, #20]
 80198a2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80198a6:	b292      	uxth	r2, r2
 80198a8:	8322      	strh	r2, [r4, #24]
 80198aa:	4413      	add	r3, r2
 80198ac:	2f00      	cmp	r7, #0
 80198ae:	d03a      	beq.n	8019926 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80198b0:	f1bb 0f00 	cmp.w	fp, #0
 80198b4:	d102      	bne.n	80198bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80198b6:	9903      	ldr	r1, [sp, #12]
 80198b8:	b301      	cbz	r1, 80198fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80198ba:	b1f8      	cbz	r0, 80198fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80198bc:	8ba1      	ldrh	r1, [r4, #28]
 80198be:	4419      	add	r1, r3
 80198c0:	458c      	cmp	ip, r1
 80198c2:	da2a      	bge.n	801991a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80198c4:	8a61      	ldrh	r1, [r4, #18]
 80198c6:	b341      	cbz	r1, 801991a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80198c8:	4563      	cmp	r3, ip
 80198ca:	dd9b      	ble.n	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80198cc:	e01c      	b.n	8019908 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80198ce:	8893      	ldrh	r3, [r2, #4]
 80198d0:	4649      	mov	r1, r9
 80198d2:	8023      	strh	r3, [r4, #0]
 80198d4:	f892 800d 	ldrb.w	r8, [r2, #13]
 80198d8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80198dc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80198e0:	f892 800a 	ldrb.w	r8, [r2, #10]
 80198e4:	ea48 0800 	orr.w	r8, r8, r0
 80198e8:	68e0      	ldr	r0, [r4, #12]
 80198ea:	6803      	ldr	r3, [r0, #0]
 80198ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ee:	4798      	blx	r3
 80198f0:	eb08 0200 	add.w	r2, r8, r0
 80198f4:	b292      	uxth	r2, r2
 80198f6:	e7c7      	b.n	8019888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80198f8:	2000      	movs	r0, #0
 80198fa:	e7d0      	b.n	801989e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80198fc:	4563      	cmp	r3, ip
 80198fe:	dd81      	ble.n	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019900:	8a63      	ldrh	r3, [r4, #18]
 8019902:	2b00      	cmp	r3, #0
 8019904:	f43f af7e 	beq.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019908:	2301      	movs	r3, #1
 801990a:	8ba2      	ldrh	r2, [r4, #28]
 801990c:	77a3      	strb	r3, [r4, #30]
 801990e:	8b63      	ldrh	r3, [r4, #26]
 8019910:	4413      	add	r3, r2
 8019912:	8363      	strh	r3, [r4, #26]
 8019914:	b007      	add	sp, #28
 8019916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801991a:	2300      	movs	r3, #0
 801991c:	4611      	mov	r1, r2
 801991e:	4620      	mov	r0, r4
 8019920:	f7ff ff42 	bl	80197a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019924:	e76e      	b.n	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019926:	4563      	cmp	r3, ip
 8019928:	dd14      	ble.n	8019954 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801992a:	9b02      	ldr	r3, [sp, #8]
 801992c:	b113      	cbz	r3, 8019934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801992e:	2301      	movs	r3, #1
 8019930:	460a      	mov	r2, r1
 8019932:	e783      	b.n	801983c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019934:	9b01      	ldr	r3, [sp, #4]
 8019936:	2b00      	cmp	r3, #0
 8019938:	f43f af64 	beq.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801993c:	2800      	cmp	r0, #0
 801993e:	f47f af61 	bne.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019942:	b116      	cbz	r6, 801994a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019944:	2301      	movs	r3, #1
 8019946:	462a      	mov	r2, r5
 8019948:	e779      	b.n	801983e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801994a:	8a63      	ldrh	r3, [r4, #18]
 801994c:	2b00      	cmp	r3, #0
 801994e:	f43f af59 	beq.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019952:	e7df      	b.n	8019914 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019954:	2800      	cmp	r0, #0
 8019956:	f47f af55 	bne.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801995a:	2e00      	cmp	r6, #0
 801995c:	f43f af52 	beq.w	8019804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019960:	2301      	movs	r3, #1
 8019962:	462a      	mov	r2, r5
 8019964:	e7db      	b.n	801991e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019966 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019966:	b530      	push	{r4, r5, lr}
 8019968:	4605      	mov	r5, r0
 801996a:	b08b      	sub	sp, #44	; 0x2c
 801996c:	b191      	cbz	r1, 8019994 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801996e:	2401      	movs	r4, #1
 8019970:	e9cd 3100 	strd	r3, r1, [sp]
 8019974:	4613      	mov	r3, r2
 8019976:	4601      	mov	r1, r0
 8019978:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801997c:	a802      	add	r0, sp, #8
 801997e:	f7ff fd0b 	bl	8019398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019982:	2100      	movs	r1, #0
 8019984:	a802      	add	r0, sp, #8
 8019986:	f7ff ff1f 	bl	80197c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801998a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801998e:	b163      	cbz	r3, 80199aa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019990:	3401      	adds	r4, #1
 8019992:	e7f6      	b.n	8019982 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019994:	2401      	movs	r4, #1
 8019996:	f002 fd2b 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801999a:	280a      	cmp	r0, #10
 801999c:	4628      	mov	r0, r5
 801999e:	bf08      	it	eq
 80199a0:	3401      	addeq	r4, #1
 80199a2:	f002 fd25 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d1f7      	bne.n	801999a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80199aa:	b2a0      	uxth	r0, r4
 80199ac:	b00b      	add	sp, #44	; 0x2c
 80199ae:	bd30      	pop	{r4, r5, pc}

080199b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80199b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b4:	b0db      	sub	sp, #364	; 0x16c
 80199b6:	4689      	mov	r9, r1
 80199b8:	461c      	mov	r4, r3
 80199ba:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 80199be:	900a      	str	r0, [sp, #40]	; 0x28
 80199c0:	f1ba 0f00 	cmp.w	sl, #0
 80199c4:	f000 80a5 	beq.w	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	f000 80a1 	beq.w	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80199d0:	7ba3      	ldrb	r3, [r4, #14]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	f000 809d 	beq.w	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80199d8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80199dc:	6810      	ldr	r0, [r2, #0]
 80199de:	6851      	ldr	r1, [r2, #4]
 80199e0:	2500      	movs	r5, #0
 80199e2:	4643      	mov	r3, r8
 80199e4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80199e8:	950e      	str	r5, [sp, #56]	; 0x38
 80199ea:	af18      	add	r7, sp, #96	; 0x60
 80199ec:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80199f0:	79a2      	ldrb	r2, [r4, #6]
 80199f2:	c303      	stmia	r3!, {r0, r1}
 80199f4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80199f8:	a90e      	add	r1, sp, #56	; 0x38
 80199fa:	4640      	mov	r0, r8
 80199fc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019a00:	f7ff fd40 	bl	8019484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019a04:	a90e      	add	r1, sp, #56	; 0x38
 8019a06:	79a2      	ldrb	r2, [r4, #6]
 8019a08:	4608      	mov	r0, r1
 8019a0a:	f7ff fd3b 	bl	8019484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019a0e:	4638      	mov	r0, r7
 8019a10:	f002 f8b7 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 8019a14:	6820      	ldr	r0, [r4, #0]
 8019a16:	6803      	ldr	r3, [r0, #0]
 8019a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a1a:	4798      	blx	r3
 8019a1c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019a1e:	4603      	mov	r3, r0
 8019a20:	4651      	mov	r1, sl
 8019a22:	4638      	mov	r0, r7
 8019a24:	f002 f8f2 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a28:	7923      	ldrb	r3, [r4, #4]
 8019a2a:	6820      	ldr	r0, [r4, #0]
 8019a2c:	9308      	str	r3, [sp, #32]
 8019a2e:	6803      	ldr	r3, [r0, #0]
 8019a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a32:	4798      	blx	r3
 8019a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a38:	181e      	adds	r6, r3, r0
 8019a3a:	42ae      	cmp	r6, r5
 8019a3c:	dd06      	ble.n	8019a4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019a3e:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019a42:	4282      	cmp	r2, r0
 8019a44:	bfa4      	itt	ge
 8019a46:	189d      	addge	r5, r3, r2
 8019a48:	fb95 f5f6 	sdivge	r5, r5, r6
 8019a4c:	a82e      	add	r0, sp, #184	; 0xb8
 8019a4e:	f002 f898 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 8019a52:	7c23      	ldrb	r3, [r4, #16]
 8019a54:	b14b      	cbz	r3, 8019a6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8019a56:	6820      	ldr	r0, [r4, #0]
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a5c:	4798      	blx	r3
 8019a5e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019a60:	4603      	mov	r3, r0
 8019a62:	4651      	mov	r1, sl
 8019a64:	a82e      	add	r0, sp, #184	; 0xb8
 8019a66:	f002 f8d1 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a6a:	7c21      	ldrb	r1, [r4, #16]
 8019a6c:	a810      	add	r0, sp, #64	; 0x40
 8019a6e:	7963      	ldrb	r3, [r4, #5]
 8019a70:	9101      	str	r1, [sp, #4]
 8019a72:	6821      	ldr	r1, [r4, #0]
 8019a74:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019a78:	9100      	str	r1, [sp, #0]
 8019a7a:	a92e      	add	r1, sp, #184	; 0xb8
 8019a7c:	f7ff fc8c 	bl	8019398 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019a80:	7c23      	ldrb	r3, [r4, #16]
 8019a82:	b9bb      	cbnz	r3, 8019ab4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8019a84:	fa1f fa86 	uxth.w	sl, r6
 8019a88:	2d00      	cmp	r5, #0
 8019a8a:	dd45      	ble.n	8019b18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019a8c:	4638      	mov	r0, r7
 8019a8e:	f002 fcaf 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d03d      	beq.n	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019a96:	280a      	cmp	r0, #10
 8019a98:	d1f6      	bne.n	8019a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019a9a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019a9e:	3d01      	subs	r5, #1
 8019aa0:	4453      	add	r3, sl
 8019aa2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019aa6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019aaa:	eba3 030a 	sub.w	r3, r3, sl
 8019aae:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019ab2:	e7e9      	b.n	8019a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019ab4:	0073      	lsls	r3, r6, #1
 8019ab6:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019aba:	fa1f fa86 	uxth.w	sl, r6
 8019abe:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac0:	2d00      	cmp	r5, #0
 8019ac2:	dd29      	ble.n	8019b18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019ac4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019ac8:	a810      	add	r0, sp, #64	; 0x40
 8019aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019acc:	428b      	cmp	r3, r1
 8019ace:	bfd4      	ite	le
 8019ad0:	2100      	movle	r1, #0
 8019ad2:	2101      	movgt	r1, #1
 8019ad4:	f7ff fe78 	bl	80197c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019ad8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8019adc:	3b01      	subs	r3, #1
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	455b      	cmp	r3, fp
 8019ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ae4:	d005      	beq.n	8019af2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8019ae6:	7961      	ldrb	r1, [r4, #5]
 8019ae8:	4638      	mov	r0, r7
 8019aea:	f7f9 f86b 	bl	8012bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019af0:	e7f4      	b.n	8019adc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8019af2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019af6:	3d01      	subs	r5, #1
 8019af8:	4453      	add	r3, sl
 8019afa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019afe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019b02:	eba3 030a 	sub.w	r3, r3, sl
 8019b06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019b0a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d1d6      	bne.n	8019ac0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8019b12:	b05b      	add	sp, #364	; 0x16c
 8019b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b18:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019b1c:	ad44      	add	r5, sp, #272	; 0x110
 8019b1e:	f04f 0b00 	mov.w	fp, #0
 8019b22:	7c23      	ldrb	r3, [r4, #16]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d067      	beq.n	8019bf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8019b28:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019b2c:	a810      	add	r0, sp, #64	; 0x40
 8019b2e:	458a      	cmp	sl, r1
 8019b30:	bfd4      	ite	le
 8019b32:	2100      	movle	r1, #0
 8019b34:	2101      	movgt	r1, #1
 8019b36:	f7ff fe47 	bl	80197c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019b3a:	9b08      	ldr	r3, [sp, #32]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d056      	beq.n	8019bee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019b40:	7c23      	ldrb	r3, [r4, #16]
 8019b42:	2258      	movs	r2, #88	; 0x58
 8019b44:	4639      	mov	r1, r7
 8019b46:	4628      	mov	r0, r5
 8019b48:	9309      	str	r3, [sp, #36]	; 0x24
 8019b4a:	f010 fea1 	bl	802a890 <memcpy>
 8019b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d059      	beq.n	8019c08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8019b54:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8019b58:	7922      	ldrb	r2, [r4, #4]
 8019b5a:	2a01      	cmp	r2, #1
 8019b5c:	d13d      	bne.n	8019bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8019b5e:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8019b62:	1ac0      	subs	r0, r0, r3
 8019b64:	2302      	movs	r3, #2
 8019b66:	fb90 f0f3 	sdiv	r0, r0, r3
 8019b6a:	b200      	sxth	r0, r0
 8019b6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019b70:	4418      	add	r0, r3
 8019b72:	7c23      	ldrb	r3, [r4, #16]
 8019b74:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d03a      	beq.n	8019bf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019b7c:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8019b80:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8019b84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019b88:	9500      	str	r5, [sp, #0]
 8019b8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019b8c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019b90:	e9cd b703 	strd	fp, r7, [sp, #12]
 8019b94:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019b98:	464a      	mov	r2, r9
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	f7ff fca3 	bl	80194e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	d1b6      	bne.n	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019ba4:	b2b2      	uxth	r2, r6
 8019ba6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019baa:	4611      	mov	r1, r2
 8019bac:	4413      	add	r3, r2
 8019bae:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8019bb2:	b21b      	sxth	r3, r3
 8019bb4:	1a52      	subs	r2, r2, r1
 8019bb6:	7c21      	ldrb	r1, [r4, #16]
 8019bb8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019bbc:	b212      	sxth	r2, r2
 8019bbe:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019bc2:	b109      	cbz	r1, 8019bc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8019bc4:	42b2      	cmp	r2, r6
 8019bc6:	dba4      	blt.n	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019bc8:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019bcc:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019bd0:	440a      	add	r2, r1
 8019bd2:	b212      	sxth	r2, r2
 8019bd4:	4293      	cmp	r3, r2
 8019bd6:	dda4      	ble.n	8019b22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8019bd8:	e79b      	b.n	8019b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019bda:	2a02      	cmp	r2, #2
 8019bdc:	d105      	bne.n	8019bea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8019bde:	7be2      	ldrb	r2, [r4, #15]
 8019be0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8019be4:	1a80      	subs	r0, r0, r2
 8019be6:	1ac0      	subs	r0, r0, r3
 8019be8:	e7bf      	b.n	8019b6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8019bea:	2000      	movs	r0, #0
 8019bec:	e7be      	b.n	8019b6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019bee:	7be0      	ldrb	r0, [r4, #15]
 8019bf0:	e7bc      	b.n	8019b6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019bf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019bf6:	e7c3      	b.n	8019b80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8019bf8:	9b08      	ldr	r3, [sp, #32]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d0f7      	beq.n	8019bee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019bfe:	2258      	movs	r2, #88	; 0x58
 8019c00:	4639      	mov	r1, r7
 8019c02:	4628      	mov	r0, r5
 8019c04:	f010 fe44 	bl	802a890 <memcpy>
 8019c08:	2300      	movs	r3, #0
 8019c0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019c0e:	6821      	ldr	r1, [r4, #0]
 8019c10:	4628      	mov	r0, r5
 8019c12:	f7ff fbfb 	bl	801940c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019c16:	b203      	sxth	r3, r0
 8019c18:	e79e      	b.n	8019b58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08019c1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019c1a:	2b02      	cmp	r3, #2
 8019c1c:	b510      	push	{r4, lr}
 8019c1e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019c22:	d00b      	beq.n	8019c3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019c24:	2b03      	cmp	r3, #3
 8019c26:	d00e      	beq.n	8019c46 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019c28:	2b01      	cmp	r3, #1
 8019c2a:	d001      	beq.n	8019c30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019c2c:	1860      	adds	r0, r4, r1
 8019c2e:	bd10      	pop	{r4, pc}
 8019c30:	8880      	ldrh	r0, [r0, #4]
 8019c32:	4420      	add	r0, r4
 8019c34:	b200      	sxth	r0, r0
 8019c36:	1a80      	subs	r0, r0, r2
 8019c38:	3801      	subs	r0, #1
 8019c3a:	e7f8      	b.n	8019c2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019c3c:	8880      	ldrh	r0, [r0, #4]
 8019c3e:	4420      	add	r0, r4
 8019c40:	b200      	sxth	r0, r0
 8019c42:	1a40      	subs	r0, r0, r1
 8019c44:	e7f8      	b.n	8019c38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019c46:	18a0      	adds	r0, r4, r2
 8019c48:	e7f1      	b.n	8019c2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019c4a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019c4a:	2b02      	cmp	r3, #2
 8019c4c:	b510      	push	{r4, lr}
 8019c4e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019c52:	d006      	beq.n	8019c62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8019c54:	2b03      	cmp	r3, #3
 8019c56:	d00a      	beq.n	8019c6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	bf14      	ite	ne
 8019c5c:	18a0      	addne	r0, r4, r2
 8019c5e:	1860      	addeq	r0, r4, r1
 8019c60:	bd10      	pop	{r4, pc}
 8019c62:	88c0      	ldrh	r0, [r0, #6]
 8019c64:	4420      	add	r0, r4
 8019c66:	b200      	sxth	r0, r0
 8019c68:	1a80      	subs	r0, r0, r2
 8019c6a:	3801      	subs	r0, #1
 8019c6c:	e7f8      	b.n	8019c60 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019c6e:	88c0      	ldrh	r0, [r0, #6]
 8019c70:	4420      	add	r0, r4
 8019c72:	b200      	sxth	r0, r0
 8019c74:	1a40      	subs	r0, r0, r1
 8019c76:	e7f8      	b.n	8019c6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08019c78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019c78:	4b01      	ldr	r3, [pc, #4]	; (8019c80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	601a      	str	r2, [r3, #0]
 8019c7e:	4770      	bx	lr
 8019c80:	20014b5c 	.word	0x20014b5c

08019c84 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019c84:	4603      	mov	r3, r0
 8019c86:	b1c8      	cbz	r0, 8019cbc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019c88:	0c02      	lsrs	r2, r0, #16
 8019c8a:	0412      	lsls	r2, r2, #16
 8019c8c:	b9a2      	cbnz	r2, 8019cb8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019c8e:	0403      	lsls	r3, r0, #16
 8019c90:	2010      	movs	r0, #16
 8019c92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019c96:	bf04      	itt	eq
 8019c98:	021b      	lsleq	r3, r3, #8
 8019c9a:	3008      	addeq	r0, #8
 8019c9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019ca0:	bf04      	itt	eq
 8019ca2:	011b      	lsleq	r3, r3, #4
 8019ca4:	3004      	addeq	r0, #4
 8019ca6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019caa:	bf04      	itt	eq
 8019cac:	009b      	lsleq	r3, r3, #2
 8019cae:	3002      	addeq	r0, #2
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	db04      	blt.n	8019cbe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019cb4:	3001      	adds	r0, #1
 8019cb6:	4770      	bx	lr
 8019cb8:	2000      	movs	r0, #0
 8019cba:	e7ea      	b.n	8019c92 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019cbc:	2020      	movs	r0, #32
 8019cbe:	4770      	bx	lr

08019cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc4:	b087      	sub	sp, #28
 8019cc6:	4681      	mov	r9, r0
 8019cc8:	4698      	mov	r8, r3
 8019cca:	4610      	mov	r0, r2
 8019ccc:	460d      	mov	r5, r1
 8019cce:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019cd2:	b981      	cbnz	r1, 8019cf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019cd4:	b14b      	cbz	r3, 8019cea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	464a      	mov	r2, r9
 8019cda:	4641      	mov	r1, r8
 8019cdc:	e9cd 4700 	strd	r4, r7, [sp]
 8019ce0:	f7ff ffee 	bl	8019cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019ce4:	b007      	add	sp, #28
 8019ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cea:	f04f 33ff 	mov.w	r3, #4294967295
 8019cee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019cf2:	603b      	str	r3, [r7, #0]
 8019cf4:	e7f6      	b.n	8019ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019cf6:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019cfa:	d107      	bne.n	8019d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019cfc:	fb09 f602 	mul.w	r6, r9, r2
 8019d00:	fbb6 f0f4 	udiv	r0, r6, r4
 8019d04:	fb04 6610 	mls	r6, r4, r0, r6
 8019d08:	603e      	str	r6, [r7, #0]
 8019d0a:	e7eb      	b.n	8019ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019d0c:	2601      	movs	r6, #1
 8019d0e:	fa09 fb01 	lsl.w	fp, r9, r1
 8019d12:	408e      	lsls	r6, r1
 8019d14:	fbbb f3f4 	udiv	r3, fp, r4
 8019d18:	3e01      	subs	r6, #1
 8019d1a:	9302      	str	r3, [sp, #8]
 8019d1c:	fb0a f303 	mul.w	r3, sl, r3
 8019d20:	4016      	ands	r6, r2
 8019d22:	9303      	str	r3, [sp, #12]
 8019d24:	4630      	mov	r0, r6
 8019d26:	f7ff ffad 	bl	8019c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019d2a:	464a      	mov	r2, r9
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	4601      	mov	r1, r0
 8019d30:	4630      	mov	r0, r6
 8019d32:	e9cd 4700 	strd	r4, r7, [sp]
 8019d36:	f7ff ffc3 	bl	8019cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019d3a:	9b02      	ldr	r3, [sp, #8]
 8019d3c:	4606      	mov	r6, r0
 8019d3e:	eb05 0108 	add.w	r1, r5, r8
 8019d42:	fb04 bb13 	mls	fp, r4, r3, fp
 8019d46:	4658      	mov	r0, fp
 8019d48:	f7ff ff9c 	bl	8019c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019d4c:	ab05      	add	r3, sp, #20
 8019d4e:	465a      	mov	r2, fp
 8019d50:	e9cd 4300 	strd	r4, r3, [sp]
 8019d54:	4603      	mov	r3, r0
 8019d56:	4650      	mov	r0, sl
 8019d58:	f7ff ffb2 	bl	8019cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019d5c:	6839      	ldr	r1, [r7, #0]
 8019d5e:	9a05      	ldr	r2, [sp, #20]
 8019d60:	9b03      	ldr	r3, [sp, #12]
 8019d62:	4411      	add	r1, r2
 8019d64:	fbb1 f2f4 	udiv	r2, r1, r4
 8019d68:	18d3      	adds	r3, r2, r3
 8019d6a:	fb04 1412 	mls	r4, r4, r2, r1
 8019d6e:	441e      	add	r6, r3
 8019d70:	603c      	str	r4, [r7, #0]
 8019d72:	4430      	add	r0, r6
 8019d74:	e7b6      	b.n	8019ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019d76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d7a:	b085      	sub	sp, #20
 8019d7c:	f1b0 0900 	subs.w	r9, r0, #0
 8019d80:	461d      	mov	r5, r3
 8019d82:	4617      	mov	r7, r2
 8019d84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019d86:	bfbb      	ittet	lt
 8019d88:	f1c9 0900 	rsblt	r9, r9, #0
 8019d8c:	f04f 36ff 	movlt.w	r6, #4294967295
 8019d90:	2601      	movge	r6, #1
 8019d92:	6823      	ldrlt	r3, [r4, #0]
 8019d94:	bfbc      	itt	lt
 8019d96:	425b      	neglt	r3, r3
 8019d98:	6023      	strlt	r3, [r4, #0]
 8019d9a:	2a00      	cmp	r2, #0
 8019d9c:	da04      	bge.n	8019da8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	4257      	negs	r7, r2
 8019da2:	4276      	negs	r6, r6
 8019da4:	425b      	negs	r3, r3
 8019da6:	6023      	str	r3, [r4, #0]
 8019da8:	2d00      	cmp	r5, #0
 8019daa:	4638      	mov	r0, r7
 8019dac:	bfba      	itte	lt
 8019dae:	426d      	neglt	r5, r5
 8019db0:	f04f 38ff 	movlt.w	r8, #4294967295
 8019db4:	f04f 0801 	movge.w	r8, #1
 8019db8:	f7ff ff64 	bl	8019c84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019dbc:	ab03      	add	r3, sp, #12
 8019dbe:	463a      	mov	r2, r7
 8019dc0:	e9cd 5300 	strd	r5, r3, [sp]
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	4648      	mov	r0, r9
 8019dc8:	f7ff ff7a 	bl	8019cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019dcc:	6823      	ldr	r3, [r4, #0]
 8019dce:	9a03      	ldr	r2, [sp, #12]
 8019dd0:	4546      	cmp	r6, r8
 8019dd2:	441a      	add	r2, r3
 8019dd4:	fb92 f3f5 	sdiv	r3, r2, r5
 8019dd8:	4418      	add	r0, r3
 8019dda:	fb05 2313 	mls	r3, r5, r3, r2
 8019dde:	bf18      	it	ne
 8019de0:	4240      	negne	r0, r0
 8019de2:	1c72      	adds	r2, r6, #1
 8019de4:	6023      	str	r3, [r4, #0]
 8019de6:	d105      	bne.n	8019df4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f1c3 0200 	rsb	r2, r3, #0
 8019dee:	db0b      	blt.n	8019e08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019df0:	6022      	str	r2, [r4, #0]
 8019df2:	e006      	b.n	8019e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019df4:	2e01      	cmp	r6, #1
 8019df6:	d104      	bne.n	8019e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	da02      	bge.n	8019e02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019dfc:	442b      	add	r3, r5
 8019dfe:	3801      	subs	r0, #1
 8019e00:	6023      	str	r3, [r4, #0]
 8019e02:	b005      	add	sp, #20
 8019e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e08:	3801      	subs	r0, #1
 8019e0a:	1b52      	subs	r2, r2, r5
 8019e0c:	e7f0      	b.n	8019df0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019e10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019e10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019e14:	4c1c      	ldr	r4, [pc, #112]	; (8019e88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019e16:	4605      	mov	r5, r0
 8019e18:	6807      	ldr	r7, [r0, #0]
 8019e1a:	69a3      	ldr	r3, [r4, #24]
 8019e1c:	b92b      	cbnz	r3, 8019e2a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019e1e:	6840      	ldr	r0, [r0, #4]
 8019e20:	e9c5 7000 	strd	r7, r0, [r5]
 8019e24:	b004      	add	sp, #16
 8019e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e2a:	f04f 0802 	mov.w	r8, #2
 8019e2e:	68a2      	ldr	r2, [r4, #8]
 8019e30:	ae04      	add	r6, sp, #16
 8019e32:	6820      	ldr	r0, [r4, #0]
 8019e34:	fb93 f1f8 	sdiv	r1, r3, r8
 8019e38:	440a      	add	r2, r1
 8019e3a:	69e1      	ldr	r1, [r4, #28]
 8019e3c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019e40:	463a      	mov	r2, r7
 8019e42:	9600      	str	r6, [sp, #0]
 8019e44:	f7ff ff97 	bl	8019d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019e48:	69a3      	ldr	r3, [r4, #24]
 8019e4a:	4607      	mov	r7, r0
 8019e4c:	686a      	ldr	r2, [r5, #4]
 8019e4e:	6a21      	ldr	r1, [r4, #32]
 8019e50:	9600      	str	r6, [sp, #0]
 8019e52:	6860      	ldr	r0, [r4, #4]
 8019e54:	f7ff ff8f 	bl	8019d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019e58:	69a3      	ldr	r3, [r4, #24]
 8019e5a:	6962      	ldr	r2, [r4, #20]
 8019e5c:	4407      	add	r7, r0
 8019e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019e60:	9600      	str	r6, [sp, #0]
 8019e62:	68e0      	ldr	r0, [r4, #12]
 8019e64:	fb93 f8f8 	sdiv	r8, r3, r8
 8019e68:	4442      	add	r2, r8
 8019e6a:	9203      	str	r2, [sp, #12]
 8019e6c:	682a      	ldr	r2, [r5, #0]
 8019e6e:	f7ff ff82 	bl	8019d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019e72:	4680      	mov	r8, r0
 8019e74:	9600      	str	r6, [sp, #0]
 8019e76:	69a3      	ldr	r3, [r4, #24]
 8019e78:	686a      	ldr	r2, [r5, #4]
 8019e7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019e7c:	6920      	ldr	r0, [r4, #16]
 8019e7e:	f7ff ff7a 	bl	8019d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019e82:	4440      	add	r0, r8
 8019e84:	e7cc      	b.n	8019e20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019e86:	bf00      	nop
 8019e88:	20014b60 	.word	0x20014b60

08019e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019e8c:	4b07      	ldr	r3, [pc, #28]	; (8019eac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019e8e:	b510      	push	{r4, lr}
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	2b01      	cmp	r3, #1
 8019e94:	d108      	bne.n	8019ea8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019e96:	4b06      	ldr	r3, [pc, #24]	; (8019eb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019e98:	880c      	ldrh	r4, [r1, #0]
 8019e9a:	881b      	ldrh	r3, [r3, #0]
 8019e9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019ea0:	3b01      	subs	r3, #1
 8019ea2:	1b1b      	subs	r3, r3, r4
 8019ea4:	8003      	strh	r3, [r0, #0]
 8019ea6:	800a      	strh	r2, [r1, #0]
 8019ea8:	bd10      	pop	{r4, pc}
 8019eaa:	bf00      	nop
 8019eac:	20014b2c 	.word	0x20014b2c
 8019eb0:	20014b30 	.word	0x20014b30

08019eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019eb4:	4b0a      	ldr	r3, [pc, #40]	; (8019ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019eb6:	b510      	push	{r4, lr}
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d10e      	bne.n	8019edc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019ebe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019ec2:	8843      	ldrh	r3, [r0, #2]
 8019ec4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019ec8:	18ca      	adds	r2, r1, r3
 8019eca:	4b06      	ldr	r3, [pc, #24]	; (8019ee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019ecc:	8044      	strh	r4, [r0, #2]
 8019ece:	881b      	ldrh	r3, [r3, #0]
 8019ed0:	1a9b      	subs	r3, r3, r2
 8019ed2:	8003      	strh	r3, [r0, #0]
 8019ed4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019ed8:	8081      	strh	r1, [r0, #4]
 8019eda:	80c3      	strh	r3, [r0, #6]
 8019edc:	bd10      	pop	{r4, pc}
 8019ede:	bf00      	nop
 8019ee0:	20014b2c 	.word	0x20014b2c
 8019ee4:	20014b28 	.word	0x20014b28

08019ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019ee8:	4b07      	ldr	r3, [pc, #28]	; (8019f08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019eea:	b510      	push	{r4, lr}
 8019eec:	781b      	ldrb	r3, [r3, #0]
 8019eee:	2b01      	cmp	r3, #1
 8019ef0:	d108      	bne.n	8019f04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019ef2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019ef6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019efa:	8003      	strh	r3, [r0, #0]
 8019efc:	8893      	ldrh	r3, [r2, #4]
 8019efe:	3b01      	subs	r3, #1
 8019f00:	1b1b      	subs	r3, r3, r4
 8019f02:	800b      	strh	r3, [r1, #0]
 8019f04:	bd10      	pop	{r4, pc}
 8019f06:	bf00      	nop
 8019f08:	20014b2c 	.word	0x20014b2c

08019f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019f0c:	4b08      	ldr	r3, [pc, #32]	; (8019f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019f0e:	b513      	push	{r0, r1, r4, lr}
 8019f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f14:	2400      	movs	r4, #0
 8019f16:	4b07      	ldr	r3, [pc, #28]	; (8019f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019f18:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019f1c:	466a      	mov	r2, sp
 8019f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f22:	9400      	str	r4, [sp, #0]
 8019f24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f28:	f7ff ffde 	bl	8019ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019f2c:	b002      	add	sp, #8
 8019f2e:	bd10      	pop	{r4, pc}
 8019f30:	20014b28 	.word	0x20014b28
 8019f34:	20014b2a 	.word	0x20014b2a

08019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019f38:	4b0a      	ldr	r3, [pc, #40]	; (8019f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019f3a:	460a      	mov	r2, r1
 8019f3c:	b510      	push	{r4, lr}
 8019f3e:	781b      	ldrb	r3, [r3, #0]
 8019f40:	2b01      	cmp	r3, #1
 8019f42:	d10d      	bne.n	8019f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019f44:	8881      	ldrh	r1, [r0, #4]
 8019f46:	8803      	ldrh	r3, [r0, #0]
 8019f48:	440b      	add	r3, r1
 8019f4a:	4601      	mov	r1, r0
 8019f4c:	3b01      	subs	r3, #1
 8019f4e:	f821 3b02 	strh.w	r3, [r1], #2
 8019f52:	f7ff ffc9 	bl	8019ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019f56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019f5a:	88c2      	ldrh	r2, [r0, #6]
 8019f5c:	80c3      	strh	r3, [r0, #6]
 8019f5e:	8082      	strh	r2, [r0, #4]
 8019f60:	bd10      	pop	{r4, pc}
 8019f62:	bf00      	nop
 8019f64:	20014b2c 	.word	0x20014b2c

08019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019f68:	4b09      	ldr	r3, [pc, #36]	; (8019f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019f6a:	b507      	push	{r0, r1, r2, lr}
 8019f6c:	2100      	movs	r1, #0
 8019f6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f72:	4b08      	ldr	r3, [pc, #32]	; (8019f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019f74:	9100      	str	r1, [sp, #0]
 8019f76:	4669      	mov	r1, sp
 8019f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019f80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f84:	f7ff ffd8 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f88:	b003      	add	sp, #12
 8019f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f8e:	bf00      	nop
 8019f90:	20014b28 	.word	0x20014b28
 8019f94:	20014b2a 	.word	0x20014b2a

08019f98 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019f98:	4b06      	ldr	r3, [pc, #24]	; (8019fb4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fa0:	4b05      	ldr	r3, [pc, #20]	; (8019fb8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019fa2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019faa:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019fae:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019fb2:	4770      	bx	lr
 8019fb4:	20014b28 	.word	0x20014b28
 8019fb8:	20014b2a 	.word	0x20014b2a

08019fbc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019fbc:	4b03      	ldr	r3, [pc, #12]	; (8019fcc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019fbe:	6818      	ldr	r0, [r3, #0]
 8019fc0:	b110      	cbz	r0, 8019fc8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019fc2:	6803      	ldr	r3, [r0, #0]
 8019fc4:	699b      	ldr	r3, [r3, #24]
 8019fc6:	4718      	bx	r3
 8019fc8:	4770      	bx	lr
 8019fca:	bf00      	nop
 8019fcc:	20014b90 	.word	0x20014b90

08019fd0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019fd0:	4770      	bx	lr
	...

08019fd4 <_ZN8touchgfx11Application4drawEv>:
 8019fd4:	4b09      	ldr	r3, [pc, #36]	; (8019ffc <_ZN8touchgfx11Application4drawEv+0x28>)
 8019fd6:	b507      	push	{r0, r1, r2, lr}
 8019fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fdc:	2100      	movs	r1, #0
 8019fde:	4b08      	ldr	r3, [pc, #32]	; (801a000 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019fe0:	9100      	str	r1, [sp, #0]
 8019fe2:	4669      	mov	r1, sp
 8019fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fe8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019fec:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019ff0:	6803      	ldr	r3, [r0, #0]
 8019ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ff4:	4798      	blx	r3
 8019ff6:	b003      	add	sp, #12
 8019ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ffc:	20014b28 	.word	0x20014b28
 801a000:	20014b2a 	.word	0x20014b2a

0801a004 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a004:	4b03      	ldr	r3, [pc, #12]	; (801a014 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a006:	6818      	ldr	r0, [r3, #0]
 801a008:	b110      	cbz	r0, 801a010 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a00a:	6803      	ldr	r3, [r0, #0]
 801a00c:	69db      	ldr	r3, [r3, #28]
 801a00e:	4718      	bx	r3
 801a010:	4770      	bx	lr
 801a012:	bf00      	nop
 801a014:	20014b90 	.word	0x20014b90

0801a018 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a018:	4b03      	ldr	r3, [pc, #12]	; (801a028 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a01a:	6818      	ldr	r0, [r3, #0]
 801a01c:	b110      	cbz	r0, 801a024 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a01e:	6803      	ldr	r3, [r0, #0]
 801a020:	6a1b      	ldr	r3, [r3, #32]
 801a022:	4718      	bx	r3
 801a024:	4770      	bx	lr
 801a026:	bf00      	nop
 801a028:	20014b90 	.word	0x20014b90

0801a02c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a02c:	4b03      	ldr	r3, [pc, #12]	; (801a03c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a02e:	6818      	ldr	r0, [r3, #0]
 801a030:	b110      	cbz	r0, 801a038 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a032:	6803      	ldr	r3, [r0, #0]
 801a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a036:	4718      	bx	r3
 801a038:	4770      	bx	lr
 801a03a:	bf00      	nop
 801a03c:	20014b90 	.word	0x20014b90

0801a040 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a040:	b570      	push	{r4, r5, r6, lr}
 801a042:	4d34      	ldr	r5, [pc, #208]	; (801a114 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a044:	4604      	mov	r4, r0
 801a046:	6828      	ldr	r0, [r5, #0]
 801a048:	b140      	cbz	r0, 801a05c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a04a:	7a03      	ldrb	r3, [r0, #8]
 801a04c:	b933      	cbnz	r3, 801a05c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a04e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a052:	6803      	ldr	r3, [r0, #0]
 801a054:	689b      	ldr	r3, [r3, #8]
 801a056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a05a:	4718      	bx	r3
 801a05c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a060:	b97b      	cbnz	r3, 801a082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a062:	b170      	cbz	r0, 801a082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a064:	7a03      	ldrb	r3, [r0, #8]
 801a066:	b163      	cbz	r3, 801a082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a068:	4b2b      	ldr	r3, [pc, #172]	; (801a118 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a06a:	6818      	ldr	r0, [r3, #0]
 801a06c:	b110      	cbz	r0, 801a074 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a06e:	6803      	ldr	r3, [r0, #0]
 801a070:	691b      	ldr	r3, [r3, #16]
 801a072:	4798      	blx	r3
 801a074:	6828      	ldr	r0, [r5, #0]
 801a076:	6803      	ldr	r3, [r0, #0]
 801a078:	68db      	ldr	r3, [r3, #12]
 801a07a:	4798      	blx	r3
 801a07c:	2301      	movs	r3, #1
 801a07e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a082:	2500      	movs	r5, #0
 801a084:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a088:	42a8      	cmp	r0, r5
 801a08a:	dd0c      	ble.n	801a0a6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a08c:	1963      	adds	r3, r4, r5
 801a08e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a092:	b132      	cbz	r2, 801a0a2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a094:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a098:	4413      	add	r3, r2
 801a09a:	6858      	ldr	r0, [r3, #4]
 801a09c:	6803      	ldr	r3, [r0, #0]
 801a09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0a0:	4798      	blx	r3
 801a0a2:	3501      	adds	r5, #1
 801a0a4:	e7ee      	b.n	801a084 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	461a      	mov	r2, r3
 801a0aa:	4298      	cmp	r0, r3
 801a0ac:	d114      	bne.n	801a0d8 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a0ae:	1d25      	adds	r5, r4, #4
 801a0b0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a0b4:	1e48      	subs	r0, r1, #1
 801a0b6:	b280      	uxth	r0, r0
 801a0b8:	4291      	cmp	r1, r2
 801a0ba:	dd24      	ble.n	801a106 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a0bc:	4288      	cmp	r0, r1
 801a0be:	d2fb      	bcs.n	801a0b8 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a0c0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a0c4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a0c8:	3304      	adds	r3, #4
 801a0ca:	428b      	cmp	r3, r1
 801a0cc:	d018      	beq.n	801a100 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a0ce:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a0d2:	f843 6c04 	str.w	r6, [r3, #-4]
 801a0d6:	e7f8      	b.n	801a0ca <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a0d8:	18e1      	adds	r1, r4, r3
 801a0da:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a0de:	b16d      	cbz	r5, 801a0fc <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a0e0:	429a      	cmp	r2, r3
 801a0e2:	d00a      	beq.n	801a0fa <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a0e4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a0e8:	4431      	add	r1, r6
 801a0ea:	684e      	ldr	r6, [r1, #4]
 801a0ec:	b291      	uxth	r1, r2
 801a0ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a0f2:	604e      	str	r6, [r1, #4]
 801a0f4:	18a1      	adds	r1, r4, r2
 801a0f6:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a0fa:	3201      	adds	r2, #1
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	e7d4      	b.n	801a0aa <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a100:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a104:	e7d4      	b.n	801a0b0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a106:	4b04      	ldr	r3, [pc, #16]	; (801a118 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a108:	6818      	ldr	r0, [r3, #0]
 801a10a:	b110      	cbz	r0, 801a112 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a10c:	6803      	ldr	r3, [r0, #0]
 801a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a110:	e7a1      	b.n	801a056 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a112:	bd70      	pop	{r4, r5, r6, pc}
 801a114:	20014b94 	.word	0x20014b94
 801a118:	20014b90 	.word	0x20014b90

0801a11c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a11c:	b570      	push	{r4, r5, r6, lr}
 801a11e:	4606      	mov	r6, r0
 801a120:	460c      	mov	r4, r1
 801a122:	b929      	cbnz	r1, 801a130 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a124:	4b0c      	ldr	r3, [pc, #48]	; (801a158 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a126:	2164      	movs	r1, #100	; 0x64
 801a128:	4a0c      	ldr	r2, [pc, #48]	; (801a15c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a12a:	480d      	ldr	r0, [pc, #52]	; (801a160 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a12c:	f010 fb32 	bl	802a794 <__assert_func>
 801a130:	2300      	movs	r3, #0
 801a132:	4d0c      	ldr	r5, [pc, #48]	; (801a164 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a134:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a138:	6828      	ldr	r0, [r5, #0]
 801a13a:	b110      	cbz	r0, 801a142 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a13c:	6803      	ldr	r3, [r0, #0]
 801a13e:	695b      	ldr	r3, [r3, #20]
 801a140:	4798      	blx	r3
 801a142:	602c      	str	r4, [r5, #0]
 801a144:	4620      	mov	r0, r4
 801a146:	6823      	ldr	r3, [r4, #0]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	4798      	blx	r3
 801a14c:	6833      	ldr	r3, [r6, #0]
 801a14e:	4630      	mov	r0, r6
 801a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a156:	4718      	bx	r3
 801a158:	0802f7c0 	.word	0x0802f7c0
 801a15c:	0802f890 	.word	0x0802f890
 801a160:	0802f7ca 	.word	0x0802f7ca
 801a164:	20014b90 	.word	0x20014b90

0801a168 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a168:	b510      	push	{r4, lr}
 801a16a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a16e:	888a      	ldrh	r2, [r1, #4]
 801a170:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a174:	4422      	add	r2, r4
 801a176:	b212      	sxth	r2, r2
 801a178:	4293      	cmp	r3, r2
 801a17a:	da15      	bge.n	801a1a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a17c:	8882      	ldrh	r2, [r0, #4]
 801a17e:	4413      	add	r3, r2
 801a180:	b21b      	sxth	r3, r3
 801a182:	429c      	cmp	r4, r3
 801a184:	da10      	bge.n	801a1a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a186:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a18a:	88c9      	ldrh	r1, [r1, #6]
 801a18c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a190:	4419      	add	r1, r3
 801a192:	b209      	sxth	r1, r1
 801a194:	428a      	cmp	r2, r1
 801a196:	da07      	bge.n	801a1a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a198:	88c0      	ldrh	r0, [r0, #6]
 801a19a:	4410      	add	r0, r2
 801a19c:	b200      	sxth	r0, r0
 801a19e:	4283      	cmp	r3, r0
 801a1a0:	bfac      	ite	ge
 801a1a2:	2000      	movge	r0, #0
 801a1a4:	2001      	movlt	r0, #1
 801a1a6:	bd10      	pop	{r4, pc}
 801a1a8:	2000      	movs	r0, #0
 801a1aa:	e7fc      	b.n	801a1a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a1ac <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a1ac:	b570      	push	{r4, r5, r6, lr}
 801a1ae:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a1b2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a1b6:	42ac      	cmp	r4, r5
 801a1b8:	db18      	blt.n	801a1ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a1ba:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a1be:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	db12      	blt.n	801a1ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a1c6:	8886      	ldrh	r6, [r0, #4]
 801a1c8:	4435      	add	r5, r6
 801a1ca:	888e      	ldrh	r6, [r1, #4]
 801a1cc:	4434      	add	r4, r6
 801a1ce:	b22d      	sxth	r5, r5
 801a1d0:	b224      	sxth	r4, r4
 801a1d2:	42a5      	cmp	r5, r4
 801a1d4:	db0a      	blt.n	801a1ec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a1d6:	88c0      	ldrh	r0, [r0, #6]
 801a1d8:	4418      	add	r0, r3
 801a1da:	88cb      	ldrh	r3, [r1, #6]
 801a1dc:	441a      	add	r2, r3
 801a1de:	b200      	sxth	r0, r0
 801a1e0:	b212      	sxth	r2, r2
 801a1e2:	4290      	cmp	r0, r2
 801a1e4:	bfb4      	ite	lt
 801a1e6:	2000      	movlt	r0, #0
 801a1e8:	2001      	movge	r0, #1
 801a1ea:	bd70      	pop	{r4, r5, r6, pc}
 801a1ec:	2000      	movs	r0, #0
 801a1ee:	e7fc      	b.n	801a1ea <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a1f0 <_ZN8touchgfx11Application11getInstanceEv>:
 801a1f0:	4b01      	ldr	r3, [pc, #4]	; (801a1f8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a1f2:	6818      	ldr	r0, [r3, #0]
 801a1f4:	4770      	bx	lr
 801a1f6:	bf00      	nop
 801a1f8:	20014ba0 	.word	0x20014ba0

0801a1fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a202:	30a8      	adds	r0, #168	; 0xa8
 801a204:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a208:	f802 3b01 	strb.w	r3, [r2], #1
 801a20c:	4282      	cmp	r2, r0
 801a20e:	d1fb      	bne.n	801a208 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a210:	4770      	bx	lr

0801a212 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a212:	4603      	mov	r3, r0
 801a214:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a218:	2200      	movs	r2, #0
 801a21a:	801a      	strh	r2, [r3, #0]
 801a21c:	3308      	adds	r3, #8
 801a21e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a222:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a226:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a22a:	428b      	cmp	r3, r1
 801a22c:	d1f5      	bne.n	801a21a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a22e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a232:	4770      	bx	lr

0801a234 <_ZN8touchgfx11ApplicationC1Ev>:
 801a234:	b570      	push	{r4, r5, r6, lr}
 801a236:	4b1a      	ldr	r3, [pc, #104]	; (801a2a0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a238:	2500      	movs	r5, #0
 801a23a:	4604      	mov	r4, r0
 801a23c:	30a8      	adds	r0, #168	; 0xa8
 801a23e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a242:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a246:	f7ff ffe4 	bl	801a212 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a24a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a24e:	f7ff ffe0 	bl	801a212 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a252:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a256:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a25a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a25e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a262:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a266:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801a26a:	490e      	ldr	r1, [pc, #56]	; (801a2a4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a26c:	480e      	ldr	r0, [pc, #56]	; (801a2a8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a26e:	f00e fd67 	bl	8028d40 <CRC_Lock>
 801a272:	4e0e      	ldr	r6, [pc, #56]	; (801a2ac <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a274:	4b0e      	ldr	r3, [pc, #56]	; (801a2b0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a276:	b158      	cbz	r0, 801a290 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801a278:	801d      	strh	r5, [r3, #0]
 801a27a:	2300      	movs	r3, #0
 801a27c:	4a0d      	ldr	r2, [pc, #52]	; (801a2b4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a27e:	4620      	mov	r0, r4
 801a280:	6013      	str	r3, [r2, #0]
 801a282:	4a0d      	ldr	r2, [pc, #52]	; (801a2b8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a284:	6033      	str	r3, [r6, #0]
 801a286:	6013      	str	r3, [r2, #0]
 801a288:	f7ff ffb8 	bl	801a1fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a28c:	4620      	mov	r0, r4
 801a28e:	bd70      	pop	{r4, r5, r6, pc}
 801a290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a294:	2002      	movs	r0, #2
 801a296:	801a      	strh	r2, [r3, #0]
 801a298:	6030      	str	r0, [r6, #0]
 801a29a:	f001 fb27 	bl	801b8ec <_ZN8touchgfx6Screen4drawEv>
 801a29e:	e7ec      	b.n	801a27a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a2a0:	0802f854 	.word	0x0802f854
 801a2a4:	b5e8b5cd 	.word	0xb5e8b5cd
 801a2a8:	f407a5c2 	.word	0xf407a5c2
 801a2ac:	20014b90 	.word	0x20014b90
 801a2b0:	2000001c 	.word	0x2000001c
 801a2b4:	20014ba0 	.word	0x20014ba0
 801a2b8:	20014b94 	.word	0x20014b94

0801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a2bc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a2c0:	428b      	cmp	r3, r1
 801a2c2:	b510      	push	{r4, lr}
 801a2c4:	d90e      	bls.n	801a2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	b29b      	uxth	r3, r3
 801a2ca:	428b      	cmp	r3, r1
 801a2cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a2d0:	d908      	bls.n	801a2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a2d2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a2d6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a2da:	681a      	ldr	r2, [r3, #0]
 801a2dc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a2e0:	685a      	ldr	r2, [r3, #4]
 801a2e2:	6062      	str	r2, [r4, #4]
 801a2e4:	bd10      	pop	{r4, pc}
	...

0801a2e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a2e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2ea:	466b      	mov	r3, sp
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	e883 0006 	stmia.w	r3, {r1, r2}
 801a2f2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a2f6:	2a07      	cmp	r2, #7
 801a2f8:	d906      	bls.n	801a308 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a2fa:	4b09      	ldr	r3, [pc, #36]	; (801a320 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a2fc:	f240 118f 	movw	r1, #399	; 0x18f
 801a300:	4a08      	ldr	r2, [pc, #32]	; (801a324 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a302:	4809      	ldr	r0, [pc, #36]	; (801a328 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a304:	f010 fa46 	bl	802a794 <__assert_func>
 801a308:	1c51      	adds	r1, r2, #1
 801a30a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a30e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a312:	cb03      	ldmia	r3!, {r0, r1}
 801a314:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a318:	6069      	str	r1, [r5, #4]
 801a31a:	b003      	add	sp, #12
 801a31c:	bd30      	pop	{r4, r5, pc}
 801a31e:	bf00      	nop
 801a320:	0802f7f4 	.word	0x0802f7f4
 801a324:	0802f8d4 	.word	0x0802f8d4
 801a328:	0802f823 	.word	0x0802f823

0801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a330:	b08d      	sub	sp, #52	; 0x34
 801a332:	4683      	mov	fp, r0
 801a334:	ac08      	add	r4, sp, #32
 801a336:	4620      	mov	r0, r4
 801a338:	e884 0006 	stmia.w	r4, {r1, r2}
 801a33c:	f7fb f9fb 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a340:	2800      	cmp	r0, #0
 801a342:	d16a      	bne.n	801a41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a344:	9402      	str	r4, [sp, #8]
 801a346:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a34a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a34e:	2400      	movs	r4, #0
 801a350:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a354:	9301      	str	r3, [sp, #4]
 801a356:	36a0      	adds	r6, #160	; 0xa0
 801a358:	42a5      	cmp	r5, r4
 801a35a:	d00d      	beq.n	801a378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a35c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a360:	9802      	ldr	r0, [sp, #8]
 801a362:	f7ff ff23 	bl	801a1ac <_ZNK8touchgfx4Rect8includesERKS0_>
 801a366:	b128      	cbz	r0, 801a374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a368:	1e69      	subs	r1, r5, #1
 801a36a:	9801      	ldr	r0, [sp, #4]
 801a36c:	1b09      	subs	r1, r1, r4
 801a36e:	b289      	uxth	r1, r1
 801a370:	f7ff ffa4 	bl	801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a374:	3401      	adds	r4, #1
 801a376:	e7ef      	b.n	801a358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a378:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a37c:	1e7b      	subs	r3, r7, #1
 801a37e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a382:	9703      	str	r7, [sp, #12]
 801a384:	9300      	str	r3, [sp, #0]
 801a386:	2400      	movs	r4, #0
 801a388:	4655      	mov	r5, sl
 801a38a:	9704      	str	r7, [sp, #16]
 801a38c:	4626      	mov	r6, r4
 801a38e:	9b04      	ldr	r3, [sp, #16]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d078      	beq.n	801a486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a394:	9902      	ldr	r1, [sp, #8]
 801a396:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a39a:	f7ff fee5 	bl	801a168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a39e:	b360      	cbz	r0, 801a3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a3a0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a3a4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a3a8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a3ac:	45e6      	cmp	lr, ip
 801a3ae:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a3b2:	db35      	blt.n	801a420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a3b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a3b8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a3bc:	4472      	add	r2, lr
 801a3be:	4463      	add	r3, ip
 801a3c0:	b212      	sxth	r2, r2
 801a3c2:	b21b      	sxth	r3, r3
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	dc2b      	bgt.n	801a420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a3c8:	fa1f f288 	uxth.w	r2, r8
 801a3cc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a3d0:	45c1      	cmp	r9, r8
 801a3d2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a3d6:	4413      	add	r3, r2
 801a3d8:	fa1f fc89 	uxth.w	ip, r9
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	fa0f fe83 	sxth.w	lr, r3
 801a3e2:	db0f      	blt.n	801a404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a3e4:	eba3 030c 	sub.w	r3, r3, ip
 801a3e8:	1ac9      	subs	r1, r1, r3
 801a3ea:	b209      	sxth	r1, r1
 801a3ec:	2900      	cmp	r1, #0
 801a3ee:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a3f2:	dd12      	ble.n	801a41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a3f4:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a3f8:	4604      	mov	r4, r0
 801a3fa:	9b04      	ldr	r3, [sp, #16]
 801a3fc:	3d08      	subs	r5, #8
 801a3fe:	3b01      	subs	r3, #1
 801a400:	9304      	str	r3, [sp, #16]
 801a402:	e7c4      	b.n	801a38e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a404:	4461      	add	r1, ip
 801a406:	b209      	sxth	r1, r1
 801a408:	4571      	cmp	r1, lr
 801a40a:	dc3a      	bgt.n	801a482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a40c:	eba2 020c 	sub.w	r2, r2, ip
 801a410:	b212      	sxth	r2, r2
 801a412:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a416:	2a00      	cmp	r2, #0
 801a418:	dcee      	bgt.n	801a3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a41a:	b00d      	add	sp, #52	; 0x34
 801a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a420:	45c1      	cmp	r9, r8
 801a422:	db2e      	blt.n	801a482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a424:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a428:	4499      	add	r9, r3
 801a42a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a42e:	4498      	add	r8, r3
 801a430:	fa0f f989 	sxth.w	r9, r9
 801a434:	fa0f f888 	sxth.w	r8, r8
 801a438:	45c1      	cmp	r9, r8
 801a43a:	dc22      	bgt.n	801a482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a43c:	fa1f f28c 	uxth.w	r2, ip
 801a440:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a444:	45e6      	cmp	lr, ip
 801a446:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a44a:	4413      	add	r3, r2
 801a44c:	fa1f f88e 	uxth.w	r8, lr
 801a450:	b29b      	uxth	r3, r3
 801a452:	fa0f f983 	sxth.w	r9, r3
 801a456:	db0a      	blt.n	801a46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a458:	eba3 0308 	sub.w	r3, r3, r8
 801a45c:	1ac9      	subs	r1, r1, r3
 801a45e:	b209      	sxth	r1, r1
 801a460:	2900      	cmp	r1, #0
 801a462:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a466:	ddd8      	ble.n	801a41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a468:	f8ad 9020 	strh.w	r9, [sp, #32]
 801a46c:	e7c4      	b.n	801a3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a46e:	4441      	add	r1, r8
 801a470:	b209      	sxth	r1, r1
 801a472:	4549      	cmp	r1, r9
 801a474:	dc05      	bgt.n	801a482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a476:	eba2 0208 	sub.w	r2, r2, r8
 801a47a:	b212      	sxth	r2, r2
 801a47c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a480:	e7c9      	b.n	801a416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a482:	4606      	mov	r6, r0
 801a484:	e7b9      	b.n	801a3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a486:	2c00      	cmp	r4, #0
 801a488:	f47f af7d 	bne.w	801a386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a48c:	2e00      	cmp	r6, #0
 801a48e:	f000 81dc 	beq.w	801a84a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a492:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801a496:	4655      	mov	r5, sl
 801a498:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801a49c:	b2b9      	uxth	r1, r7
 801a49e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a4a2:	b2b3      	uxth	r3, r6
 801a4a4:	9104      	str	r1, [sp, #16]
 801a4a6:	9804      	ldr	r0, [sp, #16]
 801a4a8:	441a      	add	r2, r3
 801a4aa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a4ae:	b292      	uxth	r2, r2
 801a4b0:	4401      	add	r1, r0
 801a4b2:	fa0f f882 	sxth.w	r8, r2
 801a4b6:	b289      	uxth	r1, r1
 801a4b8:	9105      	str	r1, [sp, #20]
 801a4ba:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801a4be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a4c2:	9b03      	ldr	r3, [sp, #12]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d054      	beq.n	801a572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a4c8:	9902      	ldr	r1, [sp, #8]
 801a4ca:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a4ce:	f7ff fe4b 	bl	801a168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a4d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a4d6:	b1d8      	cbz	r0, 801a510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a4d8:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a4dc:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a4e0:	4576      	cmp	r6, lr
 801a4e2:	dc26      	bgt.n	801a532 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a4e4:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a4e8:	44f4      	add	ip, lr
 801a4ea:	fa0f fc8c 	sxth.w	ip, ip
 801a4ee:	45e0      	cmp	r8, ip
 801a4f0:	db1f      	blt.n	801a532 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a4f2:	428f      	cmp	r7, r1
 801a4f4:	fa1f fc81 	uxth.w	ip, r1
 801a4f8:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a4fc:	dc0f      	bgt.n	801a51e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801a4fe:	9805      	ldr	r0, [sp, #20]
 801a500:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a504:	eba0 0c0c 	sub.w	ip, r0, ip
 801a508:	eba1 010c 	sub.w	r1, r1, ip
 801a50c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a510:	4620      	mov	r0, r4
 801a512:	9903      	ldr	r1, [sp, #12]
 801a514:	3d08      	subs	r5, #8
 801a516:	4604      	mov	r4, r0
 801a518:	3901      	subs	r1, #1
 801a51a:	9103      	str	r1, [sp, #12]
 801a51c:	e7cf      	b.n	801a4be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801a51e:	4461      	add	r1, ip
 801a520:	b209      	sxth	r1, r1
 801a522:	4549      	cmp	r1, r9
 801a524:	dcf5      	bgt.n	801a512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a526:	9904      	ldr	r1, [sp, #16]
 801a528:	eba1 0c0c 	sub.w	ip, r1, ip
 801a52c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a530:	e7ee      	b.n	801a510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a532:	428f      	cmp	r7, r1
 801a534:	dced      	bgt.n	801a512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a536:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a53a:	4461      	add	r1, ip
 801a53c:	b209      	sxth	r1, r1
 801a53e:	4589      	cmp	r9, r1
 801a540:	dbe7      	blt.n	801a512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a542:	4576      	cmp	r6, lr
 801a544:	fa1f fc8e 	uxth.w	ip, lr
 801a548:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a54c:	dc08      	bgt.n	801a560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801a54e:	eba2 0c0c 	sub.w	ip, r2, ip
 801a552:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a556:	eba1 010c 	sub.w	r1, r1, ip
 801a55a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a55e:	e7d7      	b.n	801a510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a560:	4461      	add	r1, ip
 801a562:	b209      	sxth	r1, r1
 801a564:	4588      	cmp	r8, r1
 801a566:	dbd4      	blt.n	801a512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a568:	eba3 0c0c 	sub.w	ip, r3, ip
 801a56c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a570:	e7ce      	b.n	801a510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a572:	2c00      	cmp	r4, #0
 801a574:	f000 8169 	beq.w	801a84a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a578:	9b00      	ldr	r3, [sp, #0]
 801a57a:	3301      	adds	r3, #1
 801a57c:	f000 8165 	beq.w	801a84a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a580:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a584:	9802      	ldr	r0, [sp, #8]
 801a586:	4621      	mov	r1, r4
 801a588:	f7ff fe10 	bl	801a1ac <_ZNK8touchgfx4Rect8includesERKS0_>
 801a58c:	b120      	cbz	r0, 801a598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801a58e:	f8bd 1000 	ldrh.w	r1, [sp]
 801a592:	9801      	ldr	r0, [sp, #4]
 801a594:	f7ff fe92 	bl	801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a598:	9902      	ldr	r1, [sp, #8]
 801a59a:	4620      	mov	r0, r4
 801a59c:	f7ff fde4 	bl	801a168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	f000 809b 	beq.w	801a6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801a5a6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a5aa:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801a5ae:	fa1f f288 	uxth.w	r2, r8
 801a5b2:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801a5b6:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801a5ba:	19d5      	adds	r5, r2, r7
 801a5bc:	b2a1      	uxth	r1, r4
 801a5be:	45a0      	cmp	r8, r4
 801a5c0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a5c4:	fa1f f985 	uxth.w	r9, r5
 801a5c8:	440b      	add	r3, r1
 801a5ca:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801a5ce:	fa0f f589 	sxth.w	r5, r9
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	9503      	str	r5, [sp, #12]
 801a5d6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a5da:	9507      	str	r5, [sp, #28]
 801a5dc:	f340 809d 	ble.w	801a71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a5e0:	1a52      	subs	r2, r2, r1
 801a5e2:	4584      	cmp	ip, r0
 801a5e4:	fa0f fe83 	sxth.w	lr, r3
 801a5e8:	b292      	uxth	r2, r2
 801a5ea:	b215      	sxth	r5, r2
 801a5ec:	dd2f      	ble.n	801a64e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801a5ee:	9e00      	ldr	r6, [sp, #0]
 801a5f0:	fa1f fc8c 	uxth.w	ip, ip
 801a5f4:	b280      	uxth	r0, r0
 801a5f6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a5fa:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801a5fe:	9e03      	ldr	r6, [sp, #12]
 801a600:	ebac 0300 	sub.w	r3, ip, r0
 801a604:	448c      	add	ip, r1
 801a606:	eba6 060e 	sub.w	r6, r6, lr
 801a60a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801a60e:	b29b      	uxth	r3, r3
 801a610:	4470      	add	r0, lr
 801a612:	fa0f fc8c 	sxth.w	ip, ip
 801a616:	b21c      	sxth	r4, r3
 801a618:	b200      	sxth	r0, r0
 801a61a:	4366      	muls	r6, r4
 801a61c:	ebac 0000 	sub.w	r0, ip, r0
 801a620:	4368      	muls	r0, r5
 801a622:	4286      	cmp	r6, r0
 801a624:	db09      	blt.n	801a63a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801a626:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801a62a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a62e:	4417      	add	r7, r2
 801a630:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a634:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a638:	e685      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a63a:	440b      	add	r3, r1
 801a63c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801a640:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a644:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a648:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a64c:	e67b      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a64e:	9e03      	ldr	r6, [sp, #12]
 801a650:	45b6      	cmp	lr, r6
 801a652:	da28      	bge.n	801a6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801a654:	9b00      	ldr	r3, [sp, #0]
 801a656:	eba6 060e 	sub.w	r6, r6, lr
 801a65a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801a65e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801a662:	eb04 030c 	add.w	r3, r4, ip
 801a666:	fa1f f883 	uxth.w	r8, r3
 801a66a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801a66e:	4403      	add	r3, r0
 801a670:	fa0f f988 	sxth.w	r9, r8
 801a674:	eba0 000c 	sub.w	r0, r0, ip
 801a678:	eba3 0308 	sub.w	r3, r3, r8
 801a67c:	4368      	muls	r0, r5
 801a67e:	b29b      	uxth	r3, r3
 801a680:	fa0f f883 	sxth.w	r8, r3
 801a684:	fb08 f606 	mul.w	r6, r8, r6
 801a688:	42b0      	cmp	r0, r6
 801a68a:	dc06      	bgt.n	801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801a68c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801a690:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801a694:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801a698:	e7c9      	b.n	801a62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801a69a:	4423      	add	r3, r4
 801a69c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801a6a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a6a4:	e64f      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a6a6:	eba3 0309 	sub.w	r3, r3, r9
 801a6aa:	9807      	ldr	r0, [sp, #28]
 801a6ac:	b29b      	uxth	r3, r3
 801a6ae:	2806      	cmp	r0, #6
 801a6b0:	fa0f fc83 	sxth.w	ip, r3
 801a6b4:	d818      	bhi.n	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801a6b6:	4652      	mov	r2, sl
 801a6b8:	ab0a      	add	r3, sp, #40	; 0x28
 801a6ba:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801a6be:	6851      	ldr	r1, [r2, #4]
 801a6c0:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801a6c4:	c303      	stmia	r3!, {r0, r1}
 801a6c6:	9b03      	ldr	r3, [sp, #12]
 801a6c8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801a6cc:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a6d0:	ab0a      	add	r3, sp, #40	; 0x28
 801a6d2:	9801      	ldr	r0, [sp, #4]
 801a6d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a6d8:	f7ff fe06 	bl	801a2e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a6dc:	9b00      	ldr	r3, [sp, #0]
 801a6de:	f1aa 0a08 	sub.w	sl, sl, #8
 801a6e2:	3b01      	subs	r3, #1
 801a6e4:	9300      	str	r3, [sp, #0]
 801a6e6:	e747      	b.n	801a578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a6e8:	9800      	ldr	r0, [sp, #0]
 801a6ea:	45ac      	cmp	ip, r5
 801a6ec:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a6f0:	db0c      	blt.n	801a70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801a6f2:	4417      	add	r7, r2
 801a6f4:	4458      	add	r0, fp
 801a6f6:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a6fa:	b2bf      	uxth	r7, r7
 801a6fc:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801a700:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a704:	440f      	add	r7, r1
 801a706:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801a70a:	e61c      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a70c:	4458      	add	r0, fp
 801a70e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801a712:	443b      	add	r3, r7
 801a714:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a718:	e615      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a71a:	fa1f f18c 	uxth.w	r1, ip
 801a71e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801a722:	b282      	uxth	r2, r0
 801a724:	4584      	cmp	ip, r0
 801a726:	eb01 0e05 	add.w	lr, r1, r5
 801a72a:	9204      	str	r2, [sp, #16]
 801a72c:	fa1f fe8e 	uxth.w	lr, lr
 801a730:	9e04      	ldr	r6, [sp, #16]
 801a732:	fa0f f28e 	sxth.w	r2, lr
 801a736:	9205      	str	r2, [sp, #20]
 801a738:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801a73c:	4432      	add	r2, r6
 801a73e:	b292      	uxth	r2, r2
 801a740:	9206      	str	r2, [sp, #24]
 801a742:	da26      	bge.n	801a792 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801a744:	eba3 0309 	sub.w	r3, r3, r9
 801a748:	eba2 020e 	sub.w	r2, r2, lr
 801a74c:	eba0 000c 	sub.w	r0, r0, ip
 801a750:	eba4 0408 	sub.w	r4, r4, r8
 801a754:	b29b      	uxth	r3, r3
 801a756:	b292      	uxth	r2, r2
 801a758:	fa0f fa83 	sxth.w	sl, r3
 801a75c:	b211      	sxth	r1, r2
 801a75e:	fb0a f000 	mul.w	r0, sl, r0
 801a762:	434c      	muls	r4, r1
 801a764:	42a0      	cmp	r0, r4
 801a766:	9800      	ldr	r0, [sp, #0]
 801a768:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a76c:	dc06      	bgt.n	801a77c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801a76e:	4458      	add	r0, fp
 801a770:	9a05      	ldr	r2, [sp, #20]
 801a772:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801a776:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801a77a:	e7ca      	b.n	801a712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a77c:	eb0b 0300 	add.w	r3, fp, r0
 801a780:	9903      	ldr	r1, [sp, #12]
 801a782:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801a786:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801a78a:	442a      	add	r2, r5
 801a78c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a790:	e5d9      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a792:	9e04      	ldr	r6, [sp, #16]
 801a794:	9a03      	ldr	r2, [sp, #12]
 801a796:	1b89      	subs	r1, r1, r6
 801a798:	b21e      	sxth	r6, r3
 801a79a:	b289      	uxth	r1, r1
 801a79c:	4296      	cmp	r6, r2
 801a79e:	fa0f fc81 	sxth.w	ip, r1
 801a7a2:	dd25      	ble.n	801a7f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801a7a4:	eba3 0309 	sub.w	r3, r3, r9
 801a7a8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801a7ac:	9e05      	ldr	r6, [sp, #20]
 801a7ae:	eba4 0408 	sub.w	r4, r4, r8
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	eba6 0902 	sub.w	r9, r6, r2
 801a7b8:	fb0c f404 	mul.w	r4, ip, r4
 801a7bc:	b218      	sxth	r0, r3
 801a7be:	9a00      	ldr	r2, [sp, #0]
 801a7c0:	fb00 f909 	mul.w	r9, r0, r9
 801a7c4:	00d2      	lsls	r2, r2, #3
 801a7c6:	454c      	cmp	r4, r9
 801a7c8:	db03      	blt.n	801a7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801a7ca:	445a      	add	r2, fp
 801a7cc:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801a7d0:	e79f      	b.n	801a712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a7d2:	eb0b 0302 	add.w	r3, fp, r2
 801a7d6:	9a03      	ldr	r2, [sp, #12]
 801a7d8:	4429      	add	r1, r5
 801a7da:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a7de:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801a7e2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a7e6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a7ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a7ee:	e5aa      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a7f0:	9b06      	ldr	r3, [sp, #24]
 801a7f2:	9c07      	ldr	r4, [sp, #28]
 801a7f4:	eba3 020e 	sub.w	r2, r3, lr
 801a7f8:	2c06      	cmp	r4, #6
 801a7fa:	b292      	uxth	r2, r2
 801a7fc:	b213      	sxth	r3, r2
 801a7fe:	d80d      	bhi.n	801a81c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801a800:	4651      	mov	r1, sl
 801a802:	aa0a      	add	r2, sp, #40	; 0x28
 801a804:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801a808:	6849      	ldr	r1, [r1, #4]
 801a80a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801a80e:	9b05      	ldr	r3, [sp, #20]
 801a810:	c203      	stmia	r2!, {r0, r1}
 801a812:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a816:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801a81a:	e759      	b.n	801a6d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801a81c:	9c00      	ldr	r4, [sp, #0]
 801a81e:	4563      	cmp	r3, ip
 801a820:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a824:	db0d      	blt.n	801a842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801a826:	4429      	add	r1, r5
 801a828:	9a04      	ldr	r2, [sp, #16]
 801a82a:	445c      	add	r4, fp
 801a82c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a830:	b289      	uxth	r1, r1
 801a832:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801a836:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a83a:	4411      	add	r1, r2
 801a83c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801a840:	e581      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a842:	445c      	add	r4, fp
 801a844:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801a848:	e79f      	b.n	801a78a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801a84a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a84e:	2f07      	cmp	r7, #7
 801a850:	d806      	bhi.n	801a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801a852:	ab08      	add	r3, sp, #32
 801a854:	9801      	ldr	r0, [sp, #4]
 801a856:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a85a:	f7ff fd45 	bl	801a2e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a85e:	e5dc      	b.n	801a41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a860:	f107 39ff 	add.w	r9, r7, #4294967295
 801a864:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a868:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801a86c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a870:	f04f 35ff 	mov.w	r5, #4294967295
 801a874:	2400      	movs	r4, #0
 801a876:	9304      	str	r3, [sp, #16]
 801a878:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801a87c:	f109 32ff 	add.w	r2, r9, #4294967295
 801a880:	9300      	str	r3, [sp, #0]
 801a882:	4690      	mov	r8, r2
 801a884:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801a888:	9303      	str	r3, [sp, #12]
 801a88a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a88e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a892:	6818      	ldr	r0, [r3, #0]
 801a894:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801a898:	9206      	str	r2, [sp, #24]
 801a89a:	bf16      	itet	ne
 801a89c:	9904      	ldrne	r1, [sp, #16]
 801a89e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801a8a2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801a8a6:	9305      	str	r3, [sp, #20]
 801a8a8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a8ac:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801a8b0:	fb16 f601 	smulbb	r6, r6, r1
 801a8b4:	6859      	ldr	r1, [r3, #4]
 801a8b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a8ba:	4671      	mov	r1, lr
 801a8bc:	a80a      	add	r0, sp, #40	; 0x28
 801a8be:	f7fc fe48 	bl	8017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a8c2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a8c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a8ca:	9b03      	ldr	r3, [sp, #12]
 801a8cc:	9a00      	ldr	r2, [sp, #0]
 801a8ce:	fb11 f100 	smulbb	r1, r1, r0
 801a8d2:	2008      	movs	r0, #8
 801a8d4:	fb02 6603 	mla	r6, r2, r3, r6
 801a8d8:	1b8e      	subs	r6, r1, r6
 801a8da:	fb91 f1f0 	sdiv	r1, r1, r0
 801a8de:	42b1      	cmp	r1, r6
 801a8e0:	dc21      	bgt.n	801a926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a8e2:	4556      	cmp	r6, sl
 801a8e4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801a8e8:	da03      	bge.n	801a8f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801a8ea:	b1e6      	cbz	r6, 801a926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a8ec:	46b2      	mov	sl, r6
 801a8ee:	4645      	mov	r5, r8
 801a8f0:	464c      	mov	r4, r9
 801a8f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801a8f6:	f118 0f02 	cmn.w	r8, #2
 801a8fa:	d1c8      	bne.n	801a88e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801a8fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a900:	f1a7 0708 	sub.w	r7, r7, #8
 801a904:	4691      	mov	r9, r2
 801a906:	d1b7      	bne.n	801a878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801a908:	9b01      	ldr	r3, [sp, #4]
 801a90a:	b2a6      	uxth	r6, r4
 801a90c:	00e4      	lsls	r4, r4, #3
 801a90e:	1918      	adds	r0, r3, r4
 801a910:	1c6b      	adds	r3, r5, #1
 801a912:	d10b      	bne.n	801a92c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801a914:	4601      	mov	r1, r0
 801a916:	9802      	ldr	r0, [sp, #8]
 801a918:	f7fc fe1b 	bl	8017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a91c:	4631      	mov	r1, r6
 801a91e:	9801      	ldr	r0, [sp, #4]
 801a920:	f7ff fccc 	bl	801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a924:	e50f      	b.n	801a346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a926:	4645      	mov	r5, r8
 801a928:	464c      	mov	r4, r9
 801a92a:	e7ed      	b.n	801a908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801a92c:	9b01      	ldr	r3, [sp, #4]
 801a92e:	00ed      	lsls	r5, r5, #3
 801a930:	445c      	add	r4, fp
 801a932:	1959      	adds	r1, r3, r5
 801a934:	445d      	add	r5, fp
 801a936:	f7fc fe0c 	bl	8017552 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a93a:	9b02      	ldr	r3, [sp, #8]
 801a93c:	cb03      	ldmia	r3!, {r0, r1}
 801a93e:	9b02      	ldr	r3, [sp, #8]
 801a940:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801a944:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801a948:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801a94c:	6861      	ldr	r1, [r4, #4]
 801a94e:	c303      	stmia	r3!, {r0, r1}
 801a950:	e7e4      	b.n	801a91c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801a954 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a954:	4b1d      	ldr	r3, [pc, #116]	; (801a9cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a956:	b530      	push	{r4, r5, lr}
 801a958:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a95c:	b085      	sub	sp, #20
 801a95e:	4b1c      	ldr	r3, [pc, #112]	; (801a9d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a960:	460c      	mov	r4, r1
 801a962:	2100      	movs	r1, #0
 801a964:	4605      	mov	r5, r0
 801a966:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a96a:	6820      	ldr	r0, [r4, #0]
 801a96c:	9100      	str	r1, [sp, #0]
 801a96e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a972:	ab02      	add	r3, sp, #8
 801a974:	6861      	ldr	r1, [r4, #4]
 801a976:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a97a:	c303      	stmia	r3!, {r0, r1}
 801a97c:	4669      	mov	r1, sp
 801a97e:	a802      	add	r0, sp, #8
 801a980:	f7fa fe96 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801a984:	ab02      	add	r3, sp, #8
 801a986:	cb03      	ldmia	r3!, {r0, r1}
 801a988:	4b12      	ldr	r3, [pc, #72]	; (801a9d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801a98a:	6020      	str	r0, [r4, #0]
 801a98c:	6818      	ldr	r0, [r3, #0]
 801a98e:	6061      	str	r1, [r4, #4]
 801a990:	b138      	cbz	r0, 801a9a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a992:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801a996:	b133      	cbz	r3, 801a9a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801a998:	6821      	ldr	r1, [r4, #0]
 801a99a:	4628      	mov	r0, r5
 801a99c:	6862      	ldr	r2, [r4, #4]
 801a99e:	f7ff fcc5 	bl	801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a9a2:	b005      	add	sp, #20
 801a9a4:	bd30      	pop	{r4, r5, pc}
 801a9a6:	6803      	ldr	r3, [r0, #0]
 801a9a8:	4621      	mov	r1, r4
 801a9aa:	689b      	ldr	r3, [r3, #8]
 801a9ac:	4798      	blx	r3
 801a9ae:	4b0a      	ldr	r3, [pc, #40]	; (801a9d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801a9b0:	6818      	ldr	r0, [r3, #0]
 801a9b2:	b118      	cbz	r0, 801a9bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801a9b4:	6803      	ldr	r3, [r0, #0]
 801a9b6:	4621      	mov	r1, r4
 801a9b8:	689b      	ldr	r3, [r3, #8]
 801a9ba:	4798      	blx	r3
 801a9bc:	4b07      	ldr	r3, [pc, #28]	; (801a9dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801a9be:	4621      	mov	r1, r4
 801a9c0:	6818      	ldr	r0, [r3, #0]
 801a9c2:	6803      	ldr	r3, [r0, #0]
 801a9c4:	695b      	ldr	r3, [r3, #20]
 801a9c6:	4798      	blx	r3
 801a9c8:	e7eb      	b.n	801a9a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a9ca:	bf00      	nop
 801a9cc:	20014b28 	.word	0x20014b28
 801a9d0:	20014b2a 	.word	0x20014b2a
 801a9d4:	20014b90 	.word	0x20014b90
 801a9d8:	20014b8c 	.word	0x20014b8c
 801a9dc:	20014b34 	.word	0x20014b34

0801a9e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e4:	4604      	mov	r4, r0
 801a9e6:	b09b      	sub	sp, #108	; 0x6c
 801a9e8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801a9ec:	b129      	cbz	r1, 801a9fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a9f4:	b01b      	add	sp, #108	; 0x6c
 801a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9fa:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a9fe:	4630      	mov	r0, r6
 801aa00:	f7fa fe99 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa04:	4605      	mov	r5, r0
 801aa06:	b940      	cbnz	r0, 801aa1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801aa08:	4620      	mov	r0, r4
 801aa0a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801aa0e:	f7ff fc8d 	bl	801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801aa12:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801aa16:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801aa1a:	4ba6      	ldr	r3, [pc, #664]	; (801acb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	b33b      	cbz	r3, 801aa70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801aa20:	4da5      	ldr	r5, [pc, #660]	; (801acb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801aa22:	4628      	mov	r0, r5
 801aa24:	f7fa fe87 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa28:	4606      	mov	r6, r0
 801aa2a:	bb08      	cbnz	r0, 801aa70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f7ff fa41 	bl	8019eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801aa32:	6829      	ldr	r1, [r5, #0]
 801aa34:	686a      	ldr	r2, [r5, #4]
 801aa36:	4620      	mov	r0, r4
 801aa38:	f7ff fc78 	bl	801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801aa3c:	802e      	strh	r6, [r5, #0]
 801aa3e:	806e      	strh	r6, [r5, #2]
 801aa40:	80ae      	strh	r6, [r5, #4]
 801aa42:	80ee      	strh	r6, [r5, #6]
 801aa44:	4f9d      	ldr	r7, [pc, #628]	; (801acbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801aa46:	a809      	add	r0, sp, #36	; 0x24
 801aa48:	f7ff fbe3 	bl	801a212 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa4c:	883d      	ldrh	r5, [r7, #0]
 801aa4e:	462e      	mov	r6, r5
 801aa50:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801aa54:	42b3      	cmp	r3, r6
 801aa56:	d910      	bls.n	801aa7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801aa58:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801aa5c:	3601      	adds	r6, #1
 801aa5e:	a809      	add	r0, sp, #36	; 0x24
 801aa60:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801aa64:	b2b6      	uxth	r6, r6
 801aa66:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801aa6a:	f7ff fc3d 	bl	801a2e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aa6e:	e7ef      	b.n	801aa50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801aa70:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d1e5      	bne.n	801aa44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801aa78:	e7bc      	b.n	801a9f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801aa7a:	462e      	mov	r6, r5
 801aa7c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801aa80:	42b3      	cmp	r3, r6
 801aa82:	d90b      	bls.n	801aa9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801aa84:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801aa88:	3601      	adds	r6, #1
 801aa8a:	4620      	mov	r0, r4
 801aa8c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801aa90:	b2b6      	uxth	r6, r6
 801aa92:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801aa96:	f7ff fc49 	bl	801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801aa9a:	e7ef      	b.n	801aa7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801aa9c:	4a88      	ldr	r2, [pc, #544]	; (801acc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801aa9e:	6813      	ldr	r3, [r2, #0]
 801aaa0:	4690      	mov	r8, r2
 801aaa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801aaa6:	2b01      	cmp	r3, #1
 801aaa8:	f040 8093 	bne.w	801abd2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801aaac:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801aab0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801aab4:	f04f 0900 	mov.w	r9, #0
 801aab8:	33aa      	adds	r3, #170	; 0xaa
 801aaba:	42a8      	cmp	r0, r5
 801aabc:	f103 0308 	add.w	r3, r3, #8
 801aac0:	dd0a      	ble.n	801aad8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801aac2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801aac6:	3501      	adds	r5, #1
 801aac8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801aacc:	440a      	add	r2, r1
 801aace:	b212      	sxth	r2, r2
 801aad0:	4591      	cmp	r9, r2
 801aad2:	bfb8      	it	lt
 801aad4:	4691      	movlt	r9, r2
 801aad6:	e7f0      	b.n	801aaba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801aad8:	4b7a      	ldr	r3, [pc, #488]	; (801acc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801aada:	4e7b      	ldr	r6, [pc, #492]	; (801acc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801aadc:	881d      	ldrh	r5, [r3, #0]
 801aade:	2300      	movs	r3, #0
 801aae0:	2d0f      	cmp	r5, #15
 801aae2:	bf8c      	ite	hi
 801aae4:	08ed      	lsrhi	r5, r5, #3
 801aae6:	2501      	movls	r5, #1
 801aae8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801aaec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801aaf0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801aaf4:	f8d8 0000 	ldr.w	r0, [r8]
 801aaf8:	440b      	add	r3, r1
 801aafa:	6802      	ldr	r2, [r0, #0]
 801aafc:	b21b      	sxth	r3, r3
 801aafe:	4599      	cmp	r9, r3
 801ab00:	dd4a      	ble.n	801ab98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801ab02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801ab06:	4798      	blx	r3
 801ab08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ab0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ab10:	4413      	add	r3, r2
 801ab12:	b21b      	sxth	r3, r3
 801ab14:	195a      	adds	r2, r3, r5
 801ab16:	4290      	cmp	r0, r2
 801ab18:	da07      	bge.n	801ab2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801ab1a:	4581      	cmp	r9, r0
 801ab1c:	dd05      	ble.n	801ab2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801ab1e:	4298      	cmp	r0, r3
 801ab20:	da33      	bge.n	801ab8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	dd31      	ble.n	801ab8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ab26:	4648      	mov	r0, r9
 801ab28:	e004      	b.n	801ab34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801ab2a:	4298      	cmp	r0, r3
 801ab2c:	dbfb      	blt.n	801ab26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801ab2e:	4548      	cmp	r0, r9
 801ab30:	bfa8      	it	ge
 801ab32:	4648      	movge	r0, r9
 801ab34:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ab38:	2100      	movs	r1, #0
 801ab3a:	1ac0      	subs	r0, r0, r3
 801ab3c:	f8b7 a000 	ldrh.w	sl, [r7]
 801ab40:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ab44:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab48:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ab4c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ab50:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ab54:	4553      	cmp	r3, sl
 801ab56:	d9c9      	bls.n	801aaec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ab58:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ab5c:	ab07      	add	r3, sp, #28
 801ab5e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ab62:	6851      	ldr	r1, [r2, #4]
 801ab64:	c303      	stmia	r3!, {r0, r1}
 801ab66:	a807      	add	r0, sp, #28
 801ab68:	a905      	add	r1, sp, #20
 801ab6a:	f7fa fda1 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801ab6e:	a807      	add	r0, sp, #28
 801ab70:	f7fa fde1 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab74:	b920      	cbnz	r0, 801ab80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801ab76:	6823      	ldr	r3, [r4, #0]
 801ab78:	a907      	add	r1, sp, #28
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab7e:	4798      	blx	r3
 801ab80:	f10a 0a01 	add.w	sl, sl, #1
 801ab84:	fa1f fa8a 	uxth.w	sl, sl
 801ab88:	e7e2      	b.n	801ab50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ab8a:	f8d8 0000 	ldr.w	r0, [r8]
 801ab8e:	2101      	movs	r1, #1
 801ab90:	6803      	ldr	r3, [r0, #0]
 801ab92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ab94:	4798      	blx	r3
 801ab96:	e7a9      	b.n	801aaec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ab98:	69d3      	ldr	r3, [r2, #28]
 801ab9a:	4798      	blx	r3
 801ab9c:	4b4b      	ldr	r3, [pc, #300]	; (801accc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ab9e:	781b      	ldrb	r3, [r3, #0]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	f43f af27 	beq.w	801a9f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801aba6:	2300      	movs	r3, #0
 801aba8:	883d      	ldrh	r5, [r7, #0]
 801abaa:	34ea      	adds	r4, #234	; 0xea
 801abac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801abb0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801abb4:	42ab      	cmp	r3, r5
 801abb6:	f67f af1d 	bls.w	801a9f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801abba:	ab1a      	add	r3, sp, #104	; 0x68
 801abbc:	4620      	mov	r0, r4
 801abbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801abc2:	3501      	adds	r5, #1
 801abc4:	3b44      	subs	r3, #68	; 0x44
 801abc6:	b2ad      	uxth	r5, r5
 801abc8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801abcc:	f7ff fb8c 	bl	801a2e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801abd0:	e7ee      	b.n	801abb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801abd2:	2b02      	cmp	r3, #2
 801abd4:	f040 813d 	bne.w	801ae52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801abd8:	4b3d      	ldr	r3, [pc, #244]	; (801acd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	2b01      	cmp	r3, #1
 801abde:	d02c      	beq.n	801ac3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801abe0:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801abe4:	883a      	ldrh	r2, [r7, #0]
 801abe6:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801abea:	3201      	adds	r2, #1
 801abec:	b292      	uxth	r2, r2
 801abee:	2900      	cmp	r1, #0
 801abf0:	d0d4      	beq.n	801ab9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801abf2:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801abf6:	4610      	mov	r0, r2
 801abf8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801abfc:	f04f 0a00 	mov.w	sl, #0
 801ac00:	441d      	add	r5, r3
 801ac02:	b22d      	sxth	r5, r5
 801ac04:	b283      	uxth	r3, r0
 801ac06:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801ac0a:	4299      	cmp	r1, r3
 801ac0c:	f240 80c4 	bls.w	801ad98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801ac10:	4426      	add	r6, r4
 801ac12:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801ac16:	4684      	mov	ip, r0
 801ac18:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801ac1c:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801ac20:	4573      	cmp	r3, lr
 801ac22:	f340 80a6 	ble.w	801ad72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801ac26:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801ac2a:	4475      	add	r5, lr
 801ac2c:	b22d      	sxth	r5, r5
 801ac2e:	429d      	cmp	r5, r3
 801ac30:	bfa8      	it	ge
 801ac32:	461d      	movge	r5, r3
 801ac34:	3001      	adds	r0, #1
 801ac36:	46e2      	mov	sl, ip
 801ac38:	e7e4      	b.n	801ac04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801ac3a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801ac3e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801ac42:	f1bb 0f00 	cmp.w	fp, #0
 801ac46:	d0a9      	beq.n	801ab9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801ac48:	883b      	ldrh	r3, [r7, #0]
 801ac4a:	2600      	movs	r6, #0
 801ac4c:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801ac50:	3301      	adds	r3, #1
 801ac52:	b29b      	uxth	r3, r3
 801ac54:	b299      	uxth	r1, r3
 801ac56:	00f5      	lsls	r5, r6, #3
 801ac58:	458b      	cmp	fp, r1
 801ac5a:	d93b      	bls.n	801acd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801ac5c:	4425      	add	r5, r4
 801ac5e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801ac62:	469c      	mov	ip, r3
 801ac64:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801ac68:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801ac6c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801ac70:	4408      	add	r0, r1
 801ac72:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801ac76:	4471      	add	r1, lr
 801ac78:	b200      	sxth	r0, r0
 801ac7a:	b209      	sxth	r1, r1
 801ac7c:	4288      	cmp	r0, r1
 801ac7e:	da06      	bge.n	801ac8e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801ac80:	4586      	cmp	lr, r0
 801ac82:	4672      	mov	r2, lr
 801ac84:	bfb8      	it	lt
 801ac86:	4602      	movlt	r2, r0
 801ac88:	3301      	adds	r3, #1
 801ac8a:	4666      	mov	r6, ip
 801ac8c:	e7e2      	b.n	801ac54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801ac8e:	d10b      	bne.n	801aca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801ac90:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801ac94:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801ac98:	458c      	cmp	ip, r1
 801ac9a:	bfb4      	ite	lt
 801ac9c:	469c      	movlt	ip, r3
 801ac9e:	46b4      	movge	ip, r6
 801aca0:	4572      	cmp	r2, lr
 801aca2:	bfb8      	it	lt
 801aca4:	4672      	movlt	r2, lr
 801aca6:	e7ef      	b.n	801ac88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aca8:	428a      	cmp	r2, r1
 801acaa:	46b4      	mov	ip, r6
 801acac:	bfb8      	it	lt
 801acae:	460a      	movlt	r2, r1
 801acb0:	e7ea      	b.n	801ac88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801acb2:	bf00      	nop
 801acb4:	20014b8c 	.word	0x20014b8c
 801acb8:	20014b98 	.word	0x20014b98
 801acbc:	2000001c 	.word	0x2000001c
 801acc0:	20014b34 	.word	0x20014b34
 801acc4:	20014b2a 	.word	0x20014b2a
 801acc8:	20014b28 	.word	0x20014b28
 801accc:	20014b32 	.word	0x20014b32
 801acd0:	20014b2c 	.word	0x20014b2c
 801acd4:	1961      	adds	r1, r4, r5
 801acd6:	ab07      	add	r3, sp, #28
 801acd8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801acdc:	6849      	ldr	r1, [r1, #4]
 801acde:	c303      	stmia	r3!, {r0, r1}
 801ace0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ace4:	a807      	add	r0, sp, #28
 801ace6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801acea:	2b13      	cmp	r3, #19
 801acec:	440b      	add	r3, r1
 801acee:	bfd8      	it	le
 801acf0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801acf4:	1a9b      	subs	r3, r3, r2
 801acf6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801acfa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801acfe:	f7ff f933 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ad02:	a807      	add	r0, sp, #28
 801ad04:	f7fa fd17 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d198      	bne.n	801ac3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801ad0c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ad10:	4425      	add	r5, r4
 801ad12:	f8d8 0000 	ldr.w	r0, [r8]
 801ad16:	f1bc 0f14 	cmp.w	ip, #20
 801ad1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ad1e:	f8d0 e000 	ldr.w	lr, [r0]
 801ad22:	bfa8      	it	ge
 801ad24:	f04f 0c14 	movge.w	ip, #20
 801ad28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ad2c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ad30:	fa1f fc8c 	uxth.w	ip, ip
 801ad34:	f8cd c000 	str.w	ip, [sp]
 801ad38:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801ad3c:	47d0      	blx	sl
 801ad3e:	4682      	mov	sl, r0
 801ad40:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ad44:	a807      	add	r0, sp, #28
 801ad46:	f7ff f8b5 	bl	8019eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ad4a:	6823      	ldr	r3, [r4, #0]
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	a907      	add	r1, sp, #28
 801ad50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad52:	4798      	blx	r3
 801ad54:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801ad58:	eba0 000a 	sub.w	r0, r0, sl
 801ad5c:	b200      	sxth	r0, r0
 801ad5e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801ad62:	2800      	cmp	r0, #0
 801ad64:	f47f af6b 	bne.w	801ac3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801ad68:	b2b1      	uxth	r1, r6
 801ad6a:	4648      	mov	r0, r9
 801ad6c:	f7ff faa6 	bl	801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad70:	e765      	b.n	801ac3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801ad72:	d10c      	bne.n	801ad8e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801ad74:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801ad78:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801ad7c:	45b4      	cmp	ip, r6
 801ad7e:	bfb4      	ite	lt
 801ad80:	4684      	movlt	ip, r0
 801ad82:	46d4      	movge	ip, sl
 801ad84:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801ad88:	4433      	add	r3, r6
 801ad8a:	b21b      	sxth	r3, r3
 801ad8c:	e74f      	b.n	801ac2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801ad8e:	4575      	cmp	r5, lr
 801ad90:	46d4      	mov	ip, sl
 801ad92:	bfa8      	it	ge
 801ad94:	4675      	movge	r5, lr
 801ad96:	e74d      	b.n	801ac34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801ad98:	eb0b 0006 	add.w	r0, fp, r6
 801ad9c:	4426      	add	r6, r4
 801ad9e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801ada2:	f1b9 0f13 	cmp.w	r9, #19
 801ada6:	bfdc      	itt	le
 801ada8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801adac:	444d      	addle	r5, r9
 801adae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801adb2:	bfd8      	it	le
 801adb4:	b22d      	sxthle	r5, r5
 801adb6:	f7fa fcbe 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801adba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801adbe:	2800      	cmp	r0, #0
 801adc0:	f47f af15 	bne.w	801abee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801adc4:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801adc8:	fa1f f989 	uxth.w	r9, r9
 801adcc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801add0:	eba5 050c 	sub.w	r5, r5, ip
 801add4:	fa1f f28c 	uxth.w	r2, ip
 801add8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801addc:	eb02 0009 	add.w	r0, r2, r9
 801ade0:	2d14      	cmp	r5, #20
 801ade2:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801ade6:	bfa8      	it	ge
 801ade8:	2514      	movge	r5, #20
 801adea:	b200      	sxth	r0, r0
 801adec:	f8ad 101c 	strh.w	r1, [sp, #28]
 801adf0:	b289      	uxth	r1, r1
 801adf2:	fa1f fe85 	uxth.w	lr, r5
 801adf6:	eba0 000c 	sub.w	r0, r0, ip
 801adfa:	f8ad c01e 	strh.w	ip, [sp, #30]
 801adfe:	4586      	cmp	lr, r0
 801ae00:	f8d8 0000 	ldr.w	r0, [r8]
 801ae04:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ae08:	b29b      	uxth	r3, r3
 801ae0a:	bfb8      	it	lt
 801ae0c:	46f1      	movlt	r9, lr
 801ae0e:	6805      	ldr	r5, [r0, #0]
 801ae10:	f8cd 9000 	str.w	r9, [sp]
 801ae14:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801ae16:	47a8      	blx	r5
 801ae18:	6823      	ldr	r3, [r4, #0]
 801ae1a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ae1e:	a907      	add	r1, sp, #28
 801ae20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae22:	4620      	mov	r0, r4
 801ae24:	4798      	blx	r3
 801ae26:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ae2a:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801ae2e:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801ae32:	1a5b      	subs	r3, r3, r1
 801ae34:	440a      	add	r2, r1
 801ae36:	b21b      	sxth	r3, r3
 801ae38:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801ae3c:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	f47f aecf 	bne.w	801abe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801ae46:	fa1f f18a 	uxth.w	r1, sl
 801ae4a:	4658      	mov	r0, fp
 801ae4c:	f7ff fa36 	bl	801a2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ae50:	e6c8      	b.n	801abe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801ae52:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ae56:	42ab      	cmp	r3, r5
 801ae58:	f67f aea0 	bls.w	801ab9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801ae5c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ae60:	ab07      	add	r3, sp, #28
 801ae62:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ae66:	6851      	ldr	r1, [r2, #4]
 801ae68:	c303      	stmia	r3!, {r0, r1}
 801ae6a:	a807      	add	r0, sp, #28
 801ae6c:	f7fa fc63 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae70:	b920      	cbnz	r0, 801ae7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801ae72:	6823      	ldr	r3, [r4, #0]
 801ae74:	a907      	add	r1, sp, #28
 801ae76:	4620      	mov	r0, r4
 801ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae7a:	4798      	blx	r3
 801ae7c:	3501      	adds	r5, #1
 801ae7e:	b2ad      	uxth	r5, r5
 801ae80:	e7e7      	b.n	801ae52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801ae82:	bf00      	nop

0801ae84 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ae84:	4b03      	ldr	r3, [pc, #12]	; (801ae94 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ae86:	2200      	movs	r2, #0
 801ae88:	801a      	strh	r2, [r3, #0]
 801ae8a:	805a      	strh	r2, [r3, #2]
 801ae8c:	809a      	strh	r2, [r3, #4]
 801ae8e:	80da      	strh	r2, [r3, #6]
 801ae90:	4770      	bx	lr
 801ae92:	bf00      	nop
 801ae94:	20014b98 	.word	0x20014b98

0801ae98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	b099      	sub	sp, #100	; 0x64
 801ae9e:	4607      	mov	r7, r0
 801aea0:	4614      	mov	r4, r2
 801aea2:	461d      	mov	r5, r3
 801aea4:	a802      	add	r0, sp, #8
 801aea6:	468a      	mov	sl, r1
 801aea8:	f000 fe6b 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	4638      	mov	r0, r7
 801aeb0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801aeb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aeb6:	4798      	blx	r3
 801aeb8:	462a      	mov	r2, r5
 801aeba:	2500      	movs	r5, #0
 801aebc:	4621      	mov	r1, r4
 801aebe:	4603      	mov	r3, r0
 801aec0:	a802      	add	r0, sp, #8
 801aec2:	462c      	mov	r4, r5
 801aec4:	46a9      	mov	r9, r5
 801aec6:	46a8      	mov	r8, r5
 801aec8:	f000 fea0 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801aecc:	2300      	movs	r3, #0
 801aece:	9301      	str	r3, [sp, #4]
 801aed0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aed4:	429c      	cmp	r4, r3
 801aed6:	d002      	beq.n	801aede <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801aed8:	455c      	cmp	r4, fp
 801aeda:	bf18      	it	ne
 801aedc:	4625      	movne	r5, r4
 801aede:	ab01      	add	r3, sp, #4
 801aee0:	463a      	mov	r2, r7
 801aee2:	4651      	mov	r1, sl
 801aee4:	a802      	add	r0, sp, #8
 801aee6:	f001 f98b 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aeea:	4604      	mov	r4, r0
 801aeec:	b108      	cbz	r0, 801aef2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801aeee:	280a      	cmp	r0, #10
 801aef0:	d10a      	bne.n	801af08 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801aef2:	45c1      	cmp	r9, r8
 801aef4:	bf38      	it	cc
 801aef6:	46c1      	movcc	r9, r8
 801aef8:	f04f 0800 	mov.w	r8, #0
 801aefc:	2c00      	cmp	r4, #0
 801aefe:	d1e5      	bne.n	801aecc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801af00:	4648      	mov	r0, r9
 801af02:	b019      	add	sp, #100	; 0x64
 801af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af08:	9a01      	ldr	r2, [sp, #4]
 801af0a:	2a00      	cmp	r2, #0
 801af0c:	d0de      	beq.n	801aecc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801af0e:	7b56      	ldrb	r6, [r2, #13]
 801af10:	4629      	mov	r1, r5
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	0076      	lsls	r6, r6, #1
 801af16:	8894      	ldrh	r4, [r2, #4]
 801af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af1a:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801af1e:	7a96      	ldrb	r6, [r2, #10]
 801af20:	4306      	orrs	r6, r0
 801af22:	4638      	mov	r0, r7
 801af24:	4798      	blx	r3
 801af26:	4430      	add	r0, r6
 801af28:	4480      	add	r8, r0
 801af2a:	fa1f f888 	uxth.w	r8, r8
 801af2e:	e7e5      	b.n	801aefc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801af30 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801af30:	b508      	push	{r3, lr}
 801af32:	6803      	ldr	r3, [r0, #0]
 801af34:	68db      	ldr	r3, [r3, #12]
 801af36:	4798      	blx	r3
 801af38:	b128      	cbz	r0, 801af46 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801af3a:	7b43      	ldrb	r3, [r0, #13]
 801af3c:	7a80      	ldrb	r0, [r0, #10]
 801af3e:	005b      	lsls	r3, r3, #1
 801af40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af44:	4318      	orrs	r0, r3
 801af46:	bd08      	pop	{r3, pc}

0801af48 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801af48:	b40e      	push	{r1, r2, r3}
 801af4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af4c:	b098      	sub	sp, #96	; 0x60
 801af4e:	4605      	mov	r5, r0
 801af50:	ab1d      	add	r3, sp, #116	; 0x74
 801af52:	a802      	add	r0, sp, #8
 801af54:	ae18      	add	r6, sp, #96	; 0x60
 801af56:	f853 4b04 	ldr.w	r4, [r3], #4
 801af5a:	9300      	str	r3, [sp, #0]
 801af5c:	f000 fe11 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 801af60:	682b      	ldr	r3, [r5, #0]
 801af62:	4628      	mov	r0, r5
 801af64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af66:	4798      	blx	r3
 801af68:	4621      	mov	r1, r4
 801af6a:	2400      	movs	r4, #0
 801af6c:	4603      	mov	r3, r0
 801af6e:	9a00      	ldr	r2, [sp, #0]
 801af70:	a802      	add	r0, sp, #8
 801af72:	f000 fe4b 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801af76:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801af7a:	462a      	mov	r2, r5
 801af7c:	4633      	mov	r3, r6
 801af7e:	4621      	mov	r1, r4
 801af80:	a802      	add	r0, sp, #8
 801af82:	f001 f93d 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af86:	b300      	cbz	r0, 801afca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801af88:	280a      	cmp	r0, #10
 801af8a:	d01a      	beq.n	801afc2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801af8c:	9f01      	ldr	r7, [sp, #4]
 801af8e:	b1c7      	cbz	r7, 801afc2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801af90:	7b78      	ldrb	r0, [r7, #13]
 801af92:	7a3b      	ldrb	r3, [r7, #8]
 801af94:	00c1      	lsls	r1, r0, #3
 801af96:	88aa      	ldrh	r2, [r5, #4]
 801af98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801af9c:	4319      	orrs	r1, r3
 801af9e:	0643      	lsls	r3, r0, #25
 801afa0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801afa4:	bf48      	it	mi
 801afa6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801afaa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801afae:	bf48      	it	mi
 801afb0:	b219      	sxthmi	r1, r3
 801afb2:	79fb      	ldrb	r3, [r7, #7]
 801afb4:	4303      	orrs	r3, r0
 801afb6:	4413      	add	r3, r2
 801afb8:	1a5b      	subs	r3, r3, r1
 801afba:	b29b      	uxth	r3, r3
 801afbc:	42a3      	cmp	r3, r4
 801afbe:	bfc8      	it	gt
 801afc0:	b21c      	sxthgt	r4, r3
 801afc2:	4633      	mov	r3, r6
 801afc4:	462a      	mov	r2, r5
 801afc6:	2100      	movs	r1, #0
 801afc8:	e7da      	b.n	801af80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801afca:	b2a0      	uxth	r0, r4
 801afcc:	b018      	add	sp, #96	; 0x60
 801afce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801afd2:	b003      	add	sp, #12
 801afd4:	4770      	bx	lr

0801afd6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801afd6:	b40e      	push	{r1, r2, r3}
 801afd8:	b530      	push	{r4, r5, lr}
 801afda:	b098      	sub	sp, #96	; 0x60
 801afdc:	4604      	mov	r4, r0
 801afde:	ab1b      	add	r3, sp, #108	; 0x6c
 801afe0:	a802      	add	r0, sp, #8
 801afe2:	f853 5b04 	ldr.w	r5, [r3], #4
 801afe6:	9301      	str	r3, [sp, #4]
 801afe8:	f000 fdcb 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	4620      	mov	r0, r4
 801aff0:	2401      	movs	r4, #1
 801aff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aff4:	4798      	blx	r3
 801aff6:	9a01      	ldr	r2, [sp, #4]
 801aff8:	4603      	mov	r3, r0
 801affa:	4629      	mov	r1, r5
 801affc:	a802      	add	r0, sp, #8
 801affe:	f000 fe05 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b002:	a802      	add	r0, sp, #8
 801b004:	f001 f9f4 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b008:	b2a3      	uxth	r3, r4
 801b00a:	b138      	cbz	r0, 801b01c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b00c:	280a      	cmp	r0, #10
 801b00e:	a802      	add	r0, sp, #8
 801b010:	bf04      	itt	eq
 801b012:	3301      	addeq	r3, #1
 801b014:	b21c      	sxtheq	r4, r3
 801b016:	f001 f9eb 	bl	801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b01a:	e7f5      	b.n	801b008 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b01c:	4618      	mov	r0, r3
 801b01e:	b018      	add	sp, #96	; 0x60
 801b020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b024:	b003      	add	sp, #12
 801b026:	4770      	bx	lr

0801b028 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b028:	b40e      	push	{r1, r2, r3}
 801b02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b02c:	b098      	sub	sp, #96	; 0x60
 801b02e:	4604      	mov	r4, r0
 801b030:	26ff      	movs	r6, #255	; 0xff
 801b032:	ab1d      	add	r3, sp, #116	; 0x74
 801b034:	a802      	add	r0, sp, #8
 801b036:	f853 5b04 	ldr.w	r5, [r3], #4
 801b03a:	9300      	str	r3, [sp, #0]
 801b03c:	f000 fda1 	bl	801bb82 <_ZN8touchgfx12TextProviderC1Ev>
 801b040:	6823      	ldr	r3, [r4, #0]
 801b042:	4620      	mov	r0, r4
 801b044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b046:	4798      	blx	r3
 801b048:	4629      	mov	r1, r5
 801b04a:	4603      	mov	r3, r0
 801b04c:	9a00      	ldr	r2, [sp, #0]
 801b04e:	a802      	add	r0, sp, #8
 801b050:	ad18      	add	r5, sp, #96	; 0x60
 801b052:	f000 fddb 	bl	801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b056:	2100      	movs	r1, #0
 801b058:	4622      	mov	r2, r4
 801b05a:	a802      	add	r0, sp, #8
 801b05c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b060:	462b      	mov	r3, r5
 801b062:	f001 f8cd 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b066:	b1d8      	cbz	r0, 801b0a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b068:	280a      	cmp	r0, #10
 801b06a:	d012      	beq.n	801b092 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b06c:	9801      	ldr	r0, [sp, #4]
 801b06e:	b180      	cbz	r0, 801b092 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b070:	7b47      	ldrb	r7, [r0, #13]
 801b072:	7922      	ldrb	r2, [r4, #4]
 801b074:	00fb      	lsls	r3, r7, #3
 801b076:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b07a:	7a03      	ldrb	r3, [r0, #8]
 801b07c:	430b      	orrs	r3, r1
 801b07e:	0679      	lsls	r1, r7, #25
 801b080:	bf44      	itt	mi
 801b082:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b086:	b21b      	sxthmi	r3, r3
 801b088:	1ad3      	subs	r3, r2, r3
 801b08a:	b2db      	uxtb	r3, r3
 801b08c:	429e      	cmp	r6, r3
 801b08e:	bf28      	it	cs
 801b090:	461e      	movcs	r6, r3
 801b092:	462b      	mov	r3, r5
 801b094:	4622      	mov	r2, r4
 801b096:	2100      	movs	r1, #0
 801b098:	a802      	add	r0, sp, #8
 801b09a:	f001 f8b1 	bl	801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b09e:	e7e2      	b.n	801b066 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b0a0:	4630      	mov	r0, r6
 801b0a2:	b018      	add	sp, #96	; 0x60
 801b0a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b0a8:	b003      	add	sp, #12
 801b0aa:	4770      	bx	lr

0801b0ac <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b0ac:	b513      	push	{r0, r1, r4, lr}
 801b0ae:	1d01      	adds	r1, r0, #4
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	466a      	mov	r2, sp
 801b0b4:	c903      	ldmia	r1, {r0, r1}
 801b0b6:	e882 0003 	stmia.w	r2, {r0, r1}
 801b0ba:	2100      	movs	r1, #0
 801b0bc:	4618      	mov	r0, r3
 801b0be:	9100      	str	r1, [sp, #0]
 801b0c0:	6819      	ldr	r1, [r3, #0]
 801b0c2:	690c      	ldr	r4, [r1, #16]
 801b0c4:	4611      	mov	r1, r2
 801b0c6:	47a0      	blx	r4
 801b0c8:	b002      	add	sp, #8
 801b0ca:	bd10      	pop	{r4, pc}

0801b0cc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b0cc:	b538      	push	{r3, r4, r5, lr}
 801b0ce:	680b      	ldr	r3, [r1, #0]
 801b0d0:	460c      	mov	r4, r1
 801b0d2:	4605      	mov	r5, r0
 801b0d4:	68db      	ldr	r3, [r3, #12]
 801b0d6:	4798      	blx	r3
 801b0d8:	6823      	ldr	r3, [r4, #0]
 801b0da:	4620      	mov	r0, r4
 801b0dc:	4629      	mov	r1, r5
 801b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0e0:	4798      	blx	r3
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	bd38      	pop	{r3, r4, r5, pc}

0801b0e6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b0e6:	b410      	push	{r4}
 801b0e8:	880a      	ldrh	r2, [r1, #0]
 801b0ea:	8884      	ldrh	r4, [r0, #4]
 801b0ec:	4422      	add	r2, r4
 801b0ee:	800a      	strh	r2, [r1, #0]
 801b0f0:	884a      	ldrh	r2, [r1, #2]
 801b0f2:	88c4      	ldrh	r4, [r0, #6]
 801b0f4:	4422      	add	r2, r4
 801b0f6:	804a      	strh	r2, [r1, #2]
 801b0f8:	6940      	ldr	r0, [r0, #20]
 801b0fa:	b120      	cbz	r0, 801b106 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b0fc:	6803      	ldr	r3, [r0, #0]
 801b0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b104:	4718      	bx	r3
 801b106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b10a:	4770      	bx	lr

0801b10c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b10e:	460b      	mov	r3, r1
 801b110:	b085      	sub	sp, #20
 801b112:	4604      	mov	r4, r0
 801b114:	b901      	cbnz	r1, 801b118 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b116:	b322      	cbz	r2, 801b162 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801b118:	1d27      	adds	r7, r4, #4
 801b11a:	466e      	mov	r6, sp
 801b11c:	88e5      	ldrh	r5, [r4, #6]
 801b11e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b122:	442a      	add	r2, r5
 801b124:	e886 0003 	stmia.w	r6, {r0, r1}
 801b128:	88a1      	ldrh	r1, [r4, #4]
 801b12a:	4620      	mov	r0, r4
 801b12c:	b215      	sxth	r5, r2
 801b12e:	4419      	add	r1, r3
 801b130:	6823      	ldr	r3, [r4, #0]
 801b132:	b209      	sxth	r1, r1
 801b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b136:	4798      	blx	r3
 801b138:	6823      	ldr	r3, [r4, #0]
 801b13a:	4629      	mov	r1, r5
 801b13c:	4620      	mov	r0, r4
 801b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b140:	ad02      	add	r5, sp, #8
 801b142:	4798      	blx	r3
 801b144:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b148:	e885 0003 	stmia.w	r5, {r0, r1}
 801b14c:	6960      	ldr	r0, [r4, #20]
 801b14e:	b150      	cbz	r0, 801b166 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801b150:	6803      	ldr	r3, [r0, #0]
 801b152:	4631      	mov	r1, r6
 801b154:	691b      	ldr	r3, [r3, #16]
 801b156:	4798      	blx	r3
 801b158:	6960      	ldr	r0, [r4, #20]
 801b15a:	6803      	ldr	r3, [r0, #0]
 801b15c:	691b      	ldr	r3, [r3, #16]
 801b15e:	4629      	mov	r1, r5
 801b160:	4798      	blx	r3
 801b162:	b005      	add	sp, #20
 801b164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b166:	f7ff f843 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 801b16a:	6803      	ldr	r3, [r0, #0]
 801b16c:	4631      	mov	r1, r6
 801b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b170:	4798      	blx	r3
 801b172:	f7ff f83d 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 801b176:	6803      	ldr	r3, [r0, #0]
 801b178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b17a:	e7f0      	b.n	801b15e <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801b17c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b17e:	8882      	ldrh	r2, [r0, #4]
 801b180:	4605      	mov	r5, r0
 801b182:	880b      	ldrh	r3, [r1, #0]
 801b184:	460c      	mov	r4, r1
 801b186:	4413      	add	r3, r2
 801b188:	800b      	strh	r3, [r1, #0]
 801b18a:	884b      	ldrh	r3, [r1, #2]
 801b18c:	88c2      	ldrh	r2, [r0, #6]
 801b18e:	4413      	add	r3, r2
 801b190:	4602      	mov	r2, r0
 801b192:	804b      	strh	r3, [r1, #2]
 801b194:	466b      	mov	r3, sp
 801b196:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b19a:	6851      	ldr	r1, [r2, #4]
 801b19c:	c303      	stmia	r3!, {r0, r1}
 801b19e:	4621      	mov	r1, r4
 801b1a0:	4668      	mov	r0, sp
 801b1a2:	f7fa fa85 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801b1a6:	466b      	mov	r3, sp
 801b1a8:	cb03      	ldmia	r3!, {r0, r1}
 801b1aa:	6020      	str	r0, [r4, #0]
 801b1ac:	6061      	str	r1, [r4, #4]
 801b1ae:	6968      	ldr	r0, [r5, #20]
 801b1b0:	b128      	cbz	r0, 801b1be <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b1b2:	6803      	ldr	r3, [r0, #0]
 801b1b4:	691b      	ldr	r3, [r3, #16]
 801b1b6:	4621      	mov	r1, r4
 801b1b8:	4798      	blx	r3
 801b1ba:	b003      	add	sp, #12
 801b1bc:	bd30      	pop	{r4, r5, pc}
 801b1be:	f7ff f817 	bl	801a1f0 <_ZN8touchgfx11Application11getInstanceEv>
 801b1c2:	6803      	ldr	r3, [r0, #0]
 801b1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1c6:	e7f6      	b.n	801b1b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b1c8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b1c8:	b570      	push	{r4, r5, r6, lr}
 801b1ca:	8882      	ldrh	r2, [r0, #4]
 801b1cc:	460c      	mov	r4, r1
 801b1ce:	880b      	ldrh	r3, [r1, #0]
 801b1d0:	4605      	mov	r5, r0
 801b1d2:	4413      	add	r3, r2
 801b1d4:	800b      	strh	r3, [r1, #0]
 801b1d6:	884b      	ldrh	r3, [r1, #2]
 801b1d8:	88c2      	ldrh	r2, [r0, #6]
 801b1da:	4413      	add	r3, r2
 801b1dc:	804b      	strh	r3, [r1, #2]
 801b1de:	1d01      	adds	r1, r0, #4
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f7fa fa65 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801b1e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	dd0b      	ble.n	801b206 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b1ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	dd07      	ble.n	801b206 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b1f6:	6968      	ldr	r0, [r5, #20]
 801b1f8:	b128      	cbz	r0, 801b206 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b1fa:	6803      	ldr	r3, [r0, #0]
 801b1fc:	4621      	mov	r1, r4
 801b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b204:	4718      	bx	r3
 801b206:	bd70      	pop	{r4, r5, r6, pc}

0801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b208:	b510      	push	{r4, lr}
 801b20a:	2300      	movs	r3, #0
 801b20c:	4604      	mov	r4, r0
 801b20e:	4608      	mov	r0, r1
 801b210:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b214:	8023      	strh	r3, [r4, #0]
 801b216:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b21a:	8063      	strh	r3, [r4, #2]
 801b21c:	6803      	ldr	r3, [r0, #0]
 801b21e:	80a1      	strh	r1, [r4, #4]
 801b220:	4621      	mov	r1, r4
 801b222:	80e2      	strh	r2, [r4, #6]
 801b224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b226:	4798      	blx	r3
 801b228:	4620      	mov	r0, r4
 801b22a:	bd10      	pop	{r4, pc}

0801b22c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b22c:	b530      	push	{r4, r5, lr}
 801b22e:	8083      	strh	r3, [r0, #4]
 801b230:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b234:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b238:	7183      	strb	r3, [r0, #6]
 801b23a:	79c3      	ldrb	r3, [r0, #7]
 801b23c:	6101      	str	r1, [r0, #16]
 801b23e:	f365 0306 	bfi	r3, r5, #0, #7
 801b242:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b246:	8282      	strh	r2, [r0, #20]
 801b248:	f365 13c7 	bfi	r3, r5, #7, #1
 801b24c:	71c3      	strb	r3, [r0, #7]
 801b24e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b252:	7203      	strb	r3, [r0, #8]
 801b254:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b258:	7243      	strb	r3, [r0, #9]
 801b25a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b25e:	8143      	strh	r3, [r0, #10]
 801b260:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b264:	8183      	strh	r3, [r0, #12]
 801b266:	4b01      	ldr	r3, [pc, #4]	; (801b26c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b268:	6003      	str	r3, [r0, #0]
 801b26a:	bd30      	pop	{r4, r5, pc}
 801b26c:	0802f9a8 	.word	0x0802f9a8

0801b270 <_ZNK8touchgfx9ConstFont4findEt>:
 801b270:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b272:	6904      	ldr	r4, [r0, #16]
 801b274:	b3bc      	cbz	r4, 801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b276:	88a3      	ldrh	r3, [r4, #4]
 801b278:	8a82      	ldrh	r2, [r0, #20]
 801b27a:	1acb      	subs	r3, r1, r3
 801b27c:	f102 32ff 	add.w	r2, r2, #4294967295
 801b280:	d431      	bmi.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b282:	4293      	cmp	r3, r2
 801b284:	dd0c      	ble.n	801b2a0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b286:	230e      	movs	r3, #14
 801b288:	fb03 4302 	mla	r3, r3, r2, r4
 801b28c:	889b      	ldrh	r3, [r3, #4]
 801b28e:	1a5b      	subs	r3, r3, r1
 801b290:	1ad3      	subs	r3, r2, r3
 801b292:	429a      	cmp	r2, r3
 801b294:	db27      	blt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b296:	2b00      	cmp	r3, #0
 801b298:	bfbc      	itt	lt
 801b29a:	2302      	movlt	r3, #2
 801b29c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b2a0:	2500      	movs	r5, #0
 801b2a2:	260e      	movs	r6, #14
 801b2a4:	4295      	cmp	r5, r2
 801b2a6:	dc1e      	bgt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2a8:	fb06 4003 	mla	r0, r6, r3, r4
 801b2ac:	8887      	ldrh	r7, [r0, #4]
 801b2ae:	42b9      	cmp	r1, r7
 801b2b0:	d01a      	beq.n	801b2e8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b2b2:	d20d      	bcs.n	801b2d0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b2b4:	1e5a      	subs	r2, r3, #1
 801b2b6:	4295      	cmp	r5, r2
 801b2b8:	dc15      	bgt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2ba:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b2be:	1a5b      	subs	r3, r3, r1
 801b2c0:	1ad3      	subs	r3, r2, r3
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	db0f      	blt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2c6:	429d      	cmp	r5, r3
 801b2c8:	ddec      	ble.n	801b2a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b2ca:	1953      	adds	r3, r2, r5
 801b2cc:	105b      	asrs	r3, r3, #1
 801b2ce:	e7e9      	b.n	801b2a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b2d0:	1c5d      	adds	r5, r3, #1
 801b2d2:	42aa      	cmp	r2, r5
 801b2d4:	db07      	blt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2d6:	8a43      	ldrh	r3, [r0, #18]
 801b2d8:	1acb      	subs	r3, r1, r3
 801b2da:	442b      	add	r3, r5
 801b2dc:	429d      	cmp	r5, r3
 801b2de:	dc02      	bgt.n	801b2e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	dadf      	bge.n	801b2a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b2e4:	e7f1      	b.n	801b2ca <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b2e6:	2000      	movs	r0, #0
 801b2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b2ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ec:	4604      	mov	r4, r0
 801b2ee:	4617      	mov	r7, r2
 801b2f0:	461e      	mov	r6, r3
 801b2f2:	b911      	cbnz	r1, 801b2fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b2f4:	2500      	movs	r5, #0
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2fa:	290a      	cmp	r1, #10
 801b2fc:	d0fa      	beq.n	801b2f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b2fe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b302:	4291      	cmp	r1, r2
 801b304:	d0f6      	beq.n	801b2f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b306:	f242 020b 	movw	r2, #8203	; 0x200b
 801b30a:	4291      	cmp	r1, r2
 801b30c:	d0f2      	beq.n	801b2f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b30e:	f7ff ffaf 	bl	801b270 <_ZNK8touchgfx9ConstFont4findEt>
 801b312:	4605      	mov	r5, r0
 801b314:	b950      	cbnz	r0, 801b32c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b316:	6823      	ldr	r3, [r4, #0]
 801b318:	4620      	mov	r0, r4
 801b31a:	691b      	ldr	r3, [r3, #16]
 801b31c:	4798      	blx	r3
 801b31e:	4601      	mov	r1, r0
 801b320:	4620      	mov	r0, r4
 801b322:	f7ff ffa5 	bl	801b270 <_ZNK8touchgfx9ConstFont4findEt>
 801b326:	4605      	mov	r5, r0
 801b328:	2800      	cmp	r0, #0
 801b32a:	d0e3      	beq.n	801b2f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b32c:	6823      	ldr	r3, [r4, #0]
 801b32e:	4629      	mov	r1, r5
 801b330:	4620      	mov	r0, r4
 801b332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b334:	4798      	blx	r3
 801b336:	6038      	str	r0, [r7, #0]
 801b338:	6823      	ldr	r3, [r4, #0]
 801b33a:	4620      	mov	r0, r4
 801b33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b33e:	4798      	blx	r3
 801b340:	7030      	strb	r0, [r6, #0]
 801b342:	e7d8      	b.n	801b2f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b344 <_ZN8touchgfx6memsetEPvhm>:
 801b344:	4402      	add	r2, r0
 801b346:	4290      	cmp	r0, r2
 801b348:	d002      	beq.n	801b350 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b34a:	f800 1b01 	strb.w	r1, [r0], #1
 801b34e:	e7fa      	b.n	801b346 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b350:	4770      	bx	lr

0801b352 <_ZN8touchgfx4clzuEm>:
 801b352:	4603      	mov	r3, r0
 801b354:	b1c8      	cbz	r0, 801b38a <_ZN8touchgfx4clzuEm+0x38>
 801b356:	0c02      	lsrs	r2, r0, #16
 801b358:	0412      	lsls	r2, r2, #16
 801b35a:	b9a2      	cbnz	r2, 801b386 <_ZN8touchgfx4clzuEm+0x34>
 801b35c:	0403      	lsls	r3, r0, #16
 801b35e:	2010      	movs	r0, #16
 801b360:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b364:	bf04      	itt	eq
 801b366:	021b      	lsleq	r3, r3, #8
 801b368:	3008      	addeq	r0, #8
 801b36a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b36e:	bf04      	itt	eq
 801b370:	011b      	lsleq	r3, r3, #4
 801b372:	3004      	addeq	r0, #4
 801b374:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b378:	bf04      	itt	eq
 801b37a:	009b      	lsleq	r3, r3, #2
 801b37c:	3002      	addeq	r0, #2
 801b37e:	2b00      	cmp	r3, #0
 801b380:	db04      	blt.n	801b38c <_ZN8touchgfx4clzuEm+0x3a>
 801b382:	3001      	adds	r0, #1
 801b384:	4770      	bx	lr
 801b386:	2000      	movs	r0, #0
 801b388:	e7ea      	b.n	801b360 <_ZN8touchgfx4clzuEm+0xe>
 801b38a:	2020      	movs	r0, #32
 801b38c:	4770      	bx	lr

0801b38e <_ZN8touchgfx7muldivuEmmmRm>:
 801b38e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b392:	4680      	mov	r8, r0
 801b394:	460f      	mov	r7, r1
 801b396:	4615      	mov	r5, r2
 801b398:	461e      	mov	r6, r3
 801b39a:	f7ff ffda 	bl	801b352 <_ZN8touchgfx4clzuEm>
 801b39e:	b998      	cbnz	r0, 801b3c8 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801b3a0:	4608      	mov	r0, r1
 801b3a2:	f7ff ffd6 	bl	801b352 <_ZN8touchgfx4clzuEm>
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	dd08      	ble.n	801b3bc <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801b3aa:	4633      	mov	r3, r6
 801b3ac:	462a      	mov	r2, r5
 801b3ae:	4641      	mov	r1, r8
 801b3b0:	4638      	mov	r0, r7
 801b3b2:	f7ff ffec 	bl	801b38e <_ZN8touchgfx7muldivuEmmmRm>
 801b3b6:	b003      	add	sp, #12
 801b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b3c4:	6033      	str	r3, [r6, #0]
 801b3c6:	e7f6      	b.n	801b3b6 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b3c8:	fa31 f900 	lsrs.w	r9, r1, r0
 801b3cc:	fb01 f308 	mul.w	r3, r1, r8
 801b3d0:	d105      	bne.n	801b3de <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801b3d2:	fbb3 f0f5 	udiv	r0, r3, r5
 801b3d6:	fb05 3510 	mls	r5, r5, r0, r3
 801b3da:	6035      	str	r5, [r6, #0]
 801b3dc:	e7eb      	b.n	801b3b6 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b3de:	2301      	movs	r3, #1
 801b3e0:	fa08 fb00 	lsl.w	fp, r8, r0
 801b3e4:	462a      	mov	r2, r5
 801b3e6:	4641      	mov	r1, r8
 801b3e8:	fa03 f000 	lsl.w	r0, r3, r0
 801b3ec:	4633      	mov	r3, r6
 801b3ee:	fbbb faf5 	udiv	sl, fp, r5
 801b3f2:	3801      	subs	r0, #1
 801b3f4:	fb09 f40a 	mul.w	r4, r9, sl
 801b3f8:	4038      	ands	r0, r7
 801b3fa:	f7ff ffc8 	bl	801b38e <_ZN8touchgfx7muldivuEmmmRm>
 801b3fe:	462a      	mov	r2, r5
 801b400:	4607      	mov	r7, r0
 801b402:	ab01      	add	r3, sp, #4
 801b404:	fb05 b11a 	mls	r1, r5, sl, fp
 801b408:	4648      	mov	r0, r9
 801b40a:	f7ff ffc0 	bl	801b38e <_ZN8touchgfx7muldivuEmmmRm>
 801b40e:	9b01      	ldr	r3, [sp, #4]
 801b410:	6832      	ldr	r2, [r6, #0]
 801b412:	441a      	add	r2, r3
 801b414:	fbb2 f3f5 	udiv	r3, r2, r5
 801b418:	441c      	add	r4, r3
 801b41a:	fb05 2513 	mls	r5, r5, r3, r2
 801b41e:	443c      	add	r4, r7
 801b420:	4420      	add	r0, r4
 801b422:	e7da      	b.n	801b3da <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801b424 <_ZN8touchgfx6muldivElllRl>:
 801b424:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b426:	2800      	cmp	r0, #0
 801b428:	461e      	mov	r6, r3
 801b42a:	bfba      	itte	lt
 801b42c:	4240      	neglt	r0, r0
 801b42e:	f04f 34ff 	movlt.w	r4, #4294967295
 801b432:	2401      	movge	r4, #1
 801b434:	2900      	cmp	r1, #0
 801b436:	bfbc      	itt	lt
 801b438:	4249      	neglt	r1, r1
 801b43a:	4264      	neglt	r4, r4
 801b43c:	2a00      	cmp	r2, #0
 801b43e:	bfb6      	itet	lt
 801b440:	4265      	neglt	r5, r4
 801b442:	4625      	movge	r5, r4
 801b444:	4252      	neglt	r2, r2
 801b446:	4288      	cmp	r0, r1
 801b448:	bfc2      	ittt	gt
 801b44a:	4603      	movgt	r3, r0
 801b44c:	4608      	movgt	r0, r1
 801b44e:	4619      	movgt	r1, r3
 801b450:	ab01      	add	r3, sp, #4
 801b452:	f7ff ff9c 	bl	801b38e <_ZN8touchgfx7muldivuEmmmRm>
 801b456:	9b01      	ldr	r3, [sp, #4]
 801b458:	4368      	muls	r0, r5
 801b45a:	435c      	muls	r4, r3
 801b45c:	6034      	str	r4, [r6, #0]
 801b45e:	b002      	add	sp, #8
 801b460:	bd70      	pop	{r4, r5, r6, pc}

0801b462 <_ZN8touchgfx6muldivElll>:
 801b462:	b513      	push	{r0, r1, r4, lr}
 801b464:	4614      	mov	r4, r2
 801b466:	ab01      	add	r3, sp, #4
 801b468:	f7ff ffdc 	bl	801b424 <_ZN8touchgfx6muldivElllRl>
 801b46c:	2800      	cmp	r0, #0
 801b46e:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801b472:	9b01      	ldr	r3, [sp, #4]
 801b474:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801b478:	db0a      	blt.n	801b490 <_ZN8touchgfx6muldivElll+0x2e>
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	f102 0201 	add.w	r2, r2, #1
 801b480:	bfb8      	it	lt
 801b482:	425b      	neglt	r3, r3
 801b484:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801b488:	db00      	blt.n	801b48c <_ZN8touchgfx6muldivElll+0x2a>
 801b48a:	3001      	adds	r0, #1
 801b48c:	b002      	add	sp, #8
 801b48e:	bd10      	pop	{r4, pc}
 801b490:	2b00      	cmp	r3, #0
 801b492:	bfb8      	it	lt
 801b494:	425b      	neglt	r3, r3
 801b496:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801b49a:	bfc8      	it	gt
 801b49c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801b4a0:	e7f4      	b.n	801b48c <_ZN8touchgfx6muldivElll+0x2a>

0801b4a2 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b4a2:	2000      	movs	r0, #0
 801b4a4:	4770      	bx	lr

0801b4a6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b4a6:	2001      	movs	r0, #1
 801b4a8:	4770      	bx	lr

0801b4aa <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b4aa:	2002      	movs	r0, #2
 801b4ac:	4770      	bx	lr

0801b4ae <_ZN8touchgfx12GestureEventD1Ev>:
 801b4ae:	4770      	bx	lr

0801b4b0 <_ZN8touchgfx9DragEventD1Ev>:
 801b4b0:	4770      	bx	lr

0801b4b2 <_ZN8touchgfx10ClickEventD1Ev>:
 801b4b2:	4770      	bx	lr

0801b4b4 <_ZN8touchgfx10ClickEventD0Ev>:
 801b4b4:	b510      	push	{r4, lr}
 801b4b6:	4604      	mov	r4, r0
 801b4b8:	210c      	movs	r1, #12
 801b4ba:	f00f f93c 	bl	802a736 <_ZdlPvj>
 801b4be:	4620      	mov	r0, r4
 801b4c0:	bd10      	pop	{r4, pc}

0801b4c2 <_ZN8touchgfx9DragEventD0Ev>:
 801b4c2:	b510      	push	{r4, lr}
 801b4c4:	4604      	mov	r4, r0
 801b4c6:	2110      	movs	r1, #16
 801b4c8:	f00f f935 	bl	802a736 <_ZdlPvj>
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	bd10      	pop	{r4, pc}

0801b4d0 <_ZN8touchgfx12GestureEventD0Ev>:
 801b4d0:	b510      	push	{r4, lr}
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	210c      	movs	r1, #12
 801b4d6:	f00f f92e 	bl	802a736 <_ZdlPvj>
 801b4da:	4620      	mov	r0, r4
 801b4dc:	bd10      	pop	{r4, pc}
	...

0801b4e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b4e0:	b530      	push	{r4, r5, lr}
 801b4e2:	460d      	mov	r5, r1
 801b4e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b4e6:	b087      	sub	sp, #28
 801b4e8:	4604      	mov	r4, r0
 801b4ea:	b301      	cbz	r1, 801b52e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b4ec:	a801      	add	r0, sp, #4
 801b4ee:	f7ff fe8b 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4f2:	892a      	ldrh	r2, [r5, #8]
 801b4f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b4f8:	7928      	ldrb	r0, [r5, #4]
 801b4fa:	1ad2      	subs	r2, r2, r3
 801b4fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b4fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b502:	441a      	add	r2, r3
 801b504:	896b      	ldrh	r3, [r5, #10]
 801b506:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b50a:	f88d 0010 	strb.w	r0, [sp, #16]
 801b50e:	1b5b      	subs	r3, r3, r5
 801b510:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b512:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b514:	442b      	add	r3, r5
 801b516:	4d07      	ldr	r5, [pc, #28]	; (801b534 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b518:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b51c:	a903      	add	r1, sp, #12
 801b51e:	9503      	str	r5, [sp, #12]
 801b520:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b524:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b528:	6803      	ldr	r3, [r0, #0]
 801b52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b52c:	4798      	blx	r3
 801b52e:	b007      	add	sp, #28
 801b530:	bd30      	pop	{r4, r5, pc}
 801b532:	bf00      	nop
 801b534:	0802fa24 	.word	0x0802fa24

0801b538 <_ZNK8touchgfx4Rect9intersectEss>:
 801b538:	b510      	push	{r4, lr}
 801b53a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b53e:	428b      	cmp	r3, r1
 801b540:	dc10      	bgt.n	801b564 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b542:	8884      	ldrh	r4, [r0, #4]
 801b544:	4423      	add	r3, r4
 801b546:	b21b      	sxth	r3, r3
 801b548:	4299      	cmp	r1, r3
 801b54a:	da0b      	bge.n	801b564 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b54c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b550:	4293      	cmp	r3, r2
 801b552:	dc07      	bgt.n	801b564 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b554:	88c0      	ldrh	r0, [r0, #6]
 801b556:	4418      	add	r0, r3
 801b558:	b200      	sxth	r0, r0
 801b55a:	4282      	cmp	r2, r0
 801b55c:	bfac      	ite	ge
 801b55e:	2000      	movge	r0, #0
 801b560:	2001      	movlt	r0, #1
 801b562:	bd10      	pop	{r4, pc}
 801b564:	2000      	movs	r0, #0
 801b566:	e7fc      	b.n	801b562 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b568 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b56a:	460c      	mov	r4, r1
 801b56c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b56e:	b089      	sub	sp, #36	; 0x24
 801b570:	4605      	mov	r5, r0
 801b572:	2900      	cmp	r1, #0
 801b574:	d054      	beq.n	801b620 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b576:	4668      	mov	r0, sp
 801b578:	f7ff fe46 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b57c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b57e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b580:	4668      	mov	r0, sp
 801b582:	8922      	ldrh	r2, [r4, #8]
 801b584:	88e1      	ldrh	r1, [r4, #6]
 801b586:	443a      	add	r2, r7
 801b588:	4431      	add	r1, r6
 801b58a:	b212      	sxth	r2, r2
 801b58c:	b209      	sxth	r1, r1
 801b58e:	f7ff ffd3 	bl	801b538 <_ZNK8touchgfx4Rect9intersectEss>
 801b592:	b1d0      	cbz	r0, 801b5ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b594:	89a2      	ldrh	r2, [r4, #12]
 801b596:	4668      	mov	r0, sp
 801b598:	8961      	ldrh	r1, [r4, #10]
 801b59a:	443a      	add	r2, r7
 801b59c:	4431      	add	r1, r6
 801b59e:	b212      	sxth	r2, r2
 801b5a0:	b209      	sxth	r1, r1
 801b5a2:	f7ff ffc9 	bl	801b538 <_ZNK8touchgfx4Rect9intersectEss>
 801b5a6:	4603      	mov	r3, r0
 801b5a8:	b978      	cbnz	r0, 801b5ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b5aa:	4a1e      	ldr	r2, [pc, #120]	; (801b624 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b5ac:	a904      	add	r1, sp, #16
 801b5ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b5b0:	9204      	str	r2, [sp, #16]
 801b5b2:	2202      	movs	r2, #2
 801b5b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5b8:	f88d 2014 	strb.w	r2, [sp, #20]
 801b5bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b5c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b5c4:	6803      	ldr	r3, [r0, #0]
 801b5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5c8:	4798      	blx	r3
 801b5ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b5cc:	a802      	add	r0, sp, #8
 801b5ce:	f7ff fe1b 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b5d6:	88e0      	ldrh	r0, [r4, #6]
 801b5d8:	8961      	ldrh	r1, [r4, #10]
 801b5da:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b5de:	1a80      	subs	r0, r0, r2
 801b5e0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b5e4:	1a89      	subs	r1, r1, r2
 801b5e6:	8923      	ldrh	r3, [r4, #8]
 801b5e8:	4460      	add	r0, ip
 801b5ea:	89a2      	ldrh	r2, [r4, #12]
 801b5ec:	4461      	add	r1, ip
 801b5ee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b5f0:	eba3 030e 	sub.w	r3, r3, lr
 801b5f4:	eba2 020e 	sub.w	r2, r2, lr
 801b5f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b5fc:	7927      	ldrb	r7, [r4, #4]
 801b5fe:	4433      	add	r3, r6
 801b600:	4432      	add	r2, r6
 801b602:	4c09      	ldr	r4, [pc, #36]	; (801b628 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b604:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b606:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b60a:	a904      	add	r1, sp, #16
 801b60c:	9404      	str	r4, [sp, #16]
 801b60e:	f88d 7014 	strb.w	r7, [sp, #20]
 801b612:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b616:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b61a:	6803      	ldr	r3, [r0, #0]
 801b61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b61e:	4798      	blx	r3
 801b620:	b009      	add	sp, #36	; 0x24
 801b622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b624:	0802f9fc 	.word	0x0802f9fc
 801b628:	0802fa10 	.word	0x0802fa10

0801b62c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b630:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b634:	b0a1      	sub	sp, #132	; 0x84
 801b636:	4604      	mov	r4, r0
 801b638:	460d      	mov	r5, r1
 801b63a:	790b      	ldrb	r3, [r1, #4]
 801b63c:	f1b9 0f00 	cmp.w	r9, #0
 801b640:	d00f      	beq.n	801b662 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b642:	2b00      	cmp	r3, #0
 801b644:	f040 80a2 	bne.w	801b78c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b648:	b021      	add	sp, #132	; 0x84
 801b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b652:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b656:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b65a:	1d20      	adds	r0, r4, #4
 801b65c:	f7f9 ff76 	bl	801554c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b660:	e094      	b.n	801b78c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b662:	2b00      	cmp	r3, #0
 801b664:	d1f0      	bne.n	801b648 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b666:	4b5f      	ldr	r3, [pc, #380]	; (801b7e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b66e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b672:	f1ba 0f03 	cmp.w	sl, #3
 801b676:	ddea      	ble.n	801b64e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b678:	f1ba 0f0c 	cmp.w	sl, #12
 801b67c:	f04f 0303 	mov.w	r3, #3
 801b680:	f04f 0600 	mov.w	r6, #0
 801b684:	4958      	ldr	r1, [pc, #352]	; (801b7e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b686:	bfd8      	it	le
 801b688:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b68c:	960a      	str	r6, [sp, #40]	; 0x28
 801b68e:	bfd8      	it	le
 801b690:	fb92 f3f3 	sdivle	r3, r2, r3
 801b694:	9301      	str	r3, [sp, #4]
 801b696:	4b55      	ldr	r3, [pc, #340]	; (801b7ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b698:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b69c:	4b54      	ldr	r3, [pc, #336]	; (801b7f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b69e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b6a2:	2248      	movs	r2, #72	; 0x48
 801b6a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b6ac:	ab0e      	add	r3, sp, #56	; 0x38
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f00f f8ee 	bl	802a890 <memcpy>
 801b6b4:	f04f 32ff 	mov.w	r2, #4294967295
 801b6b8:	f8cd a008 	str.w	sl, [sp, #8]
 801b6bc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b6c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b6c4:	46b3      	mov	fp, r6
 801b6c6:	fb93 f3f2 	sdiv	r3, r3, r2
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	9303      	str	r3, [sp, #12]
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	9a03      	ldr	r2, [sp, #12]
 801b6d2:	88ef      	ldrh	r7, [r5, #6]
 801b6d4:	a80a      	add	r0, sp, #40	; 0x28
 801b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6d8:	9b07      	ldr	r3, [sp, #28]
 801b6da:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b6de:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b6e2:	fb13 f302 	smulbb	r3, r3, r2
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	9304      	str	r3, [sp, #16]
 801b6ea:	9b07      	ldr	r3, [sp, #28]
 801b6ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b6f0:	685b      	ldr	r3, [r3, #4]
 801b6f2:	fb13 f302 	smulbb	r3, r3, r2
 801b6f6:	b29b      	uxth	r3, r3
 801b6f8:	9305      	str	r3, [sp, #20]
 801b6fa:	9b04      	ldr	r3, [sp, #16]
 801b6fc:	441f      	add	r7, r3
 801b6fe:	9b05      	ldr	r3, [sp, #20]
 801b700:	4498      	add	r8, r3
 801b702:	b23f      	sxth	r7, r7
 801b704:	fa0f f888 	sxth.w	r8, r8
 801b708:	4639      	mov	r1, r7
 801b70a:	4642      	mov	r2, r8
 801b70c:	f7ff ff14 	bl	801b538 <_ZNK8touchgfx4Rect9intersectEss>
 801b710:	b380      	cbz	r0, 801b774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b712:	4639      	mov	r1, r7
 801b714:	ab09      	add	r3, sp, #36	; 0x24
 801b716:	4642      	mov	r2, r8
 801b718:	1d20      	adds	r0, r4, #4
 801b71a:	f7f9 ff17 	bl	801554c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b71e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b720:	b341      	cbz	r1, 801b774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b722:	4549      	cmp	r1, r9
 801b724:	d026      	beq.n	801b774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b726:	a80c      	add	r0, sp, #48	; 0x30
 801b728:	f7ff fd6e 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b72c:	2002      	movs	r0, #2
 801b72e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b732:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b736:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b73a:	fb92 f2f0 	sdiv	r2, r2, r0
 801b73e:	440a      	add	r2, r1
 801b740:	1a99      	subs	r1, r3, r2
 801b742:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b746:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b74a:	fb93 f3f0 	sdiv	r3, r3, r0
 801b74e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b752:	4403      	add	r3, r0
 801b754:	1ad3      	subs	r3, r2, r3
 801b756:	9a06      	ldr	r2, [sp, #24]
 801b758:	435b      	muls	r3, r3
 801b75a:	fb01 3301 	mla	r3, r1, r1, r3
 801b75e:	4293      	cmp	r3, r2
 801b760:	d208      	bcs.n	801b774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b762:	9a04      	ldr	r2, [sp, #16]
 801b764:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b768:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b76a:	9a05      	ldr	r2, [sp, #20]
 801b76c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b770:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b772:	9306      	str	r3, [sp, #24]
 801b774:	f10b 0b02 	add.w	fp, fp, #2
 801b778:	f1bb 0f08 	cmp.w	fp, #8
 801b77c:	dda7      	ble.n	801b6ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b77e:	9b02      	ldr	r3, [sp, #8]
 801b780:	3601      	adds	r6, #1
 801b782:	4453      	add	r3, sl
 801b784:	9302      	str	r3, [sp, #8]
 801b786:	9b01      	ldr	r3, [sp, #4]
 801b788:	42b3      	cmp	r3, r6
 801b78a:	d199      	bne.n	801b6c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b78c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b78e:	2900      	cmp	r1, #0
 801b790:	f43f af5a 	beq.w	801b648 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b794:	a80c      	add	r0, sp, #48	; 0x30
 801b796:	2600      	movs	r6, #0
 801b798:	f7ff fd36 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b79c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b7a0:	88ea      	ldrh	r2, [r5, #6]
 801b7a2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b7a6:	1ad2      	subs	r2, r2, r3
 801b7a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b7aa:	7929      	ldrb	r1, [r5, #4]
 801b7ac:	441a      	add	r2, r3
 801b7ae:	892b      	ldrh	r3, [r5, #8]
 801b7b0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b7b4:	a90e      	add	r1, sp, #56	; 0x38
 801b7b6:	1a1b      	subs	r3, r3, r0
 801b7b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b7ba:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b7be:	4403      	add	r3, r0
 801b7c0:	480c      	ldr	r0, [pc, #48]	; (801b7f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b7c2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b7c6:	900e      	str	r0, [sp, #56]	; 0x38
 801b7c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b7ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b7ce:	6803      	ldr	r3, [r0, #0]
 801b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7d2:	4798      	blx	r3
 801b7d4:	792b      	ldrb	r3, [r5, #4]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	f43f af36 	beq.w	801b648 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b7dc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b7e0:	e732      	b.n	801b648 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b7e2:	bf00      	nop
 801b7e4:	20014b34 	.word	0x20014b34
 801b7e8:	0802c6c8 	.word	0x0802c6c8
 801b7ec:	20014b28 	.word	0x20014b28
 801b7f0:	20014b2a 	.word	0x20014b2a
 801b7f4:	0802f9fc 	.word	0x0802f9fc

0801b7f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7fa:	4604      	mov	r4, r0
 801b7fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b800:	3201      	adds	r2, #1
 801b802:	d112      	bne.n	801b82a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b804:	2500      	movs	r5, #0
 801b806:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b80a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b80e:	6803      	ldr	r3, [r0, #0]
 801b810:	9500      	str	r5, [sp, #0]
 801b812:	466d      	mov	r5, sp
 801b814:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b818:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b81c:	4629      	mov	r1, r5
 801b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b820:	4798      	blx	r3
 801b822:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b826:	e884 0003 	stmia.w	r4, {r0, r1}
 801b82a:	4620      	mov	r0, r4
 801b82c:	b003      	add	sp, #12
 801b82e:	bd30      	pop	{r4, r5, pc}

0801b830 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b830:	b513      	push	{r0, r1, r4, lr}
 801b832:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b836:	4604      	mov	r4, r0
 801b838:	3301      	adds	r3, #1
 801b83a:	d109      	bne.n	801b850 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b83c:	4601      	mov	r1, r0
 801b83e:	4668      	mov	r0, sp
 801b840:	f7ff fce2 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b844:	f8bd 3000 	ldrh.w	r3, [sp]
 801b848:	8423      	strh	r3, [r4, #32]
 801b84a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b84e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b850:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b854:	b002      	add	sp, #8
 801b856:	bd10      	pop	{r4, pc}

0801b858 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b858:	b513      	push	{r0, r1, r4, lr}
 801b85a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b85e:	4604      	mov	r4, r0
 801b860:	3301      	adds	r3, #1
 801b862:	d109      	bne.n	801b878 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b864:	4601      	mov	r1, r0
 801b866:	4668      	mov	r0, sp
 801b868:	f7ff fcce 	bl	801b208 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b86c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b870:	8423      	strh	r3, [r4, #32]
 801b872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b876:	8463      	strh	r3, [r4, #34]	; 0x22
 801b878:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b87c:	b002      	add	sp, #8
 801b87e:	bd10      	pop	{r4, pc}

0801b880 <_ZN8touchgfx6ScreenC1Ev>:
 801b880:	b570      	push	{r4, r5, r6, lr}
 801b882:	4b16      	ldr	r3, [pc, #88]	; (801b8dc <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801b884:	4605      	mov	r5, r0
 801b886:	4a16      	ldr	r2, [pc, #88]	; (801b8e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b888:	2101      	movs	r1, #1
 801b88a:	f845 3b04 	str.w	r3, [r5], #4
 801b88e:	2300      	movs	r3, #0
 801b890:	6042      	str	r2, [r0, #4]
 801b892:	4604      	mov	r4, r0
 801b894:	8103      	strh	r3, [r0, #8]
 801b896:	8143      	strh	r3, [r0, #10]
 801b898:	8183      	strh	r3, [r0, #12]
 801b89a:	81c3      	strh	r3, [r0, #14]
 801b89c:	8203      	strh	r3, [r0, #16]
 801b89e:	8243      	strh	r3, [r0, #18]
 801b8a0:	8283      	strh	r3, [r0, #20]
 801b8a2:	82c3      	strh	r3, [r0, #22]
 801b8a4:	6203      	str	r3, [r0, #32]
 801b8a6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b8aa:	6343      	str	r3, [r0, #52]	; 0x34
 801b8ac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b8b0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b8b4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b8b8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b8bc:	4b09      	ldr	r3, [pc, #36]	; (801b8e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b8be:	4628      	mov	r0, r5
 801b8c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b8c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801b8c6:	4a08      	ldr	r2, [pc, #32]	; (801b8e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b8c8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b8cc:	4798      	blx	r3
 801b8ce:	6863      	ldr	r3, [r4, #4]
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	4631      	mov	r1, r6
 801b8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8d6:	4798      	blx	r3
 801b8d8:	4620      	mov	r0, r4
 801b8da:	bd70      	pop	{r4, r5, r6, pc}
 801b8dc:	0802fa38 	.word	0x0802fa38
 801b8e0:	0802e15c 	.word	0x0802e15c
 801b8e4:	20014b2a 	.word	0x20014b2a
 801b8e8:	20014b28 	.word	0x20014b28

0801b8ec <_ZN8touchgfx6Screen4drawEv>:
 801b8ec:	4b09      	ldr	r3, [pc, #36]	; (801b914 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b8ee:	b507      	push	{r0, r1, r2, lr}
 801b8f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8f4:	2100      	movs	r1, #0
 801b8f6:	4b08      	ldr	r3, [pc, #32]	; (801b918 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b8f8:	9100      	str	r1, [sp, #0]
 801b8fa:	4669      	mov	r1, sp
 801b8fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b900:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b904:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b908:	6803      	ldr	r3, [r0, #0]
 801b90a:	689b      	ldr	r3, [r3, #8]
 801b90c:	4798      	blx	r3
 801b90e:	b003      	add	sp, #12
 801b910:	f85d fb04 	ldr.w	pc, [sp], #4
 801b914:	20014b28 	.word	0x20014b28
 801b918:	20014b2a 	.word	0x20014b2a

0801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b920:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b924:	b089      	sub	sp, #36	; 0x24
 801b926:	4680      	mov	r8, r0
 801b928:	460c      	mov	r4, r1
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	4615      	mov	r5, r2
 801b92e:	dd0e      	ble.n	801b94e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b930:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b934:	2b00      	cmp	r3, #0
 801b936:	dd0a      	ble.n	801b94e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b938:	4628      	mov	r0, r5
 801b93a:	f7ff ff5d 	bl	801b7f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b93e:	4621      	mov	r1, r4
 801b940:	f7fe fc12 	bl	801a168 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b944:	69eb      	ldr	r3, [r5, #28]
 801b946:	b928      	cbnz	r0, 801b954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b948:	461d      	mov	r5, r3
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d1f4      	bne.n	801b938 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b94e:	b009      	add	sp, #36	; 0x24
 801b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b954:	ae04      	add	r6, sp, #16
 801b956:	2b00      	cmp	r3, #0
 801b958:	f000 80b5 	beq.w	801bac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b95c:	682b      	ldr	r3, [r5, #0]
 801b95e:	4629      	mov	r1, r5
 801b960:	a802      	add	r0, sp, #8
 801b962:	68db      	ldr	r3, [r3, #12]
 801b964:	4798      	blx	r3
 801b966:	4628      	mov	r0, r5
 801b968:	f7ff ff62 	bl	801b830 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b96c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b970:	4407      	add	r7, r0
 801b972:	4628      	mov	r0, r5
 801b974:	f7ff ff70 	bl	801b858 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b978:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b97c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b980:	b23f      	sxth	r7, r7
 801b982:	4418      	add	r0, r3
 801b984:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b988:	4621      	mov	r1, r4
 801b98a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b98e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b992:	4630      	mov	r0, r6
 801b994:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b998:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b99c:	f7f9 fe88 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	f7ff ff29 	bl	801b7f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b9a6:	ab06      	add	r3, sp, #24
 801b9a8:	4602      	mov	r2, r0
 801b9aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b9ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801b9b2:	4611      	mov	r1, r2
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f7f9 fe7b 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801b9ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b9be:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b9c2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b9c6:	4299      	cmp	r1, r3
 801b9c8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b9cc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b9d0:	d10b      	bne.n	801b9ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b9d6:	4552      	cmp	r2, sl
 801b9d8:	d107      	bne.n	801b9ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b9de:	455a      	cmp	r2, fp
 801b9e0:	d103      	bne.n	801b9ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b9e6:	454a      	cmp	r2, r9
 801b9e8:	d06d      	beq.n	801bac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b9ea:	f1bb 0f00 	cmp.w	fp, #0
 801b9ee:	dd65      	ble.n	801babc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9f0:	f1b9 0f00 	cmp.w	r9, #0
 801b9f4:	dd62      	ble.n	801babc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b9fa:	fa1f f08a 	uxth.w	r0, sl
 801b9fe:	4552      	cmp	r2, sl
 801ba00:	9000      	str	r0, [sp, #0]
 801ba02:	da12      	bge.n	801ba2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801ba04:	9301      	str	r3, [sp, #4]
 801ba06:	9b00      	ldr	r3, [sp, #0]
 801ba08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ba0c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ba10:	1a9a      	subs	r2, r3, r2
 801ba12:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ba16:	4631      	mov	r1, r6
 801ba18:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ba1c:	4640      	mov	r0, r8
 801ba1e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801ba22:	69ea      	ldr	r2, [r5, #28]
 801ba24:	f7ff ff7a 	bl	801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba28:	9b01      	ldr	r3, [sp, #4]
 801ba2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ba2e:	b29f      	uxth	r7, r3
 801ba30:	429a      	cmp	r2, r3
 801ba32:	da0d      	bge.n	801ba50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ba34:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba38:	1aba      	subs	r2, r7, r2
 801ba3a:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba3e:	4631      	mov	r1, r6
 801ba40:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ba44:	4640      	mov	r0, r8
 801ba46:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba4a:	69ea      	ldr	r2, [r5, #28]
 801ba4c:	f7ff ff66 	bl	801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba50:	8822      	ldrh	r2, [r4, #0]
 801ba52:	445f      	add	r7, fp
 801ba54:	88a3      	ldrh	r3, [r4, #4]
 801ba56:	b2bf      	uxth	r7, r7
 801ba58:	4413      	add	r3, r2
 801ba5a:	b23a      	sxth	r2, r7
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	b219      	sxth	r1, r3
 801ba60:	4291      	cmp	r1, r2
 801ba62:	dd0d      	ble.n	801ba80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ba64:	1bdb      	subs	r3, r3, r7
 801ba66:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba6a:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba6e:	4631      	mov	r1, r6
 801ba70:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba74:	4640      	mov	r0, r8
 801ba76:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba7a:	69ea      	ldr	r2, [r5, #28]
 801ba7c:	f7ff ff4e 	bl	801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba80:	88e2      	ldrh	r2, [r4, #6]
 801ba82:	8863      	ldrh	r3, [r4, #2]
 801ba84:	4413      	add	r3, r2
 801ba86:	9a00      	ldr	r2, [sp, #0]
 801ba88:	444a      	add	r2, r9
 801ba8a:	b29b      	uxth	r3, r3
 801ba8c:	fa1f f982 	uxth.w	r9, r2
 801ba90:	b219      	sxth	r1, r3
 801ba92:	fa0f f289 	sxth.w	r2, r9
 801ba96:	428a      	cmp	r2, r1
 801ba98:	da15      	bge.n	801bac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ba9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ba9e:	eba3 0309 	sub.w	r3, r3, r9
 801baa2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801baa6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801baaa:	4631      	mov	r1, r6
 801baac:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bab0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bab8:	69ea      	ldr	r2, [r5, #28]
 801baba:	e001      	b.n	801bac0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801babc:	69ea      	ldr	r2, [r5, #28]
 801babe:	4621      	mov	r1, r4
 801bac0:	4640      	mov	r0, r8
 801bac2:	f7ff ff2b 	bl	801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bac6:	4628      	mov	r0, r5
 801bac8:	f7ff fe96 	bl	801b7f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bacc:	6861      	ldr	r1, [r4, #4]
 801bace:	4602      	mov	r2, r0
 801bad0:	4633      	mov	r3, r6
 801bad2:	6820      	ldr	r0, [r4, #0]
 801bad4:	c303      	stmia	r3!, {r0, r1}
 801bad6:	4611      	mov	r1, r2
 801bad8:	4630      	mov	r0, r6
 801bada:	f7f9 fde9 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801bade:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	f77f af33 	ble.w	801b94e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bae8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801baec:	2b00      	cmp	r3, #0
 801baee:	f77f af2e 	ble.w	801b94e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801baf2:	4628      	mov	r0, r5
 801baf4:	f7ff fe9c 	bl	801b830 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801baf8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bafc:	1a18      	subs	r0, r3, r0
 801bafe:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bb02:	4628      	mov	r0, r5
 801bb04:	f7ff fea8 	bl	801b858 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bb08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bb0c:	4631      	mov	r1, r6
 801bb0e:	1a18      	subs	r0, r3, r0
 801bb10:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bb14:	4628      	mov	r0, r5
 801bb16:	682b      	ldr	r3, [r5, #0]
 801bb18:	689b      	ldr	r3, [r3, #8]
 801bb1a:	4798      	blx	r3
 801bb1c:	e717      	b.n	801b94e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801bb1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bb1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb20:	2300      	movs	r3, #0
 801bb22:	aa02      	add	r2, sp, #8
 801bb24:	4604      	mov	r4, r0
 801bb26:	3004      	adds	r0, #4
 801bb28:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bb2c:	460d      	mov	r5, r1
 801bb2e:	f7f9 fe97 	bl	8015860 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bb32:	9a01      	ldr	r2, [sp, #4]
 801bb34:	b11a      	cbz	r2, 801bb3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801bb36:	4629      	mov	r1, r5
 801bb38:	4620      	mov	r0, r4
 801bb3a:	f7ff feef 	bl	801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bb3e:	b003      	add	sp, #12
 801bb40:	bd30      	pop	{r4, r5, pc}

0801bb42 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bb42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb44:	4602      	mov	r2, r0
 801bb46:	4604      	mov	r4, r0
 801bb48:	460d      	mov	r5, r1
 801bb4a:	466b      	mov	r3, sp
 801bb4c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bb50:	6851      	ldr	r1, [r2, #4]
 801bb52:	c303      	stmia	r3!, {r0, r1}
 801bb54:	4629      	mov	r1, r5
 801bb56:	4668      	mov	r0, sp
 801bb58:	f7f9 fdaa 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 801bb5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bb60:	4669      	mov	r1, sp
 801bb62:	b123      	cbz	r3, 801bb6e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801bb64:	4620      	mov	r0, r4
 801bb66:	f7ff ffda 	bl	801bb1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bb6a:	b003      	add	sp, #12
 801bb6c:	bd30      	pop	{r4, r5, pc}
 801bb6e:	1d20      	adds	r0, r4, #4
 801bb70:	f7f9 fe3d 	bl	80157ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bb74:	e7f9      	b.n	801bb6a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801bb76 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bb76:	460b      	mov	r3, r1
 801bb78:	680a      	ldr	r2, [r1, #0]
 801bb7a:	1d01      	adds	r1, r0, #4
 801bb7c:	6992      	ldr	r2, [r2, #24]
 801bb7e:	4618      	mov	r0, r3
 801bb80:	4710      	bx	r2

0801bb82 <_ZN8touchgfx12TextProviderC1Ev>:
 801bb82:	2300      	movs	r3, #0
 801bb84:	2201      	movs	r2, #1
 801bb86:	b510      	push	{r4, lr}
 801bb88:	4604      	mov	r4, r0
 801bb8a:	60c3      	str	r3, [r0, #12]
 801bb8c:	7403      	strb	r3, [r0, #16]
 801bb8e:	82c3      	strh	r3, [r0, #22]
 801bb90:	8303      	strh	r3, [r0, #24]
 801bb92:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bb94:	8603      	strh	r3, [r0, #48]	; 0x30
 801bb96:	86c3      	strh	r3, [r0, #54]	; 0x36
 801bb98:	8703      	strh	r3, [r0, #56]	; 0x38
 801bb9a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bb9c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bba0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bba4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801bba8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801bbac:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801bbb0:	e9c0 3300 	strd	r3, r3, [r0]
 801bbb4:	f7f7 f8ac 	bl	8012d10 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bbb8:	4620      	mov	r0, r4
 801bbba:	bd10      	pop	{r4, pc}

0801bbbc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bbbc:	b530      	push	{r4, r5, lr}
 801bbbe:	2500      	movs	r5, #0
 801bbc0:	2401      	movs	r4, #1
 801bbc2:	6843      	ldr	r3, [r0, #4]
 801bbc4:	b913      	cbnz	r3, 801bbcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bbc6:	6803      	ldr	r3, [r0, #0]
 801bbc8:	b1f3      	cbz	r3, 801bc08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801bbca:	6043      	str	r3, [r0, #4]
 801bbcc:	7c03      	ldrb	r3, [r0, #16]
 801bbce:	b143      	cbz	r3, 801bbe2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bbd0:	68c3      	ldr	r3, [r0, #12]
 801bbd2:	b12b      	cbz	r3, 801bbe0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bbd4:	881a      	ldrh	r2, [r3, #0]
 801bbd6:	b11a      	cbz	r2, 801bbe0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bbd8:	1c9a      	adds	r2, r3, #2
 801bbda:	60c2      	str	r2, [r0, #12]
 801bbdc:	8818      	ldrh	r0, [r3, #0]
 801bbde:	bd30      	pop	{r4, r5, pc}
 801bbe0:	7405      	strb	r5, [r0, #16]
 801bbe2:	6843      	ldr	r3, [r0, #4]
 801bbe4:	8819      	ldrh	r1, [r3, #0]
 801bbe6:	b179      	cbz	r1, 801bc08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801bbe8:	1c9a      	adds	r2, r3, #2
 801bbea:	2902      	cmp	r1, #2
 801bbec:	6042      	str	r2, [r0, #4]
 801bbee:	d1f5      	bne.n	801bbdc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bbf0:	6883      	ldr	r3, [r0, #8]
 801bbf2:	1d1a      	adds	r2, r3, #4
 801bbf4:	6082      	str	r2, [r0, #8]
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	60c3      	str	r3, [r0, #12]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d0e1      	beq.n	801bbc2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbfe:	881b      	ldrh	r3, [r3, #0]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d0de      	beq.n	801bbc2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc04:	7404      	strb	r4, [r0, #16]
 801bc06:	e7dc      	b.n	801bbc2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc08:	2000      	movs	r0, #0
 801bc0a:	e7e8      	b.n	801bbde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bc0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801bc0c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bc0e:	2300      	movs	r3, #0
 801bc10:	6082      	str	r2, [r0, #8]
 801bc12:	6001      	str	r1, [r0, #0]
 801bc14:	6043      	str	r3, [r0, #4]
 801bc16:	60c3      	str	r3, [r0, #12]
 801bc18:	7403      	strb	r3, [r0, #16]
 801bc1a:	8603      	strh	r3, [r0, #48]	; 0x30
 801bc1c:	8303      	strh	r3, [r0, #24]
 801bc1e:	8703      	strh	r3, [r0, #56]	; 0x38
 801bc20:	b410      	push	{r4}
 801bc22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc26:	f7f7 b873 	b.w	8012d10 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bc2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bc2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc2c:	4605      	mov	r5, r0
 801bc2e:	4608      	mov	r0, r1
 801bc30:	b1f1      	cbz	r1, 801bc70 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bc32:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801bc36:	460b      	mov	r3, r1
 801bc38:	f101 0708 	add.w	r7, r1, #8
 801bc3c:	4622      	mov	r2, r4
 801bc3e:	6818      	ldr	r0, [r3, #0]
 801bc40:	3308      	adds	r3, #8
 801bc42:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bc46:	4626      	mov	r6, r4
 801bc48:	42bb      	cmp	r3, r7
 801bc4a:	c603      	stmia	r6!, {r0, r1}
 801bc4c:	4634      	mov	r4, r6
 801bc4e:	d1f6      	bne.n	801bc3e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bc50:	6818      	ldr	r0, [r3, #0]
 801bc52:	6030      	str	r0, [r6, #0]
 801bc54:	4610      	mov	r0, r2
 801bc56:	889b      	ldrh	r3, [r3, #4]
 801bc58:	80b3      	strh	r3, [r6, #4]
 801bc5a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801bc5e:	015b      	lsls	r3, r3, #5
 801bc60:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bc64:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801bc68:	430b      	orrs	r3, r1
 801bc6a:	425b      	negs	r3, r3
 801bc6c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bc72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bc72:	b538      	push	{r3, r4, r5, lr}
 801bc74:	460c      	mov	r4, r1
 801bc76:	6811      	ldr	r1, [r2, #0]
 801bc78:	4610      	mov	r0, r2
 801bc7a:	68cd      	ldr	r5, [r1, #12]
 801bc7c:	4619      	mov	r1, r3
 801bc7e:	47a8      	blx	r5
 801bc80:	2800      	cmp	r0, #0
 801bc82:	bf08      	it	eq
 801bc84:	4620      	moveq	r0, r4
 801bc86:	bd38      	pop	{r3, r4, r5, pc}

0801bc88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc8a:	4604      	mov	r4, r0
 801bc8c:	4615      	mov	r5, r2
 801bc8e:	4608      	mov	r0, r1
 801bc90:	b93a      	cbnz	r2, 801bca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bc92:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801bc96:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801bc9a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801bc9e:	4628      	mov	r0, r5
 801bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bca2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801bca6:	8893      	ldrh	r3, [r2, #4]
 801bca8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801bcac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bcb0:	79ee      	ldrb	r6, [r5, #7]
 801bcb2:	4316      	orrs	r6, r2
 801bcb4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801bcb8:	189a      	adds	r2, r3, r2
 801bcba:	b2b7      	uxth	r7, r6
 801bcbc:	b291      	uxth	r1, r2
 801bcbe:	291d      	cmp	r1, #29
 801bcc0:	f200 8084 	bhi.w	801bdcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801bcc4:	2201      	movs	r2, #1
 801bcc6:	10f6      	asrs	r6, r6, #3
 801bcc8:	408a      	lsls	r2, r1
 801bcca:	4978      	ldr	r1, [pc, #480]	; (801beac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801bccc:	420a      	tst	r2, r1
 801bcce:	d12e      	bne.n	801bd2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801bcd0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bcd4:	d07a      	beq.n	801bdcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801bcd6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801bcda:	462b      	mov	r3, r5
 801bcdc:	f105 0e08 	add.w	lr, r5, #8
 801bce0:	4615      	mov	r5, r2
 801bce2:	6818      	ldr	r0, [r3, #0]
 801bce4:	3308      	adds	r3, #8
 801bce6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bcea:	4694      	mov	ip, r2
 801bcec:	4573      	cmp	r3, lr
 801bcee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bcf2:	4662      	mov	r2, ip
 801bcf4:	d1f5      	bne.n	801bce2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801bcf6:	6818      	ldr	r0, [r3, #0]
 801bcf8:	f8cc 0000 	str.w	r0, [ip]
 801bcfc:	889b      	ldrh	r3, [r3, #4]
 801bcfe:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bd02:	b2b3      	uxth	r3, r6
 801bd04:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801bd08:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801bd0c:	1aca      	subs	r2, r1, r3
 801bd0e:	1bcf      	subs	r7, r1, r7
 801bd10:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801bd14:	b292      	uxth	r2, r2
 801bd16:	1afb      	subs	r3, r7, r3
 801bd18:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801bd1c:	10d2      	asrs	r2, r2, #3
 801bd1e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bd22:	4302      	orrs	r2, r0
 801bd24:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801bd28:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801bd2c:	e7b7      	b.n	801bc9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bd2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bd30:	b92b      	cbnz	r3, 801bd3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801bd32:	4b5f      	ldr	r3, [pc, #380]	; (801beb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801bd34:	21c0      	movs	r1, #192	; 0xc0
 801bd36:	4a5f      	ldr	r2, [pc, #380]	; (801beb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801bd38:	485f      	ldr	r0, [pc, #380]	; (801beb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801bd3a:	f00e fd2b 	bl	802a794 <__assert_func>
 801bd3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bd40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bd44:	8b59      	ldrh	r1, [r3, #26]
 801bd46:	f640 6333 	movw	r3, #3635	; 0xe33
 801bd4a:	4299      	cmp	r1, r3
 801bd4c:	d110      	bne.n	801bd70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801bd4e:	6803      	ldr	r3, [r0, #0]
 801bd50:	68db      	ldr	r3, [r3, #12]
 801bd52:	4798      	blx	r3
 801bd54:	7b41      	ldrb	r1, [r0, #13]
 801bd56:	00cb      	lsls	r3, r1, #3
 801bd58:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bd5c:	7a03      	ldrb	r3, [r0, #8]
 801bd5e:	0648      	lsls	r0, r1, #25
 801bd60:	ea43 0302 	orr.w	r3, r3, r2
 801bd64:	bf44      	itt	mi
 801bd66:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd6a:	b21b      	sxthmi	r3, r3
 801bd6c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bd70:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bd74:	462a      	mov	r2, r5
 801bd76:	f105 0c08 	add.w	ip, r5, #8
 801bd7a:	443b      	add	r3, r7
 801bd7c:	4433      	add	r3, r6
 801bd7e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801bd82:	b29b      	uxth	r3, r3
 801bd84:	4635      	mov	r5, r6
 801bd86:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bd8a:	6810      	ldr	r0, [r2, #0]
 801bd8c:	3208      	adds	r2, #8
 801bd8e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bd92:	4637      	mov	r7, r6
 801bd94:	4562      	cmp	r2, ip
 801bd96:	c703      	stmia	r7!, {r0, r1}
 801bd98:	463e      	mov	r6, r7
 801bd9a:	d1f6      	bne.n	801bd8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801bd9c:	6810      	ldr	r0, [r2, #0]
 801bd9e:	6038      	str	r0, [r7, #0]
 801bda0:	8892      	ldrh	r2, [r2, #4]
 801bda2:	80ba      	strh	r2, [r7, #4]
 801bda4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bda8:	10db      	asrs	r3, r3, #3
 801bdaa:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bdae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bdb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bdb6:	4313      	orrs	r3, r2
 801bdb8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bdbc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bdc0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bdc4:	1a9b      	subs	r3, r3, r2
 801bdc6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bdca:	e768      	b.n	801bc9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bdcc:	f023 0204 	bic.w	r2, r3, #4
 801bdd0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bdd4:	428a      	cmp	r2, r1
 801bdd6:	d003      	beq.n	801bde0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801bdd8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bddc:	4293      	cmp	r3, r2
 801bdde:	d120      	bne.n	801be22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bde0:	3b01      	subs	r3, #1
 801bde2:	4602      	mov	r2, r0
 801bde4:	4629      	mov	r1, r5
 801bde6:	4620      	mov	r0, r4
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	f7ff ff42 	bl	801bc72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bdee:	7b41      	ldrb	r1, [r0, #13]
 801bdf0:	00cb      	lsls	r3, r1, #3
 801bdf2:	0649      	lsls	r1, r1, #25
 801bdf4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bdf8:	7a03      	ldrb	r3, [r0, #8]
 801bdfa:	ea43 0302 	orr.w	r3, r3, r2
 801bdfe:	bf44      	itt	mi
 801be00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be04:	b21b      	sxthmi	r3, r3
 801be06:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801be0a:	7b6b      	ldrb	r3, [r5, #13]
 801be0c:	7aaa      	ldrb	r2, [r5, #10]
 801be0e:	005b      	lsls	r3, r3, #1
 801be10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be14:	4313      	orrs	r3, r2
 801be16:	115a      	asrs	r2, r3, #5
 801be18:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801be1c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801be20:	e035      	b.n	801be8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801be22:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801be26:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801be2a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801be2e:	7a2a      	ldrb	r2, [r5, #8]
 801be30:	ea42 0201 	orr.w	r2, r2, r1
 801be34:	f640 6109 	movw	r1, #3593	; 0xe09
 801be38:	bf1c      	itt	ne
 801be3a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801be3e:	b212      	sxthne	r2, r2
 801be40:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801be44:	f023 0210 	bic.w	r2, r3, #16
 801be48:	428a      	cmp	r2, r1
 801be4a:	d003      	beq.n	801be54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801be4c:	f640 6213 	movw	r2, #3603	; 0xe13
 801be50:	4293      	cmp	r3, r2
 801be52:	d129      	bne.n	801bea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801be54:	7b6e      	ldrb	r6, [r5, #13]
 801be56:	4629      	mov	r1, r5
 801be58:	0076      	lsls	r6, r6, #1
 801be5a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801be5e:	7aae      	ldrb	r6, [r5, #10]
 801be60:	4316      	orrs	r6, r2
 801be62:	f640 6213 	movw	r2, #3603	; 0xe13
 801be66:	4293      	cmp	r3, r2
 801be68:	4602      	mov	r2, r0
 801be6a:	4620      	mov	r0, r4
 801be6c:	bf16      	itet	ne
 801be6e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801be72:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801be76:	b29b      	uxthne	r3, r3
 801be78:	f7ff fefb 	bl	801bc72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801be7c:	7b43      	ldrb	r3, [r0, #13]
 801be7e:	7a82      	ldrb	r2, [r0, #10]
 801be80:	005b      	lsls	r3, r3, #1
 801be82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be86:	4313      	orrs	r3, r2
 801be88:	1af6      	subs	r6, r6, r3
 801be8a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801be8e:	7b69      	ldrb	r1, [r5, #13]
 801be90:	00cb      	lsls	r3, r1, #3
 801be92:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801be96:	7a2b      	ldrb	r3, [r5, #8]
 801be98:	4313      	orrs	r3, r2
 801be9a:	064a      	lsls	r2, r1, #25
 801be9c:	bf44      	itt	mi
 801be9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bea2:	b21b      	sxthmi	r3, r3
 801bea4:	1bdb      	subs	r3, r3, r7
 801bea6:	e73f      	b.n	801bd28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801bea8:	2300      	movs	r3, #0
 801beaa:	e7b7      	b.n	801be1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801beac:	3fc00079 	.word	0x3fc00079
 801beb0:	0802fa64 	.word	0x0802fa64
 801beb4:	0802fcd6 	.word	0x0802fcd6
 801beb8:	0802fa6d 	.word	0x0802fa6d

0801bebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bec0:	4604      	mov	r4, r0
 801bec2:	b942      	cbnz	r2, 801bed6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bec8:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801becc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bed0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bed4:	e046      	b.n	801bf64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801bed6:	7b51      	ldrb	r1, [r2, #13]
 801bed8:	8893      	ldrh	r3, [r2, #4]
 801beda:	010f      	lsls	r7, r1, #4
 801bedc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801bee0:	79d7      	ldrb	r7, [r2, #7]
 801bee2:	4307      	orrs	r7, r0
 801bee4:	2f04      	cmp	r7, #4
 801bee6:	b2bd      	uxth	r5, r7
 801bee8:	bfcc      	ite	gt
 801beea:	08bf      	lsrgt	r7, r7, #2
 801beec:	2701      	movle	r7, #1
 801beee:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bef2:	f200 80ab 	bhi.w	801c04c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801bef6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801befa:	4283      	cmp	r3, r0
 801befc:	d216      	bcs.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801befe:	f240 605b 	movw	r0, #1627	; 0x65b
 801bf02:	4283      	cmp	r3, r0
 801bf04:	d859      	bhi.n	801bfba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801bf06:	f240 6057 	movw	r0, #1623	; 0x657
 801bf0a:	4283      	cmp	r3, r0
 801bf0c:	d20e      	bcs.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bf0e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bf12:	d24a      	bcs.n	801bfaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801bf14:	f240 604e 	movw	r0, #1614	; 0x64e
 801bf18:	4283      	cmp	r3, r0
 801bf1a:	d207      	bcs.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bf1c:	f240 601a 	movw	r0, #1562	; 0x61a
 801bf20:	4283      	cmp	r3, r0
 801bf22:	d02a      	beq.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bf24:	d821      	bhi.n	801bf6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801bf26:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bf2a:	d35b      	bcc.n	801bfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bf2c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801bf30:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bf34:	f040 80d0 	bne.w	801c0d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bf38:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801bf3c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bf40:	f040 80ca 	bne.w	801c0d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bf44:	00cb      	lsls	r3, r1, #3
 801bf46:	0649      	lsls	r1, r1, #25
 801bf48:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bf4c:	7a13      	ldrb	r3, [r2, #8]
 801bf4e:	ea43 0300 	orr.w	r3, r3, r0
 801bf52:	bf44      	itt	mi
 801bf54:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf58:	b21b      	sxthmi	r3, r3
 801bf5a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bf5e:	1b5d      	subs	r5, r3, r5
 801bf60:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bf64:	4610      	mov	r0, r2
 801bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf6a:	f240 604b 	movw	r0, #1611	; 0x64b
 801bf6e:	4283      	cmp	r3, r0
 801bf70:	d338      	bcc.n	801bfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bf72:	f240 604c 	movw	r0, #1612	; 0x64c
 801bf76:	4283      	cmp	r3, r0
 801bf78:	d9d8      	bls.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bf7a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801bf7e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801bf82:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bf86:	f040 80f2 	bne.w	801c16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bf8a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bf8e:	f040 80ee 	bne.w	801c16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bf92:	00cb      	lsls	r3, r1, #3
 801bf94:	064e      	lsls	r6, r1, #25
 801bf96:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bf9a:	7a13      	ldrb	r3, [r2, #8]
 801bf9c:	ea43 0300 	orr.w	r3, r3, r0
 801bfa0:	bf44      	itt	mi
 801bfa2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfa6:	b21b      	sxthmi	r3, r3
 801bfa8:	e7d9      	b.n	801bf5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801bfaa:	f240 6054 	movw	r0, #1620	; 0x654
 801bfae:	4283      	cmp	r3, r0
 801bfb0:	d8e3      	bhi.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bfb2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bfb6:	d9e0      	bls.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bfb8:	e7b8      	b.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bfba:	f240 6074 	movw	r0, #1652	; 0x674
 801bfbe:	4283      	cmp	r3, r0
 801bfc0:	d0b4      	beq.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bfc2:	d82d      	bhi.n	801c020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801bfc4:	f240 605e 	movw	r0, #1630	; 0x65e
 801bfc8:	4283      	cmp	r3, r0
 801bfca:	d804      	bhi.n	801bfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801bfcc:	f240 605d 	movw	r0, #1629	; 0x65d
 801bfd0:	4283      	cmp	r3, r0
 801bfd2:	d3d2      	bcc.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bfd4:	e7aa      	b.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bfd6:	f240 605f 	movw	r0, #1631	; 0x65f
 801bfda:	4283      	cmp	r3, r0
 801bfdc:	d0cd      	beq.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bfde:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801bfe2:	d0a3      	beq.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bfe4:	00cb      	lsls	r3, r1, #3
 801bfe6:	0649      	lsls	r1, r1, #25
 801bfe8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bfec:	7a13      	ldrb	r3, [r2, #8]
 801bfee:	ea43 0300 	orr.w	r3, r3, r0
 801bff2:	bf44      	itt	mi
 801bff4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bff8:	b21b      	sxthmi	r3, r3
 801bffa:	1b5d      	subs	r5, r3, r5
 801bffc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c000:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c004:	7b53      	ldrb	r3, [r2, #13]
 801c006:	015b      	lsls	r3, r3, #5
 801c008:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c00c:	7993      	ldrb	r3, [r2, #6]
 801c00e:	430b      	orrs	r3, r1
 801c010:	2105      	movs	r1, #5
 801c012:	005b      	lsls	r3, r3, #1
 801c014:	fb93 f3f1 	sdiv	r3, r3, r1
 801c018:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c01c:	440b      	add	r3, r1
 801c01e:	e757      	b.n	801bed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c020:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c024:	4283      	cmp	r3, r0
 801c026:	d809      	bhi.n	801c03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c028:	f240 60df 	movw	r0, #1759	; 0x6df
 801c02c:	4283      	cmp	r3, r0
 801c02e:	f4bf af7d 	bcs.w	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c032:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c036:	2b05      	cmp	r3, #5
 801c038:	d8d4      	bhi.n	801bfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c03a:	e777      	b.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c03c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c040:	4283      	cmp	r3, r0
 801c042:	d09a      	beq.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c044:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c048:	4283      	cmp	r3, r0
 801c04a:	e7ca      	b.n	801bfe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c04c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c050:	d22b      	bcs.n	801c0aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c052:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c056:	4283      	cmp	r3, r0
 801c058:	d28f      	bcs.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c05a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c05e:	4283      	cmp	r3, r0
 801c060:	d816      	bhi.n	801c090 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c062:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c066:	4283      	cmp	r3, r0
 801c068:	f4bf af60 	bcs.w	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c06c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c070:	4283      	cmp	r3, r0
 801c072:	d80a      	bhi.n	801c08a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c074:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c078:	4283      	cmp	r3, r0
 801c07a:	f4bf af57 	bcs.w	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c07e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c082:	4283      	cmp	r3, r0
 801c084:	f43f af79 	beq.w	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c088:	e7ac      	b.n	801bfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c08a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c08e:	e7f8      	b.n	801c082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c090:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c094:	4283      	cmp	r3, r0
 801c096:	d802      	bhi.n	801c09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c098:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c09c:	e798      	b.n	801bfd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c09e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c0a2:	4283      	cmp	r3, r0
 801c0a4:	f47f af42 	bne.w	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c0a8:	e767      	b.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c0aa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c0ae:	4283      	cmp	r3, r0
 801c0b0:	f43f af63 	beq.w	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c0b4:	d802      	bhi.n	801c0bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c0b6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c0ba:	e7f2      	b.n	801c0a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c0bc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c0c0:	4283      	cmp	r3, r0
 801c0c2:	d805      	bhi.n	801c0d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c0c4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c0c8:	4283      	cmp	r3, r0
 801c0ca:	f4ff af2f 	bcc.w	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c0ce:	e754      	b.n	801bf7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c0d0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c0d4:	4283      	cmp	r3, r0
 801c0d6:	e7af      	b.n	801c038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c0d8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c0dc:	4617      	mov	r7, r2
 801c0de:	f102 0808 	add.w	r8, r2, #8
 801c0e2:	4666      	mov	r6, ip
 801c0e4:	6838      	ldr	r0, [r7, #0]
 801c0e6:	3708      	adds	r7, #8
 801c0e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c0ec:	46e6      	mov	lr, ip
 801c0ee:	4547      	cmp	r7, r8
 801c0f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c0f4:	46f4      	mov	ip, lr
 801c0f6:	d1f5      	bne.n	801c0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c0f8:	6838      	ldr	r0, [r7, #0]
 801c0fa:	f8ce 0000 	str.w	r0, [lr]
 801c0fe:	88b9      	ldrh	r1, [r7, #4]
 801c100:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c104:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c108:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c10c:	d009      	beq.n	801c122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c10e:	7b51      	ldrb	r1, [r2, #13]
 801c110:	7992      	ldrb	r2, [r2, #6]
 801c112:	0149      	lsls	r1, r1, #5
 801c114:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c118:	4311      	orrs	r1, r2
 801c11a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c11e:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c122:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c126:	d00d      	beq.n	801c144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801c128:	442b      	add	r3, r5
 801c12a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c12e:	b29b      	uxth	r3, r3
 801c130:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c134:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c138:	10db      	asrs	r3, r3, #3
 801c13a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c13e:	4313      	orrs	r3, r2
 801c140:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c144:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c148:	00cb      	lsls	r3, r1, #3
 801c14a:	064f      	lsls	r7, r1, #25
 801c14c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c150:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c154:	ea43 0302 	orr.w	r3, r3, r2
 801c158:	bf44      	itt	mi
 801c15a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c15e:	b21b      	sxthmi	r3, r3
 801c160:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c164:	1b5d      	subs	r5, r3, r5
 801c166:	4632      	mov	r2, r6
 801c168:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c16c:	e6fa      	b.n	801bf64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c16e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c172:	4694      	mov	ip, r2
 801c174:	f102 0908 	add.w	r9, r2, #8
 801c178:	4676      	mov	r6, lr
 801c17a:	f8dc 0000 	ldr.w	r0, [ip]
 801c17e:	f10c 0c08 	add.w	ip, ip, #8
 801c182:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801c186:	46f0      	mov	r8, lr
 801c188:	45cc      	cmp	ip, r9
 801c18a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c18e:	46c6      	mov	lr, r8
 801c190:	d1f3      	bne.n	801c17a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801c192:	f8dc 0000 	ldr.w	r0, [ip]
 801c196:	f8c8 0000 	str.w	r0, [r8]
 801c19a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c19e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c1a2:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c1a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c1aa:	d009      	beq.n	801c1c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801c1ac:	7b51      	ldrb	r1, [r2, #13]
 801c1ae:	7992      	ldrb	r2, [r2, #6]
 801c1b0:	0149      	lsls	r1, r1, #5
 801c1b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c1b6:	4311      	orrs	r1, r2
 801c1b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c1bc:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c1c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c1c4:	d00d      	beq.n	801c1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801c1c6:	1bdb      	subs	r3, r3, r7
 801c1c8:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c1cc:	b29b      	uxth	r3, r3
 801c1ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c1d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c1d6:	10db      	asrs	r3, r3, #3
 801c1d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c1dc:	4313      	orrs	r3, r2
 801c1de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c1e2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c1e6:	00cb      	lsls	r3, r1, #3
 801c1e8:	0648      	lsls	r0, r1, #25
 801c1ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c1ee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c1f2:	ea43 0302 	orr.w	r3, r3, r2
 801c1f6:	bf44      	itt	mi
 801c1f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c1fc:	b21b      	sxthmi	r3, r3
 801c1fe:	e7b1      	b.n	801c164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c204:	461e      	mov	r6, r3
 801c206:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c208:	4604      	mov	r4, r0
 801c20a:	4617      	mov	r7, r2
 801c20c:	b92b      	cbnz	r3, 801c21a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c20e:	4b25      	ldr	r3, [pc, #148]	; (801c2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c210:	21c0      	movs	r1, #192	; 0xc0
 801c212:	4a25      	ldr	r2, [pc, #148]	; (801c2a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c214:	4825      	ldr	r0, [pc, #148]	; (801c2ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c216:	f00e fabd 	bl	802a794 <__assert_func>
 801c21a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c21c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c220:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c224:	f7f6 fcce 	bl	8012bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c228:	4605      	mov	r5, r0
 801c22a:	b918      	cbnz	r0, 801c234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c22c:	6030      	str	r0, [r6, #0]
 801c22e:	4628      	mov	r0, r5
 801c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c234:	683b      	ldr	r3, [r7, #0]
 801c236:	4601      	mov	r1, r0
 801c238:	4638      	mov	r0, r7
 801c23a:	68db      	ldr	r3, [r3, #12]
 801c23c:	4798      	blx	r3
 801c23e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c242:	4602      	mov	r2, r0
 801c244:	6030      	str	r0, [r6, #0]
 801c246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c24a:	d213      	bcs.n	801c274 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c24c:	4643      	mov	r3, r8
 801c24e:	4639      	mov	r1, r7
 801c250:	4620      	mov	r0, r4
 801c252:	f7ff fe33 	bl	801bebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c256:	6030      	str	r0, [r6, #0]
 801c258:	6833      	ldr	r3, [r6, #0]
 801c25a:	b143      	cbz	r3, 801c26e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c25c:	7b5a      	ldrb	r2, [r3, #13]
 801c25e:	7a9b      	ldrb	r3, [r3, #10]
 801c260:	0052      	lsls	r2, r2, #1
 801c262:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c266:	4313      	orrs	r3, r2
 801c268:	bf0c      	ite	eq
 801c26a:	2301      	moveq	r3, #1
 801c26c:	2300      	movne	r3, #0
 801c26e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c272:	e7dc      	b.n	801c22e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c274:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c278:	b29b      	uxth	r3, r3
 801c27a:	2b7f      	cmp	r3, #127	; 0x7f
 801c27c:	d804      	bhi.n	801c288 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c27e:	4639      	mov	r1, r7
 801c280:	4620      	mov	r0, r4
 801c282:	f7ff fd01 	bl	801bc88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c286:	e7e6      	b.n	801c256 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c288:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d0e3      	beq.n	801c258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c290:	f640 1302 	movw	r3, #2306	; 0x902
 801c294:	429d      	cmp	r5, r3
 801c296:	d1df      	bne.n	801c258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c298:	4601      	mov	r1, r0
 801c29a:	4620      	mov	r0, r4
 801c29c:	f7ff fcc5 	bl	801bc2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c2a0:	e7d9      	b.n	801c256 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c2a2:	bf00      	nop
 801c2a4:	0802fa64 	.word	0x0802fa64
 801c2a8:	0802fcd6 	.word	0x0802fcd6
 801c2ac:	0802fa6d 	.word	0x0802fa6d

0801c2b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2b4:	461e      	mov	r6, r3
 801c2b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c2b8:	4604      	mov	r4, r0
 801c2ba:	4617      	mov	r7, r2
 801c2bc:	b92b      	cbnz	r3, 801c2ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c2be:	4b26      	ldr	r3, [pc, #152]	; (801c358 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c2c0:	21c0      	movs	r1, #192	; 0xc0
 801c2c2:	4a26      	ldr	r2, [pc, #152]	; (801c35c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c2c4:	4826      	ldr	r0, [pc, #152]	; (801c360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c2c6:	f00e fa65 	bl	802a794 <__assert_func>
 801c2ca:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c2cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c2d0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c2d4:	f7f6 fc76 	bl	8012bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c2d8:	4605      	mov	r5, r0
 801c2da:	b918      	cbnz	r0, 801c2e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801c2dc:	6030      	str	r0, [r6, #0]
 801c2de:	4628      	mov	r0, r5
 801c2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2e4:	683b      	ldr	r3, [r7, #0]
 801c2e6:	4601      	mov	r1, r0
 801c2e8:	4638      	mov	r0, r7
 801c2ea:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c2ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c2f2:	47c8      	blx	r9
 801c2f4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c2f8:	4602      	mov	r2, r0
 801c2fa:	6030      	str	r0, [r6, #0]
 801c2fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c300:	d213      	bcs.n	801c32a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801c302:	4643      	mov	r3, r8
 801c304:	4639      	mov	r1, r7
 801c306:	4620      	mov	r0, r4
 801c308:	f7ff fdd8 	bl	801bebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c30c:	6030      	str	r0, [r6, #0]
 801c30e:	6833      	ldr	r3, [r6, #0]
 801c310:	b143      	cbz	r3, 801c324 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c312:	7b5a      	ldrb	r2, [r3, #13]
 801c314:	7a9b      	ldrb	r3, [r3, #10]
 801c316:	0052      	lsls	r2, r2, #1
 801c318:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c31c:	4313      	orrs	r3, r2
 801c31e:	bf0c      	ite	eq
 801c320:	2301      	moveq	r3, #1
 801c322:	2300      	movne	r3, #0
 801c324:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c328:	e7d9      	b.n	801c2de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801c32a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c32e:	b29b      	uxth	r3, r3
 801c330:	2b7f      	cmp	r3, #127	; 0x7f
 801c332:	d804      	bhi.n	801c33e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801c334:	4639      	mov	r1, r7
 801c336:	4620      	mov	r0, r4
 801c338:	f7ff fca6 	bl	801bc88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c33c:	e7e6      	b.n	801c30c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c33e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c342:	2b00      	cmp	r3, #0
 801c344:	d0e3      	beq.n	801c30e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c346:	f640 1302 	movw	r3, #2306	; 0x902
 801c34a:	429d      	cmp	r5, r3
 801c34c:	d1df      	bne.n	801c30e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c34e:	4601      	mov	r1, r0
 801c350:	4620      	mov	r0, r4
 801c352:	f7ff fc6a 	bl	801bc2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c356:	e7d9      	b.n	801c30c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c358:	0802fa64 	.word	0x0802fa64
 801c35c:	0802fcd6 	.word	0x0802fcd6
 801c360:	0802fa6d 	.word	0x0802fa6d

0801c364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c364:	b510      	push	{r4, lr}
 801c366:	4604      	mov	r4, r0
 801c368:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c36a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c36c:	b9d9      	cbnz	r1, 801c3a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c36e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c370:	2b0a      	cmp	r3, #10
 801c372:	d036      	beq.n	801c3e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c374:	4620      	mov	r0, r4
 801c376:	f7ff fc21 	bl	801bbbc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c37a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c37c:	2b09      	cmp	r3, #9
 801c37e:	d906      	bls.n	801c38e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c380:	4b18      	ldr	r3, [pc, #96]	; (801c3e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c382:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c386:	4a18      	ldr	r2, [pc, #96]	; (801c3e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c388:	4818      	ldr	r0, [pc, #96]	; (801c3ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c38a:	f00e fa03 	bl	802a794 <__assert_func>
 801c38e:	1c5a      	adds	r2, r3, #1
 801c390:	8622      	strh	r2, [r4, #48]	; 0x30
 801c392:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c394:	4413      	add	r3, r2
 801c396:	b29b      	uxth	r3, r3
 801c398:	2b09      	cmp	r3, #9
 801c39a:	bf88      	it	hi
 801c39c:	3b0a      	subhi	r3, #10
 801c39e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c3a2:	8358      	strh	r0, [r3, #26]
 801c3a4:	e7e3      	b.n	801c36e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c3a6:	2b0a      	cmp	r3, #10
 801c3a8:	d01b      	beq.n	801c3e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c3aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c3ac:	3901      	subs	r1, #1
 801c3ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c3b2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c3b4:	8721      	strh	r1, [r4, #56]	; 0x38
 801c3b6:	1c51      	adds	r1, r2, #1
 801c3b8:	b289      	uxth	r1, r1
 801c3ba:	2901      	cmp	r1, #1
 801c3bc:	bf8a      	itet	hi
 801c3be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c3c2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c3c4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c3c6:	2b09      	cmp	r3, #9
 801c3c8:	d8da      	bhi.n	801c380 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c3ca:	1c5a      	adds	r2, r3, #1
 801c3cc:	8622      	strh	r2, [r4, #48]	; 0x30
 801c3ce:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c3d0:	4413      	add	r3, r2
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	2b09      	cmp	r3, #9
 801c3d6:	bf88      	it	hi
 801c3d8:	3b0a      	subhi	r3, #10
 801c3da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c3de:	8358      	strh	r0, [r3, #26]
 801c3e0:	e7c2      	b.n	801c368 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c3e2:	bd10      	pop	{r4, pc}
 801c3e4:	0802fa99 	.word	0x0802fa99
 801c3e8:	0802fe2c 	.word	0x0802fe2c
 801c3ec:	0802fa6d 	.word	0x0802fa6d

0801c3f0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c3f4:	4604      	mov	r4, r0
 801c3f6:	b92a      	cbnz	r2, 801c404 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c3f8:	4b13      	ldr	r3, [pc, #76]	; (801c448 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c3fa:	21d5      	movs	r1, #213	; 0xd5
 801c3fc:	4a13      	ldr	r2, [pc, #76]	; (801c44c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c3fe:	4814      	ldr	r0, [pc, #80]	; (801c450 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c400:	f00e f9c8 	bl	802a794 <__assert_func>
 801c404:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c406:	3a01      	subs	r2, #1
 801c408:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c40c:	8b4d      	ldrh	r5, [r1, #26]
 801c40e:	8602      	strh	r2, [r0, #48]	; 0x30
 801c410:	1c5a      	adds	r2, r3, #1
 801c412:	b292      	uxth	r2, r2
 801c414:	2a09      	cmp	r2, #9
 801c416:	bf8a      	itet	hi
 801c418:	3b09      	subhi	r3, #9
 801c41a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c41c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c41e:	f7ff ffa1 	bl	801c364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c422:	8b23      	ldrh	r3, [r4, #24]
 801c424:	2b01      	cmp	r3, #1
 801c426:	bf9c      	itt	ls
 801c428:	3301      	addls	r3, #1
 801c42a:	8323      	strhls	r3, [r4, #24]
 801c42c:	8ae3      	ldrh	r3, [r4, #22]
 801c42e:	b90b      	cbnz	r3, 801c434 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c430:	2302      	movs	r3, #2
 801c432:	82e3      	strh	r3, [r4, #22]
 801c434:	8ae3      	ldrh	r3, [r4, #22]
 801c436:	4628      	mov	r0, r5
 801c438:	3b01      	subs	r3, #1
 801c43a:	b29b      	uxth	r3, r3
 801c43c:	82e3      	strh	r3, [r4, #22]
 801c43e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c442:	8265      	strh	r5, [r4, #18]
 801c444:	bd38      	pop	{r3, r4, r5, pc}
 801c446:	bf00      	nop
 801c448:	0802fa64 	.word	0x0802fa64
 801c44c:	0802fd81 	.word	0x0802fd81
 801c450:	0802fa6d 	.word	0x0802fa6d

0801c454 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c454:	428a      	cmp	r2, r1
 801c456:	b538      	push	{r3, r4, r5, lr}
 801c458:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c45a:	d90c      	bls.n	801c476 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c45c:	b92c      	cbnz	r4, 801c46a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c45e:	4b1c      	ldr	r3, [pc, #112]	; (801c4d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c460:	21e1      	movs	r1, #225	; 0xe1
 801c462:	4a1c      	ldr	r2, [pc, #112]	; (801c4d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c464:	481c      	ldr	r0, [pc, #112]	; (801c4d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c466:	f00e f995 	bl	802a794 <__assert_func>
 801c46a:	3c01      	subs	r4, #1
 801c46c:	4b1b      	ldr	r3, [pc, #108]	; (801c4dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c46e:	4a1c      	ldr	r2, [pc, #112]	; (801c4e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c470:	21c5      	movs	r1, #197	; 0xc5
 801c472:	8604      	strh	r4, [r0, #48]	; 0x30
 801c474:	e7f6      	b.n	801c464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c476:	428c      	cmp	r4, r1
 801c478:	d203      	bcs.n	801c482 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c47a:	4b1a      	ldr	r3, [pc, #104]	; (801c4e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c47c:	21cb      	movs	r1, #203	; 0xcb
 801c47e:	4a1a      	ldr	r2, [pc, #104]	; (801c4e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c480:	e7f0      	b.n	801c464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c482:	1a64      	subs	r4, r4, r1
 801c484:	250a      	movs	r5, #10
 801c486:	8604      	strh	r4, [r0, #48]	; 0x30
 801c488:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c48a:	4421      	add	r1, r4
 801c48c:	b289      	uxth	r1, r1
 801c48e:	2909      	cmp	r1, #9
 801c490:	bf88      	it	hi
 801c492:	390a      	subhi	r1, #10
 801c494:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c496:	b1ba      	cbz	r2, 801c4c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c498:	3a01      	subs	r2, #1
 801c49a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c49c:	b292      	uxth	r2, r2
 801c49e:	2909      	cmp	r1, #9
 801c4a0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c4a4:	d903      	bls.n	801c4ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c4a6:	4b11      	ldr	r3, [pc, #68]	; (801c4ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c4a8:	21e6      	movs	r1, #230	; 0xe6
 801c4aa:	4a11      	ldr	r2, [pc, #68]	; (801c4f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c4ac:	e7da      	b.n	801c464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c4ae:	3101      	adds	r1, #1
 801c4b0:	8601      	strh	r1, [r0, #48]	; 0x30
 801c4b2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c4b4:	b901      	cbnz	r1, 801c4b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c4b6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c4b8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c4ba:	3901      	subs	r1, #1
 801c4bc:	b289      	uxth	r1, r1
 801c4be:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c4c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c4c4:	834c      	strh	r4, [r1, #26]
 801c4c6:	e7e6      	b.n	801c496 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4cc:	f7ff bf4a 	b.w	801c364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c4d0:	0802fa64 	.word	0x0802fa64
 801c4d4:	0802fb5a 	.word	0x0802fb5a
 801c4d8:	0802fa6d 	.word	0x0802fa6d
 801c4dc:	0802faa5 	.word	0x0802faa5
 801c4e0:	0802fc04 	.word	0x0802fc04
 801c4e4:	0802fab3 	.word	0x0802fab3
 801c4e8:	0802fedb 	.word	0x0802fedb
 801c4ec:	0802fabf 	.word	0x0802fabf
 801c4f0:	0802fad2 	.word	0x0802fad2

0801c4f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c4f4:	3a01      	subs	r2, #1
 801c4f6:	b570      	push	{r4, r5, r6, lr}
 801c4f8:	b292      	uxth	r2, r2
 801c4fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c4fe:	42b2      	cmp	r2, r6
 801c500:	d019      	beq.n	801c536 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c502:	8b04      	ldrh	r4, [r0, #24]
 801c504:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c508:	4294      	cmp	r4, r2
 801c50a:	d805      	bhi.n	801c518 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801c50c:	4b19      	ldr	r3, [pc, #100]	; (801c574 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c50e:	4a1a      	ldr	r2, [pc, #104]	; (801c578 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801c510:	21c5      	movs	r1, #197	; 0xc5
 801c512:	481a      	ldr	r0, [pc, #104]	; (801c57c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801c514:	f00e f93e 	bl	802a794 <__assert_func>
 801c518:	8ac4      	ldrh	r4, [r0, #22]
 801c51a:	4414      	add	r4, r2
 801c51c:	3a01      	subs	r2, #1
 801c51e:	b2a4      	uxth	r4, r4
 801c520:	b292      	uxth	r2, r2
 801c522:	2c01      	cmp	r4, #1
 801c524:	bf88      	it	hi
 801c526:	3c02      	subhi	r4, #2
 801c528:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c52c:	8a64      	ldrh	r4, [r4, #18]
 801c52e:	42ac      	cmp	r4, r5
 801c530:	d0e5      	beq.n	801c4fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801c532:	2000      	movs	r0, #0
 801c534:	bd70      	pop	{r4, r5, r6, pc}
 801c536:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c53a:	2400      	movs	r4, #0
 801c53c:	4413      	add	r3, r2
 801c53e:	b2a2      	uxth	r2, r4
 801c540:	429a      	cmp	r2, r3
 801c542:	da14      	bge.n	801c56e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801c544:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801c546:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c54a:	4296      	cmp	r6, r2
 801c54c:	d802      	bhi.n	801c554 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801c54e:	4b09      	ldr	r3, [pc, #36]	; (801c574 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c550:	4a0b      	ldr	r2, [pc, #44]	; (801c580 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801c552:	e7dd      	b.n	801c510 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801c554:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801c556:	3401      	adds	r4, #1
 801c558:	4432      	add	r2, r6
 801c55a:	b292      	uxth	r2, r2
 801c55c:	2a09      	cmp	r2, #9
 801c55e:	bf88      	it	hi
 801c560:	3a0a      	subhi	r2, #10
 801c562:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c566:	8b52      	ldrh	r2, [r2, #26]
 801c568:	42aa      	cmp	r2, r5
 801c56a:	d0e8      	beq.n	801c53e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801c56c:	e7e1      	b.n	801c532 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c56e:	2001      	movs	r0, #1
 801c570:	e7e0      	b.n	801c534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c572:	bf00      	nop
 801c574:	0802faa5 	.word	0x0802faa5
 801c578:	0802ff5f 	.word	0x0802ff5f
 801c57c:	0802fa6d 	.word	0x0802fa6d
 801c580:	0802fc04 	.word	0x0802fc04

0801c584 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c588:	4605      	mov	r5, r0
 801c58a:	4616      	mov	r6, r2
 801c58c:	1c8c      	adds	r4, r1, #2
 801c58e:	8809      	ldrh	r1, [r1, #0]
 801c590:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c594:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c598:	42b3      	cmp	r3, r6
 801c59a:	d124      	bne.n	801c5e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c59c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c5a0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c5a4:	f001 070f 	and.w	r7, r1, #15
 801c5a8:	4652      	mov	r2, sl
 801c5aa:	f8cd 8000 	str.w	r8, [sp]
 801c5ae:	464b      	mov	r3, r9
 801c5b0:	4621      	mov	r1, r4
 801c5b2:	4628      	mov	r0, r5
 801c5b4:	f7ff ff9e 	bl	801c4f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c5b8:	4683      	mov	fp, r0
 801c5ba:	b168      	cbz	r0, 801c5d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c5bc:	eb0a 0109 	add.w	r1, sl, r9
 801c5c0:	463a      	mov	r2, r7
 801c5c2:	4628      	mov	r0, r5
 801c5c4:	4441      	add	r1, r8
 801c5c6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c5ca:	4649      	mov	r1, r9
 801c5cc:	f7ff ff42 	bl	801c454 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c5d0:	4658      	mov	r0, fp
 801c5d2:	b003      	add	sp, #12
 801c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d8:	eb07 010a 	add.w	r1, r7, sl
 801c5dc:	4449      	add	r1, r9
 801c5de:	4441      	add	r1, r8
 801c5e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c5e4:	e7d2      	b.n	801c58c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c5e6:	f04f 0b00 	mov.w	fp, #0
 801c5ea:	e7f1      	b.n	801c5d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c5ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c5ec:	b570      	push	{r4, r5, r6, lr}
 801c5ee:	8810      	ldrh	r0, [r2, #0]
 801c5f0:	4298      	cmp	r0, r3
 801c5f2:	d817      	bhi.n	801c624 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5f4:	1e48      	subs	r0, r1, #1
 801c5f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c5fa:	4298      	cmp	r0, r3
 801c5fc:	d312      	bcc.n	801c624 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5fe:	2400      	movs	r4, #0
 801c600:	428c      	cmp	r4, r1
 801c602:	d20f      	bcs.n	801c624 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c604:	1860      	adds	r0, r4, r1
 801c606:	1040      	asrs	r0, r0, #1
 801c608:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c60c:	0085      	lsls	r5, r0, #2
 801c60e:	42b3      	cmp	r3, r6
 801c610:	d902      	bls.n	801c618 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c612:	3001      	adds	r0, #1
 801c614:	b284      	uxth	r4, r0
 801c616:	e7f3      	b.n	801c600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c618:	d201      	bcs.n	801c61e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c61a:	b281      	uxth	r1, r0
 801c61c:	e7f0      	b.n	801c600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c61e:	442a      	add	r2, r5
 801c620:	8850      	ldrh	r0, [r2, #2]
 801c622:	bd70      	pop	{r4, r5, r6, pc}
 801c624:	2000      	movs	r0, #0
 801c626:	e7fc      	b.n	801c622 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c628 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c62c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c62e:	4604      	mov	r4, r0
 801c630:	260b      	movs	r6, #11
 801c632:	886f      	ldrh	r7, [r5, #2]
 801c634:	087f      	lsrs	r7, r7, #1
 801c636:	3e01      	subs	r6, #1
 801c638:	d01b      	beq.n	801c672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c63a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c63c:	b92b      	cbnz	r3, 801c64a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801c63e:	4b0e      	ldr	r3, [pc, #56]	; (801c678 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801c640:	21c0      	movs	r1, #192	; 0xc0
 801c642:	4a0e      	ldr	r2, [pc, #56]	; (801c67c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801c644:	480e      	ldr	r0, [pc, #56]	; (801c680 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801c646:	f00e f8a5 	bl	802a794 <__assert_func>
 801c64a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c64c:	462a      	mov	r2, r5
 801c64e:	4639      	mov	r1, r7
 801c650:	4620      	mov	r0, r4
 801c652:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c656:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c65a:	4643      	mov	r3, r8
 801c65c:	f7ff ffc6 	bl	801c5ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c660:	b138      	cbz	r0, 801c672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c662:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c666:	4642      	mov	r2, r8
 801c668:	4620      	mov	r0, r4
 801c66a:	f7ff ff8b 	bl	801c584 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c66e:	2800      	cmp	r0, #0
 801c670:	d1e1      	bne.n	801c636 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c676:	bf00      	nop
 801c678:	0802fa64 	.word	0x0802fa64
 801c67c:	0802fcd6 	.word	0x0802fcd6
 801c680:	0802fa6d 	.word	0x0802fa6d

0801c684 <_ZN8touchgfx8ceil28_4El>:
 801c684:	f110 030f 	adds.w	r3, r0, #15
 801c688:	d401      	bmi.n	801c68e <_ZN8touchgfx8ceil28_4El+0xa>
 801c68a:	1118      	asrs	r0, r3, #4
 801c68c:	4770      	bx	lr
 801c68e:	2210      	movs	r2, #16
 801c690:	f1c0 0001 	rsb	r0, r0, #1
 801c694:	fb93 f3f2 	sdiv	r3, r3, r2
 801c698:	f010 000f 	ands.w	r0, r0, #15
 801c69c:	bf18      	it	ne
 801c69e:	2001      	movne	r0, #1
 801c6a0:	1a18      	subs	r0, r3, r0
 801c6a2:	4770      	bx	lr

0801c6a4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801c6a4:	2900      	cmp	r1, #0
 801c6a6:	b538      	push	{r3, r4, r5, lr}
 801c6a8:	dc05      	bgt.n	801c6b6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801c6aa:	4b0f      	ldr	r3, [pc, #60]	; (801c6e8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801c6ac:	21fa      	movs	r1, #250	; 0xfa
 801c6ae:	4a0f      	ldr	r2, [pc, #60]	; (801c6ec <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801c6b0:	480f      	ldr	r0, [pc, #60]	; (801c6f0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801c6b2:	f00e f86f 	bl	802a794 <__assert_func>
 801c6b6:	2800      	cmp	r0, #0
 801c6b8:	db06      	blt.n	801c6c8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801c6ba:	fb90 f4f1 	sdiv	r4, r0, r1
 801c6be:	fb01 0114 	mls	r1, r1, r4, r0
 801c6c2:	6014      	str	r4, [r2, #0]
 801c6c4:	6019      	str	r1, [r3, #0]
 801c6c6:	bd38      	pop	{r3, r4, r5, pc}
 801c6c8:	4240      	negs	r0, r0
 801c6ca:	fb90 f4f1 	sdiv	r4, r0, r1
 801c6ce:	4265      	negs	r5, r4
 801c6d0:	fb01 0014 	mls	r0, r1, r4, r0
 801c6d4:	6015      	str	r5, [r2, #0]
 801c6d6:	6018      	str	r0, [r3, #0]
 801c6d8:	2800      	cmp	r0, #0
 801c6da:	d0f4      	beq.n	801c6c6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801c6dc:	6810      	ldr	r0, [r2, #0]
 801c6de:	3801      	subs	r0, #1
 801c6e0:	6010      	str	r0, [r2, #0]
 801c6e2:	6818      	ldr	r0, [r3, #0]
 801c6e4:	1a09      	subs	r1, r1, r0
 801c6e6:	e7ed      	b.n	801c6c4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801c6e8:	08030030 	.word	0x08030030
 801c6ec:	0803006f 	.word	0x0803006f
 801c6f0:	08030040 	.word	0x08030040

0801c6f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c6f4:	b570      	push	{r4, r5, r6, lr}
 801c6f6:	694a      	ldr	r2, [r1, #20]
 801c6f8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c6fa:	684b      	ldr	r3, [r1, #4]
 801c6fc:	1b54      	subs	r4, r2, r5
 801c6fe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c700:	f000 8106 	beq.w	801c910 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c704:	1b9b      	subs	r3, r3, r6
 801c706:	d003      	beq.n	801c710 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c708:	4363      	muls	r3, r4
 801c70a:	2210      	movs	r2, #16
 801c70c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c710:	680c      	ldr	r4, [r1, #0]
 801c712:	698a      	ldr	r2, [r1, #24]
 801c714:	1b65      	subs	r5, r4, r5
 801c716:	f000 80fd 	beq.w	801c914 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c71a:	1b92      	subs	r2, r2, r6
 801c71c:	d003      	beq.n	801c726 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c71e:	436a      	muls	r2, r5
 801c720:	2410      	movs	r4, #16
 801c722:	fb92 f2f4 	sdiv	r2, r2, r4
 801c726:	1a9b      	subs	r3, r3, r2
 801c728:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c950 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c72c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c730:	460a      	mov	r2, r1
 801c732:	ee07 3a90 	vmov	s15, r3
 801c736:	f100 040c 	add.w	r4, r0, #12
 801c73a:	4603      	mov	r3, r0
 801c73c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c740:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c744:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c748:	eeb1 6a43 	vneg.f32	s12, s6
 801c74c:	edd2 7a02 	vldr	s15, [r2, #8]
 801c750:	3214      	adds	r2, #20
 801c752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c756:	ece3 6a01 	vstmia	r3!, {s13}
 801c75a:	429c      	cmp	r4, r3
 801c75c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c764:	edc3 7a02 	vstr	s15, [r3, #8]
 801c768:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c76c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c770:	edc3 7a05 	vstr	s15, [r3, #20]
 801c774:	d1ea      	bne.n	801c74c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c776:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c778:	698b      	ldr	r3, [r1, #24]
 801c77a:	edd0 4a02 	vldr	s9, [r0, #8]
 801c77e:	1a9b      	subs	r3, r3, r2
 801c780:	edd0 3a00 	vldr	s7, [r0]
 801c784:	edd0 6a01 	vldr	s13, [r0, #4]
 801c788:	ee07 3a90 	vmov	s15, r3
 801c78c:	684b      	ldr	r3, [r1, #4]
 801c78e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c792:	ed90 5a05 	vldr	s10, [r0, #20]
 801c796:	1a9b      	subs	r3, r3, r2
 801c798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c79c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c7a0:	ed90 2a03 	vldr	s4, [r0, #12]
 801c7a4:	ee07 3a10 	vmov	s14, r3
 801c7a8:	edd0 5a04 	vldr	s11, [r0, #16]
 801c7ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c7b0:	ed90 1a07 	vldr	s2, [r0, #28]
 801c7b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7b8:	edd0 2a06 	vldr	s5, [r0, #24]
 801c7bc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c7c0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c7c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7c8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c7cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c7d0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c7d4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c7d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c7da:	694a      	ldr	r2, [r1, #20]
 801c7dc:	1b13      	subs	r3, r2, r4
 801c7de:	ee07 3a10 	vmov	s14, r3
 801c7e2:	680b      	ldr	r3, [r1, #0]
 801c7e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7e8:	1b1b      	subs	r3, r3, r4
 801c7ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7ee:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c7f2:	ee07 3a10 	vmov	s14, r3
 801c7f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7fe:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c802:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c806:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c80a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c80c:	698b      	ldr	r3, [r1, #24]
 801c80e:	1a9b      	subs	r3, r3, r2
 801c810:	ee06 3a90 	vmov	s13, r3
 801c814:	684b      	ldr	r3, [r1, #4]
 801c816:	1a9b      	subs	r3, r3, r2
 801c818:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c81c:	ee07 3a10 	vmov	s14, r3
 801c820:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c828:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c82c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c830:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c834:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c838:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c83c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c83e:	694a      	ldr	r2, [r1, #20]
 801c840:	1b13      	subs	r3, r2, r4
 801c842:	ee07 3a10 	vmov	s14, r3
 801c846:	680b      	ldr	r3, [r1, #0]
 801c848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c84c:	1b1b      	subs	r3, r3, r4
 801c84e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c852:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c856:	ee07 3a10 	vmov	s14, r3
 801c85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c85e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c862:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c866:	edd0 5a08 	vldr	s11, [r0, #32]
 801c86a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c86e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c872:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c876:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c87a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c87c:	698b      	ldr	r3, [r1, #24]
 801c87e:	1a9b      	subs	r3, r3, r2
 801c880:	ee07 3a10 	vmov	s14, r3
 801c884:	684b      	ldr	r3, [r1, #4]
 801c886:	1a9b      	subs	r3, r3, r2
 801c888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c88c:	ee01 3a90 	vmov	s3, r3
 801c890:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c894:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c898:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c89c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c8a0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c8a4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c8a8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c8ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c8ae:	694a      	ldr	r2, [r1, #20]
 801c8b0:	1b13      	subs	r3, r2, r4
 801c8b2:	ee03 3a10 	vmov	s6, r3
 801c8b6:	680b      	ldr	r3, [r1, #0]
 801c8b8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c8bc:	1b1b      	subs	r3, r3, r4
 801c8be:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c8c2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c8c6:	ee03 3a10 	vmov	s6, r3
 801c8ca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c8ce:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c8d2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c8d6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c8da:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c8de:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c8e2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c8e6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ee:	dd13      	ble.n	801c918 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c8f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c8f4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c8f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c8fa:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c8fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c906:	dd15      	ble.n	801c934 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c90c:	6403      	str	r3, [r0, #64]	; 0x40
 801c90e:	bd70      	pop	{r4, r5, r6, pc}
 801c910:	4623      	mov	r3, r4
 801c912:	e6fd      	b.n	801c710 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c914:	462a      	mov	r2, r5
 801c916:	e706      	b.n	801c726 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c918:	d502      	bpl.n	801c920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c91a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c91e:	e7e9      	b.n	801c8f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c920:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c924:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c928:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c930:	dade      	bge.n	801c8f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c932:	e7f2      	b.n	801c91a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c934:	d502      	bpl.n	801c93c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c936:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c93a:	e7e7      	b.n	801c90c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c93c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c940:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c944:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c94c:	dadc      	bge.n	801c908 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c94e:	e7f2      	b.n	801c936 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c950:	3d800000 	.word	0x3d800000

0801c954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c958:	f04f 0814 	mov.w	r8, #20
 801c95c:	4604      	mov	r4, r0
 801c95e:	4617      	mov	r7, r2
 801c960:	460d      	mov	r5, r1
 801c962:	fb08 f903 	mul.w	r9, r8, r3
 801c966:	461e      	mov	r6, r3
 801c968:	eb02 0a09 	add.w	sl, r2, r9
 801c96c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c970:	f7ff fe88 	bl	801c684 <_ZN8touchgfx8ceil28_4El>
 801c974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c976:	6160      	str	r0, [r4, #20]
 801c978:	fb08 f803 	mul.w	r8, r8, r3
 801c97c:	9001      	str	r0, [sp, #4]
 801c97e:	eb07 0b08 	add.w	fp, r7, r8
 801c982:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c986:	f7ff fe7d 	bl	801c684 <_ZN8touchgfx8ceil28_4El>
 801c98a:	9a01      	ldr	r2, [sp, #4]
 801c98c:	1a80      	subs	r0, r0, r2
 801c98e:	61a0      	str	r0, [r4, #24]
 801c990:	2800      	cmp	r0, #0
 801c992:	f000 8088 	beq.w	801caa6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801c996:	f857 3009 	ldr.w	r3, [r7, r9]
 801c99a:	f857 c008 	ldr.w	ip, [r7, r8]
 801c99e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c9a2:	ebac 0c03 	sub.w	ip, ip, r3
 801c9a6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801c9aa:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801c9ae:	1a40      	subs	r0, r0, r1
 801c9b0:	fb0b f202 	mul.w	r2, fp, r2
 801c9b4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801c9b8:	fb0c 2211 	mls	r2, ip, r1, r2
 801c9bc:	4641      	mov	r1, r8
 801c9be:	fb00 2003 	mla	r0, r0, r3, r2
 801c9c2:	f104 0310 	add.w	r3, r4, #16
 801c9c6:	4622      	mov	r2, r4
 801c9c8:	3801      	subs	r0, #1
 801c9ca:	4440      	add	r0, r8
 801c9cc:	f7ff fe6a 	bl	801c6a4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c9d0:	f104 0308 	add.w	r3, r4, #8
 801c9d4:	1d22      	adds	r2, r4, #4
 801c9d6:	4641      	mov	r1, r8
 801c9d8:	4658      	mov	r0, fp
 801c9da:	f7ff fe63 	bl	801c6a4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c9de:	f8c4 800c 	str.w	r8, [r4, #12]
 801c9e2:	6962      	ldr	r2, [r4, #20]
 801c9e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801c9e8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801cab0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c9ec:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c9f0:	6822      	ldr	r2, [r4, #0]
 801c9f2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c9f6:	ee07 3a10 	vmov	s14, r3
 801c9fa:	f857 3009 	ldr.w	r3, [r7, r9]
 801c9fe:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ca02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca06:	ee07 3a90 	vmov	s15, r3
 801ca0a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801ca0e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ca12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ca1a:	edd3 6a00 	vldr	s13, [r3]
 801ca1e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ca22:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ca26:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ca2a:	edc4 6a07 	vstr	s13, [r4, #28]
 801ca2e:	edd4 6a01 	vldr	s13, [r4, #4]
 801ca32:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801ca36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ca3a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ca3e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ca42:	ed84 6a08 	vstr	s12, [r4, #32]
 801ca46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ca48:	6262      	str	r2, [r4, #36]	; 0x24
 801ca4a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801ca4e:	ed93 6a03 	vldr	s12, [r3, #12]
 801ca52:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ca56:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ca5a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ca5e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ca62:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ca66:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ca6a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ca6e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ca72:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ca74:	6322      	str	r2, [r4, #48]	; 0x30
 801ca76:	ed93 6a06 	vldr	s12, [r3, #24]
 801ca7a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801ca7e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ca82:	eeb0 7a46 	vmov.f32	s14, s12
 801ca86:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801ca8a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ca8e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ca92:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801ca96:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801ca9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca9e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801caa2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801caa4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801caa6:	4620      	mov	r0, r4
 801caa8:	b003      	add	sp, #12
 801caaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caae:	bf00      	nop
 801cab0:	3d800000 	.word	0x3d800000

0801cab4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801cab4:	4602      	mov	r2, r0
 801cab6:	b148      	cbz	r0, 801cacc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801cab8:	2300      	movs	r3, #0
 801caba:	b298      	uxth	r0, r3
 801cabc:	3301      	adds	r3, #1
 801cabe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801cac2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801cac6:	2900      	cmp	r1, #0
 801cac8:	d1f7      	bne.n	801caba <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801caca:	4770      	bx	lr
 801cacc:	4770      	bx	lr

0801cace <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801cace:	b530      	push	{r4, r5, lr}
 801cad0:	4604      	mov	r4, r0
 801cad2:	b159      	cbz	r1, 801caec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801cad4:	b148      	cbz	r0, 801caea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cad6:	2300      	movs	r3, #0
 801cad8:	b298      	uxth	r0, r3
 801cada:	4282      	cmp	r2, r0
 801cadc:	d905      	bls.n	801caea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cade:	5ccd      	ldrb	r5, [r1, r3]
 801cae0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801cae4:	3301      	adds	r3, #1
 801cae6:	2d00      	cmp	r5, #0
 801cae8:	d1f6      	bne.n	801cad8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801caea:	bd30      	pop	{r4, r5, pc}
 801caec:	4608      	mov	r0, r1
 801caee:	e7fc      	b.n	801caea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801caf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801caf2:	468c      	mov	ip, r1
 801caf4:	b08b      	sub	sp, #44	; 0x2c
 801caf6:	2100      	movs	r1, #0
 801caf8:	ae01      	add	r6, sp, #4
 801cafa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cafe:	211f      	movs	r1, #31
 801cb00:	fbb0 f7f3 	udiv	r7, r0, r3
 801cb04:	fb03 0517 	mls	r5, r3, r7, r0
 801cb08:	4638      	mov	r0, r7
 801cb0a:	b2ec      	uxtb	r4, r5
 801cb0c:	2d09      	cmp	r5, #9
 801cb0e:	bfd4      	ite	le
 801cb10:	3430      	addle	r4, #48	; 0x30
 801cb12:	3457      	addgt	r4, #87	; 0x57
 801cb14:	b2e4      	uxtb	r4, r4
 801cb16:	558c      	strb	r4, [r1, r6]
 801cb18:	1e4c      	subs	r4, r1, #1
 801cb1a:	b92f      	cbnz	r7, 801cb28 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801cb1c:	4431      	add	r1, r6
 801cb1e:	4660      	mov	r0, ip
 801cb20:	f7ff ffd5 	bl	801cace <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cb24:	b00b      	add	sp, #44	; 0x2c
 801cb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb28:	4621      	mov	r1, r4
 801cb2a:	e7e9      	b.n	801cb00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801cb2c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb2e:	4607      	mov	r7, r0
 801cb30:	b08b      	sub	sp, #44	; 0x2c
 801cb32:	4608      	mov	r0, r1
 801cb34:	b341      	cbz	r1, 801cb88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cb36:	1e99      	subs	r1, r3, #2
 801cb38:	2922      	cmp	r1, #34	; 0x22
 801cb3a:	d825      	bhi.n	801cb88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cb3c:	2100      	movs	r1, #0
 801cb3e:	463c      	mov	r4, r7
 801cb40:	261f      	movs	r6, #31
 801cb42:	f10d 0c04 	add.w	ip, sp, #4
 801cb46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cb4a:	1e71      	subs	r1, r6, #1
 801cb4c:	fb94 fef3 	sdiv	lr, r4, r3
 801cb50:	fb03 441e 	mls	r4, r3, lr, r4
 801cb54:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801cb58:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801cb5c:	b2ec      	uxtb	r4, r5
 801cb5e:	2d09      	cmp	r5, #9
 801cb60:	bfd4      	ite	le
 801cb62:	3430      	addle	r4, #48	; 0x30
 801cb64:	3457      	addgt	r4, #87	; 0x57
 801cb66:	b2e4      	uxtb	r4, r4
 801cb68:	f80c 4006 	strb.w	r4, [ip, r6]
 801cb6c:	4674      	mov	r4, lr
 801cb6e:	b96c      	cbnz	r4, 801cb8c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801cb70:	2f00      	cmp	r7, #0
 801cb72:	da05      	bge.n	801cb80 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801cb74:	ab0a      	add	r3, sp, #40	; 0x28
 801cb76:	4419      	add	r1, r3
 801cb78:	232d      	movs	r3, #45	; 0x2d
 801cb7a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801cb7e:	1eb1      	subs	r1, r6, #2
 801cb80:	3101      	adds	r1, #1
 801cb82:	4461      	add	r1, ip
 801cb84:	f7ff ffa3 	bl	801cace <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cb88:	b00b      	add	sp, #44	; 0x2c
 801cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb8c:	460e      	mov	r6, r1
 801cb8e:	e7dc      	b.n	801cb4a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801cb90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb94:	b085      	sub	sp, #20
 801cb96:	4691      	mov	r9, r2
 801cb98:	6802      	ldr	r2, [r0, #0]
 801cb9a:	4688      	mov	r8, r1
 801cb9c:	461c      	mov	r4, r3
 801cb9e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801cba2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801cba6:	4683      	mov	fp, r0
 801cba8:	4610      	mov	r0, r2
 801cbaa:	9103      	str	r1, [sp, #12]
 801cbac:	9302      	str	r3, [sp, #8]
 801cbae:	9201      	str	r2, [sp, #4]
 801cbb0:	f7ff ff80 	bl	801cab4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801cbb4:	f1b8 0f00 	cmp.w	r8, #0
 801cbb8:	bf0c      	ite	eq
 801cbba:	4684      	moveq	ip, r0
 801cbbc:	f100 0c01 	addne.w	ip, r0, #1
 801cbc0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801cbc4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801cbc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbca:	fa1f fc8c 	uxth.w	ip, ip
 801cbce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cbd0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801cbd4:	9903      	ldr	r1, [sp, #12]
 801cbd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cbda:	d041      	beq.n	801cc60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cbdc:	d834      	bhi.n	801cc48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801cbde:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801cbe2:	d059      	beq.n	801cc98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801cbe4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801cbe8:	d03a      	beq.n	801cc60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cbea:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801cbee:	d034      	beq.n	801cc5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cbf0:	2400      	movs	r4, #0
 801cbf2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801cbf6:	3a01      	subs	r2, #1
 801cbf8:	b169      	cbz	r1, 801cc16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cbfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cbfc:	458c      	cmp	ip, r1
 801cbfe:	da09      	bge.n	801cc14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cc00:	eba1 010c 	sub.w	r1, r1, ip
 801cc04:	b289      	uxth	r1, r1
 801cc06:	b933      	cbnz	r3, 801cc16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cc08:	2e00      	cmp	r6, #0
 801cc0a:	d051      	beq.n	801ccb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cc0c:	2800      	cmp	r0, #0
 801cc0e:	d04f      	beq.n	801ccb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cc10:	440c      	add	r4, r1
 801cc12:	b2a4      	uxth	r4, r4
 801cc14:	2100      	movs	r1, #0
 801cc16:	682b      	ldr	r3, [r5, #0]
 801cc18:	4293      	cmp	r3, r2
 801cc1a:	da07      	bge.n	801cc2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cc1c:	f1b8 0f00 	cmp.w	r8, #0
 801cc20:	d004      	beq.n	801cc2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cc22:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801cc26:	682b      	ldr	r3, [r5, #0]
 801cc28:	3301      	adds	r3, #1
 801cc2a:	602b      	str	r3, [r5, #0]
 801cc2c:	2730      	movs	r7, #48	; 0x30
 801cc2e:	2c00      	cmp	r4, #0
 801cc30:	d04e      	beq.n	801ccd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc32:	682e      	ldr	r6, [r5, #0]
 801cc34:	3c01      	subs	r4, #1
 801cc36:	42b2      	cmp	r2, r6
 801cc38:	b2a4      	uxth	r4, r4
 801cc3a:	dd49      	ble.n	801ccd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc3c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cc40:	682b      	ldr	r3, [r5, #0]
 801cc42:	3301      	adds	r3, #1
 801cc44:	602b      	str	r3, [r5, #0]
 801cc46:	e7f2      	b.n	801cc2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801cc48:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801cc4c:	d01d      	beq.n	801cc8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801cc4e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801cc52:	d002      	beq.n	801cc5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cc54:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801cc58:	e7c9      	b.n	801cbee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801cc5a:	4684      	mov	ip, r0
 801cc5c:	f04f 0800 	mov.w	r8, #0
 801cc60:	2c00      	cmp	r4, #0
 801cc62:	d0c6      	beq.n	801cbf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc64:	b947      	cbnz	r7, 801cc78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cc66:	2801      	cmp	r0, #1
 801cc68:	d106      	bne.n	801cc78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cc6a:	8814      	ldrh	r4, [r2, #0]
 801cc6c:	2c30      	cmp	r4, #48	; 0x30
 801cc6e:	bf02      	ittt	eq
 801cc70:	3202      	addeq	r2, #2
 801cc72:	4638      	moveq	r0, r7
 801cc74:	f8cb 2000 	streq.w	r2, [fp]
 801cc78:	45bc      	cmp	ip, r7
 801cc7a:	da14      	bge.n	801cca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801cc7c:	b2bf      	uxth	r7, r7
 801cc7e:	eba7 040c 	sub.w	r4, r7, ip
 801cc82:	46bc      	mov	ip, r7
 801cc84:	b2a4      	uxth	r4, r4
 801cc86:	2600      	movs	r6, #0
 801cc88:	e7b3      	b.n	801cbf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc8a:	4684      	mov	ip, r0
 801cc8c:	b16c      	cbz	r4, 801ccaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801cc8e:	42b8      	cmp	r0, r7
 801cc90:	dd00      	ble.n	801cc94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801cc92:	b2b8      	uxth	r0, r7
 801cc94:	2400      	movs	r4, #0
 801cc96:	e003      	b.n	801cca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801cc98:	f04f 0c01 	mov.w	ip, #1
 801cc9c:	2400      	movs	r4, #0
 801cc9e:	4660      	mov	r0, ip
 801cca0:	4626      	mov	r6, r4
 801cca2:	46a0      	mov	r8, r4
 801cca4:	e7a5      	b.n	801cbf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cca6:	2400      	movs	r4, #0
 801cca8:	e7ed      	b.n	801cc86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ccaa:	4626      	mov	r6, r4
 801ccac:	46a0      	mov	r8, r4
 801ccae:	e7a0      	b.n	801cbf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ccb0:	2900      	cmp	r1, #0
 801ccb2:	d0b0      	beq.n	801cc16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ccb4:	2720      	movs	r7, #32
 801ccb6:	682e      	ldr	r6, [r5, #0]
 801ccb8:	2900      	cmp	r1, #0
 801ccba:	d0ac      	beq.n	801cc16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ccbc:	3901      	subs	r1, #1
 801ccbe:	4296      	cmp	r6, r2
 801ccc0:	b289      	uxth	r1, r1
 801ccc2:	daa7      	bge.n	801cc14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ccc4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ccc8:	682b      	ldr	r3, [r5, #0]
 801ccca:	3301      	adds	r3, #1
 801cccc:	602b      	str	r3, [r5, #0]
 801ccce:	e7f2      	b.n	801ccb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ccd0:	b188      	cbz	r0, 801ccf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ccd2:	682b      	ldr	r3, [r5, #0]
 801ccd4:	3801      	subs	r0, #1
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	b280      	uxth	r0, r0
 801ccda:	dd0c      	ble.n	801ccf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ccdc:	f8db 3000 	ldr.w	r3, [fp]
 801cce0:	1c9c      	adds	r4, r3, #2
 801cce2:	f8cb 4000 	str.w	r4, [fp]
 801cce6:	881c      	ldrh	r4, [r3, #0]
 801cce8:	682b      	ldr	r3, [r5, #0]
 801ccea:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ccee:	682b      	ldr	r3, [r5, #0]
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	602b      	str	r3, [r5, #0]
 801ccf4:	e7ec      	b.n	801ccd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ccf6:	2620      	movs	r6, #32
 801ccf8:	b151      	cbz	r1, 801cd10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ccfa:	6828      	ldr	r0, [r5, #0]
 801ccfc:	3901      	subs	r1, #1
 801ccfe:	4282      	cmp	r2, r0
 801cd00:	b289      	uxth	r1, r1
 801cd02:	dd05      	ble.n	801cd10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cd04:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801cd08:	682b      	ldr	r3, [r5, #0]
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	602b      	str	r3, [r5, #0]
 801cd0e:	e7f3      	b.n	801ccf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801cd10:	b005      	add	sp, #20
 801cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801cd16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd1a:	2400      	movs	r4, #0
 801cd1c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801cd20:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801cd24:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801cd28:	8014      	strh	r4, [r2, #0]
 801cd2a:	701c      	strb	r4, [r3, #0]
 801cd2c:	f888 4000 	strb.w	r4, [r8]
 801cd30:	f88c 4000 	strb.w	r4, [ip]
 801cd34:	f88e 4000 	strb.w	r4, [lr]
 801cd38:	703c      	strb	r4, [r7, #0]
 801cd3a:	6804      	ldr	r4, [r0, #0]
 801cd3c:	b1a4      	cbz	r4, 801cd68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cd3e:	8824      	ldrh	r4, [r4, #0]
 801cd40:	f04f 0901 	mov.w	r9, #1
 801cd44:	b314      	cbz	r4, 801cd8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd46:	2c2b      	cmp	r4, #43	; 0x2b
 801cd48:	d001      	beq.n	801cd4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cd4a:	2c20      	cmp	r4, #32
 801cd4c:	d110      	bne.n	801cd70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cd4e:	8014      	strh	r4, [r2, #0]
 801cd50:	6804      	ldr	r4, [r0, #0]
 801cd52:	b10c      	cbz	r4, 801cd58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cd54:	3402      	adds	r4, #2
 801cd56:	6004      	str	r4, [r0, #0]
 801cd58:	680c      	ldr	r4, [r1, #0]
 801cd5a:	b10c      	cbz	r4, 801cd60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cd5c:	3401      	adds	r4, #1
 801cd5e:	600c      	str	r4, [r1, #0]
 801cd60:	6804      	ldr	r4, [r0, #0]
 801cd62:	b17c      	cbz	r4, 801cd84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cd64:	8824      	ldrh	r4, [r4, #0]
 801cd66:	e7ed      	b.n	801cd44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cd68:	680c      	ldr	r4, [r1, #0]
 801cd6a:	b17c      	cbz	r4, 801cd8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd6c:	7824      	ldrb	r4, [r4, #0]
 801cd6e:	e7e7      	b.n	801cd40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cd70:	2c2d      	cmp	r4, #45	; 0x2d
 801cd72:	d102      	bne.n	801cd7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cd74:	f883 9000 	strb.w	r9, [r3]
 801cd78:	e7ea      	b.n	801cd50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cd7a:	2c23      	cmp	r4, #35	; 0x23
 801cd7c:	d107      	bne.n	801cd8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cd7e:	f888 9000 	strb.w	r9, [r8]
 801cd82:	e7e5      	b.n	801cd50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cd84:	680c      	ldr	r4, [r1, #0]
 801cd86:	b10c      	cbz	r4, 801cd8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd88:	7824      	ldrb	r4, [r4, #0]
 801cd8a:	e7db      	b.n	801cd44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cd8c:	2400      	movs	r4, #0
 801cd8e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cd92:	2b09      	cmp	r3, #9
 801cd94:	d901      	bls.n	801cd9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cd96:	2c2a      	cmp	r4, #42	; 0x2a
 801cd98:	d122      	bne.n	801cde0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cd9a:	2301      	movs	r3, #1
 801cd9c:	2c30      	cmp	r4, #48	; 0x30
 801cd9e:	f88e 3000 	strb.w	r3, [lr]
 801cda2:	d10d      	bne.n	801cdc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cda4:	f88c 3000 	strb.w	r3, [ip]
 801cda8:	6803      	ldr	r3, [r0, #0]
 801cdaa:	b10b      	cbz	r3, 801cdb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801cdac:	3302      	adds	r3, #2
 801cdae:	6003      	str	r3, [r0, #0]
 801cdb0:	680b      	ldr	r3, [r1, #0]
 801cdb2:	b10b      	cbz	r3, 801cdb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801cdb4:	3301      	adds	r3, #1
 801cdb6:	600b      	str	r3, [r1, #0]
 801cdb8:	6803      	ldr	r3, [r0, #0]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d02f      	beq.n	801ce1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801cdbe:	881c      	ldrh	r4, [r3, #0]
 801cdc0:	2c2a      	cmp	r4, #42	; 0x2a
 801cdc2:	d135      	bne.n	801ce30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cdc4:	f04f 33ff 	mov.w	r3, #4294967295
 801cdc8:	6033      	str	r3, [r6, #0]
 801cdca:	6803      	ldr	r3, [r0, #0]
 801cdcc:	b10b      	cbz	r3, 801cdd2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801cdce:	3302      	adds	r3, #2
 801cdd0:	6003      	str	r3, [r0, #0]
 801cdd2:	680b      	ldr	r3, [r1, #0]
 801cdd4:	b10b      	cbz	r3, 801cdda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801cdd6:	3301      	adds	r3, #1
 801cdd8:	600b      	str	r3, [r1, #0]
 801cdda:	6803      	ldr	r3, [r0, #0]
 801cddc:	b31b      	cbz	r3, 801ce26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801cdde:	881c      	ldrh	r4, [r3, #0]
 801cde0:	2c2e      	cmp	r4, #46	; 0x2e
 801cde2:	d11a      	bne.n	801ce1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cde4:	2301      	movs	r3, #1
 801cde6:	703b      	strb	r3, [r7, #0]
 801cde8:	6803      	ldr	r3, [r0, #0]
 801cdea:	b10b      	cbz	r3, 801cdf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801cdec:	3302      	adds	r3, #2
 801cdee:	6003      	str	r3, [r0, #0]
 801cdf0:	680b      	ldr	r3, [r1, #0]
 801cdf2:	b10b      	cbz	r3, 801cdf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	600b      	str	r3, [r1, #0]
 801cdf8:	6803      	ldr	r3, [r0, #0]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d036      	beq.n	801ce6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801cdfe:	881b      	ldrh	r3, [r3, #0]
 801ce00:	2b2a      	cmp	r3, #42	; 0x2a
 801ce02:	d137      	bne.n	801ce74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ce04:	f04f 33ff 	mov.w	r3, #4294967295
 801ce08:	602b      	str	r3, [r5, #0]
 801ce0a:	6803      	ldr	r3, [r0, #0]
 801ce0c:	b10b      	cbz	r3, 801ce12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ce0e:	3302      	adds	r3, #2
 801ce10:	6003      	str	r3, [r0, #0]
 801ce12:	680b      	ldr	r3, [r1, #0]
 801ce14:	b10b      	cbz	r3, 801ce1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce16:	3301      	adds	r3, #1
 801ce18:	600b      	str	r3, [r1, #0]
 801ce1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce1e:	680c      	ldr	r4, [r1, #0]
 801ce20:	b134      	cbz	r4, 801ce30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ce22:	7824      	ldrb	r4, [r4, #0]
 801ce24:	e7cc      	b.n	801cdc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ce26:	680b      	ldr	r3, [r1, #0]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d0f6      	beq.n	801ce1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce2c:	781c      	ldrb	r4, [r3, #0]
 801ce2e:	e7d7      	b.n	801cde0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce30:	2300      	movs	r3, #0
 801ce32:	220a      	movs	r2, #10
 801ce34:	6033      	str	r3, [r6, #0]
 801ce36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ce3a:	fa1f f38c 	uxth.w	r3, ip
 801ce3e:	2b09      	cmp	r3, #9
 801ce40:	d8ce      	bhi.n	801cde0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce42:	6833      	ldr	r3, [r6, #0]
 801ce44:	fb02 c303 	mla	r3, r2, r3, ip
 801ce48:	6033      	str	r3, [r6, #0]
 801ce4a:	6803      	ldr	r3, [r0, #0]
 801ce4c:	b10b      	cbz	r3, 801ce52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ce4e:	3302      	adds	r3, #2
 801ce50:	6003      	str	r3, [r0, #0]
 801ce52:	680b      	ldr	r3, [r1, #0]
 801ce54:	b10b      	cbz	r3, 801ce5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ce56:	3301      	adds	r3, #1
 801ce58:	600b      	str	r3, [r1, #0]
 801ce5a:	6803      	ldr	r3, [r0, #0]
 801ce5c:	b10b      	cbz	r3, 801ce62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ce5e:	881c      	ldrh	r4, [r3, #0]
 801ce60:	e7e9      	b.n	801ce36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce62:	680c      	ldr	r4, [r1, #0]
 801ce64:	2c00      	cmp	r4, #0
 801ce66:	d0e6      	beq.n	801ce36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce68:	7824      	ldrb	r4, [r4, #0]
 801ce6a:	e7e4      	b.n	801ce36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce6c:	680b      	ldr	r3, [r1, #0]
 801ce6e:	b10b      	cbz	r3, 801ce74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ce70:	781b      	ldrb	r3, [r3, #0]
 801ce72:	e7c5      	b.n	801ce00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ce74:	2200      	movs	r2, #0
 801ce76:	240a      	movs	r4, #10
 801ce78:	602a      	str	r2, [r5, #0]
 801ce7a:	3b30      	subs	r3, #48	; 0x30
 801ce7c:	682a      	ldr	r2, [r5, #0]
 801ce7e:	b29e      	uxth	r6, r3
 801ce80:	2e09      	cmp	r6, #9
 801ce82:	d813      	bhi.n	801ceac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ce84:	fb04 3302 	mla	r3, r4, r2, r3
 801ce88:	602b      	str	r3, [r5, #0]
 801ce8a:	6803      	ldr	r3, [r0, #0]
 801ce8c:	b10b      	cbz	r3, 801ce92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ce8e:	3302      	adds	r3, #2
 801ce90:	6003      	str	r3, [r0, #0]
 801ce92:	680b      	ldr	r3, [r1, #0]
 801ce94:	b10b      	cbz	r3, 801ce9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ce96:	3301      	adds	r3, #1
 801ce98:	600b      	str	r3, [r1, #0]
 801ce9a:	6803      	ldr	r3, [r0, #0]
 801ce9c:	b10b      	cbz	r3, 801cea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ce9e:	881b      	ldrh	r3, [r3, #0]
 801cea0:	e7eb      	b.n	801ce7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cea2:	680b      	ldr	r3, [r1, #0]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d0e8      	beq.n	801ce7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	e7e6      	b.n	801ce7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ceac:	2a06      	cmp	r2, #6
 801ceae:	bfa8      	it	ge
 801ceb0:	2206      	movge	r2, #6
 801ceb2:	602a      	str	r2, [r5, #0]
 801ceb4:	e7b1      	b.n	801ce1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ceb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ceb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceba:	b0a3      	sub	sp, #140	; 0x8c
 801cebc:	2600      	movs	r6, #0
 801cebe:	4607      	mov	r7, r0
 801cec0:	4688      	mov	r8, r1
 801cec2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801cec6:	4631      	mov	r1, r6
 801cec8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801ceca:	4648      	mov	r0, r9
 801cecc:	960d      	str	r6, [sp, #52]	; 0x34
 801cece:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ced2:	2242      	movs	r2, #66	; 0x42
 801ced4:	f7fe fa36 	bl	801b344 <_ZN8touchgfx6memsetEPvhm>
 801ced8:	b15f      	cbz	r7, 801cef2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ceda:	f108 3aff 	add.w	sl, r8, #4294967295
 801cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cee2:	b152      	cbz	r2, 801cefa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801cee4:	8812      	ldrh	r2, [r2, #0]
 801cee6:	b10a      	cbz	r2, 801ceec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cee8:	459a      	cmp	sl, r3
 801ceea:	dc2e      	bgt.n	801cf4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ceec:	2200      	movs	r2, #0
 801ceee:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cef2:	4638      	mov	r0, r7
 801cef4:	b023      	add	sp, #140	; 0x8c
 801cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cefa:	9a08      	ldr	r2, [sp, #32]
 801cefc:	2a00      	cmp	r2, #0
 801cefe:	d0f5      	beq.n	801ceec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cf00:	7812      	ldrb	r2, [r2, #0]
 801cf02:	e7f0      	b.n	801cee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801cf04:	2d00      	cmp	r5, #0
 801cf06:	d0ea      	beq.n	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf08:	782a      	ldrb	r2, [r5, #0]
 801cf0a:	b142      	cbz	r2, 801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801cf0c:	2a25      	cmp	r2, #37	; 0x25
 801cf0e:	d001      	beq.n	801cf14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801cf10:	459a      	cmp	sl, r3
 801cf12:	dc08      	bgt.n	801cf26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801cf14:	f1bb 0f00 	cmp.w	fp, #0
 801cf18:	d121      	bne.n	801cf5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801cf1a:	2d00      	cmp	r5, #0
 801cf1c:	d0df      	beq.n	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf1e:	782a      	ldrb	r2, [r5, #0]
 801cf20:	f04f 0b00 	mov.w	fp, #0
 801cf24:	e01d      	b.n	801cf62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cf26:	f1bb 0f00 	cmp.w	fp, #0
 801cf2a:	d077      	beq.n	801d01c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801cf2c:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf30:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cf34:	f1bb 0f00 	cmp.w	fp, #0
 801cf38:	d002      	beq.n	801cf40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cf3a:	f10b 0202 	add.w	r2, fp, #2
 801cf3e:	9209      	str	r2, [sp, #36]	; 0x24
 801cf40:	b10d      	cbz	r5, 801cf46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cf42:	3501      	adds	r5, #1
 801cf44:	9508      	str	r5, [sp, #32]
 801cf46:	3301      	adds	r3, #1
 801cf48:	930d      	str	r3, [sp, #52]	; 0x34
 801cf4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf4c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cf50:	f1bb 0f00 	cmp.w	fp, #0
 801cf54:	d0d6      	beq.n	801cf04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cf56:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf5a:	2a00      	cmp	r2, #0
 801cf5c:	d1d6      	bne.n	801cf0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cf5e:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf62:	2a00      	cmp	r2, #0
 801cf64:	d0bb      	beq.n	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf66:	459a      	cmp	sl, r3
 801cf68:	ddb9      	ble.n	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf6a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801cf6e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801cf72:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801cf76:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801cf7a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801cf7e:	960e      	str	r6, [sp, #56]	; 0x38
 801cf80:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801cf84:	960f      	str	r6, [sp, #60]	; 0x3c
 801cf86:	f1bb 0f00 	cmp.w	fp, #0
 801cf8a:	d002      	beq.n	801cf92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cf8c:	f10b 0302 	add.w	r3, fp, #2
 801cf90:	9309      	str	r3, [sp, #36]	; 0x24
 801cf92:	b10d      	cbz	r5, 801cf98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cf94:	1c6b      	adds	r3, r5, #1
 801cf96:	9308      	str	r3, [sp, #32]
 801cf98:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf9a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801cf9e:	a908      	add	r1, sp, #32
 801cfa0:	a809      	add	r0, sp, #36	; 0x24
 801cfa2:	9305      	str	r3, [sp, #20]
 801cfa4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801cfa8:	9304      	str	r3, [sp, #16]
 801cfaa:	ab0e      	add	r3, sp, #56	; 0x38
 801cfac:	9303      	str	r3, [sp, #12]
 801cfae:	ab0c      	add	r3, sp, #48	; 0x30
 801cfb0:	9302      	str	r3, [sp, #8]
 801cfb2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801cfb6:	9301      	str	r3, [sp, #4]
 801cfb8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801cfbc:	9300      	str	r3, [sp, #0]
 801cfbe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801cfc2:	f7ff fea8 	bl	801cd16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801cfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	bfbf      	itttt	lt
 801cfcc:	6823      	ldrlt	r3, [r4, #0]
 801cfce:	3404      	addlt	r4, #4
 801cfd0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cfd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cfd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	bfbe      	ittt	lt
 801cfdc:	6823      	ldrlt	r3, [r4, #0]
 801cfde:	3404      	addlt	r4, #4
 801cfe0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cfe4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cfe8:	bfb8      	it	lt
 801cfea:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801cfec:	b1d9      	cbz	r1, 801d026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801cfee:	880b      	ldrh	r3, [r1, #0]
 801cff0:	2b69      	cmp	r3, #105	; 0x69
 801cff2:	d01f      	beq.n	801d034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cff4:	d82f      	bhi.n	801d056 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801cff6:	2b58      	cmp	r3, #88	; 0x58
 801cff8:	d01c      	beq.n	801d034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cffa:	d818      	bhi.n	801d02e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801cffc:	2b25      	cmp	r3, #37	; 0x25
 801cffe:	d034      	beq.n	801d06a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d002:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d006:	f1bb 0f00 	cmp.w	fp, #0
 801d00a:	f000 80b7 	beq.w	801d17c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d00e:	f8bb 5000 	ldrh.w	r5, [fp]
 801d012:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d016:	3301      	adds	r3, #1
 801d018:	930d      	str	r3, [sp, #52]	; 0x34
 801d01a:	e029      	b.n	801d070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d01c:	b10d      	cbz	r5, 801d022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d01e:	782a      	ldrb	r2, [r5, #0]
 801d020:	e786      	b.n	801cf30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d022:	462a      	mov	r2, r5
 801d024:	e784      	b.n	801cf30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d026:	2a00      	cmp	r2, #0
 801d028:	d0ea      	beq.n	801d000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d02a:	7813      	ldrb	r3, [r2, #0]
 801d02c:	e7e0      	b.n	801cff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d02e:	3b63      	subs	r3, #99	; 0x63
 801d030:	2b01      	cmp	r3, #1
 801d032:	d8e5      	bhi.n	801d000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d034:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d038:	b329      	cbz	r1, 801d086 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d03a:	880b      	ldrh	r3, [r1, #0]
 801d03c:	2b69      	cmp	r3, #105	; 0x69
 801d03e:	d063      	beq.n	801d108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d040:	d825      	bhi.n	801d08e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d042:	2b63      	cmp	r3, #99	; 0x63
 801d044:	d038      	beq.n	801d0b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d046:	2b64      	cmp	r3, #100	; 0x64
 801d048:	d05e      	beq.n	801d108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d04a:	2b58      	cmp	r3, #88	; 0x58
 801d04c:	d07a      	beq.n	801d144 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d04e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d052:	4625      	mov	r5, r4
 801d054:	e036      	b.n	801d0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d056:	2b73      	cmp	r3, #115	; 0x73
 801d058:	d0ec      	beq.n	801d034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d05a:	d802      	bhi.n	801d062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d05c:	2b6f      	cmp	r3, #111	; 0x6f
 801d05e:	d1cf      	bne.n	801d000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d060:	e7e8      	b.n	801d034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d062:	2b75      	cmp	r3, #117	; 0x75
 801d064:	d0e6      	beq.n	801d034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d066:	2b78      	cmp	r3, #120	; 0x78
 801d068:	e7f9      	b.n	801d05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d06a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d06c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d072:	b10b      	cbz	r3, 801d078 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d074:	3302      	adds	r3, #2
 801d076:	9309      	str	r3, [sp, #36]	; 0x24
 801d078:	9b08      	ldr	r3, [sp, #32]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	f43f af2f 	beq.w	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d080:	3301      	adds	r3, #1
 801d082:	9308      	str	r3, [sp, #32]
 801d084:	e72b      	b.n	801cede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d086:	2a00      	cmp	r2, #0
 801d088:	d0e1      	beq.n	801d04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d08a:	7813      	ldrb	r3, [r2, #0]
 801d08c:	e7d6      	b.n	801d03c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d08e:	2b73      	cmp	r3, #115	; 0x73
 801d090:	d036      	beq.n	801d100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d092:	d807      	bhi.n	801d0a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d094:	2b6f      	cmp	r3, #111	; 0x6f
 801d096:	d1da      	bne.n	801d04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d09a:	1d25      	adds	r5, r4, #4
 801d09c:	2308      	movs	r3, #8
 801d09e:	eba8 0202 	sub.w	r2, r8, r2
 801d0a2:	e049      	b.n	801d138 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d0a4:	2b75      	cmp	r3, #117	; 0x75
 801d0a6:	d042      	beq.n	801d12e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d0a8:	2b78      	cmp	r3, #120	; 0x78
 801d0aa:	d1d0      	bne.n	801d04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d0ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d0ae:	1d25      	adds	r5, r4, #4
 801d0b0:	2310      	movs	r3, #16
 801d0b2:	eba8 0202 	sub.w	r2, r8, r2
 801d0b6:	e03f      	b.n	801d138 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d0b8:	7823      	ldrb	r3, [r4, #0]
 801d0ba:	1d25      	adds	r5, r4, #4
 801d0bc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d0c0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0c6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d051      	beq.n	801d172 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d0ce:	881a      	ldrh	r2, [r3, #0]
 801d0d0:	a80d      	add	r0, sp, #52	; 0x34
 801d0d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d0d6:	462c      	mov	r4, r5
 801d0d8:	9005      	str	r0, [sp, #20]
 801d0da:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d0de:	9004      	str	r0, [sp, #16]
 801d0e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d0e2:	9003      	str	r0, [sp, #12]
 801d0e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d0e8:	9002      	str	r0, [sp, #8]
 801d0ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d0ec:	9001      	str	r0, [sp, #4]
 801d0ee:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d0f2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d0f6:	9000      	str	r0, [sp, #0]
 801d0f8:	a810      	add	r0, sp, #64	; 0x40
 801d0fa:	f7ff fd49 	bl	801cb90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d0fe:	e7b7      	b.n	801d070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d100:	1d25      	adds	r5, r4, #4
 801d102:	6823      	ldr	r3, [r4, #0]
 801d104:	9310      	str	r3, [sp, #64]	; 0x40
 801d106:	e7dd      	b.n	801d0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d10a:	230a      	movs	r3, #10
 801d10c:	4649      	mov	r1, r9
 801d10e:	6820      	ldr	r0, [r4, #0]
 801d110:	eba8 0202 	sub.w	r2, r8, r2
 801d114:	1d25      	adds	r5, r4, #4
 801d116:	b292      	uxth	r2, r2
 801d118:	f7ff fd08 	bl	801cb2c <_ZN8touchgfx7Unicode4itoaElPtti>
 801d11c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d120:	2b2d      	cmp	r3, #45	; 0x2d
 801d122:	d1cf      	bne.n	801d0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d124:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d12a:	3302      	adds	r3, #2
 801d12c:	e7ea      	b.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d130:	1d25      	adds	r5, r4, #4
 801d132:	230a      	movs	r3, #10
 801d134:	eba8 0202 	sub.w	r2, r8, r2
 801d138:	b292      	uxth	r2, r2
 801d13a:	4649      	mov	r1, r9
 801d13c:	6820      	ldr	r0, [r4, #0]
 801d13e:	f7ff fcd7 	bl	801caf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d142:	e7bf      	b.n	801d0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d146:	2310      	movs	r3, #16
 801d148:	4649      	mov	r1, r9
 801d14a:	6820      	ldr	r0, [r4, #0]
 801d14c:	eba8 0202 	sub.w	r2, r8, r2
 801d150:	1d25      	adds	r5, r4, #4
 801d152:	b292      	uxth	r2, r2
 801d154:	f7ff fccc 	bl	801caf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d158:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d15c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d160:	2b00      	cmp	r3, #0
 801d162:	d0af      	beq.n	801d0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d164:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d168:	2919      	cmp	r1, #25
 801d16a:	d8f7      	bhi.n	801d15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d16c:	3b20      	subs	r3, #32
 801d16e:	8013      	strh	r3, [r2, #0]
 801d170:	e7f4      	b.n	801d15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d172:	9a08      	ldr	r2, [sp, #32]
 801d174:	2a00      	cmp	r2, #0
 801d176:	d0ab      	beq.n	801d0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d178:	7812      	ldrb	r2, [r2, #0]
 801d17a:	e7a9      	b.n	801d0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d17c:	2d00      	cmp	r5, #0
 801d17e:	f43f af48 	beq.w	801d012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d182:	782d      	ldrb	r5, [r5, #0]
 801d184:	e745      	b.n	801d012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d186:	b507      	push	{r0, r1, r2, lr}
 801d188:	9300      	str	r3, [sp, #0]
 801d18a:	4613      	mov	r3, r2
 801d18c:	2200      	movs	r2, #0
 801d18e:	f7ff fe92 	bl	801ceb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d192:	b003      	add	sp, #12
 801d194:	f85d fb04 	ldr.w	pc, [sp], #4

0801d198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d198:	b40c      	push	{r2, r3}
 801d19a:	b507      	push	{r0, r1, r2, lr}
 801d19c:	ab04      	add	r3, sp, #16
 801d19e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1a2:	9301      	str	r3, [sp, #4]
 801d1a4:	f7ff ffef 	bl	801d186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d1a8:	b003      	add	sp, #12
 801d1aa:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1ae:	b002      	add	sp, #8
 801d1b0:	4770      	bx	lr
	...

0801d1b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d1b4:	4b01      	ldr	r3, [pc, #4]	; (801d1bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d1b6:	6018      	str	r0, [r3, #0]
 801d1b8:	4770      	bx	lr
 801d1ba:	bf00      	nop
 801d1bc:	20014bb4 	.word	0x20014bb4

0801d1c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d1c0:	4b06      	ldr	r3, [pc, #24]	; (801d1dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d1c2:	881a      	ldrh	r2, [r3, #0]
 801d1c4:	4282      	cmp	r2, r0
 801d1c6:	d807      	bhi.n	801d1d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d1c8:	4b05      	ldr	r3, [pc, #20]	; (801d1e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d1ca:	881b      	ldrh	r3, [r3, #0]
 801d1cc:	4413      	add	r3, r2
 801d1ce:	4298      	cmp	r0, r3
 801d1d0:	bfac      	ite	ge
 801d1d2:	2000      	movge	r0, #0
 801d1d4:	2001      	movlt	r0, #1
 801d1d6:	4770      	bx	lr
 801d1d8:	2000      	movs	r0, #0
 801d1da:	4770      	bx	lr
 801d1dc:	20014bd4 	.word	0x20014bd4
 801d1e0:	20014bd8 	.word	0x20014bd8

0801d1e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d1e4:	b508      	push	{r3, lr}
 801d1e6:	4601      	mov	r1, r0
 801d1e8:	f7ff ffea 	bl	801d1c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d1ec:	b118      	cbz	r0, 801d1f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d1ee:	4b02      	ldr	r3, [pc, #8]	; (801d1f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d1f6:	bd08      	pop	{r3, pc}
 801d1f8:	20014bb8 	.word	0x20014bb8

0801d1fc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d200:	4d28      	ldr	r5, [pc, #160]	; (801d2a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d202:	682b      	ldr	r3, [r5, #0]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d04a      	beq.n	801d29e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d208:	4a27      	ldr	r2, [pc, #156]	; (801d2a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d20a:	4e28      	ldr	r6, [pc, #160]	; (801d2ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d20c:	8810      	ldrh	r0, [r2, #0]
 801d20e:	f8b6 8000 	ldrh.w	r8, [r6]
 801d212:	4c27      	ldr	r4, [pc, #156]	; (801d2b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d214:	4440      	add	r0, r8
 801d216:	4f27      	ldr	r7, [pc, #156]	; (801d2b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d218:	1c41      	adds	r1, r0, #1
 801d21a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d21e:	f021 0101 	bic.w	r1, r1, #1
 801d222:	eb03 020e 	add.w	r2, r3, lr
 801d226:	0409      	lsls	r1, r1, #16
 801d228:	6022      	str	r2, [r4, #0]
 801d22a:	0c09      	lsrs	r1, r1, #16
 801d22c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d230:	eb0e 010c 	add.w	r1, lr, ip
 801d234:	185a      	adds	r2, r3, r1
 801d236:	603a      	str	r2, [r7, #0]
 801d238:	220e      	movs	r2, #14
 801d23a:	fb02 f208 	mul.w	r2, r2, r8
 801d23e:	3203      	adds	r2, #3
 801d240:	f022 0203 	bic.w	r2, r2, #3
 801d244:	4411      	add	r1, r2
 801d246:	440b      	add	r3, r1
 801d248:	491b      	ldr	r1, [pc, #108]	; (801d2b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d24a:	600b      	str	r3, [r1, #0]
 801d24c:	2300      	movs	r3, #0
 801d24e:	491b      	ldr	r1, [pc, #108]	; (801d2bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d250:	800b      	strh	r3, [r1, #0]
 801d252:	491b      	ldr	r1, [pc, #108]	; (801d2c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d254:	6809      	ldr	r1, [r1, #0]
 801d256:	eba1 010e 	sub.w	r1, r1, lr
 801d25a:	eba1 010c 	sub.w	r1, r1, ip
 801d25e:	469c      	mov	ip, r3
 801d260:	1a8a      	subs	r2, r1, r2
 801d262:	4918      	ldr	r1, [pc, #96]	; (801d2c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d264:	600a      	str	r2, [r1, #0]
 801d266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d26a:	4a17      	ldr	r2, [pc, #92]	; (801d2c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d26c:	8013      	strh	r3, [r2, #0]
 801d26e:	4283      	cmp	r3, r0
 801d270:	d10d      	bne.n	801d28e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d272:	8835      	ldrh	r5, [r6, #0]
 801d274:	2300      	movs	r3, #0
 801d276:	6838      	ldr	r0, [r7, #0]
 801d278:	240e      	movs	r4, #14
 801d27a:	429d      	cmp	r5, r3
 801d27c:	d90f      	bls.n	801d29e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d27e:	fb04 0203 	mla	r2, r4, r3, r0
 801d282:	3301      	adds	r3, #1
 801d284:	7b11      	ldrb	r1, [r2, #12]
 801d286:	f36f 1145 	bfc	r1, #5, #1
 801d28a:	7311      	strb	r1, [r2, #12]
 801d28c:	e7f5      	b.n	801d27a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d28e:	682a      	ldr	r2, [r5, #0]
 801d290:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d294:	6822      	ldr	r2, [r4, #0]
 801d296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d29a:	3301      	adds	r3, #1
 801d29c:	e7e7      	b.n	801d26e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2a2:	bf00      	nop
 801d2a4:	20014bb8 	.word	0x20014bb8
 801d2a8:	20014bd4 	.word	0x20014bd4
 801d2ac:	20014bd8 	.word	0x20014bd8
 801d2b0:	20014bcc 	.word	0x20014bcc
 801d2b4:	20014bbc 	.word	0x20014bbc
 801d2b8:	20014bc4 	.word	0x20014bc4
 801d2bc:	20014bd6 	.word	0x20014bd6
 801d2c0:	20014bc0 	.word	0x20014bc0
 801d2c4:	20014bd0 	.word	0x20014bd0
 801d2c8:	20014bc8 	.word	0x20014bc8

0801d2cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d2cc:	4b10      	ldr	r3, [pc, #64]	; (801d310 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d2ce:	b510      	push	{r4, lr}
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	b9db      	cbnz	r3, 801d30c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d2d4:	b1d1      	cbz	r1, 801d30c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d2d6:	4b0f      	ldr	r3, [pc, #60]	; (801d314 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d2d8:	240e      	movs	r4, #14
 801d2da:	801a      	strh	r2, [r3, #0]
 801d2dc:	b292      	uxth	r2, r2
 801d2de:	4b0e      	ldr	r3, [pc, #56]	; (801d318 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801d2e0:	881b      	ldrh	r3, [r3, #0]
 801d2e2:	4413      	add	r3, r2
 801d2e4:	4362      	muls	r2, r4
 801d2e6:	2406      	movs	r4, #6
 801d2e8:	fb04 2203 	mla	r2, r4, r3, r2
 801d2ec:	428a      	cmp	r2, r1
 801d2ee:	d305      	bcc.n	801d2fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801d2f0:	4b0a      	ldr	r3, [pc, #40]	; (801d31c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801d2f2:	2137      	movs	r1, #55	; 0x37
 801d2f4:	4a0a      	ldr	r2, [pc, #40]	; (801d320 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d2f6:	480b      	ldr	r0, [pc, #44]	; (801d324 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d2f8:	f00d fa4c 	bl	802a794 <__assert_func>
 801d2fc:	4b0a      	ldr	r3, [pc, #40]	; (801d328 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d2fe:	6019      	str	r1, [r3, #0]
 801d300:	4b0a      	ldr	r3, [pc, #40]	; (801d32c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801d302:	6018      	str	r0, [r3, #0]
 801d304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d308:	f7ff bf78 	b.w	801d1fc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d30c:	bd10      	pop	{r4, pc}
 801d30e:	bf00      	nop
 801d310:	20014bc4 	.word	0x20014bc4
 801d314:	20014bd8 	.word	0x20014bd8
 801d318:	20014bd4 	.word	0x20014bd4
 801d31c:	0803010d 	.word	0x0803010d
 801d320:	080301a2 	.word	0x080301a2
 801d324:	080300e8 	.word	0x080300e8
 801d328:	20014bc0 	.word	0x20014bc0
 801d32c:	20014bb8 	.word	0x20014bb8

0801d330 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d330:	b470      	push	{r4, r5, r6}
 801d332:	4c07      	ldr	r4, [pc, #28]	; (801d350 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d334:	4605      	mov	r5, r0
 801d336:	4610      	mov	r0, r2
 801d338:	9a03      	ldr	r2, [sp, #12]
 801d33a:	6826      	ldr	r6, [r4, #0]
 801d33c:	b936      	cbnz	r6, 801d34c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d33e:	6025      	str	r5, [r4, #0]
 801d340:	4c04      	ldr	r4, [pc, #16]	; (801d354 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d342:	8021      	strh	r1, [r4, #0]
 801d344:	4619      	mov	r1, r3
 801d346:	bc70      	pop	{r4, r5, r6}
 801d348:	f7ff bfc0 	b.w	801d2cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d34c:	bc70      	pop	{r4, r5, r6}
 801d34e:	4770      	bx	lr
 801d350:	20014bdc 	.word	0x20014bdc
 801d354:	20014bd4 	.word	0x20014bd4

0801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d358:	b508      	push	{r3, lr}
 801d35a:	4b14      	ldr	r3, [pc, #80]	; (801d3ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d35c:	6819      	ldr	r1, [r3, #0]
 801d35e:	b931      	cbnz	r1, 801d36e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d360:	4b13      	ldr	r3, [pc, #76]	; (801d3b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d362:	f240 3187 	movw	r1, #903	; 0x387
 801d366:	4a13      	ldr	r2, [pc, #76]	; (801d3b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d368:	4813      	ldr	r0, [pc, #76]	; (801d3b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d36a:	f00d fa13 	bl	802a794 <__assert_func>
 801d36e:	4a13      	ldr	r2, [pc, #76]	; (801d3bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d370:	8803      	ldrh	r3, [r0, #0]
 801d372:	8812      	ldrh	r2, [r2, #0]
 801d374:	4293      	cmp	r3, r2
 801d376:	d204      	bcs.n	801d382 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d378:	2214      	movs	r2, #20
 801d37a:	fb02 1303 	mla	r3, r2, r3, r1
 801d37e:	8918      	ldrh	r0, [r3, #8]
 801d380:	bd08      	pop	{r3, pc}
 801d382:	490f      	ldr	r1, [pc, #60]	; (801d3c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d384:	8809      	ldrh	r1, [r1, #0]
 801d386:	4411      	add	r1, r2
 801d388:	428b      	cmp	r3, r1
 801d38a:	da06      	bge.n	801d39a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801d38c:	1a9b      	subs	r3, r3, r2
 801d38e:	4a0d      	ldr	r2, [pc, #52]	; (801d3c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d390:	210e      	movs	r1, #14
 801d392:	6812      	ldr	r2, [r2, #0]
 801d394:	fb01 2303 	mla	r3, r1, r3, r2
 801d398:	e7f1      	b.n	801d37e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d39a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d39e:	4293      	cmp	r3, r2
 801d3a0:	bf0a      	itet	eq
 801d3a2:	4b09      	ldreq	r3, [pc, #36]	; (801d3c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801d3a4:	2000      	movne	r0, #0
 801d3a6:	8818      	ldrheq	r0, [r3, #0]
 801d3a8:	e7ea      	b.n	801d380 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801d3aa:	bf00      	nop
 801d3ac:	20014bdc 	.word	0x20014bdc
 801d3b0:	08030166 	.word	0x08030166
 801d3b4:	0803024f 	.word	0x0803024f
 801d3b8:	080300e8 	.word	0x080300e8
 801d3bc:	20014bd4 	.word	0x20014bd4
 801d3c0:	20014bd8 	.word	0x20014bd8
 801d3c4:	20014bbc 	.word	0x20014bbc
 801d3c8:	20014b28 	.word	0x20014b28

0801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d3cc:	b508      	push	{r3, lr}
 801d3ce:	4b14      	ldr	r3, [pc, #80]	; (801d420 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d3d0:	6819      	ldr	r1, [r3, #0]
 801d3d2:	b931      	cbnz	r1, 801d3e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d3d4:	4b13      	ldr	r3, [pc, #76]	; (801d424 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d3d6:	f240 319b 	movw	r1, #923	; 0x39b
 801d3da:	4a13      	ldr	r2, [pc, #76]	; (801d428 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d3dc:	4813      	ldr	r0, [pc, #76]	; (801d42c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d3de:	f00d f9d9 	bl	802a794 <__assert_func>
 801d3e2:	4a13      	ldr	r2, [pc, #76]	; (801d430 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d3e4:	8803      	ldrh	r3, [r0, #0]
 801d3e6:	8812      	ldrh	r2, [r2, #0]
 801d3e8:	4293      	cmp	r3, r2
 801d3ea:	d204      	bcs.n	801d3f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d3ec:	2214      	movs	r2, #20
 801d3ee:	fb02 1303 	mla	r3, r2, r3, r1
 801d3f2:	8958      	ldrh	r0, [r3, #10]
 801d3f4:	bd08      	pop	{r3, pc}
 801d3f6:	490f      	ldr	r1, [pc, #60]	; (801d434 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d3f8:	8809      	ldrh	r1, [r1, #0]
 801d3fa:	4411      	add	r1, r2
 801d3fc:	428b      	cmp	r3, r1
 801d3fe:	da06      	bge.n	801d40e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d400:	1a9b      	subs	r3, r3, r2
 801d402:	4a0d      	ldr	r2, [pc, #52]	; (801d438 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d404:	210e      	movs	r1, #14
 801d406:	6812      	ldr	r2, [r2, #0]
 801d408:	fb01 2303 	mla	r3, r1, r3, r2
 801d40c:	e7f1      	b.n	801d3f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d40e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d412:	4293      	cmp	r3, r2
 801d414:	bf0a      	itet	eq
 801d416:	4b09      	ldreq	r3, [pc, #36]	; (801d43c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d418:	2000      	movne	r0, #0
 801d41a:	8818      	ldrheq	r0, [r3, #0]
 801d41c:	e7ea      	b.n	801d3f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801d41e:	bf00      	nop
 801d420:	20014bdc 	.word	0x20014bdc
 801d424:	08030166 	.word	0x08030166
 801d428:	0803027b 	.word	0x0803027b
 801d42c:	080300e8 	.word	0x080300e8
 801d430:	20014bd4 	.word	0x20014bd4
 801d434:	20014bd8 	.word	0x20014bd8
 801d438:	20014bbc 	.word	0x20014bbc
 801d43c:	20014b2a 	.word	0x20014b2a

0801d440 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d440:	4b23      	ldr	r3, [pc, #140]	; (801d4d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d442:	b510      	push	{r4, lr}
 801d444:	681c      	ldr	r4, [r3, #0]
 801d446:	b934      	cbnz	r4, 801d456 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d448:	4b22      	ldr	r3, [pc, #136]	; (801d4d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d44a:	f240 31af 	movw	r1, #943	; 0x3af
 801d44e:	4a22      	ldr	r2, [pc, #136]	; (801d4d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d450:	4822      	ldr	r0, [pc, #136]	; (801d4dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d452:	f00d f99f 	bl	802a794 <__assert_func>
 801d456:	4a22      	ldr	r2, [pc, #136]	; (801d4e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d458:	880b      	ldrh	r3, [r1, #0]
 801d45a:	8812      	ldrh	r2, [r2, #0]
 801d45c:	4293      	cmp	r3, r2
 801d45e:	d211      	bcs.n	801d484 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801d460:	2214      	movs	r2, #20
 801d462:	fb02 4303 	mla	r3, r2, r3, r4
 801d466:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d46a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d46e:	8a1a      	ldrh	r2, [r3, #16]
 801d470:	8a5b      	ldrh	r3, [r3, #18]
 801d472:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d476:	8004      	strh	r4, [r0, #0]
 801d478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d47c:	8041      	strh	r1, [r0, #2]
 801d47e:	8082      	strh	r2, [r0, #4]
 801d480:	80c3      	strh	r3, [r0, #6]
 801d482:	e00e      	b.n	801d4a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d484:	4917      	ldr	r1, [pc, #92]	; (801d4e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d486:	8809      	ldrh	r1, [r1, #0]
 801d488:	4411      	add	r1, r2
 801d48a:	428b      	cmp	r3, r1
 801d48c:	da0a      	bge.n	801d4a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801d48e:	1a9b      	subs	r3, r3, r2
 801d490:	4a15      	ldr	r2, [pc, #84]	; (801d4e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d492:	210e      	movs	r1, #14
 801d494:	6812      	ldr	r2, [r2, #0]
 801d496:	fb01 2303 	mla	r3, r1, r3, r2
 801d49a:	681a      	ldr	r2, [r3, #0]
 801d49c:	6002      	str	r2, [r0, #0]
 801d49e:	685a      	ldr	r2, [r3, #4]
 801d4a0:	6042      	str	r2, [r0, #4]
 801d4a2:	bd10      	pop	{r4, pc}
 801d4a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d4a8:	4293      	cmp	r3, r2
 801d4aa:	d10b      	bne.n	801d4c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801d4ac:	4b0f      	ldr	r3, [pc, #60]	; (801d4ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d4ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d4b2:	4b0f      	ldr	r3, [pc, #60]	; (801d4f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801d4b4:	8081      	strh	r1, [r0, #4]
 801d4b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	80c2      	strh	r2, [r0, #6]
 801d4be:	8003      	strh	r3, [r0, #0]
 801d4c0:	8043      	strh	r3, [r0, #2]
 801d4c2:	e7ee      	b.n	801d4a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	8003      	strh	r3, [r0, #0]
 801d4c8:	8043      	strh	r3, [r0, #2]
 801d4ca:	8083      	strh	r3, [r0, #4]
 801d4cc:	e7d8      	b.n	801d480 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801d4ce:	bf00      	nop
 801d4d0:	20014bdc 	.word	0x20014bdc
 801d4d4:	08030166 	.word	0x08030166
 801d4d8:	080301e8 	.word	0x080301e8
 801d4dc:	080300e8 	.word	0x080300e8
 801d4e0:	20014bd4 	.word	0x20014bd4
 801d4e4:	20014bd8 	.word	0x20014bd8
 801d4e8:	20014bbc 	.word	0x20014bbc
 801d4ec:	20014b28 	.word	0x20014b28
 801d4f0:	20014b2a 	.word	0x20014b2a

0801d4f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d4f4:	4b18      	ldr	r3, [pc, #96]	; (801d558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	b34b      	cbz	r3, 801d54e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d4fa:	4a18      	ldr	r2, [pc, #96]	; (801d55c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d4fc:	8800      	ldrh	r0, [r0, #0]
 801d4fe:	8812      	ldrh	r2, [r2, #0]
 801d500:	4290      	cmp	r0, r2
 801d502:	d211      	bcs.n	801d528 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801d504:	2214      	movs	r2, #20
 801d506:	fb02 3300 	mla	r3, r2, r0, r3
 801d50a:	8a1a      	ldrh	r2, [r3, #16]
 801d50c:	8919      	ldrh	r1, [r3, #8]
 801d50e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d512:	428a      	cmp	r2, r1
 801d514:	db1d      	blt.n	801d552 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d516:	8a58      	ldrh	r0, [r3, #18]
 801d518:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d51c:	895b      	ldrh	r3, [r3, #10]
 801d51e:	4298      	cmp	r0, r3
 801d520:	bfac      	ite	ge
 801d522:	2000      	movge	r0, #0
 801d524:	2001      	movlt	r0, #1
 801d526:	4770      	bx	lr
 801d528:	4b0d      	ldr	r3, [pc, #52]	; (801d560 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d52a:	881b      	ldrh	r3, [r3, #0]
 801d52c:	4413      	add	r3, r2
 801d52e:	4298      	cmp	r0, r3
 801d530:	da0d      	bge.n	801d54e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d532:	4b0c      	ldr	r3, [pc, #48]	; (801d564 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801d534:	1a80      	subs	r0, r0, r2
 801d536:	220e      	movs	r2, #14
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	fb02 3300 	mla	r3, r2, r0, r3
 801d53e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d542:	891a      	ldrh	r2, [r3, #8]
 801d544:	4291      	cmp	r1, r2
 801d546:	db04      	blt.n	801d552 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d548:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d54c:	e7e6      	b.n	801d51c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801d54e:	2000      	movs	r0, #0
 801d550:	4770      	bx	lr
 801d552:	2001      	movs	r0, #1
 801d554:	4770      	bx	lr
 801d556:	bf00      	nop
 801d558:	20014bdc 	.word	0x20014bdc
 801d55c:	20014bd4 	.word	0x20014bd4
 801d560:	20014bd8 	.word	0x20014bd8
 801d564:	20014bbc 	.word	0x20014bbc

0801d568 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d568:	b508      	push	{r3, lr}
 801d56a:	4b12      	ldr	r3, [pc, #72]	; (801d5b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d56c:	6819      	ldr	r1, [r3, #0]
 801d56e:	b931      	cbnz	r1, 801d57e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d570:	4b11      	ldr	r3, [pc, #68]	; (801d5b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d572:	f240 31d3 	movw	r1, #979	; 0x3d3
 801d576:	4a11      	ldr	r2, [pc, #68]	; (801d5bc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d578:	4811      	ldr	r0, [pc, #68]	; (801d5c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d57a:	f00d f90b 	bl	802a794 <__assert_func>
 801d57e:	8803      	ldrh	r3, [r0, #0]
 801d580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d584:	4293      	cmp	r3, r2
 801d586:	d012      	beq.n	801d5ae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d588:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d58c:	4293      	cmp	r3, r2
 801d58e:	d103      	bne.n	801d598 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d590:	4b0c      	ldr	r3, [pc, #48]	; (801d5c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d596:	bd08      	pop	{r3, pc}
 801d598:	4a0b      	ldr	r2, [pc, #44]	; (801d5c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801d59a:	6812      	ldr	r2, [r2, #0]
 801d59c:	b11a      	cbz	r2, 801d5a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801d59e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d5a2:	2800      	cmp	r0, #0
 801d5a4:	d1f7      	bne.n	801d596 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d5a6:	2214      	movs	r2, #20
 801d5a8:	4353      	muls	r3, r2
 801d5aa:	58c8      	ldr	r0, [r1, r3]
 801d5ac:	e7f3      	b.n	801d596 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d5ae:	2000      	movs	r0, #0
 801d5b0:	e7f1      	b.n	801d596 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d5b2:	bf00      	nop
 801d5b4:	20014bdc 	.word	0x20014bdc
 801d5b8:	08030166 	.word	0x08030166
 801d5bc:	0803021e 	.word	0x0803021e
 801d5c0:	080300e8 	.word	0x080300e8
 801d5c4:	20014b34 	.word	0x20014b34
 801d5c8:	20014bb8 	.word	0x20014bb8

0801d5cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d5cc:	8802      	ldrh	r2, [r0, #0]
 801d5ce:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d5d2:	429a      	cmp	r2, r3
 801d5d4:	d845      	bhi.n	801d662 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d5d6:	4b24      	ldr	r3, [pc, #144]	; (801d668 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d5d8:	8818      	ldrh	r0, [r3, #0]
 801d5da:	4282      	cmp	r2, r0
 801d5dc:	d221      	bcs.n	801d622 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801d5de:	4b23      	ldr	r3, [pc, #140]	; (801d66c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d5e0:	6819      	ldr	r1, [r3, #0]
 801d5e2:	2314      	movs	r3, #20
 801d5e4:	fb03 1302 	mla	r3, r3, r2, r1
 801d5e8:	6858      	ldr	r0, [r3, #4]
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	d03a      	beq.n	801d664 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d5ee:	4920      	ldr	r1, [pc, #128]	; (801d670 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d5f0:	6809      	ldr	r1, [r1, #0]
 801d5f2:	2900      	cmp	r1, #0
 801d5f4:	d036      	beq.n	801d664 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d5f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d5fa:	2900      	cmp	r1, #0
 801d5fc:	d032      	beq.n	801d664 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801d5fe:	891a      	ldrh	r2, [r3, #8]
 801d600:	8958      	ldrh	r0, [r3, #10]
 801d602:	4350      	muls	r0, r2
 801d604:	7c5a      	ldrb	r2, [r3, #17]
 801d606:	7cdb      	ldrb	r3, [r3, #19]
 801d608:	0952      	lsrs	r2, r2, #5
 801d60a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d60e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d612:	2b0b      	cmp	r3, #11
 801d614:	bf18      	it	ne
 801d616:	0040      	lslne	r0, r0, #1
 801d618:	3003      	adds	r0, #3
 801d61a:	f020 0003 	bic.w	r0, r0, #3
 801d61e:	4408      	add	r0, r1
 801d620:	4770      	bx	lr
 801d622:	4b14      	ldr	r3, [pc, #80]	; (801d674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801d624:	881b      	ldrh	r3, [r3, #0]
 801d626:	4403      	add	r3, r0
 801d628:	429a      	cmp	r2, r3
 801d62a:	da1a      	bge.n	801d662 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d62c:	4b12      	ldr	r3, [pc, #72]	; (801d678 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801d62e:	1a10      	subs	r0, r2, r0
 801d630:	210e      	movs	r1, #14
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	fb01 3000 	mla	r0, r1, r0, r3
 801d638:	7b03      	ldrb	r3, [r0, #12]
 801d63a:	f003 031f 	and.w	r3, r3, #31
 801d63e:	2b0b      	cmp	r3, #11
 801d640:	d10b      	bne.n	801d65a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d642:	8903      	ldrh	r3, [r0, #8]
 801d644:	8940      	ldrh	r0, [r0, #10]
 801d646:	4358      	muls	r0, r3
 801d648:	4b09      	ldr	r3, [pc, #36]	; (801d670 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d64a:	3003      	adds	r0, #3
 801d64c:	6819      	ldr	r1, [r3, #0]
 801d64e:	f020 0303 	bic.w	r3, r0, #3
 801d652:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d656:	4418      	add	r0, r3
 801d658:	4770      	bx	lr
 801d65a:	2b0d      	cmp	r3, #13
 801d65c:	d101      	bne.n	801d662 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801d65e:	300d      	adds	r0, #13
 801d660:	4770      	bx	lr
 801d662:	2000      	movs	r0, #0
 801d664:	4770      	bx	lr
 801d666:	bf00      	nop
 801d668:	20014bd4 	.word	0x20014bd4
 801d66c:	20014bdc 	.word	0x20014bdc
 801d670:	20014bb8 	.word	0x20014bb8
 801d674:	20014bd8 	.word	0x20014bd8
 801d678:	20014bbc 	.word	0x20014bbc

0801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d67c:	4b19      	ldr	r3, [pc, #100]	; (801d6e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d67e:	6819      	ldr	r1, [r3, #0]
 801d680:	8803      	ldrh	r3, [r0, #0]
 801d682:	b1e9      	cbz	r1, 801d6c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d684:	4a18      	ldr	r2, [pc, #96]	; (801d6e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d686:	8812      	ldrh	r2, [r2, #0]
 801d688:	429a      	cmp	r2, r3
 801d68a:	d90a      	bls.n	801d6a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d68c:	2214      	movs	r2, #20
 801d68e:	fb02 1303 	mla	r3, r2, r3, r1
 801d692:	7c58      	ldrb	r0, [r3, #17]
 801d694:	0942      	lsrs	r2, r0, #5
 801d696:	7cd8      	ldrb	r0, [r3, #19]
 801d698:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d69c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d6a0:	4770      	bx	lr
 801d6a2:	4912      	ldr	r1, [pc, #72]	; (801d6ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d6a4:	8809      	ldrh	r1, [r1, #0]
 801d6a6:	4411      	add	r1, r2
 801d6a8:	428b      	cmp	r3, r1
 801d6aa:	da09      	bge.n	801d6c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d6ac:	1a9b      	subs	r3, r3, r2
 801d6ae:	4a10      	ldr	r2, [pc, #64]	; (801d6f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d6b0:	210e      	movs	r1, #14
 801d6b2:	6812      	ldr	r2, [r2, #0]
 801d6b4:	fb01 2303 	mla	r3, r1, r3, r2
 801d6b8:	7b18      	ldrb	r0, [r3, #12]
 801d6ba:	f000 001f 	and.w	r0, r0, #31
 801d6be:	4770      	bx	lr
 801d6c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	d10a      	bne.n	801d6de <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801d6c8:	4b0a      	ldr	r3, [pc, #40]	; (801d6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d6d0:	b10a      	cbz	r2, 801d6d6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d6d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d6d4:	b900      	cbnz	r0, 801d6d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d6d6:	6898      	ldr	r0, [r3, #8]
 801d6d8:	6803      	ldr	r3, [r0, #0]
 801d6da:	6a1b      	ldr	r3, [r3, #32]
 801d6dc:	4718      	bx	r3
 801d6de:	2000      	movs	r0, #0
 801d6e0:	4770      	bx	lr
 801d6e2:	bf00      	nop
 801d6e4:	20014bdc 	.word	0x20014bdc
 801d6e8:	20014bd4 	.word	0x20014bd4
 801d6ec:	20014bd8 	.word	0x20014bd8
 801d6f0:	20014bbc 	.word	0x20014bbc
 801d6f4:	20014b34 	.word	0x20014b34

0801d6f8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d6f8:	2010      	movs	r0, #16
 801d6fa:	4770      	bx	lr

0801d6fc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801d6fc:	2000      	movs	r0, #0
 801d6fe:	4770      	bx	lr

0801d700 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801d700:	00d2      	lsls	r2, r2, #3
 801d702:	0209      	lsls	r1, r1, #8
 801d704:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d708:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801d70c:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801d710:	4310      	orrs	r0, r2
 801d712:	4770      	bx	lr

0801d714 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801d714:	0a09      	lsrs	r1, r1, #8
 801d716:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d71a:	4770      	bx	lr

0801d71c <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801d71c:	08c9      	lsrs	r1, r1, #3
 801d71e:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801d722:	4770      	bx	lr

0801d724 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801d724:	00c9      	lsls	r1, r1, #3
 801d726:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d72a:	4770      	bx	lr

0801d72c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d72c:	2bff      	cmp	r3, #255	; 0xff
 801d72e:	d050      	beq.n	801d7d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d730:	2a0b      	cmp	r2, #11
 801d732:	d04a      	beq.n	801d7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d734:	d80e      	bhi.n	801d754 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d736:	2a03      	cmp	r2, #3
 801d738:	d03f      	beq.n	801d7ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801d73a:	d804      	bhi.n	801d746 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d73c:	2a01      	cmp	r2, #1
 801d73e:	d03e      	beq.n	801d7be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d740:	d93f      	bls.n	801d7c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d742:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d744:	4770      	bx	lr
 801d746:	2a09      	cmp	r2, #9
 801d748:	d03f      	beq.n	801d7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d74a:	d83c      	bhi.n	801d7c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d74c:	2a08      	cmp	r2, #8
 801d74e:	d03a      	beq.n	801d7c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d750:	2000      	movs	r0, #0
 801d752:	4770      	bx	lr
 801d754:	2a2f      	cmp	r2, #47	; 0x2f
 801d756:	d024      	beq.n	801d7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801d758:	d80d      	bhi.n	801d776 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801d75a:	2a2d      	cmp	r2, #45	; 0x2d
 801d75c:	d014      	beq.n	801d788 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801d75e:	d826      	bhi.n	801d7ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d760:	2a2c      	cmp	r2, #44	; 0x2c
 801d762:	d1f5      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d764:	684b      	ldr	r3, [r1, #4]
 801d766:	781b      	ldrb	r3, [r3, #0]
 801d768:	2b01      	cmp	r3, #1
 801d76a:	d018      	beq.n	801d79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801d76c:	d323      	bcc.n	801d7b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801d76e:	2b02      	cmp	r3, #2
 801d770:	d1ee      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d772:	6880      	ldr	r0, [r0, #8]
 801d774:	4770      	bx	lr
 801d776:	2a31      	cmp	r2, #49	; 0x31
 801d778:	d004      	beq.n	801d784 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801d77a:	d328      	bcc.n	801d7ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d77c:	2a32      	cmp	r2, #50	; 0x32
 801d77e:	d026      	beq.n	801d7ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d780:	2a33      	cmp	r2, #51	; 0x33
 801d782:	d1e5      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d784:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801d786:	4770      	bx	lr
 801d788:	684b      	ldr	r3, [r1, #4]
 801d78a:	781b      	ldrb	r3, [r3, #0]
 801d78c:	2b01      	cmp	r3, #1
 801d78e:	d004      	beq.n	801d79a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d790:	d30b      	bcc.n	801d7aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d792:	2b02      	cmp	r3, #2
 801d794:	d1dc      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d796:	6900      	ldr	r0, [r0, #16]
 801d798:	4770      	bx	lr
 801d79a:	6a00      	ldr	r0, [r0, #32]
 801d79c:	4770      	bx	lr
 801d79e:	6980      	ldr	r0, [r0, #24]
 801d7a0:	4770      	bx	lr
 801d7a2:	684b      	ldr	r3, [r1, #4]
 801d7a4:	781b      	ldrb	r3, [r3, #0]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d1d2      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d7aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d7ac:	4770      	bx	lr
 801d7ae:	684b      	ldr	r3, [r1, #4]
 801d7b0:	781b      	ldrb	r3, [r3, #0]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d1cc      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d7b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d7b8:	4770      	bx	lr
 801d7ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d7bc:	4770      	bx	lr
 801d7be:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d7c0:	4770      	bx	lr
 801d7c2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d7c4:	4770      	bx	lr
 801d7c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801d7c8:	4770      	bx	lr
 801d7ca:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801d7cc:	4770      	bx	lr
 801d7ce:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801d7d0:	4770      	bx	lr
 801d7d2:	2a0b      	cmp	r2, #11
 801d7d4:	d049      	beq.n	801d86a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d7d6:	d80e      	bhi.n	801d7f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801d7d8:	2a03      	cmp	r2, #3
 801d7da:	d040      	beq.n	801d85e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d7dc:	d804      	bhi.n	801d7e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801d7de:	2a01      	cmp	r2, #1
 801d7e0:	d03f      	beq.n	801d862 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d7e2:	d940      	bls.n	801d866 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d7e4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d7e6:	4770      	bx	lr
 801d7e8:	2a09      	cmp	r2, #9
 801d7ea:	d03e      	beq.n	801d86a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d7ec:	d801      	bhi.n	801d7f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801d7ee:	2a08      	cmp	r2, #8
 801d7f0:	d1ae      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d7f2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801d7f4:	4770      	bx	lr
 801d7f6:	2a2f      	cmp	r2, #47	; 0x2f
 801d7f8:	d024      	beq.n	801d844 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801d7fa:	d80d      	bhi.n	801d818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801d7fc:	2a2d      	cmp	r2, #45	; 0x2d
 801d7fe:	d014      	beq.n	801d82a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801d800:	d826      	bhi.n	801d850 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801d802:	2a2c      	cmp	r2, #44	; 0x2c
 801d804:	d1a4      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d806:	684b      	ldr	r3, [r1, #4]
 801d808:	781b      	ldrb	r3, [r3, #0]
 801d80a:	2b01      	cmp	r3, #1
 801d80c:	d018      	beq.n	801d840 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801d80e:	d324      	bcc.n	801d85a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d810:	2b02      	cmp	r3, #2
 801d812:	d19d      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d814:	68c0      	ldr	r0, [r0, #12]
 801d816:	4770      	bx	lr
 801d818:	2a31      	cmp	r2, #49	; 0x31
 801d81a:	d004      	beq.n	801d826 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801d81c:	d327      	bcc.n	801d86e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d81e:	2a32      	cmp	r2, #50	; 0x32
 801d820:	d025      	beq.n	801d86e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d822:	2a33      	cmp	r2, #51	; 0x33
 801d824:	d194      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d826:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801d828:	4770      	bx	lr
 801d82a:	684b      	ldr	r3, [r1, #4]
 801d82c:	781b      	ldrb	r3, [r3, #0]
 801d82e:	2b01      	cmp	r3, #1
 801d830:	d004      	beq.n	801d83c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801d832:	d30b      	bcc.n	801d84c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801d834:	2b02      	cmp	r3, #2
 801d836:	d18b      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d838:	6940      	ldr	r0, [r0, #20]
 801d83a:	4770      	bx	lr
 801d83c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d83e:	4770      	bx	lr
 801d840:	69c0      	ldr	r0, [r0, #28]
 801d842:	4770      	bx	lr
 801d844:	684b      	ldr	r3, [r1, #4]
 801d846:	781b      	ldrb	r3, [r3, #0]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d181      	bne.n	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d84c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d84e:	4770      	bx	lr
 801d850:	684b      	ldr	r3, [r1, #4]
 801d852:	781b      	ldrb	r3, [r3, #0]
 801d854:	2b00      	cmp	r3, #0
 801d856:	f47f af7b 	bne.w	801d750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d85a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d85c:	4770      	bx	lr
 801d85e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d860:	4770      	bx	lr
 801d862:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d864:	4770      	bx	lr
 801d866:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d868:	4770      	bx	lr
 801d86a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801d86c:	4770      	bx	lr
 801d86e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d870:	4770      	bx	lr

0801d872 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d876:	b087      	sub	sp, #28
 801d878:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d87a:	9205      	str	r2, [sp, #20]
 801d87c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d880:	9101      	str	r1, [sp, #4]
 801d882:	9202      	str	r2, [sp, #8]
 801d884:	6841      	ldr	r1, [r0, #4]
 801d886:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801d88a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d88e:	fb01 2404 	mla	r4, r1, r4, r2
 801d892:	6802      	ldr	r2, [r0, #0]
 801d894:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d898:	f8de 2000 	ldr.w	r2, [lr]
 801d89c:	9203      	str	r2, [sp, #12]
 801d89e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d8a2:	3204      	adds	r2, #4
 801d8a4:	9204      	str	r2, [sp, #16]
 801d8a6:	9a02      	ldr	r2, [sp, #8]
 801d8a8:	43d6      	mvns	r6, r2
 801d8aa:	b2f6      	uxtb	r6, r6
 801d8ac:	9a01      	ldr	r2, [sp, #4]
 801d8ae:	2a00      	cmp	r2, #0
 801d8b0:	dc03      	bgt.n	801d8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d8b2:	9a05      	ldr	r2, [sp, #20]
 801d8b4:	2a00      	cmp	r2, #0
 801d8b6:	f340 8129 	ble.w	801db0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d8ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8bc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d8c0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d8c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8c6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d8ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	dd0e      	ble.n	801d8f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d8d2:	1408      	asrs	r0, r1, #16
 801d8d4:	d405      	bmi.n	801d8e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d8d6:	4560      	cmp	r0, ip
 801d8d8:	da03      	bge.n	801d8e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d8da:	1410      	asrs	r0, r2, #16
 801d8dc:	d401      	bmi.n	801d8e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d8de:	42b8      	cmp	r0, r7
 801d8e0:	db07      	blt.n	801d8f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d8e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d8e4:	3b01      	subs	r3, #1
 801d8e6:	3402      	adds	r4, #2
 801d8e8:	4401      	add	r1, r0
 801d8ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d8ec:	4402      	add	r2, r0
 801d8ee:	e7ee      	b.n	801d8ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d8f0:	d071      	beq.n	801d9d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d8f2:	1e58      	subs	r0, r3, #1
 801d8f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d8f6:	fb05 1500 	mla	r5, r5, r0, r1
 801d8fa:	142d      	asrs	r5, r5, #16
 801d8fc:	d45f      	bmi.n	801d9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d8fe:	4565      	cmp	r5, ip
 801d900:	da5d      	bge.n	801d9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d902:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d904:	fb05 2000 	mla	r0, r5, r0, r2
 801d908:	1400      	asrs	r0, r0, #16
 801d90a:	d458      	bmi.n	801d9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d90c:	42b8      	cmp	r0, r7
 801d90e:	da56      	bge.n	801d9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d910:	4699      	mov	r9, r3
 801d912:	46a2      	mov	sl, r4
 801d914:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d918:	f1b9 0f00 	cmp.w	r9, #0
 801d91c:	dd57      	ble.n	801d9ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d91e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d922:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d926:	9803      	ldr	r0, [sp, #12]
 801d928:	140d      	asrs	r5, r1, #16
 801d92a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d92e:	fb07 000c 	mla	r0, r7, ip, r0
 801d932:	5d40      	ldrb	r0, [r0, r5]
 801d934:	9d04      	ldr	r5, [sp, #16]
 801d936:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d93a:	f8ba 5000 	ldrh.w	r5, [sl]
 801d93e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d942:	122f      	asrs	r7, r5, #8
 801d944:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d948:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d94c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d950:	00ed      	lsls	r5, r5, #3
 801d952:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d956:	fb17 f706 	smulbb	r7, r7, r6
 801d95a:	b2ed      	uxtb	r5, r5
 801d95c:	fb18 f806 	smulbb	r8, r8, r6
 801d960:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d964:	10c7      	asrs	r7, r0, #3
 801d966:	fb15 f506 	smulbb	r5, r5, r6
 801d96a:	00c0      	lsls	r0, r0, #3
 801d96c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d970:	fa1f fc8c 	uxth.w	ip, ip
 801d974:	b2c0      	uxtb	r0, r0
 801d976:	fb07 870b 	mla	r7, r7, fp, r8
 801d97a:	fb00 500b 	mla	r0, r0, fp, r5
 801d97e:	f10c 0501 	add.w	r5, ip, #1
 801d982:	b2bf      	uxth	r7, r7
 801d984:	b280      	uxth	r0, r0
 801d986:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d98a:	f107 0801 	add.w	r8, r7, #1
 801d98e:	1c45      	adds	r5, r0, #1
 801d990:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d994:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d998:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d99c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d99e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d9a2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d9a6:	4401      	add	r1, r0
 801d9a8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d9ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d9ae:	ea4c 0c05 	orr.w	ip, ip, r5
 801d9b2:	4402      	add	r2, r0
 801d9b4:	ea4c 0c08 	orr.w	ip, ip, r8
 801d9b8:	f82a cb02 	strh.w	ip, [sl], #2
 801d9bc:	e7ac      	b.n	801d918 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d9be:	f04f 0800 	mov.w	r8, #0
 801d9c2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d9c6:	eb03 0008 	add.w	r0, r3, r8
 801d9ca:	2800      	cmp	r0, #0
 801d9cc:	dc41      	bgt.n	801da52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d9ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d9d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d9d6:	9b01      	ldr	r3, [sp, #4]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	f340 8097 	ble.w	801db0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d9de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d9e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d9e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d9ec:	eef0 6a62 	vmov.f32	s13, s5
 801d9f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9fc:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801da00:	eef0 6a43 	vmov.f32	s13, s6
 801da04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da08:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801da0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da24:	ee12 2a90 	vmov	r2, s5
 801da28:	eef0 2a47 	vmov.f32	s5, s14
 801da2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801da30:	ee13 2a10 	vmov	r2, s6
 801da34:	9313      	str	r3, [sp, #76]	; 0x4c
 801da36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da38:	eeb0 3a67 	vmov.f32	s6, s15
 801da3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801da40:	9314      	str	r3, [sp, #80]	; 0x50
 801da42:	9b01      	ldr	r3, [sp, #4]
 801da44:	9a05      	ldr	r2, [sp, #20]
 801da46:	3b01      	subs	r3, #1
 801da48:	9301      	str	r3, [sp, #4]
 801da4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da4c:	bf08      	it	eq
 801da4e:	4613      	moveq	r3, r2
 801da50:	e72c      	b.n	801d8ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801da52:	140f      	asrs	r7, r1, #16
 801da54:	d453      	bmi.n	801dafe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801da56:	f8de 5008 	ldr.w	r5, [lr, #8]
 801da5a:	42bd      	cmp	r5, r7
 801da5c:	dd4f      	ble.n	801dafe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801da5e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801da62:	d44c      	bmi.n	801dafe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801da64:	f8de 000c 	ldr.w	r0, [lr, #12]
 801da68:	4560      	cmp	r0, ip
 801da6a:	dd48      	ble.n	801dafe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801da6c:	9803      	ldr	r0, [sp, #12]
 801da6e:	b22d      	sxth	r5, r5
 801da70:	fb0c 0505 	mla	r5, ip, r5, r0
 801da74:	5de8      	ldrb	r0, [r5, r7]
 801da76:	9d04      	ldr	r5, [sp, #16]
 801da78:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801da7c:	f06f 0501 	mvn.w	r5, #1
 801da80:	fb05 fb08 	mul.w	fp, r5, r8
 801da84:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801da88:	f834 500b 	ldrh.w	r5, [r4, fp]
 801da8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801da90:	122f      	asrs	r7, r5, #8
 801da92:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801da96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da9a:	00ed      	lsls	r5, r5, #3
 801da9c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801daa0:	fb17 f706 	smulbb	r7, r7, r6
 801daa4:	b2ed      	uxtb	r5, r5
 801daa6:	fb19 f906 	smulbb	r9, r9, r6
 801daaa:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801daae:	10c7      	asrs	r7, r0, #3
 801dab0:	fb15 f506 	smulbb	r5, r5, r6
 801dab4:	00c0      	lsls	r0, r0, #3
 801dab6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801daba:	fa1f fc8c 	uxth.w	ip, ip
 801dabe:	b2c0      	uxtb	r0, r0
 801dac0:	fb07 970a 	mla	r7, r7, sl, r9
 801dac4:	fb00 500a 	mla	r0, r0, sl, r5
 801dac8:	f10c 0501 	add.w	r5, ip, #1
 801dacc:	b2bf      	uxth	r7, r7
 801dace:	b280      	uxth	r0, r0
 801dad0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dad4:	f107 0901 	add.w	r9, r7, #1
 801dad8:	1c45      	adds	r5, r0, #1
 801dada:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801dade:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dae2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801dae6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801daea:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801daee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801daf2:	ea4c 0c05 	orr.w	ip, ip, r5
 801daf6:	ea4c 0c09 	orr.w	ip, ip, r9
 801dafa:	f824 c00b 	strh.w	ip, [r4, fp]
 801dafe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801db00:	f108 38ff 	add.w	r8, r8, #4294967295
 801db04:	4401      	add	r1, r0
 801db06:	9814      	ldr	r0, [sp, #80]	; 0x50
 801db08:	4402      	add	r2, r0
 801db0a:	e75c      	b.n	801d9c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801db0c:	b007      	add	sp, #28
 801db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db16:	b085      	sub	sp, #20
 801db18:	4693      	mov	fp, r2
 801db1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801db20:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801db22:	6870      	ldr	r0, [r6, #4]
 801db24:	9100      	str	r1, [sp, #0]
 801db26:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801db2a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801db2e:	fb00 2404 	mla	r4, r0, r4, r2
 801db32:	6832      	ldr	r2, [r6, #0]
 801db34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801db38:	682a      	ldr	r2, [r5, #0]
 801db3a:	9201      	str	r2, [sp, #4]
 801db3c:	686a      	ldr	r2, [r5, #4]
 801db3e:	3204      	adds	r2, #4
 801db40:	9202      	str	r2, [sp, #8]
 801db42:	9a00      	ldr	r2, [sp, #0]
 801db44:	2a00      	cmp	r2, #0
 801db46:	dc03      	bgt.n	801db50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801db48:	f1bb 0f00 	cmp.w	fp, #0
 801db4c:	f340 80a0 	ble.w	801dc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801db50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db52:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801db56:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801db5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db5c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801db60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db64:	2b00      	cmp	r3, #0
 801db66:	dd0c      	ble.n	801db82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db68:	1406      	asrs	r6, r0, #16
 801db6a:	d405      	bmi.n	801db78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801db6c:	454e      	cmp	r6, r9
 801db6e:	da03      	bge.n	801db78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801db70:	1416      	asrs	r6, r2, #16
 801db72:	d401      	bmi.n	801db78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801db74:	4546      	cmp	r6, r8
 801db76:	db05      	blt.n	801db84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801db78:	4470      	add	r0, lr
 801db7a:	4462      	add	r2, ip
 801db7c:	3b01      	subs	r3, #1
 801db7e:	3402      	adds	r4, #2
 801db80:	e7f0      	b.n	801db64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801db82:	d00f      	beq.n	801dba4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801db84:	1e5e      	subs	r6, r3, #1
 801db86:	fb0e 0706 	mla	r7, lr, r6, r0
 801db8a:	143f      	asrs	r7, r7, #16
 801db8c:	d541      	bpl.n	801dc12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801db8e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801db92:	4698      	mov	r8, r3
 801db94:	9603      	str	r6, [sp, #12]
 801db96:	f1b8 0f00 	cmp.w	r8, #0
 801db9a:	dc59      	bgt.n	801dc50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801db9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dba0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dba4:	9b00      	ldr	r3, [sp, #0]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	dd72      	ble.n	801dc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801dbaa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbb4:	eeb0 6a62 	vmov.f32	s12, s5
 801dbb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dbbc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbc4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dbc8:	eeb0 6a43 	vmov.f32	s12, s6
 801dbcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbd0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dbd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbe0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dbe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dbe8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dbec:	ee12 2a90 	vmov	r2, s5
 801dbf0:	eef0 2a47 	vmov.f32	s5, s14
 801dbf4:	fb92 fef3 	sdiv	lr, r2, r3
 801dbf8:	ee13 2a10 	vmov	r2, s6
 801dbfc:	eeb0 3a67 	vmov.f32	s6, s15
 801dc00:	fb92 fcf3 	sdiv	ip, r2, r3
 801dc04:	9b00      	ldr	r3, [sp, #0]
 801dc06:	3b01      	subs	r3, #1
 801dc08:	9300      	str	r3, [sp, #0]
 801dc0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc0c:	bf08      	it	eq
 801dc0e:	465b      	moveq	r3, fp
 801dc10:	e797      	b.n	801db42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801dc12:	454f      	cmp	r7, r9
 801dc14:	dabb      	bge.n	801db8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc16:	fb0c 2606 	mla	r6, ip, r6, r2
 801dc1a:	1436      	asrs	r6, r6, #16
 801dc1c:	d4b7      	bmi.n	801db8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc1e:	4546      	cmp	r6, r8
 801dc20:	dab5      	bge.n	801db8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc22:	461e      	mov	r6, r3
 801dc24:	46a0      	mov	r8, r4
 801dc26:	2e00      	cmp	r6, #0
 801dc28:	ddb8      	ble.n	801db9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dc2a:	1417      	asrs	r7, r2, #16
 801dc2c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801dc30:	9901      	ldr	r1, [sp, #4]
 801dc32:	ea4f 4920 	mov.w	r9, r0, asr #16
 801dc36:	4462      	add	r2, ip
 801dc38:	4470      	add	r0, lr
 801dc3a:	fb0a 1707 	mla	r7, sl, r7, r1
 801dc3e:	9902      	ldr	r1, [sp, #8]
 801dc40:	3e01      	subs	r6, #1
 801dc42:	f817 7009 	ldrb.w	r7, [r7, r9]
 801dc46:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801dc4a:	f828 7b02 	strh.w	r7, [r8], #2
 801dc4e:	e7ea      	b.n	801dc26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dc50:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dc54:	d417      	bmi.n	801dc86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dc56:	68ae      	ldr	r6, [r5, #8]
 801dc58:	454e      	cmp	r6, r9
 801dc5a:	dd14      	ble.n	801dc86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dc5c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801dc60:	d411      	bmi.n	801dc86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dc62:	68ef      	ldr	r7, [r5, #12]
 801dc64:	4557      	cmp	r7, sl
 801dc66:	dd0e      	ble.n	801dc86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801dc68:	9f01      	ldr	r7, [sp, #4]
 801dc6a:	b236      	sxth	r6, r6
 801dc6c:	f06f 0101 	mvn.w	r1, #1
 801dc70:	fb0a 7606 	mla	r6, sl, r6, r7
 801dc74:	9f02      	ldr	r7, [sp, #8]
 801dc76:	f816 6009 	ldrb.w	r6, [r6, r9]
 801dc7a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801dc7e:	fb01 f608 	mul.w	r6, r1, r8
 801dc82:	9903      	ldr	r1, [sp, #12]
 801dc84:	538f      	strh	r7, [r1, r6]
 801dc86:	4470      	add	r0, lr
 801dc88:	4462      	add	r2, ip
 801dc8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801dc8e:	e782      	b.n	801db96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dc90:	b005      	add	sp, #20
 801dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc9a:	b087      	sub	sp, #28
 801dc9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dc9e:	9205      	str	r2, [sp, #20]
 801dca0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dca4:	9102      	str	r1, [sp, #8]
 801dca6:	9203      	str	r2, [sp, #12]
 801dca8:	6861      	ldr	r1, [r4, #4]
 801dcaa:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801dcae:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801dcb2:	fb01 2000 	mla	r0, r1, r0, r2
 801dcb6:	6822      	ldr	r2, [r4, #0]
 801dcb8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801dcbc:	9200      	str	r2, [sp, #0]
 801dcbe:	f8dc 2000 	ldr.w	r2, [ip]
 801dcc2:	9204      	str	r2, [sp, #16]
 801dcc4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801dcc8:	3204      	adds	r2, #4
 801dcca:	9201      	str	r2, [sp, #4]
 801dccc:	9a03      	ldr	r2, [sp, #12]
 801dcce:	43d5      	mvns	r5, r2
 801dcd0:	b2ed      	uxtb	r5, r5
 801dcd2:	9a02      	ldr	r2, [sp, #8]
 801dcd4:	2a00      	cmp	r2, #0
 801dcd6:	dc03      	bgt.n	801dce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dcd8:	9a05      	ldr	r2, [sp, #20]
 801dcda:	2a00      	cmp	r2, #0
 801dcdc:	f340 812c 	ble.w	801df38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801dce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dce2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dce6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dcea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dcec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dcf0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	dd10      	ble.n	801dd1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dcf8:	140c      	asrs	r4, r1, #16
 801dcfa:	d405      	bmi.n	801dd08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dcfc:	4574      	cmp	r4, lr
 801dcfe:	da03      	bge.n	801dd08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd00:	1414      	asrs	r4, r2, #16
 801dd02:	d401      	bmi.n	801dd08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd04:	42bc      	cmp	r4, r7
 801dd06:	db09      	blt.n	801dd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dd08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dd0a:	3b01      	subs	r3, #1
 801dd0c:	9800      	ldr	r0, [sp, #0]
 801dd0e:	4421      	add	r1, r4
 801dd10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd12:	3002      	adds	r0, #2
 801dd14:	4422      	add	r2, r4
 801dd16:	9000      	str	r0, [sp, #0]
 801dd18:	e7ec      	b.n	801dcf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801dd1a:	d071      	beq.n	801de00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801dd1c:	1e5c      	subs	r4, r3, #1
 801dd1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dd20:	fb06 1604 	mla	r6, r6, r4, r1
 801dd24:	1436      	asrs	r6, r6, #16
 801dd26:	d45d      	bmi.n	801dde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dd28:	4576      	cmp	r6, lr
 801dd2a:	da5b      	bge.n	801dde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dd2c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801dd2e:	fb06 2404 	mla	r4, r6, r4, r2
 801dd32:	1424      	asrs	r4, r4, #16
 801dd34:	d456      	bmi.n	801dde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dd36:	42bc      	cmp	r4, r7
 801dd38:	da54      	bge.n	801dde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dd3a:	4698      	mov	r8, r3
 801dd3c:	f8dd 9000 	ldr.w	r9, [sp]
 801dd40:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801dd44:	f1b8 0f00 	cmp.w	r8, #0
 801dd48:	dd54      	ble.n	801ddf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dd4a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801dd4e:	1414      	asrs	r4, r2, #16
 801dd50:	9804      	ldr	r0, [sp, #16]
 801dd52:	140e      	asrs	r6, r1, #16
 801dd54:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd58:	fb07 0404 	mla	r4, r7, r4, r0
 801dd5c:	9801      	ldr	r0, [sp, #4]
 801dd5e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801dd62:	f8b9 4000 	ldrh.w	r4, [r9]
 801dd66:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dd6a:	1227      	asrs	r7, r4, #8
 801dd6c:	eb00 0b0e 	add.w	fp, r0, lr
 801dd70:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801dd74:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dd7a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801dd7e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dd82:	4401      	add	r1, r0
 801dd84:	fb16 f60a 	smulbb	r6, r6, sl
 801dd88:	9814      	ldr	r0, [sp, #80]	; 0x50
 801dd8a:	fb1b fb0a 	smulbb	fp, fp, sl
 801dd8e:	fb07 6705 	mla	r7, r7, r5, r6
 801dd92:	10e6      	asrs	r6, r4, #3
 801dd94:	00e4      	lsls	r4, r4, #3
 801dd96:	4402      	add	r2, r0
 801dd98:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dd9c:	b2bf      	uxth	r7, r7
 801dd9e:	b2e4      	uxtb	r4, r4
 801dda0:	fb06 b605 	mla	r6, r6, r5, fp
 801dda4:	fb14 f405 	smulbb	r4, r4, r5
 801dda8:	b2b6      	uxth	r6, r6
 801ddaa:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ddae:	1c7c      	adds	r4, r7, #1
 801ddb0:	f106 0b01 	add.w	fp, r6, #1
 801ddb4:	fa1f fe8e 	uxth.w	lr, lr
 801ddb8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ddbc:	f10e 0401 	add.w	r4, lr, #1
 801ddc0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ddc4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ddc8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ddcc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ddd0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ddd4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ddd8:	4327      	orrs	r7, r4
 801ddda:	ea47 070b 	orr.w	r7, r7, fp
 801ddde:	f829 7b02 	strh.w	r7, [r9], #2
 801dde2:	e7af      	b.n	801dd44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801dde4:	f04f 0e00 	mov.w	lr, #0
 801dde8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801ddec:	eb03 040e 	add.w	r4, r3, lr
 801ddf0:	2c00      	cmp	r4, #0
 801ddf2:	dc43      	bgt.n	801de7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ddf4:	9a00      	ldr	r2, [sp, #0]
 801ddf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ddfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ddfe:	9300      	str	r3, [sp, #0]
 801de00:	9b02      	ldr	r3, [sp, #8]
 801de02:	2b00      	cmp	r3, #0
 801de04:	f340 8098 	ble.w	801df38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801de08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de16:	eef0 6a62 	vmov.f32	s13, s5
 801de1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de26:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801de2a:	eef0 6a43 	vmov.f32	s13, s6
 801de2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de32:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801de36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de4e:	ee12 2a90 	vmov	r2, s5
 801de52:	eef0 2a47 	vmov.f32	s5, s14
 801de56:	fb92 f3f3 	sdiv	r3, r2, r3
 801de5a:	ee13 2a10 	vmov	r2, s6
 801de5e:	9313      	str	r3, [sp, #76]	; 0x4c
 801de60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de62:	eeb0 3a67 	vmov.f32	s6, s15
 801de66:	fb92 f3f3 	sdiv	r3, r2, r3
 801de6a:	9314      	str	r3, [sp, #80]	; 0x50
 801de6c:	9b02      	ldr	r3, [sp, #8]
 801de6e:	9a05      	ldr	r2, [sp, #20]
 801de70:	3b01      	subs	r3, #1
 801de72:	9302      	str	r3, [sp, #8]
 801de74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de76:	bf08      	it	eq
 801de78:	4613      	moveq	r3, r2
 801de7a:	e72a      	b.n	801dcd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801de7c:	140f      	asrs	r7, r1, #16
 801de7e:	d454      	bmi.n	801df2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801de80:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801de84:	42be      	cmp	r6, r7
 801de86:	dd50      	ble.n	801df2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801de88:	ea5f 4822 	movs.w	r8, r2, asr #16
 801de8c:	d44d      	bmi.n	801df2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801de8e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801de92:	4544      	cmp	r4, r8
 801de94:	dd49      	ble.n	801df2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801de96:	9c04      	ldr	r4, [sp, #16]
 801de98:	b236      	sxth	r6, r6
 801de9a:	f06f 0001 	mvn.w	r0, #1
 801de9e:	fb08 4606 	mla	r6, r8, r6, r4
 801dea2:	9c01      	ldr	r4, [sp, #4]
 801dea4:	fb00 fa0e 	mul.w	sl, r0, lr
 801dea8:	9800      	ldr	r0, [sp, #0]
 801deaa:	f816 8007 	ldrb.w	r8, [r6, r7]
 801deae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801deb2:	eb04 0b08 	add.w	fp, r4, r8
 801deb6:	f830 400a 	ldrh.w	r4, [r0, sl]
 801deba:	9801      	ldr	r0, [sp, #4]
 801debc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801dec0:	1227      	asrs	r7, r4, #8
 801dec2:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dec6:	fb16 f609 	smulbb	r6, r6, r9
 801deca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dece:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ded2:	fb1b fb09 	smulbb	fp, fp, r9
 801ded6:	fb07 6705 	mla	r7, r7, r5, r6
 801deda:	10e6      	asrs	r6, r4, #3
 801dedc:	00e4      	lsls	r4, r4, #3
 801dede:	9800      	ldr	r0, [sp, #0]
 801dee0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dee4:	b2bf      	uxth	r7, r7
 801dee6:	b2e4      	uxtb	r4, r4
 801dee8:	fb06 b605 	mla	r6, r6, r5, fp
 801deec:	fb14 f405 	smulbb	r4, r4, r5
 801def0:	b2b6      	uxth	r6, r6
 801def2:	fb08 4809 	mla	r8, r8, r9, r4
 801def6:	1c7c      	adds	r4, r7, #1
 801def8:	f106 0b01 	add.w	fp, r6, #1
 801defc:	fa1f f888 	uxth.w	r8, r8
 801df00:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801df04:	f108 0401 	add.w	r4, r8, #1
 801df08:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801df0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801df10:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801df14:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801df18:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801df1c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801df20:	4327      	orrs	r7, r4
 801df22:	ea47 070b 	orr.w	r7, r7, fp
 801df26:	f820 700a 	strh.w	r7, [r0, sl]
 801df2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801df2c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801df30:	4401      	add	r1, r0
 801df32:	9814      	ldr	r0, [sp, #80]	; 0x50
 801df34:	4402      	add	r2, r0
 801df36:	e759      	b.n	801ddec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801df38:	b007      	add	sp, #28
 801df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801df40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df44:	b085      	sub	sp, #20
 801df46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df4a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801df4c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801df4e:	9203      	str	r2, [sp, #12]
 801df50:	6870      	ldr	r0, [r6, #4]
 801df52:	686f      	ldr	r7, [r5, #4]
 801df54:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801df58:	3704      	adds	r7, #4
 801df5a:	9101      	str	r1, [sp, #4]
 801df5c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801df60:	fb00 2404 	mla	r4, r0, r4, r2
 801df64:	6832      	ldr	r2, [r6, #0]
 801df66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801df6a:	682a      	ldr	r2, [r5, #0]
 801df6c:	9202      	str	r2, [sp, #8]
 801df6e:	9a01      	ldr	r2, [sp, #4]
 801df70:	2a00      	cmp	r2, #0
 801df72:	dc03      	bgt.n	801df7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801df74:	9a03      	ldr	r2, [sp, #12]
 801df76:	2a00      	cmp	r2, #0
 801df78:	f340 80cc 	ble.w	801e114 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801df7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801df82:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801df86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801df88:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801df8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801df90:	2b00      	cmp	r3, #0
 801df92:	dd0d      	ble.n	801dfb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801df94:	1406      	asrs	r6, r0, #16
 801df96:	d405      	bmi.n	801dfa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801df98:	454e      	cmp	r6, r9
 801df9a:	da03      	bge.n	801dfa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801df9c:	1416      	asrs	r6, r2, #16
 801df9e:	d401      	bmi.n	801dfa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dfa0:	4546      	cmp	r6, r8
 801dfa2:	db06      	blt.n	801dfb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfa4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dfa6:	4460      	add	r0, ip
 801dfa8:	3b01      	subs	r3, #1
 801dfaa:	3402      	adds	r4, #2
 801dfac:	4432      	add	r2, r6
 801dfae:	e7ef      	b.n	801df90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801dfb0:	d00f      	beq.n	801dfd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dfb2:	1e5e      	subs	r6, r3, #1
 801dfb4:	fb0c 0e06 	mla	lr, ip, r6, r0
 801dfb8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801dfbc:	d543      	bpl.n	801e046 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801dfbe:	4698      	mov	r8, r3
 801dfc0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801dfc4:	f1b8 0f00 	cmp.w	r8, #0
 801dfc8:	dc71      	bgt.n	801e0ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801dfca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dfce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dfd2:	9b01      	ldr	r3, [sp, #4]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	f340 809d 	ble.w	801e114 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801dfda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfe0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfe4:	eeb0 6a62 	vmov.f32	s12, s5
 801dfe8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dfec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dff0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dff4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dff8:	eeb0 6a43 	vmov.f32	s12, s6
 801dffc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e000:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e004:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e008:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e00c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e010:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e014:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e018:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e01c:	ee12 2a90 	vmov	r2, s5
 801e020:	eef0 2a47 	vmov.f32	s5, s14
 801e024:	fb92 fcf3 	sdiv	ip, r2, r3
 801e028:	ee13 2a10 	vmov	r2, s6
 801e02c:	eeb0 3a67 	vmov.f32	s6, s15
 801e030:	fb92 f3f3 	sdiv	r3, r2, r3
 801e034:	9312      	str	r3, [sp, #72]	; 0x48
 801e036:	9b01      	ldr	r3, [sp, #4]
 801e038:	9a03      	ldr	r2, [sp, #12]
 801e03a:	3b01      	subs	r3, #1
 801e03c:	9301      	str	r3, [sp, #4]
 801e03e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e040:	bf08      	it	eq
 801e042:	4613      	moveq	r3, r2
 801e044:	e793      	b.n	801df6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e046:	45ce      	cmp	lr, r9
 801e048:	dab9      	bge.n	801dfbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e04a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e04c:	fb01 2606 	mla	r6, r1, r6, r2
 801e050:	1436      	asrs	r6, r6, #16
 801e052:	d4b4      	bmi.n	801dfbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e054:	4546      	cmp	r6, r8
 801e056:	dab2      	bge.n	801dfbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e058:	4698      	mov	r8, r3
 801e05a:	46a2      	mov	sl, r4
 801e05c:	f1b8 0f00 	cmp.w	r8, #0
 801e060:	ddb3      	ble.n	801dfca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e062:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e066:	1416      	asrs	r6, r2, #16
 801e068:	9902      	ldr	r1, [sp, #8]
 801e06a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e06e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e072:	4460      	add	r0, ip
 801e074:	fb09 1606 	mla	r6, r9, r6, r1
 801e078:	4928      	ldr	r1, [pc, #160]	; (801e11c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e07a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e07e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e082:	eb07 0b0e 	add.w	fp, r7, lr
 801e086:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e08a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e08e:	00f6      	lsls	r6, r6, #3
 801e090:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e094:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e096:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e09a:	440a      	add	r2, r1
 801e09c:	ea49 0606 	orr.w	r6, r9, r6
 801e0a0:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e0a4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e0a8:	f82a 6b02 	strh.w	r6, [sl], #2
 801e0ac:	e7d6      	b.n	801e05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e0ae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e0b2:	d429      	bmi.n	801e108 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e0b4:	68ae      	ldr	r6, [r5, #8]
 801e0b6:	454e      	cmp	r6, r9
 801e0b8:	dd26      	ble.n	801e108 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e0ba:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e0be:	d423      	bmi.n	801e108 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e0c0:	68e9      	ldr	r1, [r5, #12]
 801e0c2:	4559      	cmp	r1, fp
 801e0c4:	dd20      	ble.n	801e108 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e0c6:	fa0f fe86 	sxth.w	lr, r6
 801e0ca:	9902      	ldr	r1, [sp, #8]
 801e0cc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e0d0:	f06f 0101 	mvn.w	r1, #1
 801e0d4:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e0d8:	fb01 f908 	mul.w	r9, r1, r8
 801e0dc:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e0e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e0e4:	eb07 060e 	add.w	r6, r7, lr
 801e0e8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e0ec:	7876      	ldrb	r6, [r6, #1]
 801e0ee:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e0f2:	00f6      	lsls	r6, r6, #3
 801e0f4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e0f8:	ea4b 0606 	orr.w	r6, fp, r6
 801e0fc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e100:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e104:	f82a 6009 	strh.w	r6, [sl, r9]
 801e108:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e10a:	4460      	add	r0, ip
 801e10c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e110:	440a      	add	r2, r1
 801e112:	e757      	b.n	801dfc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e114:	b005      	add	sp, #20
 801e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11a:	bf00      	nop
 801e11c:	fffff800 	.word	0xfffff800

0801e120 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e124:	b087      	sub	sp, #28
 801e126:	468b      	mov	fp, r1
 801e128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e12c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e12e:	9204      	str	r2, [sp, #16]
 801e130:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e134:	6841      	ldr	r1, [r0, #4]
 801e136:	9205      	str	r2, [sp, #20]
 801e138:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e13c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e140:	fb01 2404 	mla	r4, r1, r4, r2
 801e144:	6802      	ldr	r2, [r0, #0]
 801e146:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e14a:	f8dc 2000 	ldr.w	r2, [ip]
 801e14e:	9201      	str	r2, [sp, #4]
 801e150:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e154:	3204      	adds	r2, #4
 801e156:	9202      	str	r2, [sp, #8]
 801e158:	f1bb 0f00 	cmp.w	fp, #0
 801e15c:	dc03      	bgt.n	801e166 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e15e:	9a04      	ldr	r2, [sp, #16]
 801e160:	2a00      	cmp	r2, #0
 801e162:	f340 8138 	ble.w	801e3d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e166:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e168:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e16c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e172:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e176:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	dd0e      	ble.n	801e19c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e17e:	1402      	asrs	r2, r0, #16
 801e180:	d405      	bmi.n	801e18e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e182:	42ba      	cmp	r2, r7
 801e184:	da03      	bge.n	801e18e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e186:	140a      	asrs	r2, r1, #16
 801e188:	d401      	bmi.n	801e18e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e18a:	42b2      	cmp	r2, r6
 801e18c:	db07      	blt.n	801e19e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e18e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e190:	3b01      	subs	r3, #1
 801e192:	3402      	adds	r4, #2
 801e194:	4410      	add	r0, r2
 801e196:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e198:	4411      	add	r1, r2
 801e19a:	e7ee      	b.n	801e17a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e19c:	d019      	beq.n	801e1d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e19e:	1e5a      	subs	r2, r3, #1
 801e1a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e1a2:	fb05 0502 	mla	r5, r5, r2, r0
 801e1a6:	142d      	asrs	r5, r5, #16
 801e1a8:	d409      	bmi.n	801e1be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e1aa:	42bd      	cmp	r5, r7
 801e1ac:	da07      	bge.n	801e1be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e1ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e1b0:	fb05 1202 	mla	r2, r5, r2, r1
 801e1b4:	1412      	asrs	r2, r2, #16
 801e1b6:	d402      	bmi.n	801e1be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e1b8:	42b2      	cmp	r2, r6
 801e1ba:	f2c0 80ac 	blt.w	801e316 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e1be:	f04f 0e00 	mov.w	lr, #0
 801e1c2:	eb03 020e 	add.w	r2, r3, lr
 801e1c6:	2a00      	cmp	r2, #0
 801e1c8:	dc3e      	bgt.n	801e248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e1ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e1d2:	f1bb 0f00 	cmp.w	fp, #0
 801e1d6:	f340 80fe 	ble.w	801e3d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e1da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e1e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1e4:	f1bb 0b01 	subs.w	fp, fp, #1
 801e1e8:	eeb0 6a62 	vmov.f32	s12, s5
 801e1ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e1f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1f8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e1fc:	eeb0 6a43 	vmov.f32	s12, s6
 801e200:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e204:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e208:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e20c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e210:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e214:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e218:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e21c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e220:	ee12 2a90 	vmov	r2, s5
 801e224:	eef0 2a47 	vmov.f32	s5, s14
 801e228:	fb92 f3f3 	sdiv	r3, r2, r3
 801e22c:	ee13 2a10 	vmov	r2, s6
 801e230:	9313      	str	r3, [sp, #76]	; 0x4c
 801e232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e234:	eeb0 3a67 	vmov.f32	s6, s15
 801e238:	fb92 f3f3 	sdiv	r3, r2, r3
 801e23c:	9a04      	ldr	r2, [sp, #16]
 801e23e:	9314      	str	r3, [sp, #80]	; 0x50
 801e240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e242:	bf08      	it	eq
 801e244:	4613      	moveq	r3, r2
 801e246:	e787      	b.n	801e158 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e248:	1406      	asrs	r6, r0, #16
 801e24a:	d45d      	bmi.n	801e308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e24c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801e250:	42b5      	cmp	r5, r6
 801e252:	dd59      	ble.n	801e308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e254:	140f      	asrs	r7, r1, #16
 801e256:	d457      	bmi.n	801e308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e258:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e25c:	42ba      	cmp	r2, r7
 801e25e:	dd53      	ble.n	801e308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e260:	9a01      	ldr	r2, [sp, #4]
 801e262:	b22d      	sxth	r5, r5
 801e264:	fb07 2505 	mla	r5, r7, r5, r2
 801e268:	5daa      	ldrb	r2, [r5, r6]
 801e26a:	9d02      	ldr	r5, [sp, #8]
 801e26c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e270:	0e2e      	lsrs	r6, r5, #24
 801e272:	d049      	beq.n	801e308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e274:	f06f 0201 	mvn.w	r2, #1
 801e278:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e27c:	fb02 f20e 	mul.w	r2, r2, lr
 801e280:	f834 8002 	ldrh.w	r8, [r4, r2]
 801e284:	9203      	str	r2, [sp, #12]
 801e286:	9a05      	ldr	r2, [sp, #20]
 801e288:	ea4f 2728 	mov.w	r7, r8, asr #8
 801e28c:	4356      	muls	r6, r2
 801e28e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e292:	1c72      	adds	r2, r6, #1
 801e294:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e298:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e29c:	b2ed      	uxtb	r5, r5
 801e29e:	1212      	asrs	r2, r2, #8
 801e2a0:	fa1f f982 	uxth.w	r9, r2
 801e2a4:	43d2      	mvns	r2, r2
 801e2a6:	fb16 f609 	smulbb	r6, r6, r9
 801e2aa:	b2d2      	uxtb	r2, r2
 801e2ac:	fb15 f509 	smulbb	r5, r5, r9
 801e2b0:	fb07 6702 	mla	r7, r7, r2, r6
 801e2b4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e2b8:	fb1a fa09 	smulbb	sl, sl, r9
 801e2bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e2c0:	b2bf      	uxth	r7, r7
 801e2c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e2c6:	fa5f f888 	uxtb.w	r8, r8
 801e2ca:	fb06 a602 	mla	r6, r6, r2, sl
 801e2ce:	fb08 5502 	mla	r5, r8, r2, r5
 801e2d2:	1c7a      	adds	r2, r7, #1
 801e2d4:	b2b6      	uxth	r6, r6
 801e2d6:	b2ad      	uxth	r5, r5
 801e2d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e2dc:	9a03      	ldr	r2, [sp, #12]
 801e2de:	f105 0a01 	add.w	sl, r5, #1
 801e2e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e2e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e2ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e2ee:	ea47 070a 	orr.w	r7, r7, sl
 801e2f2:	f106 0a01 	add.w	sl, r6, #1
 801e2f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e2fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e2fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e302:	ea47 070a 	orr.w	r7, r7, sl
 801e306:	52a7      	strh	r7, [r4, r2]
 801e308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e30a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e30e:	4410      	add	r0, r2
 801e310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e312:	4411      	add	r1, r2
 801e314:	e755      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e316:	f04f 0800 	mov.w	r8, #0
 801e31a:	eba3 0208 	sub.w	r2, r3, r8
 801e31e:	2a00      	cmp	r2, #0
 801e320:	f77f af53 	ble.w	801e1ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e324:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801e328:	140a      	asrs	r2, r1, #16
 801e32a:	9f01      	ldr	r7, [sp, #4]
 801e32c:	1405      	asrs	r5, r0, #16
 801e32e:	fb06 7202 	mla	r2, r6, r2, r7
 801e332:	5d52      	ldrb	r2, [r2, r5]
 801e334:	9d02      	ldr	r5, [sp, #8]
 801e336:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e33a:	0e2e      	lsrs	r6, r5, #24
 801e33c:	d044      	beq.n	801e3c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e33e:	9a05      	ldr	r2, [sp, #20]
 801e340:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e344:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e348:	4356      	muls	r6, r2
 801e34a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e34e:	1c72      	adds	r2, r6, #1
 801e350:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e354:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e358:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e35c:	b2ed      	uxtb	r5, r5
 801e35e:	1212      	asrs	r2, r2, #8
 801e360:	fa1f f982 	uxth.w	r9, r2
 801e364:	43d2      	mvns	r2, r2
 801e366:	fb16 f609 	smulbb	r6, r6, r9
 801e36a:	b2d2      	uxtb	r2, r2
 801e36c:	fb15 f509 	smulbb	r5, r5, r9
 801e370:	fb07 6702 	mla	r7, r7, r2, r6
 801e374:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e378:	fb1a fa09 	smulbb	sl, sl, r9
 801e37c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e380:	b2bf      	uxth	r7, r7
 801e382:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e386:	fa5f fe8e 	uxtb.w	lr, lr
 801e38a:	fb06 a602 	mla	r6, r6, r2, sl
 801e38e:	fb0e 5502 	mla	r5, lr, r2, r5
 801e392:	1c7a      	adds	r2, r7, #1
 801e394:	b2b6      	uxth	r6, r6
 801e396:	b2ad      	uxth	r5, r5
 801e398:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e39c:	f105 0a01 	add.w	sl, r5, #1
 801e3a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e3a4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e3a8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e3ac:	ea47 070a 	orr.w	r7, r7, sl
 801e3b0:	f106 0a01 	add.w	sl, r6, #1
 801e3b4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e3b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e3bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e3c0:	ea47 070a 	orr.w	r7, r7, sl
 801e3c4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e3c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e3ca:	f108 0801 	add.w	r8, r8, #1
 801e3ce:	4410      	add	r0, r2
 801e3d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e3d2:	4411      	add	r1, r2
 801e3d4:	e7a1      	b.n	801e31a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e3d6:	b007      	add	sp, #28
 801e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e0:	b085      	sub	sp, #20
 801e3e2:	468b      	mov	fp, r1
 801e3e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e3ea:	9203      	str	r2, [sp, #12]
 801e3ec:	6841      	ldr	r1, [r0, #4]
 801e3ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e3f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e3f6:	fb01 2404 	mla	r4, r1, r4, r2
 801e3fa:	6802      	ldr	r2, [r0, #0]
 801e3fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e400:	f8de 2000 	ldr.w	r2, [lr]
 801e404:	9200      	str	r2, [sp, #0]
 801e406:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e40a:	3204      	adds	r2, #4
 801e40c:	9201      	str	r2, [sp, #4]
 801e40e:	f1bb 0f00 	cmp.w	fp, #0
 801e412:	dc03      	bgt.n	801e41c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e414:	9a03      	ldr	r2, [sp, #12]
 801e416:	2a00      	cmp	r2, #0
 801e418:	f340 8153 	ble.w	801e6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e41c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e41e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e422:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e426:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e428:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e42c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e430:	2b00      	cmp	r3, #0
 801e432:	dd0e      	ble.n	801e452 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e434:	1408      	asrs	r0, r1, #16
 801e436:	d405      	bmi.n	801e444 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e438:	42b8      	cmp	r0, r7
 801e43a:	da03      	bge.n	801e444 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e43c:	1410      	asrs	r0, r2, #16
 801e43e:	d401      	bmi.n	801e444 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e440:	42b0      	cmp	r0, r6
 801e442:	db07      	blt.n	801e454 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e444:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e446:	3b01      	subs	r3, #1
 801e448:	3402      	adds	r4, #2
 801e44a:	4401      	add	r1, r0
 801e44c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e44e:	4402      	add	r2, r0
 801e450:	e7ee      	b.n	801e430 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e452:	d017      	beq.n	801e484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e454:	1e58      	subs	r0, r3, #1
 801e456:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e458:	fb05 1500 	mla	r5, r5, r0, r1
 801e45c:	142d      	asrs	r5, r5, #16
 801e45e:	d409      	bmi.n	801e474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e460:	42bd      	cmp	r5, r7
 801e462:	da07      	bge.n	801e474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e464:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e466:	fb05 2000 	mla	r0, r5, r0, r2
 801e46a:	1400      	asrs	r0, r0, #16
 801e46c:	d402      	bmi.n	801e474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e46e:	42b0      	cmp	r0, r6
 801e470:	f2c0 80bc 	blt.w	801e5ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e474:	2600      	movs	r6, #0
 801e476:	1998      	adds	r0, r3, r6
 801e478:	2800      	cmp	r0, #0
 801e47a:	dc3e      	bgt.n	801e4fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e47c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e480:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e484:	f1bb 0f00 	cmp.w	fp, #0
 801e488:	f340 811b 	ble.w	801e6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e48c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e492:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e496:	f1bb 0b01 	subs.w	fp, fp, #1
 801e49a:	eeb0 6a62 	vmov.f32	s12, s5
 801e49e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e4a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e4aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e4ae:	eeb0 6a43 	vmov.f32	s12, s6
 801e4b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e4b6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e4ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4d2:	ee12 2a90 	vmov	r2, s5
 801e4d6:	eef0 2a47 	vmov.f32	s5, s14
 801e4da:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4de:	ee13 2a10 	vmov	r2, s6
 801e4e2:	9311      	str	r3, [sp, #68]	; 0x44
 801e4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4e6:	eeb0 3a67 	vmov.f32	s6, s15
 801e4ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4ee:	9a03      	ldr	r2, [sp, #12]
 801e4f0:	9312      	str	r3, [sp, #72]	; 0x48
 801e4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4f4:	bf08      	it	eq
 801e4f6:	4613      	moveq	r3, r2
 801e4f8:	e789      	b.n	801e40e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e4fa:	140f      	asrs	r7, r1, #16
 801e4fc:	d45e      	bmi.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e4fe:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e502:	42bd      	cmp	r5, r7
 801e504:	dd5a      	ble.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e506:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e50a:	d457      	bmi.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e50c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e510:	4560      	cmp	r0, ip
 801e512:	dd53      	ble.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e514:	9800      	ldr	r0, [sp, #0]
 801e516:	b22d      	sxth	r5, r5
 801e518:	fb0c 0505 	mla	r5, ip, r5, r0
 801e51c:	5de8      	ldrb	r0, [r5, r7]
 801e51e:	9d01      	ldr	r5, [sp, #4]
 801e520:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e524:	0e07      	lsrs	r7, r0, #24
 801e526:	2fff      	cmp	r7, #255	; 0xff
 801e528:	d04e      	beq.n	801e5c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e52a:	b2fd      	uxtb	r5, r7
 801e52c:	2f00      	cmp	r7, #0
 801e52e:	d045      	beq.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e530:	f06f 0701 	mvn.w	r7, #1
 801e534:	fa1f f985 	uxth.w	r9, r5
 801e538:	43ed      	mvns	r5, r5
 801e53a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e53e:	4377      	muls	r7, r6
 801e540:	fb1a fa09 	smulbb	sl, sl, r9
 801e544:	b2ed      	uxtb	r5, r5
 801e546:	f834 8007 	ldrh.w	r8, [r4, r7]
 801e54a:	9702      	str	r7, [sp, #8]
 801e54c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e550:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e554:	fb17 f709 	smulbb	r7, r7, r9
 801e558:	b2c0      	uxtb	r0, r0
 801e55a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e55e:	fb10 f009 	smulbb	r0, r0, r9
 801e562:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e566:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801e56a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e56e:	fa1f fc8c 	uxth.w	ip, ip
 801e572:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e576:	fa5f f888 	uxtb.w	r8, r8
 801e57a:	fb07 a705 	mla	r7, r7, r5, sl
 801e57e:	fb08 0005 	mla	r0, r8, r5, r0
 801e582:	f10c 0501 	add.w	r5, ip, #1
 801e586:	b2bf      	uxth	r7, r7
 801e588:	b280      	uxth	r0, r0
 801e58a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e58e:	f100 0a01 	add.w	sl, r0, #1
 801e592:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e596:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e59a:	9802      	ldr	r0, [sp, #8]
 801e59c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e5a0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e5a4:	f107 0a01 	add.w	sl, r7, #1
 801e5a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e5ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e5b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e5b4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e5b8:	f824 c000 	strh.w	ip, [r4, r0]
 801e5bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e5be:	3e01      	subs	r6, #1
 801e5c0:	4401      	add	r1, r0
 801e5c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e5c4:	4402      	add	r2, r0
 801e5c6:	e756      	b.n	801e476 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e5c8:	f06f 0501 	mvn.w	r5, #1
 801e5cc:	fb05 f706 	mul.w	r7, r5, r6
 801e5d0:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801e5d4:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e5d8:	0945      	lsrs	r5, r0, #5
 801e5da:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e5de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e5e2:	ea4c 0505 	orr.w	r5, ip, r5
 801e5e6:	4305      	orrs	r5, r0
 801e5e8:	53e5      	strh	r5, [r4, r7]
 801e5ea:	e7e7      	b.n	801e5bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e5ec:	f04f 0800 	mov.w	r8, #0
 801e5f0:	eba3 0008 	sub.w	r0, r3, r8
 801e5f4:	2800      	cmp	r0, #0
 801e5f6:	f77f af41 	ble.w	801e47c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e5fa:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e5fe:	1410      	asrs	r0, r2, #16
 801e600:	9f00      	ldr	r7, [sp, #0]
 801e602:	140d      	asrs	r5, r1, #16
 801e604:	fb06 7000 	mla	r0, r6, r0, r7
 801e608:	5d40      	ldrb	r0, [r0, r5]
 801e60a:	9d01      	ldr	r5, [sp, #4]
 801e60c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e610:	0e06      	lsrs	r6, r0, #24
 801e612:	2eff      	cmp	r6, #255	; 0xff
 801e614:	d048      	beq.n	801e6a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801e616:	b2f5      	uxtb	r5, r6
 801e618:	2e00      	cmp	r6, #0
 801e61a:	d03e      	beq.n	801e69a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e61c:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801e620:	fa1f f985 	uxth.w	r9, r5
 801e624:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801e628:	43ed      	mvns	r5, r5
 801e62a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e62e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e632:	fb16 f609 	smulbb	r6, r6, r9
 801e636:	b2ed      	uxtb	r5, r5
 801e638:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e63c:	b2c0      	uxtb	r0, r0
 801e63e:	fb1a fa09 	smulbb	sl, sl, r9
 801e642:	fb07 6705 	mla	r7, r7, r5, r6
 801e646:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e64a:	fb10 f009 	smulbb	r0, r0, r9
 801e64e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e652:	b2bf      	uxth	r7, r7
 801e654:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e658:	fa5f fc8c 	uxtb.w	ip, ip
 801e65c:	fb06 a605 	mla	r6, r6, r5, sl
 801e660:	fb0c 0005 	mla	r0, ip, r5, r0
 801e664:	1c7d      	adds	r5, r7, #1
 801e666:	b2b6      	uxth	r6, r6
 801e668:	b280      	uxth	r0, r0
 801e66a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801e66e:	f100 0a01 	add.w	sl, r0, #1
 801e672:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e676:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e67a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e67e:	ea47 070a 	orr.w	r7, r7, sl
 801e682:	f106 0a01 	add.w	sl, r6, #1
 801e686:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e68a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e68e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e692:	ea47 070a 	orr.w	r7, r7, sl
 801e696:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e69a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e69c:	f108 0801 	add.w	r8, r8, #1
 801e6a0:	4401      	add	r1, r0
 801e6a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e6a4:	4402      	add	r2, r0
 801e6a6:	e7a3      	b.n	801e5f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e6a8:	4d07      	ldr	r5, [pc, #28]	; (801e6c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801e6aa:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801e6ae:	0945      	lsrs	r5, r0, #5
 801e6b0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e6b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e6b8:	4335      	orrs	r5, r6
 801e6ba:	4305      	orrs	r5, r0
 801e6bc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801e6c0:	e7eb      	b.n	801e69a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e6c2:	b005      	add	sp, #20
 801e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6c8:	fffff800 	.word	0xfffff800

0801e6cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d0:	b087      	sub	sp, #28
 801e6d2:	468b      	mov	fp, r1
 801e6d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e6d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e6da:	9204      	str	r2, [sp, #16]
 801e6dc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e6e0:	6861      	ldr	r1, [r4, #4]
 801e6e2:	9205      	str	r2, [sp, #20]
 801e6e4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e6e8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e6ec:	fb01 2000 	mla	r0, r1, r0, r2
 801e6f0:	6822      	ldr	r2, [r4, #0]
 801e6f2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e6f6:	f8de 2000 	ldr.w	r2, [lr]
 801e6fa:	9201      	str	r2, [sp, #4]
 801e6fc:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e700:	9202      	str	r2, [sp, #8]
 801e702:	f1bb 0f00 	cmp.w	fp, #0
 801e706:	dc03      	bgt.n	801e710 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e708:	9a04      	ldr	r2, [sp, #16]
 801e70a:	2a00      	cmp	r2, #0
 801e70c:	f340 8142 	ble.w	801e994 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e710:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e712:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e716:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e71c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e720:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e724:	2b00      	cmp	r3, #0
 801e726:	dd0e      	ble.n	801e746 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e728:	140c      	asrs	r4, r1, #16
 801e72a:	d405      	bmi.n	801e738 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e72c:	42bc      	cmp	r4, r7
 801e72e:	da03      	bge.n	801e738 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e730:	1414      	asrs	r4, r2, #16
 801e732:	d401      	bmi.n	801e738 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e734:	42b4      	cmp	r4, r6
 801e736:	db07      	blt.n	801e748 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e73a:	3b01      	subs	r3, #1
 801e73c:	3002      	adds	r0, #2
 801e73e:	4421      	add	r1, r4
 801e740:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e742:	4422      	add	r2, r4
 801e744:	e7ee      	b.n	801e724 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e746:	d019      	beq.n	801e77c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e748:	1e5c      	subs	r4, r3, #1
 801e74a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e74c:	fb05 1504 	mla	r5, r5, r4, r1
 801e750:	142d      	asrs	r5, r5, #16
 801e752:	d409      	bmi.n	801e768 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e754:	42bd      	cmp	r5, r7
 801e756:	da07      	bge.n	801e768 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e758:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e75a:	fb05 2404 	mla	r4, r5, r4, r2
 801e75e:	1424      	asrs	r4, r4, #16
 801e760:	d402      	bmi.n	801e768 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e762:	42b4      	cmp	r4, r6
 801e764:	f2c0 80b1 	blt.w	801e8ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801e768:	f04f 0800 	mov.w	r8, #0
 801e76c:	eb03 0408 	add.w	r4, r3, r8
 801e770:	2c00      	cmp	r4, #0
 801e772:	dc3e      	bgt.n	801e7f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e774:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e778:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e77c:	f1bb 0f00 	cmp.w	fp, #0
 801e780:	f340 8108 	ble.w	801e994 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e784:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e78a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e78e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e792:	eeb0 6a62 	vmov.f32	s12, s5
 801e796:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e79a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e79e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e7a6:	eeb0 6a43 	vmov.f32	s12, s6
 801e7aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7ae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e7b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e7b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7ca:	ee12 2a90 	vmov	r2, s5
 801e7ce:	eef0 2a47 	vmov.f32	s5, s14
 801e7d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7d6:	ee13 2a10 	vmov	r2, s6
 801e7da:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7de:	eeb0 3a67 	vmov.f32	s6, s15
 801e7e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7e6:	9a04      	ldr	r2, [sp, #16]
 801e7e8:	9314      	str	r3, [sp, #80]	; 0x50
 801e7ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7ec:	bf08      	it	eq
 801e7ee:	4613      	moveq	r3, r2
 801e7f0:	e787      	b.n	801e702 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e7f2:	140e      	asrs	r6, r1, #16
 801e7f4:	d462      	bmi.n	801e8bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e7f6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e7fa:	42b5      	cmp	r5, r6
 801e7fc:	dd5e      	ble.n	801e8bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e7fe:	1417      	asrs	r7, r2, #16
 801e800:	d45c      	bmi.n	801e8bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e802:	f8de 400c 	ldr.w	r4, [lr, #12]
 801e806:	42bc      	cmp	r4, r7
 801e808:	dd58      	ble.n	801e8bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e80a:	b22d      	sxth	r5, r5
 801e80c:	9c02      	ldr	r4, [sp, #8]
 801e80e:	fb07 6505 	mla	r5, r7, r5, r6
 801e812:	5d66      	ldrb	r6, [r4, r5]
 801e814:	2e00      	cmp	r6, #0
 801e816:	d051      	beq.n	801e8bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e818:	9c01      	ldr	r4, [sp, #4]
 801e81a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801e81e:	f06f 0401 	mvn.w	r4, #1
 801e822:	fb04 f408 	mul.w	r4, r4, r8
 801e826:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801e82a:	5b05      	ldrh	r5, [r0, r4]
 801e82c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e830:	9403      	str	r4, [sp, #12]
 801e832:	9c05      	ldr	r4, [sp, #20]
 801e834:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e838:	4366      	muls	r6, r4
 801e83a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e83e:	1c74      	adds	r4, r6, #1
 801e840:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e844:	122e      	asrs	r6, r5, #8
 801e846:	1224      	asrs	r4, r4, #8
 801e848:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e84c:	00ed      	lsls	r5, r5, #3
 801e84e:	b2a7      	uxth	r7, r4
 801e850:	43e4      	mvns	r4, r4
 801e852:	b2ed      	uxtb	r5, r5
 801e854:	b2e4      	uxtb	r4, r4
 801e856:	fb16 f604 	smulbb	r6, r6, r4
 801e85a:	fb15 f504 	smulbb	r5, r5, r4
 801e85e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e862:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801e866:	fb1a fa04 	smulbb	sl, sl, r4
 801e86a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e86e:	fa1f fc8c 	uxth.w	ip, ip
 801e872:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e876:	fa5f f989 	uxtb.w	r9, r9
 801e87a:	fb06 a607 	mla	r6, r6, r7, sl
 801e87e:	f10c 0401 	add.w	r4, ip, #1
 801e882:	fb09 5507 	mla	r5, r9, r7, r5
 801e886:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e88a:	9c03      	ldr	r4, [sp, #12]
 801e88c:	b2ad      	uxth	r5, r5
 801e88e:	b2b6      	uxth	r6, r6
 801e890:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e894:	f105 0a01 	add.w	sl, r5, #1
 801e898:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e89c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e8a0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e8a4:	f106 0a01 	add.w	sl, r6, #1
 801e8a8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e8ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e8b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e8b4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e8b8:	f820 c004 	strh.w	ip, [r0, r4]
 801e8bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e8be:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8c2:	4421      	add	r1, r4
 801e8c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e8c6:	4422      	add	r2, r4
 801e8c8:	e750      	b.n	801e76c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e8ca:	f04f 0900 	mov.w	r9, #0
 801e8ce:	eba3 0409 	sub.w	r4, r3, r9
 801e8d2:	2c00      	cmp	r4, #0
 801e8d4:	f77f af4e 	ble.w	801e774 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e8d8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e8dc:	140d      	asrs	r5, r1, #16
 801e8de:	1414      	asrs	r4, r2, #16
 801e8e0:	fb06 5404 	mla	r4, r6, r4, r5
 801e8e4:	9d02      	ldr	r5, [sp, #8]
 801e8e6:	5d2e      	ldrb	r6, [r5, r4]
 801e8e8:	2e00      	cmp	r6, #0
 801e8ea:	d04c      	beq.n	801e986 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e8ec:	9d01      	ldr	r5, [sp, #4]
 801e8ee:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e8f2:	9c05      	ldr	r4, [sp, #20]
 801e8f4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e8f8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e8fc:	4366      	muls	r6, r4
 801e8fe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e902:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e906:	1c74      	adds	r4, r6, #1
 801e908:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e90c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e910:	122e      	asrs	r6, r5, #8
 801e912:	1224      	asrs	r4, r4, #8
 801e914:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e918:	00ed      	lsls	r5, r5, #3
 801e91a:	b2a7      	uxth	r7, r4
 801e91c:	43e4      	mvns	r4, r4
 801e91e:	b2ed      	uxtb	r5, r5
 801e920:	b2e4      	uxtb	r4, r4
 801e922:	fb16 f604 	smulbb	r6, r6, r4
 801e926:	fb15 f504 	smulbb	r5, r5, r4
 801e92a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e92e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e932:	fb1a fa04 	smulbb	sl, sl, r4
 801e936:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e93a:	fa1f fc8c 	uxth.w	ip, ip
 801e93e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e942:	fa5f f888 	uxtb.w	r8, r8
 801e946:	fb06 a607 	mla	r6, r6, r7, sl
 801e94a:	f10c 0401 	add.w	r4, ip, #1
 801e94e:	fb08 5507 	mla	r5, r8, r7, r5
 801e952:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e956:	b2ad      	uxth	r5, r5
 801e958:	b2b6      	uxth	r6, r6
 801e95a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e95e:	f105 0a01 	add.w	sl, r5, #1
 801e962:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e966:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e96a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e96e:	f106 0a01 	add.w	sl, r6, #1
 801e972:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e976:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e97a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e97e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e982:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e986:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e988:	f109 0901 	add.w	r9, r9, #1
 801e98c:	4421      	add	r1, r4
 801e98e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e990:	4422      	add	r2, r4
 801e992:	e79c      	b.n	801e8ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e994:	b007      	add	sp, #28
 801e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e99a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e99a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e99e:	b085      	sub	sp, #20
 801e9a0:	468b      	mov	fp, r1
 801e9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e9a8:	9203      	str	r2, [sp, #12]
 801e9aa:	6861      	ldr	r1, [r4, #4]
 801e9ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e9b0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801e9b4:	fb01 2000 	mla	r0, r1, r0, r2
 801e9b8:	6822      	ldr	r2, [r4, #0]
 801e9ba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e9be:	f8d8 2000 	ldr.w	r2, [r8]
 801e9c2:	9200      	str	r2, [sp, #0]
 801e9c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e9c8:	9201      	str	r2, [sp, #4]
 801e9ca:	f1bb 0f00 	cmp.w	fp, #0
 801e9ce:	dc03      	bgt.n	801e9d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e9d0:	9a03      	ldr	r2, [sp, #12]
 801e9d2:	2a00      	cmp	r2, #0
 801e9d4:	f340 8146 	ble.w	801ec64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9da:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e9de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e9e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9e4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e9e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	dd0e      	ble.n	801ea0e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e9f0:	140c      	asrs	r4, r1, #16
 801e9f2:	d405      	bmi.n	801ea00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9f4:	42bc      	cmp	r4, r7
 801e9f6:	da03      	bge.n	801ea00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9f8:	1414      	asrs	r4, r2, #16
 801e9fa:	d401      	bmi.n	801ea00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9fc:	42b4      	cmp	r4, r6
 801e9fe:	db07      	blt.n	801ea10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ea00:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea02:	3b01      	subs	r3, #1
 801ea04:	3002      	adds	r0, #2
 801ea06:	4421      	add	r1, r4
 801ea08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea0a:	4422      	add	r2, r4
 801ea0c:	e7ee      	b.n	801e9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ea0e:	d017      	beq.n	801ea40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ea10:	1e5c      	subs	r4, r3, #1
 801ea12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ea14:	fb05 1504 	mla	r5, r5, r4, r1
 801ea18:	142d      	asrs	r5, r5, #16
 801ea1a:	d409      	bmi.n	801ea30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ea1c:	42bd      	cmp	r5, r7
 801ea1e:	da07      	bge.n	801ea30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ea20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ea22:	fb05 2404 	mla	r4, r5, r4, r2
 801ea26:	1424      	asrs	r4, r4, #16
 801ea28:	d402      	bmi.n	801ea30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ea2a:	42b4      	cmp	r4, r6
 801ea2c:	f2c0 80b3 	blt.w	801eb96 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ea30:	2600      	movs	r6, #0
 801ea32:	199c      	adds	r4, r3, r6
 801ea34:	2c00      	cmp	r4, #0
 801ea36:	dc3e      	bgt.n	801eab6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ea38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ea40:	f1bb 0f00 	cmp.w	fp, #0
 801ea44:	f340 810e 	ble.w	801ec64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ea48:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea52:	f1bb 0b01 	subs.w	fp, fp, #1
 801ea56:	eeb0 6a62 	vmov.f32	s12, s5
 801ea5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea66:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ea6a:	eeb0 6a43 	vmov.f32	s12, s6
 801ea6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea72:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ea76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea8e:	ee12 2a90 	vmov	r2, s5
 801ea92:	eef0 2a47 	vmov.f32	s5, s14
 801ea96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea9a:	ee13 2a10 	vmov	r2, s6
 801ea9e:	9311      	str	r3, [sp, #68]	; 0x44
 801eaa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaa2:	eeb0 3a67 	vmov.f32	s6, s15
 801eaa6:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaaa:	9a03      	ldr	r2, [sp, #12]
 801eaac:	9312      	str	r3, [sp, #72]	; 0x48
 801eaae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eab0:	bf08      	it	eq
 801eab2:	4613      	moveq	r3, r2
 801eab4:	e789      	b.n	801e9ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801eab6:	140f      	asrs	r7, r1, #16
 801eab8:	d45f      	bmi.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eaba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801eabe:	42bd      	cmp	r5, r7
 801eac0:	dd5b      	ble.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eac2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eac6:	d458      	bmi.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eac8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801eacc:	4564      	cmp	r4, ip
 801eace:	dd54      	ble.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ead0:	b22d      	sxth	r5, r5
 801ead2:	9c01      	ldr	r4, [sp, #4]
 801ead4:	fb0c 7505 	mla	r5, ip, r5, r7
 801ead8:	5d64      	ldrb	r4, [r4, r5]
 801eada:	2cff      	cmp	r4, #255	; 0xff
 801eadc:	d053      	beq.n	801eb86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801eade:	2c00      	cmp	r4, #0
 801eae0:	d04b      	beq.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eae2:	9f00      	ldr	r7, [sp, #0]
 801eae4:	fa1f fc84 	uxth.w	ip, r4
 801eae8:	43e4      	mvns	r4, r4
 801eaea:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801eaee:	f06f 0501 	mvn.w	r5, #1
 801eaf2:	b2e4      	uxtb	r4, r4
 801eaf4:	4375      	muls	r5, r6
 801eaf6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801eafa:	9502      	str	r5, [sp, #8]
 801eafc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801eb00:	5b45      	ldrh	r5, [r0, r5]
 801eb02:	122f      	asrs	r7, r5, #8
 801eb04:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801eb08:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eb0c:	00ed      	lsls	r5, r5, #3
 801eb0e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801eb12:	fb17 f704 	smulbb	r7, r7, r4
 801eb16:	b2ed      	uxtb	r5, r5
 801eb18:	fb1a fa04 	smulbb	sl, sl, r4
 801eb1c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801eb20:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801eb24:	fb15 f504 	smulbb	r5, r5, r4
 801eb28:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801eb2c:	fa1f fe8e 	uxth.w	lr, lr
 801eb30:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eb34:	fa5f f989 	uxtb.w	r9, r9
 801eb38:	fb07 a70c 	mla	r7, r7, ip, sl
 801eb3c:	f10e 0401 	add.w	r4, lr, #1
 801eb40:	fb09 550c 	mla	r5, r9, ip, r5
 801eb44:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801eb48:	9c02      	ldr	r4, [sp, #8]
 801eb4a:	b2ad      	uxth	r5, r5
 801eb4c:	b2bf      	uxth	r7, r7
 801eb4e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801eb52:	f105 0a01 	add.w	sl, r5, #1
 801eb56:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb5a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb5e:	ea4e 0e0a 	orr.w	lr, lr, sl
 801eb62:	f107 0a01 	add.w	sl, r7, #1
 801eb66:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801eb6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb6e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb72:	ea4e 0e0a 	orr.w	lr, lr, sl
 801eb76:	f820 e004 	strh.w	lr, [r0, r4]
 801eb7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eb7c:	3e01      	subs	r6, #1
 801eb7e:	4421      	add	r1, r4
 801eb80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eb82:	4422      	add	r2, r4
 801eb84:	e755      	b.n	801ea32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eb86:	9c00      	ldr	r4, [sp, #0]
 801eb88:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801eb8c:	f06f 0401 	mvn.w	r4, #1
 801eb90:	4374      	muls	r4, r6
 801eb92:	5305      	strh	r5, [r0, r4]
 801eb94:	e7f1      	b.n	801eb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801eb96:	f04f 0900 	mov.w	r9, #0
 801eb9a:	eba3 0409 	sub.w	r4, r3, r9
 801eb9e:	2c00      	cmp	r4, #0
 801eba0:	f77f af4a 	ble.w	801ea38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eba4:	1414      	asrs	r4, r2, #16
 801eba6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ebaa:	140d      	asrs	r5, r1, #16
 801ebac:	fb06 5504 	mla	r5, r6, r4, r5
 801ebb0:	9c01      	ldr	r4, [sp, #4]
 801ebb2:	5d64      	ldrb	r4, [r4, r5]
 801ebb4:	2cff      	cmp	r4, #255	; 0xff
 801ebb6:	d04f      	beq.n	801ec58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801ebb8:	2c00      	cmp	r4, #0
 801ebba:	d046      	beq.n	801ec4a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ebbc:	9e00      	ldr	r6, [sp, #0]
 801ebbe:	b2a7      	uxth	r7, r4
 801ebc0:	43e4      	mvns	r4, r4
 801ebc2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ebc6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ebca:	b2e4      	uxtb	r4, r4
 801ebcc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ebd0:	122e      	asrs	r6, r5, #8
 801ebd2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ebd6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ebda:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ebde:	00ed      	lsls	r5, r5, #3
 801ebe0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ebe4:	fb16 f604 	smulbb	r6, r6, r4
 801ebe8:	b2ed      	uxtb	r5, r5
 801ebea:	fb1a fa04 	smulbb	sl, sl, r4
 801ebee:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ebf2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ebf6:	fb15 f504 	smulbb	r5, r5, r4
 801ebfa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ebfe:	fa1f fc8c 	uxth.w	ip, ip
 801ec02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ec06:	fa5f fe8e 	uxtb.w	lr, lr
 801ec0a:	fb06 a607 	mla	r6, r6, r7, sl
 801ec0e:	f10c 0401 	add.w	r4, ip, #1
 801ec12:	fb0e 5507 	mla	r5, lr, r7, r5
 801ec16:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ec1a:	b2ad      	uxth	r5, r5
 801ec1c:	b2b6      	uxth	r6, r6
 801ec1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ec22:	f105 0a01 	add.w	sl, r5, #1
 801ec26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec2e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ec32:	f106 0a01 	add.w	sl, r6, #1
 801ec36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec42:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ec46:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ec4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ec4c:	f109 0901 	add.w	r9, r9, #1
 801ec50:	4421      	add	r1, r4
 801ec52:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec54:	4422      	add	r2, r4
 801ec56:	e7a0      	b.n	801eb9a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ec58:	9c00      	ldr	r4, [sp, #0]
 801ec5a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ec5e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ec62:	e7f2      	b.n	801ec4a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ec64:	b005      	add	sp, #20
 801ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6e:	b085      	sub	sp, #20
 801ec70:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ec72:	9203      	str	r2, [sp, #12]
 801ec74:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ec78:	9100      	str	r1, [sp, #0]
 801ec7a:	9201      	str	r2, [sp, #4]
 801ec7c:	6841      	ldr	r1, [r0, #4]
 801ec7e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ec82:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ec86:	fb01 2404 	mla	r4, r1, r4, r2
 801ec8a:	6802      	ldr	r2, [r0, #0]
 801ec8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ec90:	f8de 2000 	ldr.w	r2, [lr]
 801ec94:	9202      	str	r2, [sp, #8]
 801ec96:	9a01      	ldr	r2, [sp, #4]
 801ec98:	43d6      	mvns	r6, r2
 801ec9a:	b2f6      	uxtb	r6, r6
 801ec9c:	9a00      	ldr	r2, [sp, #0]
 801ec9e:	2a00      	cmp	r2, #0
 801eca0:	dc03      	bgt.n	801ecaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801eca2:	9a03      	ldr	r2, [sp, #12]
 801eca4:	2a00      	cmp	r2, #0
 801eca6:	f340 8124 	ble.w	801eef2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ecaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ecac:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ecb0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ecb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ecb6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ecba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	dd0e      	ble.n	801ece0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ecc2:	1408      	asrs	r0, r1, #16
 801ecc4:	d405      	bmi.n	801ecd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecc6:	4560      	cmp	r0, ip
 801ecc8:	da03      	bge.n	801ecd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecca:	1410      	asrs	r0, r2, #16
 801eccc:	d401      	bmi.n	801ecd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecce:	42b8      	cmp	r0, r7
 801ecd0:	db07      	blt.n	801ece2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ecd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ecd4:	3b01      	subs	r3, #1
 801ecd6:	3402      	adds	r4, #2
 801ecd8:	4401      	add	r1, r0
 801ecda:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecdc:	4402      	add	r2, r0
 801ecde:	e7ee      	b.n	801ecbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ece0:	d06e      	beq.n	801edc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ece2:	1e58      	subs	r0, r3, #1
 801ece4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ece6:	fb05 1500 	mla	r5, r5, r0, r1
 801ecea:	142d      	asrs	r5, r5, #16
 801ecec:	d45c      	bmi.n	801eda8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ecee:	4565      	cmp	r5, ip
 801ecf0:	da5a      	bge.n	801eda8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ecf2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ecf4:	fb05 2000 	mla	r0, r5, r0, r2
 801ecf8:	1400      	asrs	r0, r0, #16
 801ecfa:	d455      	bmi.n	801eda8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ecfc:	42b8      	cmp	r0, r7
 801ecfe:	da53      	bge.n	801eda8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ed00:	4699      	mov	r9, r3
 801ed02:	46a2      	mov	sl, r4
 801ed04:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ed08:	f1b9 0f00 	cmp.w	r9, #0
 801ed0c:	dd54      	ble.n	801edb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed0e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ed12:	140d      	asrs	r5, r1, #16
 801ed14:	1410      	asrs	r0, r2, #16
 801ed16:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed1a:	fb07 5000 	mla	r0, r7, r0, r5
 801ed1e:	9d02      	ldr	r5, [sp, #8]
 801ed20:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ed24:	f8ba 5000 	ldrh.w	r5, [sl]
 801ed28:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ed2c:	122f      	asrs	r7, r5, #8
 801ed2e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ed32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ed36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed3a:	00ed      	lsls	r5, r5, #3
 801ed3c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ed40:	fb17 f706 	smulbb	r7, r7, r6
 801ed44:	b2ed      	uxtb	r5, r5
 801ed46:	fb18 f806 	smulbb	r8, r8, r6
 801ed4a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ed4e:	10c7      	asrs	r7, r0, #3
 801ed50:	fb15 f506 	smulbb	r5, r5, r6
 801ed54:	00c0      	lsls	r0, r0, #3
 801ed56:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ed5a:	fa1f fc8c 	uxth.w	ip, ip
 801ed5e:	b2c0      	uxtb	r0, r0
 801ed60:	fb07 870b 	mla	r7, r7, fp, r8
 801ed64:	fb00 500b 	mla	r0, r0, fp, r5
 801ed68:	f10c 0501 	add.w	r5, ip, #1
 801ed6c:	b2bf      	uxth	r7, r7
 801ed6e:	b280      	uxth	r0, r0
 801ed70:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ed74:	f107 0801 	add.w	r8, r7, #1
 801ed78:	1c45      	adds	r5, r0, #1
 801ed7a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ed7e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ed82:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ed86:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ed88:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ed8c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ed90:	4401      	add	r1, r0
 801ed92:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ed96:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ed98:	ea4c 0c05 	orr.w	ip, ip, r5
 801ed9c:	4402      	add	r2, r0
 801ed9e:	ea4c 0c08 	orr.w	ip, ip, r8
 801eda2:	f82a cb02 	strh.w	ip, [sl], #2
 801eda6:	e7af      	b.n	801ed08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eda8:	f04f 0800 	mov.w	r8, #0
 801edac:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801edb0:	eb03 0008 	add.w	r0, r3, r8
 801edb4:	2800      	cmp	r0, #0
 801edb6:	dc41      	bgt.n	801ee3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801edb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801edc0:	9b00      	ldr	r3, [sp, #0]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	f340 8095 	ble.w	801eef2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801edc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801edcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edd6:	eef0 6a62 	vmov.f32	s13, s5
 801edda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801edde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ede2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ede6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801edea:	eef0 6a43 	vmov.f32	s13, s6
 801edee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801edf2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801edf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee0e:	ee12 2a90 	vmov	r2, s5
 801ee12:	eef0 2a47 	vmov.f32	s5, s14
 801ee16:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee1a:	ee13 2a10 	vmov	r2, s6
 801ee1e:	9311      	str	r3, [sp, #68]	; 0x44
 801ee20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee22:	eeb0 3a67 	vmov.f32	s6, s15
 801ee26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee2a:	9312      	str	r3, [sp, #72]	; 0x48
 801ee2c:	9b00      	ldr	r3, [sp, #0]
 801ee2e:	9a03      	ldr	r2, [sp, #12]
 801ee30:	3b01      	subs	r3, #1
 801ee32:	9300      	str	r3, [sp, #0]
 801ee34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee36:	bf08      	it	eq
 801ee38:	4613      	moveq	r3, r2
 801ee3a:	e72f      	b.n	801ec9c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ee3c:	140f      	asrs	r7, r1, #16
 801ee3e:	d451      	bmi.n	801eee4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ee40:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ee44:	42bd      	cmp	r5, r7
 801ee46:	dd4d      	ble.n	801eee4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ee48:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ee4c:	d44a      	bmi.n	801eee4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ee4e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ee52:	4560      	cmp	r0, ip
 801ee54:	dd46      	ble.n	801eee4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ee56:	b22d      	sxth	r5, r5
 801ee58:	9802      	ldr	r0, [sp, #8]
 801ee5a:	fb0c 7505 	mla	r5, ip, r5, r7
 801ee5e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801ee62:	f06f 0501 	mvn.w	r5, #1
 801ee66:	fb05 fb08 	mul.w	fp, r5, r8
 801ee6a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ee6e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ee72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ee76:	122f      	asrs	r7, r5, #8
 801ee78:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ee7c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ee80:	00ed      	lsls	r5, r5, #3
 801ee82:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ee86:	fb17 f706 	smulbb	r7, r7, r6
 801ee8a:	b2ed      	uxtb	r5, r5
 801ee8c:	fb19 f906 	smulbb	r9, r9, r6
 801ee90:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ee94:	10c7      	asrs	r7, r0, #3
 801ee96:	fb15 f506 	smulbb	r5, r5, r6
 801ee9a:	00c0      	lsls	r0, r0, #3
 801ee9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eea0:	fa1f fc8c 	uxth.w	ip, ip
 801eea4:	b2c0      	uxtb	r0, r0
 801eea6:	fb07 970a 	mla	r7, r7, sl, r9
 801eeaa:	fb00 500a 	mla	r0, r0, sl, r5
 801eeae:	f10c 0501 	add.w	r5, ip, #1
 801eeb2:	b2bf      	uxth	r7, r7
 801eeb4:	b280      	uxth	r0, r0
 801eeb6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eeba:	f107 0901 	add.w	r9, r7, #1
 801eebe:	1c45      	adds	r5, r0, #1
 801eec0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801eec4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eec8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801eecc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801eed0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801eed4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eed8:	ea4c 0c05 	orr.w	ip, ip, r5
 801eedc:	ea4c 0c09 	orr.w	ip, ip, r9
 801eee0:	f824 c00b 	strh.w	ip, [r4, fp]
 801eee4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eee6:	f108 38ff 	add.w	r8, r8, #4294967295
 801eeea:	4401      	add	r1, r0
 801eeec:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eeee:	4402      	add	r2, r0
 801eef0:	e75e      	b.n	801edb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801eef2:	b005      	add	sp, #20
 801eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eef8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eefc:	b085      	sub	sp, #20
 801eefe:	4693      	mov	fp, r2
 801ef00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef06:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ef08:	6870      	ldr	r0, [r6, #4]
 801ef0a:	9101      	str	r1, [sp, #4]
 801ef0c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef10:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ef14:	fb00 2404 	mla	r4, r0, r4, r2
 801ef18:	6832      	ldr	r2, [r6, #0]
 801ef1a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ef1e:	682a      	ldr	r2, [r5, #0]
 801ef20:	9202      	str	r2, [sp, #8]
 801ef22:	9a01      	ldr	r2, [sp, #4]
 801ef24:	2a00      	cmp	r2, #0
 801ef26:	dc03      	bgt.n	801ef30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ef28:	f1bb 0f00 	cmp.w	fp, #0
 801ef2c:	f340 809a 	ble.w	801f064 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ef30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef32:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ef36:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef3c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ef40:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	dd0c      	ble.n	801ef62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef48:	1406      	asrs	r6, r0, #16
 801ef4a:	d405      	bmi.n	801ef58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef4c:	454e      	cmp	r6, r9
 801ef4e:	da03      	bge.n	801ef58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef50:	1416      	asrs	r6, r2, #16
 801ef52:	d401      	bmi.n	801ef58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef54:	4546      	cmp	r6, r8
 801ef56:	db05      	blt.n	801ef64 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef58:	4470      	add	r0, lr
 801ef5a:	4462      	add	r2, ip
 801ef5c:	3b01      	subs	r3, #1
 801ef5e:	3402      	adds	r4, #2
 801ef60:	e7f0      	b.n	801ef44 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ef62:	d00f      	beq.n	801ef84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef64:	1e5e      	subs	r6, r3, #1
 801ef66:	fb0e 0706 	mla	r7, lr, r6, r0
 801ef6a:	143f      	asrs	r7, r7, #16
 801ef6c:	d541      	bpl.n	801eff2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ef6e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ef72:	4698      	mov	r8, r3
 801ef74:	9603      	str	r6, [sp, #12]
 801ef76:	f1b8 0f00 	cmp.w	r8, #0
 801ef7a:	dc56      	bgt.n	801f02a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ef7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ef84:	9b01      	ldr	r3, [sp, #4]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	dd6c      	ble.n	801f064 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ef8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef94:	eeb0 6a62 	vmov.f32	s12, s5
 801ef98:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efa4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801efa8:	eeb0 6a43 	vmov.f32	s12, s6
 801efac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efb0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801efb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efc0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efc4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efc8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efcc:	ee12 2a90 	vmov	r2, s5
 801efd0:	eef0 2a47 	vmov.f32	s5, s14
 801efd4:	fb92 fef3 	sdiv	lr, r2, r3
 801efd8:	ee13 2a10 	vmov	r2, s6
 801efdc:	eeb0 3a67 	vmov.f32	s6, s15
 801efe0:	fb92 fcf3 	sdiv	ip, r2, r3
 801efe4:	9b01      	ldr	r3, [sp, #4]
 801efe6:	3b01      	subs	r3, #1
 801efe8:	9301      	str	r3, [sp, #4]
 801efea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efec:	bf08      	it	eq
 801efee:	465b      	moveq	r3, fp
 801eff0:	e797      	b.n	801ef22 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801eff2:	454f      	cmp	r7, r9
 801eff4:	dabb      	bge.n	801ef6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eff6:	fb0c 2606 	mla	r6, ip, r6, r2
 801effa:	1436      	asrs	r6, r6, #16
 801effc:	d4b7      	bmi.n	801ef6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801effe:	4546      	cmp	r6, r8
 801f000:	dab5      	bge.n	801ef6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f002:	461e      	mov	r6, r3
 801f004:	46a0      	mov	r8, r4
 801f006:	2e00      	cmp	r6, #0
 801f008:	ddb8      	ble.n	801ef7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f00a:	1417      	asrs	r7, r2, #16
 801f00c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f010:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f014:	9902      	ldr	r1, [sp, #8]
 801f016:	4470      	add	r0, lr
 801f018:	4462      	add	r2, ip
 801f01a:	fb0a 9707 	mla	r7, sl, r7, r9
 801f01e:	3e01      	subs	r6, #1
 801f020:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f024:	f828 7b02 	strh.w	r7, [r8], #2
 801f028:	e7ed      	b.n	801f006 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f02a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f02e:	d414      	bmi.n	801f05a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f030:	68ae      	ldr	r6, [r5, #8]
 801f032:	454e      	cmp	r6, r9
 801f034:	dd11      	ble.n	801f05a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f036:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f03a:	d40e      	bmi.n	801f05a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f03c:	68ef      	ldr	r7, [r5, #12]
 801f03e:	4557      	cmp	r7, sl
 801f040:	dd0b      	ble.n	801f05a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f042:	b236      	sxth	r6, r6
 801f044:	f06f 0101 	mvn.w	r1, #1
 801f048:	9f02      	ldr	r7, [sp, #8]
 801f04a:	fb0a 9606 	mla	r6, sl, r6, r9
 801f04e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f052:	fb01 f608 	mul.w	r6, r1, r8
 801f056:	9903      	ldr	r1, [sp, #12]
 801f058:	538f      	strh	r7, [r1, r6]
 801f05a:	4470      	add	r0, lr
 801f05c:	4462      	add	r2, ip
 801f05e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f062:	e788      	b.n	801ef76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f064:	b005      	add	sp, #20
 801f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f06a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f06a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f06e:	b085      	sub	sp, #20
 801f070:	468b      	mov	fp, r1
 801f072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f076:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f078:	9202      	str	r2, [sp, #8]
 801f07a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f07e:	6841      	ldr	r1, [r0, #4]
 801f080:	9203      	str	r2, [sp, #12]
 801f082:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f086:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f08a:	fb01 2404 	mla	r4, r1, r4, r2
 801f08e:	6802      	ldr	r2, [r0, #0]
 801f090:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f094:	f8d8 2000 	ldr.w	r2, [r8]
 801f098:	9200      	str	r2, [sp, #0]
 801f09a:	f1bb 0f00 	cmp.w	fp, #0
 801f09e:	dc03      	bgt.n	801f0a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f0a0:	9a02      	ldr	r2, [sp, #8]
 801f0a2:	2a00      	cmp	r2, #0
 801f0a4:	f340 8134 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f0a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f0aa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f0ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f0b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f0b4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f0b8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	dd0e      	ble.n	801f0de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f0c0:	1402      	asrs	r2, r0, #16
 801f0c2:	d405      	bmi.n	801f0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f0c4:	42ba      	cmp	r2, r7
 801f0c6:	da03      	bge.n	801f0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f0c8:	140a      	asrs	r2, r1, #16
 801f0ca:	d401      	bmi.n	801f0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f0cc:	42b2      	cmp	r2, r6
 801f0ce:	db07      	blt.n	801f0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f0d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f0d2:	3b01      	subs	r3, #1
 801f0d4:	3402      	adds	r4, #2
 801f0d6:	4410      	add	r0, r2
 801f0d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0da:	4411      	add	r1, r2
 801f0dc:	e7ee      	b.n	801f0bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f0de:	d019      	beq.n	801f114 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f0e0:	1e5a      	subs	r2, r3, #1
 801f0e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f0e4:	fb05 0502 	mla	r5, r5, r2, r0
 801f0e8:	142d      	asrs	r5, r5, #16
 801f0ea:	d409      	bmi.n	801f100 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0ec:	42bd      	cmp	r5, r7
 801f0ee:	da07      	bge.n	801f100 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0f0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f0f2:	fb05 1202 	mla	r2, r5, r2, r1
 801f0f6:	1412      	asrs	r2, r2, #16
 801f0f8:	d402      	bmi.n	801f100 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0fa:	42b2      	cmp	r2, r6
 801f0fc:	f2c0 80aa 	blt.w	801f254 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f100:	f04f 0c00 	mov.w	ip, #0
 801f104:	eb03 020c 	add.w	r2, r3, ip
 801f108:	2a00      	cmp	r2, #0
 801f10a:	dc3e      	bgt.n	801f18a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f10c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f110:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f114:	f1bb 0f00 	cmp.w	fp, #0
 801f118:	f340 80fa 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f11c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f122:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f126:	f1bb 0b01 	subs.w	fp, fp, #1
 801f12a:	eeb0 6a62 	vmov.f32	s12, s5
 801f12e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f132:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f136:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f13a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f13e:	eeb0 6a43 	vmov.f32	s12, s6
 801f142:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f146:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f14a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f14e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f152:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f156:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f15a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f15e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f162:	ee12 2a90 	vmov	r2, s5
 801f166:	eef0 2a47 	vmov.f32	s5, s14
 801f16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f16e:	ee13 2a10 	vmov	r2, s6
 801f172:	9311      	str	r3, [sp, #68]	; 0x44
 801f174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f176:	eeb0 3a67 	vmov.f32	s6, s15
 801f17a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f17e:	9a02      	ldr	r2, [sp, #8]
 801f180:	9312      	str	r3, [sp, #72]	; 0x48
 801f182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f184:	bf08      	it	eq
 801f186:	4613      	moveq	r3, r2
 801f188:	e787      	b.n	801f09a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f18a:	1406      	asrs	r6, r0, #16
 801f18c:	d45b      	bmi.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f18e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f192:	42b5      	cmp	r5, r6
 801f194:	dd57      	ble.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f196:	140f      	asrs	r7, r1, #16
 801f198:	d455      	bmi.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f19a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f19e:	42ba      	cmp	r2, r7
 801f1a0:	dd51      	ble.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f1a2:	b22d      	sxth	r5, r5
 801f1a4:	9a00      	ldr	r2, [sp, #0]
 801f1a6:	fb07 6505 	mla	r5, r7, r5, r6
 801f1aa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f1ae:	0e2e      	lsrs	r6, r5, #24
 801f1b0:	d049      	beq.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f1b2:	f06f 0201 	mvn.w	r2, #1
 801f1b6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f1ba:	fb02 f20c 	mul.w	r2, r2, ip
 801f1be:	f834 e002 	ldrh.w	lr, [r4, r2]
 801f1c2:	9201      	str	r2, [sp, #4]
 801f1c4:	9a03      	ldr	r2, [sp, #12]
 801f1c6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f1ca:	4356      	muls	r6, r2
 801f1cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f1d0:	1c72      	adds	r2, r6, #1
 801f1d2:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f1d6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f1da:	b2ed      	uxtb	r5, r5
 801f1dc:	1212      	asrs	r2, r2, #8
 801f1de:	fa1f f982 	uxth.w	r9, r2
 801f1e2:	43d2      	mvns	r2, r2
 801f1e4:	fb16 f609 	smulbb	r6, r6, r9
 801f1e8:	b2d2      	uxtb	r2, r2
 801f1ea:	fb15 f509 	smulbb	r5, r5, r9
 801f1ee:	fb07 6702 	mla	r7, r7, r2, r6
 801f1f2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f1f6:	fb1a fa09 	smulbb	sl, sl, r9
 801f1fa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f1fe:	b2bf      	uxth	r7, r7
 801f200:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f204:	fa5f fe8e 	uxtb.w	lr, lr
 801f208:	fb06 a602 	mla	r6, r6, r2, sl
 801f20c:	fb0e 5502 	mla	r5, lr, r2, r5
 801f210:	1c7a      	adds	r2, r7, #1
 801f212:	b2b6      	uxth	r6, r6
 801f214:	b2ad      	uxth	r5, r5
 801f216:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f21a:	9a01      	ldr	r2, [sp, #4]
 801f21c:	f105 0a01 	add.w	sl, r5, #1
 801f220:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f224:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f228:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f22c:	ea47 070a 	orr.w	r7, r7, sl
 801f230:	f106 0a01 	add.w	sl, r6, #1
 801f234:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f238:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f23c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f240:	ea47 070a 	orr.w	r7, r7, sl
 801f244:	52a7      	strh	r7, [r4, r2]
 801f246:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f248:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f24c:	4410      	add	r0, r2
 801f24e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f250:	4411      	add	r1, r2
 801f252:	e757      	b.n	801f104 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f254:	f04f 0e00 	mov.w	lr, #0
 801f258:	eba3 020e 	sub.w	r2, r3, lr
 801f25c:	2a00      	cmp	r2, #0
 801f25e:	f77f af55 	ble.w	801f10c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f262:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f266:	1405      	asrs	r5, r0, #16
 801f268:	140a      	asrs	r2, r1, #16
 801f26a:	fb06 5202 	mla	r2, r6, r2, r5
 801f26e:	9d00      	ldr	r5, [sp, #0]
 801f270:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f274:	0e2e      	lsrs	r6, r5, #24
 801f276:	d044      	beq.n	801f302 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f278:	9a03      	ldr	r2, [sp, #12]
 801f27a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f27e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f282:	4356      	muls	r6, r2
 801f284:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f288:	1c72      	adds	r2, r6, #1
 801f28a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f28e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f292:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f296:	b2ed      	uxtb	r5, r5
 801f298:	1212      	asrs	r2, r2, #8
 801f29a:	fa1f f982 	uxth.w	r9, r2
 801f29e:	43d2      	mvns	r2, r2
 801f2a0:	fb16 f609 	smulbb	r6, r6, r9
 801f2a4:	b2d2      	uxtb	r2, r2
 801f2a6:	fb15 f509 	smulbb	r5, r5, r9
 801f2aa:	fb07 6702 	mla	r7, r7, r2, r6
 801f2ae:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f2b2:	fb1a fa09 	smulbb	sl, sl, r9
 801f2b6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f2ba:	b2bf      	uxth	r7, r7
 801f2bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f2c0:	fa5f fc8c 	uxtb.w	ip, ip
 801f2c4:	fb06 a602 	mla	r6, r6, r2, sl
 801f2c8:	fb0c 5502 	mla	r5, ip, r2, r5
 801f2cc:	1c7a      	adds	r2, r7, #1
 801f2ce:	b2b6      	uxth	r6, r6
 801f2d0:	b2ad      	uxth	r5, r5
 801f2d2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f2d6:	f105 0a01 	add.w	sl, r5, #1
 801f2da:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f2de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f2e2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2e6:	ea47 070a 	orr.w	r7, r7, sl
 801f2ea:	f106 0a01 	add.w	sl, r6, #1
 801f2ee:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f2f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2f6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f2fa:	ea47 070a 	orr.w	r7, r7, sl
 801f2fe:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801f302:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f304:	f10e 0e01 	add.w	lr, lr, #1
 801f308:	4410      	add	r0, r2
 801f30a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f30c:	4411      	add	r1, r2
 801f30e:	e7a3      	b.n	801f258 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f310:	b005      	add	sp, #20
 801f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f318 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f31c:	b085      	sub	sp, #20
 801f31e:	468b      	mov	fp, r1
 801f320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f324:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f326:	9203      	str	r2, [sp, #12]
 801f328:	6861      	ldr	r1, [r4, #4]
 801f32a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801f32e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f332:	fb01 2000 	mla	r0, r1, r0, r2
 801f336:	6822      	ldr	r2, [r4, #0]
 801f338:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f33c:	f8d9 2000 	ldr.w	r2, [r9]
 801f340:	9200      	str	r2, [sp, #0]
 801f342:	f1bb 0f00 	cmp.w	fp, #0
 801f346:	dc03      	bgt.n	801f350 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f348:	9a03      	ldr	r2, [sp, #12]
 801f34a:	2a00      	cmp	r2, #0
 801f34c:	f340 8154 	ble.w	801f5f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f352:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f356:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f35a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f35c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f360:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f364:	2b00      	cmp	r3, #0
 801f366:	dd0e      	ble.n	801f386 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f368:	140c      	asrs	r4, r1, #16
 801f36a:	d405      	bmi.n	801f378 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f36c:	42bc      	cmp	r4, r7
 801f36e:	da03      	bge.n	801f378 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f370:	1414      	asrs	r4, r2, #16
 801f372:	d401      	bmi.n	801f378 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f374:	42b4      	cmp	r4, r6
 801f376:	db07      	blt.n	801f388 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f378:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f37a:	3b01      	subs	r3, #1
 801f37c:	3002      	adds	r0, #2
 801f37e:	4421      	add	r1, r4
 801f380:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f382:	4422      	add	r2, r4
 801f384:	e7ee      	b.n	801f364 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f386:	d017      	beq.n	801f3b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f388:	1e5c      	subs	r4, r3, #1
 801f38a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f38c:	fb05 1504 	mla	r5, r5, r4, r1
 801f390:	142d      	asrs	r5, r5, #16
 801f392:	d409      	bmi.n	801f3a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f394:	42bd      	cmp	r5, r7
 801f396:	da07      	bge.n	801f3a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f398:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f39a:	fb05 2404 	mla	r4, r5, r4, r2
 801f39e:	1424      	asrs	r4, r4, #16
 801f3a0:	d402      	bmi.n	801f3a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f3a2:	42b4      	cmp	r4, r6
 801f3a4:	f2c0 80c0 	blt.w	801f528 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f3a8:	2700      	movs	r7, #0
 801f3aa:	19dc      	adds	r4, r3, r7
 801f3ac:	2c00      	cmp	r4, #0
 801f3ae:	dc3e      	bgt.n	801f42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f3b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f3b8:	f1bb 0f00 	cmp.w	fp, #0
 801f3bc:	f340 811c 	ble.w	801f5f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3ca:	f1bb 0b01 	subs.w	fp, fp, #1
 801f3ce:	eeb0 6a62 	vmov.f32	s12, s5
 801f3d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f3e2:	eeb0 6a43 	vmov.f32	s12, s6
 801f3e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f3ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f406:	ee12 2a90 	vmov	r2, s5
 801f40a:	eef0 2a47 	vmov.f32	s5, s14
 801f40e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f412:	ee13 2a10 	vmov	r2, s6
 801f416:	9311      	str	r3, [sp, #68]	; 0x44
 801f418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f41a:	eeb0 3a67 	vmov.f32	s6, s15
 801f41e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f422:	9a03      	ldr	r2, [sp, #12]
 801f424:	9312      	str	r3, [sp, #72]	; 0x48
 801f426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f428:	bf08      	it	eq
 801f42a:	4613      	moveq	r3, r2
 801f42c:	e789      	b.n	801f342 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f42e:	140e      	asrs	r6, r1, #16
 801f430:	d461      	bmi.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f432:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801f436:	42b5      	cmp	r5, r6
 801f438:	dd5d      	ble.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f43a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f43e:	d45a      	bmi.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f440:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801f444:	4564      	cmp	r4, ip
 801f446:	dd56      	ble.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f448:	b22d      	sxth	r5, r5
 801f44a:	9c00      	ldr	r4, [sp, #0]
 801f44c:	fb0c 6505 	mla	r5, ip, r5, r6
 801f450:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801f454:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801f458:	d04d      	beq.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f45a:	0a26      	lsrs	r6, r4, #8
 801f45c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f460:	fa5f f58e 	uxtb.w	r5, lr
 801f464:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801f468:	9601      	str	r6, [sp, #4]
 801f46a:	d04a      	beq.n	801f502 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f46c:	f06f 0601 	mvn.w	r6, #1
 801f470:	fa1f fa85 	uxth.w	sl, r5
 801f474:	fa5f fc8c 	uxtb.w	ip, ip
 801f478:	43ed      	mvns	r5, r5
 801f47a:	437e      	muls	r6, r7
 801f47c:	b2e4      	uxtb	r4, r4
 801f47e:	fb1c fc0a 	smulbb	ip, ip, sl
 801f482:	b2ed      	uxtb	r5, r5
 801f484:	f830 8006 	ldrh.w	r8, [r0, r6]
 801f488:	fb14 f40a 	smulbb	r4, r4, sl
 801f48c:	9602      	str	r6, [sp, #8]
 801f48e:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f492:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801f496:	fb16 f60a 	smulbb	r6, r6, sl
 801f49a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f49e:	fb0e cc05 	mla	ip, lr, r5, ip
 801f4a2:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801f4a6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f4aa:	fa1f fc8c 	uxth.w	ip, ip
 801f4ae:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f4b2:	fa5f f888 	uxtb.w	r8, r8
 801f4b6:	fb0e 6e05 	mla	lr, lr, r5, r6
 801f4ba:	fb08 4405 	mla	r4, r8, r5, r4
 801f4be:	f10c 0501 	add.w	r5, ip, #1
 801f4c2:	fa1f fe8e 	uxth.w	lr, lr
 801f4c6:	b2a4      	uxth	r4, r4
 801f4c8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f4cc:	1c66      	adds	r6, r4, #1
 801f4ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4d2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f4d6:	9c02      	ldr	r4, [sp, #8]
 801f4d8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f4dc:	ea4c 0c06 	orr.w	ip, ip, r6
 801f4e0:	f10e 0601 	add.w	r6, lr, #1
 801f4e4:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801f4e8:	0976      	lsrs	r6, r6, #5
 801f4ea:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f4ee:	ea4c 0c06 	orr.w	ip, ip, r6
 801f4f2:	f820 c004 	strh.w	ip, [r0, r4]
 801f4f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f4f8:	3f01      	subs	r7, #1
 801f4fa:	4421      	add	r1, r4
 801f4fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f4fe:	4422      	add	r2, r4
 801f500:	e753      	b.n	801f3aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f502:	4e3f      	ldr	r6, [pc, #252]	; (801f600 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801f504:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f508:	f06f 0501 	mvn.w	r5, #1
 801f50c:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801f510:	437d      	muls	r5, r7
 801f512:	ea4c 0c04 	orr.w	ip, ip, r4
 801f516:	9c01      	ldr	r4, [sp, #4]
 801f518:	00e6      	lsls	r6, r4, #3
 801f51a:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801f51e:	ea4c 0c04 	orr.w	ip, ip, r4
 801f522:	f820 c005 	strh.w	ip, [r0, r5]
 801f526:	e7e6      	b.n	801f4f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f528:	f04f 0800 	mov.w	r8, #0
 801f52c:	eba3 0408 	sub.w	r4, r3, r8
 801f530:	2c00      	cmp	r4, #0
 801f532:	f77f af3d 	ble.w	801f3b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f536:	140d      	asrs	r5, r1, #16
 801f538:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801f53c:	1414      	asrs	r4, r2, #16
 801f53e:	fb06 5404 	mla	r4, r6, r4, r5
 801f542:	9d00      	ldr	r5, [sp, #0]
 801f544:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801f548:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801f54c:	d042      	beq.n	801f5d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f54e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f552:	fa5f f58c 	uxtb.w	r5, ip
 801f556:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801f55a:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801f55e:	d040      	beq.n	801f5e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f560:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801f564:	fa1f fa85 	uxth.w	sl, r5
 801f568:	b2ff      	uxtb	r7, r7
 801f56a:	43ed      	mvns	r5, r5
 801f56c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f570:	fb17 f70a 	smulbb	r7, r7, sl
 801f574:	b2ed      	uxtb	r5, r5
 801f576:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f57a:	b2e4      	uxtb	r4, r4
 801f57c:	b2f6      	uxtb	r6, r6
 801f57e:	fb0c 7705 	mla	r7, ip, r5, r7
 801f582:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801f586:	fb14 f40a 	smulbb	r4, r4, sl
 801f58a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f58e:	b2bf      	uxth	r7, r7
 801f590:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f594:	fb16 f60a 	smulbb	r6, r6, sl
 801f598:	fa5f fe8e 	uxtb.w	lr, lr
 801f59c:	fb0e 4405 	mla	r4, lr, r5, r4
 801f5a0:	fb0c 6c05 	mla	ip, ip, r5, r6
 801f5a4:	1c7d      	adds	r5, r7, #1
 801f5a6:	b2a4      	uxth	r4, r4
 801f5a8:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801f5ac:	1c66      	adds	r6, r4, #1
 801f5ae:	fa1f fc8c 	uxth.w	ip, ip
 801f5b2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f5b6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f5ba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f5be:	4337      	orrs	r7, r6
 801f5c0:	f10c 0601 	add.w	r6, ip, #1
 801f5c4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f5c8:	0976      	lsrs	r6, r6, #5
 801f5ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f5ce:	4337      	orrs	r7, r6
 801f5d0:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801f5d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f5d6:	f108 0801 	add.w	r8, r8, #1
 801f5da:	4421      	add	r1, r4
 801f5dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5de:	4422      	add	r2, r4
 801f5e0:	e7a4      	b.n	801f52c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f5e2:	4d07      	ldr	r5, [pc, #28]	; (801f600 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801f5e4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f5e8:	00f6      	lsls	r6, r6, #3
 801f5ea:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801f5ee:	4327      	orrs	r7, r4
 801f5f0:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801f5f4:	4327      	orrs	r7, r4
 801f5f6:	e7eb      	b.n	801f5d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801f5f8:	b005      	add	sp, #20
 801f5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5fe:	bf00      	nop
 801f600:	fffff800 	.word	0xfffff800

0801f604 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f608:	b087      	sub	sp, #28
 801f60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f60e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f610:	9204      	str	r2, [sp, #16]
 801f612:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f616:	9101      	str	r1, [sp, #4]
 801f618:	9205      	str	r2, [sp, #20]
 801f61a:	6841      	ldr	r1, [r0, #4]
 801f61c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f620:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f624:	fb01 2404 	mla	r4, r1, r4, r2
 801f628:	6802      	ldr	r2, [r0, #0]
 801f62a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f62e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f632:	3201      	adds	r2, #1
 801f634:	f022 0201 	bic.w	r2, r2, #1
 801f638:	9202      	str	r2, [sp, #8]
 801f63a:	f8d8 2000 	ldr.w	r2, [r8]
 801f63e:	9203      	str	r2, [sp, #12]
 801f640:	9a01      	ldr	r2, [sp, #4]
 801f642:	2a00      	cmp	r2, #0
 801f644:	dc03      	bgt.n	801f64e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f646:	9a04      	ldr	r2, [sp, #16]
 801f648:	2a00      	cmp	r2, #0
 801f64a:	f340 814d 	ble.w	801f8e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f64e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f650:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f654:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f65a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f65e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f662:	2b00      	cmp	r3, #0
 801f664:	dd0e      	ble.n	801f684 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f666:	1402      	asrs	r2, r0, #16
 801f668:	d405      	bmi.n	801f676 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f66a:	42ba      	cmp	r2, r7
 801f66c:	da03      	bge.n	801f676 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f66e:	140a      	asrs	r2, r1, #16
 801f670:	d401      	bmi.n	801f676 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f672:	42b2      	cmp	r2, r6
 801f674:	db07      	blt.n	801f686 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f676:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f678:	3b01      	subs	r3, #1
 801f67a:	3402      	adds	r4, #2
 801f67c:	4410      	add	r0, r2
 801f67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f680:	4411      	add	r1, r2
 801f682:	e7ee      	b.n	801f662 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f684:	d019      	beq.n	801f6ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f686:	1e5a      	subs	r2, r3, #1
 801f688:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f68a:	fb05 0502 	mla	r5, r5, r2, r0
 801f68e:	142d      	asrs	r5, r5, #16
 801f690:	d409      	bmi.n	801f6a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f692:	42bd      	cmp	r5, r7
 801f694:	da07      	bge.n	801f6a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f696:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f698:	fb05 1202 	mla	r2, r5, r2, r1
 801f69c:	1412      	asrs	r2, r2, #16
 801f69e:	d402      	bmi.n	801f6a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f6a0:	42b2      	cmp	r2, r6
 801f6a2:	f2c0 80b7 	blt.w	801f814 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f6a6:	f04f 0c00 	mov.w	ip, #0
 801f6aa:	eb03 020c 	add.w	r2, r3, ip
 801f6ae:	2a00      	cmp	r2, #0
 801f6b0:	dc3f      	bgt.n	801f732 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801f6b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f6ba:	9b01      	ldr	r3, [sp, #4]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	f340 8113 	ble.w	801f8e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f6c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f6c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6cc:	eeb0 6a62 	vmov.f32	s12, s5
 801f6d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6dc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f6e0:	eeb0 6a43 	vmov.f32	s12, s6
 801f6e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6e8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f6ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f700:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f704:	ee12 2a90 	vmov	r2, s5
 801f708:	eef0 2a47 	vmov.f32	s5, s14
 801f70c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f710:	ee13 2a10 	vmov	r2, s6
 801f714:	9313      	str	r3, [sp, #76]	; 0x4c
 801f716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f718:	eeb0 3a67 	vmov.f32	s6, s15
 801f71c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f720:	9314      	str	r3, [sp, #80]	; 0x50
 801f722:	9b01      	ldr	r3, [sp, #4]
 801f724:	9a04      	ldr	r2, [sp, #16]
 801f726:	3b01      	subs	r3, #1
 801f728:	9301      	str	r3, [sp, #4]
 801f72a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f72c:	bf08      	it	eq
 801f72e:	4613      	moveq	r3, r2
 801f730:	e786      	b.n	801f640 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f732:	1405      	asrs	r5, r0, #16
 801f734:	d467      	bmi.n	801f806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f736:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f73a:	42aa      	cmp	r2, r5
 801f73c:	dd63      	ble.n	801f806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f73e:	140e      	asrs	r6, r1, #16
 801f740:	d461      	bmi.n	801f806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f742:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f746:	42b2      	cmp	r2, r6
 801f748:	dd5d      	ble.n	801f806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f74a:	9a02      	ldr	r2, [sp, #8]
 801f74c:	fb06 5502 	mla	r5, r6, r2, r5
 801f750:	9e03      	ldr	r6, [sp, #12]
 801f752:	086a      	lsrs	r2, r5, #1
 801f754:	5cb2      	ldrb	r2, [r6, r2]
 801f756:	07ee      	lsls	r6, r5, #31
 801f758:	bf54      	ite	pl
 801f75a:	f002 020f 	andpl.w	r2, r2, #15
 801f75e:	1112      	asrmi	r2, r2, #4
 801f760:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f764:	b2d2      	uxtb	r2, r2
 801f766:	2a00      	cmp	r2, #0
 801f768:	d04d      	beq.n	801f806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f76a:	f06f 0601 	mvn.w	r6, #1
 801f76e:	4d60      	ldr	r5, [pc, #384]	; (801f8f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f770:	fb06 fb0c 	mul.w	fp, r6, ip
 801f774:	9e05      	ldr	r6, [sp, #20]
 801f776:	682d      	ldr	r5, [r5, #0]
 801f778:	4372      	muls	r2, r6
 801f77a:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801f77e:	0a2f      	lsrs	r7, r5, #8
 801f780:	1c56      	adds	r6, r2, #1
 801f782:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801f786:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f78a:	00ed      	lsls	r5, r5, #3
 801f78c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f790:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f794:	ea4f 262e 	mov.w	r6, lr, asr #8
 801f798:	1212      	asrs	r2, r2, #8
 801f79a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f79e:	b2ed      	uxtb	r5, r5
 801f7a0:	fa1f fa82 	uxth.w	sl, r2
 801f7a4:	43d2      	mvns	r2, r2
 801f7a6:	fb17 f70a 	smulbb	r7, r7, sl
 801f7aa:	b2d2      	uxtb	r2, r2
 801f7ac:	fb19 f90a 	smulbb	r9, r9, sl
 801f7b0:	fb06 7602 	mla	r6, r6, r2, r7
 801f7b4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f7b8:	fb15 f50a 	smulbb	r5, r5, sl
 801f7bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f7c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f7c4:	b2b6      	uxth	r6, r6
 801f7c6:	fa5f fe8e 	uxtb.w	lr, lr
 801f7ca:	fb07 9702 	mla	r7, r7, r2, r9
 801f7ce:	fb0e 5502 	mla	r5, lr, r2, r5
 801f7d2:	b2bf      	uxth	r7, r7
 801f7d4:	b2ad      	uxth	r5, r5
 801f7d6:	f107 0901 	add.w	r9, r7, #1
 801f7da:	f105 0e01 	add.w	lr, r5, #1
 801f7de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f7e2:	f106 0901 	add.w	r9, r6, #1
 801f7e6:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801f7ea:	097f      	lsrs	r7, r7, #5
 801f7ec:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801f7f0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f7f4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f7f8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f7fc:	4337      	orrs	r7, r6
 801f7fe:	ea47 070e 	orr.w	r7, r7, lr
 801f802:	f824 700b 	strh.w	r7, [r4, fp]
 801f806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f808:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f80c:	4410      	add	r0, r2
 801f80e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f810:	4411      	add	r1, r2
 801f812:	e74a      	b.n	801f6aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f814:	f04f 0e00 	mov.w	lr, #0
 801f818:	eba3 020e 	sub.w	r2, r3, lr
 801f81c:	2a00      	cmp	r2, #0
 801f81e:	f77f af48 	ble.w	801f6b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f822:	1402      	asrs	r2, r0, #16
 801f824:	9e02      	ldr	r6, [sp, #8]
 801f826:	140d      	asrs	r5, r1, #16
 801f828:	fb06 2505 	mla	r5, r6, r5, r2
 801f82c:	9e03      	ldr	r6, [sp, #12]
 801f82e:	086a      	lsrs	r2, r5, #1
 801f830:	07ed      	lsls	r5, r5, #31
 801f832:	5cb2      	ldrb	r2, [r6, r2]
 801f834:	bf54      	ite	pl
 801f836:	f002 020f 	andpl.w	r2, r2, #15
 801f83a:	1112      	asrmi	r2, r2, #4
 801f83c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f840:	b2d2      	uxtb	r2, r2
 801f842:	2a00      	cmp	r2, #0
 801f844:	d049      	beq.n	801f8da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801f846:	9e05      	ldr	r6, [sp, #20]
 801f848:	4d29      	ldr	r5, [pc, #164]	; (801f8f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f84a:	4372      	muls	r2, r6
 801f84c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f850:	682d      	ldr	r5, [r5, #0]
 801f852:	1c56      	adds	r6, r2, #1
 801f854:	0a2f      	lsrs	r7, r5, #8
 801f856:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f85a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f85e:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f862:	1212      	asrs	r2, r2, #8
 801f864:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801f868:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f86c:	fa1f fa82 	uxth.w	sl, r2
 801f870:	43d2      	mvns	r2, r2
 801f872:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f876:	00ed      	lsls	r5, r5, #3
 801f878:	fb17 f70a 	smulbb	r7, r7, sl
 801f87c:	b2d2      	uxtb	r2, r2
 801f87e:	fb19 f90a 	smulbb	r9, r9, sl
 801f882:	b2ed      	uxtb	r5, r5
 801f884:	fb06 7602 	mla	r6, r6, r2, r7
 801f888:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801f88c:	fb15 f50a 	smulbb	r5, r5, sl
 801f890:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f894:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f898:	b2b6      	uxth	r6, r6
 801f89a:	fa5f fc8c 	uxtb.w	ip, ip
 801f89e:	fb07 9702 	mla	r7, r7, r2, r9
 801f8a2:	f106 0b01 	add.w	fp, r6, #1
 801f8a6:	fb0c 5502 	mla	r5, ip, r2, r5
 801f8aa:	b2bf      	uxth	r7, r7
 801f8ac:	b2ad      	uxth	r5, r5
 801f8ae:	f107 0901 	add.w	r9, r7, #1
 801f8b2:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801f8b6:	f105 0c01 	add.w	ip, r5, #1
 801f8ba:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f8be:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f8c2:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801f8c6:	097f      	lsrs	r7, r7, #5
 801f8c8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f8cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f8d0:	4337      	orrs	r7, r6
 801f8d2:	ea47 070c 	orr.w	r7, r7, ip
 801f8d6:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801f8da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f8dc:	f10e 0e01 	add.w	lr, lr, #1
 801f8e0:	4410      	add	r0, r2
 801f8e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f8e4:	4411      	add	r1, r2
 801f8e6:	e797      	b.n	801f818 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f8e8:	b007      	add	sp, #28
 801f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8ee:	bf00      	nop
 801f8f0:	20014b5c 	.word	0x20014b5c

0801f8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8f8:	b087      	sub	sp, #28
 801f8fa:	468b      	mov	fp, r1
 801f8fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f900:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f902:	9205      	str	r2, [sp, #20]
 801f904:	6841      	ldr	r1, [r0, #4]
 801f906:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f90a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f90e:	fb01 2404 	mla	r4, r1, r4, r2
 801f912:	6802      	ldr	r2, [r0, #0]
 801f914:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f918:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f91c:	3201      	adds	r2, #1
 801f91e:	f022 0201 	bic.w	r2, r2, #1
 801f922:	9201      	str	r2, [sp, #4]
 801f924:	f8d8 2000 	ldr.w	r2, [r8]
 801f928:	9202      	str	r2, [sp, #8]
 801f92a:	f1bb 0f00 	cmp.w	fp, #0
 801f92e:	dc03      	bgt.n	801f938 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f930:	9a05      	ldr	r2, [sp, #20]
 801f932:	2a00      	cmp	r2, #0
 801f934:	f340 8158 	ble.w	801fbe8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f938:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f93a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f93e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f942:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f944:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f948:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dd0e      	ble.n	801f96e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f950:	1402      	asrs	r2, r0, #16
 801f952:	d405      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f954:	42ba      	cmp	r2, r7
 801f956:	da03      	bge.n	801f960 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f958:	140a      	asrs	r2, r1, #16
 801f95a:	d401      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f95c:	42b2      	cmp	r2, r6
 801f95e:	db07      	blt.n	801f970 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f962:	3b01      	subs	r3, #1
 801f964:	3402      	adds	r4, #2
 801f966:	4410      	add	r0, r2
 801f968:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f96a:	4411      	add	r1, r2
 801f96c:	e7ee      	b.n	801f94c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f96e:	d017      	beq.n	801f9a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801f970:	1e5a      	subs	r2, r3, #1
 801f972:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f974:	fb05 0502 	mla	r5, r5, r2, r0
 801f978:	142d      	asrs	r5, r5, #16
 801f97a:	d409      	bmi.n	801f990 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f97c:	42bd      	cmp	r5, r7
 801f97e:	da07      	bge.n	801f990 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f980:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f982:	fb05 1202 	mla	r2, r5, r2, r1
 801f986:	1412      	asrs	r2, r2, #16
 801f988:	d402      	bmi.n	801f990 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f98a:	42b2      	cmp	r2, r6
 801f98c:	f2c0 80c0 	blt.w	801fb10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801f990:	2600      	movs	r6, #0
 801f992:	199a      	adds	r2, r3, r6
 801f994:	2a00      	cmp	r2, #0
 801f996:	dc3e      	bgt.n	801fa16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f99c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f9a0:	f1bb 0f00 	cmp.w	fp, #0
 801f9a4:	f340 8120 	ble.w	801fbe8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f9a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9b2:	f1bb 0b01 	subs.w	fp, fp, #1
 801f9b6:	eeb0 6a62 	vmov.f32	s12, s5
 801f9ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f9ca:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f9d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9ee:	ee12 2a90 	vmov	r2, s5
 801f9f2:	eef0 2a47 	vmov.f32	s5, s14
 801f9f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9fa:	ee13 2a10 	vmov	r2, s6
 801f9fe:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa02:	eeb0 3a67 	vmov.f32	s6, s15
 801fa06:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa0a:	9a05      	ldr	r2, [sp, #20]
 801fa0c:	9314      	str	r3, [sp, #80]	; 0x50
 801fa0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa10:	bf08      	it	eq
 801fa12:	4613      	moveq	r3, r2
 801fa14:	e789      	b.n	801f92a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fa16:	1405      	asrs	r5, r0, #16
 801fa18:	d467      	bmi.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fa1a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801fa1e:	42aa      	cmp	r2, r5
 801fa20:	dd63      	ble.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fa22:	140f      	asrs	r7, r1, #16
 801fa24:	d461      	bmi.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fa26:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801fa2a:	42ba      	cmp	r2, r7
 801fa2c:	dd5d      	ble.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fa2e:	9a01      	ldr	r2, [sp, #4]
 801fa30:	fb07 5502 	mla	r5, r7, r2, r5
 801fa34:	9f02      	ldr	r7, [sp, #8]
 801fa36:	086a      	lsrs	r2, r5, #1
 801fa38:	5cba      	ldrb	r2, [r7, r2]
 801fa3a:	07ef      	lsls	r7, r5, #31
 801fa3c:	bf54      	ite	pl
 801fa3e:	f002 020f 	andpl.w	r2, r2, #15
 801fa42:	1112      	asrmi	r2, r2, #4
 801fa44:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fa48:	b2d2      	uxtb	r2, r2
 801fa4a:	2a00      	cmp	r2, #0
 801fa4c:	d04d      	beq.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fa4e:	4d68      	ldr	r5, [pc, #416]	; (801fbf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801fa50:	2aff      	cmp	r2, #255	; 0xff
 801fa52:	682f      	ldr	r7, [r5, #0]
 801fa54:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 801fa58:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801fa5c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fa60:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801fa64:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801fa68:	9503      	str	r5, [sp, #12]
 801fa6a:	b2ff      	uxtb	r7, r7
 801fa6c:	d043      	beq.n	801faf6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fa6e:	f06f 0501 	mvn.w	r5, #1
 801fa72:	fa1f fa82 	uxth.w	sl, r2
 801fa76:	43d2      	mvns	r2, r2
 801fa78:	fb19 f90a 	smulbb	r9, r9, sl
 801fa7c:	4375      	muls	r5, r6
 801fa7e:	fb17 f70a 	smulbb	r7, r7, sl
 801fa82:	b2d2      	uxtb	r2, r2
 801fa84:	f834 e005 	ldrh.w	lr, [r4, r5]
 801fa88:	9504      	str	r5, [sp, #16]
 801fa8a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fa8e:	9d03      	ldr	r5, [sp, #12]
 801fa90:	fb15 f50a 	smulbb	r5, r5, sl
 801fa94:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fa98:	fb0c 9c02 	mla	ip, ip, r2, r9
 801fa9c:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801faa0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801faa4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801faa8:	fa1f fc8c 	uxth.w	ip, ip
 801faac:	fa5f fe8e 	uxtb.w	lr, lr
 801fab0:	fb09 5502 	mla	r5, r9, r2, r5
 801fab4:	fb0e 7702 	mla	r7, lr, r2, r7
 801fab8:	b2ad      	uxth	r5, r5
 801faba:	b2bf      	uxth	r7, r7
 801fabc:	f105 0901 	add.w	r9, r5, #1
 801fac0:	1c7a      	adds	r2, r7, #1
 801fac2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fac6:	f10c 0901 	add.w	r9, ip, #1
 801faca:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801face:	9a04      	ldr	r2, [sp, #16]
 801fad0:	096d      	lsrs	r5, r5, #5
 801fad2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801fad6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fada:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fade:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fae2:	ea45 050c 	orr.w	r5, r5, ip
 801fae6:	433d      	orrs	r5, r7
 801fae8:	52a5      	strh	r5, [r4, r2]
 801faea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801faec:	3e01      	subs	r6, #1
 801faee:	4410      	add	r0, r2
 801faf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801faf2:	4411      	add	r1, r2
 801faf4:	e74d      	b.n	801f992 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801faf6:	f06f 0201 	mvn.w	r2, #1
 801fafa:	fb02 fe06 	mul.w	lr, r2, r6
 801fafe:	9a03      	ldr	r2, [sp, #12]
 801fb00:	00d5      	lsls	r5, r2, #3
 801fb02:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801fb06:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801fb0a:	f824 500e 	strh.w	r5, [r4, lr]
 801fb0e:	e7ec      	b.n	801faea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fb10:	f04f 0e00 	mov.w	lr, #0
 801fb14:	eba3 020e 	sub.w	r2, r3, lr
 801fb18:	2a00      	cmp	r2, #0
 801fb1a:	f77f af3d 	ble.w	801f998 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801fb1e:	1402      	asrs	r2, r0, #16
 801fb20:	9e01      	ldr	r6, [sp, #4]
 801fb22:	140d      	asrs	r5, r1, #16
 801fb24:	fb06 2505 	mla	r5, r6, r5, r2
 801fb28:	9e02      	ldr	r6, [sp, #8]
 801fb2a:	086a      	lsrs	r2, r5, #1
 801fb2c:	07ed      	lsls	r5, r5, #31
 801fb2e:	5cb2      	ldrb	r2, [r6, r2]
 801fb30:	bf54      	ite	pl
 801fb32:	f002 020f 	andpl.w	r2, r2, #15
 801fb36:	1112      	asrmi	r2, r2, #4
 801fb38:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fb3c:	b2d2      	uxtb	r2, r2
 801fb3e:	2a00      	cmp	r2, #0
 801fb40:	d045      	beq.n	801fbce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801fb42:	4d2b      	ldr	r5, [pc, #172]	; (801fbf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801fb44:	2aff      	cmp	r2, #255	; 0xff
 801fb46:	682e      	ldr	r6, [r5, #0]
 801fb48:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801fb4c:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801fb50:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801fb54:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801fb58:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fb5c:	b2f6      	uxtb	r6, r6
 801fb5e:	d03d      	beq.n	801fbdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801fb60:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fb64:	fa1f fa82 	uxth.w	sl, r2
 801fb68:	43d2      	mvns	r2, r2
 801fb6a:	fb19 f90a 	smulbb	r9, r9, sl
 801fb6e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fb72:	fb15 f50a 	smulbb	r5, r5, sl
 801fb76:	b2d2      	uxtb	r2, r2
 801fb78:	fb16 f60a 	smulbb	r6, r6, sl
 801fb7c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fb80:	fb07 9702 	mla	r7, r7, r2, r9
 801fb84:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801fb88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fb8c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fb90:	b2bf      	uxth	r7, r7
 801fb92:	fa5f fc8c 	uxtb.w	ip, ip
 801fb96:	fb09 5502 	mla	r5, r9, r2, r5
 801fb9a:	fb0c 6602 	mla	r6, ip, r2, r6
 801fb9e:	b2ad      	uxth	r5, r5
 801fba0:	b2b6      	uxth	r6, r6
 801fba2:	f105 0901 	add.w	r9, r5, #1
 801fba6:	1c72      	adds	r2, r6, #1
 801fba8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fbac:	f107 0901 	add.w	r9, r7, #1
 801fbb0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801fbb4:	096d      	lsrs	r5, r5, #5
 801fbb6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801fbba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fbbe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fbc2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fbc6:	433d      	orrs	r5, r7
 801fbc8:	4335      	orrs	r5, r6
 801fbca:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801fbce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fbd0:	f10e 0e01 	add.w	lr, lr, #1
 801fbd4:	4410      	add	r0, r2
 801fbd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fbd8:	4411      	add	r1, r2
 801fbda:	e79b      	b.n	801fb14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801fbdc:	00ed      	lsls	r5, r5, #3
 801fbde:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801fbe2:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801fbe6:	e7f0      	b.n	801fbca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fbe8:	b007      	add	sp, #28
 801fbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbee:	bf00      	nop
 801fbf0:	20014b5c 	.word	0x20014b5c

0801fbf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801fbf4:	4770      	bx	lr

0801fbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801fbf6:	4770      	bx	lr

0801fbf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801fbf8:	4770      	bx	lr

0801fbfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801fbfa:	4770      	bx	lr

0801fbfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fbfc:	4770      	bx	lr

0801fbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbfe:	4770      	bx	lr

0801fc00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fc00:	4770      	bx	lr

0801fc02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fc02:	4770      	bx	lr

0801fc04 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fc04:	4770      	bx	lr

0801fc06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fc06:	4770      	bx	lr

0801fc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fc08:	4770      	bx	lr

0801fc0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fc0a:	4770      	bx	lr

0801fc0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fc0c:	4770      	bx	lr

0801fc0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fc0e:	4770      	bx	lr

0801fc10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fc10:	4770      	bx	lr

0801fc12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fc12:	4770      	bx	lr

0801fc14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fc14:	4770      	bx	lr

0801fc16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fc16:	4770      	bx	lr

0801fc18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fc18:	4770      	bx	lr

0801fc1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fc1a:	4770      	bx	lr

0801fc1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fc1c:	4770      	bx	lr

0801fc1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fc1e:	4770      	bx	lr

0801fc20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fc20:	4770      	bx	lr

0801fc22 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fc22:	4770      	bx	lr

0801fc24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fc24:	4770      	bx	lr

0801fc26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fc26:	4770      	bx	lr

0801fc28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fc28:	4770      	bx	lr

0801fc2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fc2a:	4770      	bx	lr

0801fc2c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801fc2c:	b508      	push	{r3, lr}
 801fc2e:	4b06      	ldr	r3, [pc, #24]	; (801fc48 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801fc30:	8818      	ldrh	r0, [r3, #0]
 801fc32:	b928      	cbnz	r0, 801fc40 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801fc34:	4b05      	ldr	r3, [pc, #20]	; (801fc4c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801fc36:	2154      	movs	r1, #84	; 0x54
 801fc38:	4a05      	ldr	r2, [pc, #20]	; (801fc50 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801fc3a:	4806      	ldr	r0, [pc, #24]	; (801fc54 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801fc3c:	f00a fdaa 	bl	802a794 <__assert_func>
 801fc40:	0040      	lsls	r0, r0, #1
 801fc42:	b280      	uxth	r0, r0
 801fc44:	bd08      	pop	{r3, pc}
 801fc46:	bf00      	nop
 801fc48:	20014b2e 	.word	0x20014b2e
 801fc4c:	08030675 	.word	0x08030675
 801fc50:	08030bfb 	.word	0x08030bfb
 801fc54:	080306b7 	.word	0x080306b7

0801fc58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc5c:	b08b      	sub	sp, #44	; 0x2c
 801fc5e:	460f      	mov	r7, r1
 801fc60:	4616      	mov	r6, r2
 801fc62:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801fc66:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801fc6a:	f1bb 0f00 	cmp.w	fp, #0
 801fc6e:	d046      	beq.n	801fcfe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801fc70:	6810      	ldr	r0, [r2, #0]
 801fc72:	ad06      	add	r5, sp, #24
 801fc74:	6851      	ldr	r1, [r2, #4]
 801fc76:	c503      	stmia	r5!, {r0, r1}
 801fc78:	6818      	ldr	r0, [r3, #0]
 801fc7a:	ad08      	add	r5, sp, #32
 801fc7c:	6859      	ldr	r1, [r3, #4]
 801fc7e:	c503      	stmia	r5!, {r0, r1}
 801fc80:	a806      	add	r0, sp, #24
 801fc82:	f7fa f971 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc86:	4631      	mov	r1, r6
 801fc88:	a808      	add	r0, sp, #32
 801fc8a:	f7fa f955 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc8e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fc92:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fc96:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801fc9a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801fc9e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801fca2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801fca6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801fcaa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fcae:	4f5d      	ldr	r7, [pc, #372]	; (801fe24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801fcb0:	440a      	add	r2, r1
 801fcb2:	6838      	ldr	r0, [r7, #0]
 801fcb4:	46b9      	mov	r9, r7
 801fcb6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fcba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fcbe:	4413      	add	r3, r2
 801fcc0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fcc4:	6803      	ldr	r3, [r0, #0]
 801fcc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcc8:	4798      	blx	r3
 801fcca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fcce:	d019      	beq.n	801fd04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801fcd0:	f010 0f04 	tst.w	r0, #4
 801fcd4:	d01a      	beq.n	801fd0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801fcd6:	f8d9 0000 	ldr.w	r0, [r9]
 801fcda:	b2ad      	uxth	r5, r5
 801fcdc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fce0:	6801      	ldr	r1, [r0, #0]
 801fce2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fce6:	9501      	str	r5, [sp, #4]
 801fce8:	e9cd b403 	strd	fp, r4, [sp, #12]
 801fcec:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801fcf0:	9402      	str	r4, [sp, #8]
 801fcf2:	fa1f f488 	uxth.w	r4, r8
 801fcf6:	9400      	str	r4, [sp, #0]
 801fcf8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801fcfa:	4631      	mov	r1, r6
 801fcfc:	47a0      	blx	r4
 801fcfe:	b00b      	add	sp, #44	; 0x2c
 801fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd04:	b914      	cbnz	r4, 801fd0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801fd06:	f010 0f01 	tst.w	r0, #1
 801fd0a:	e7e3      	b.n	801fcd4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801fd0c:	f8d9 0000 	ldr.w	r0, [r9]
 801fd10:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801fd14:	6803      	ldr	r3, [r0, #0]
 801fd16:	6a1b      	ldr	r3, [r3, #32]
 801fd18:	4798      	blx	r3
 801fd1a:	4b43      	ldr	r3, [pc, #268]	; (801fe28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801fd1c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801fd20:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fd24:	881a      	ldrh	r2, [r3, #0]
 801fd26:	469a      	mov	sl, r3
 801fd28:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fd2c:	fb05 f502 	mul.w	r5, r5, r2
 801fd30:	fb02 1404 	mla	r4, r2, r4, r1
 801fd34:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801fd38:	d058      	beq.n	801fdec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801fd3a:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801fd3e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fd42:	fa1f f28b 	uxth.w	r2, fp
 801fd46:	469e      	mov	lr, r3
 801fd48:	fa1f f989 	uxth.w	r9, r9
 801fd4c:	42ac      	cmp	r4, r5
 801fd4e:	d263      	bcs.n	801fe18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801fd50:	eb04 0a07 	add.w	sl, r4, r7
 801fd54:	4554      	cmp	r4, sl
 801fd56:	d23c      	bcs.n	801fdd2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801fd58:	8821      	ldrh	r1, [r4, #0]
 801fd5a:	f836 3b02 	ldrh.w	r3, [r6], #2
 801fd5e:	1208      	asrs	r0, r1, #8
 801fd60:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fd64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fd68:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801fd6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd70:	00c9      	lsls	r1, r1, #3
 801fd72:	fb10 f009 	smulbb	r0, r0, r9
 801fd76:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fd7a:	b2c9      	uxtb	r1, r1
 801fd7c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801fd80:	10d8      	asrs	r0, r3, #3
 801fd82:	fb11 f109 	smulbb	r1, r1, r9
 801fd86:	00db      	lsls	r3, r3, #3
 801fd88:	fa1f fc8c 	uxth.w	ip, ip
 801fd8c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fd90:	fb1b fb09 	smulbb	fp, fp, r9
 801fd94:	b2db      	uxtb	r3, r3
 801fd96:	fb03 1302 	mla	r3, r3, r2, r1
 801fd9a:	f10c 0101 	add.w	r1, ip, #1
 801fd9e:	fb00 b002 	mla	r0, r0, r2, fp
 801fda2:	b29b      	uxth	r3, r3
 801fda4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801fda8:	1c59      	adds	r1, r3, #1
 801fdaa:	b280      	uxth	r0, r0
 801fdac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fdb0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fdb4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fdb8:	ea4c 0c03 	orr.w	ip, ip, r3
 801fdbc:	1c43      	adds	r3, r0, #1
 801fdbe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fdc2:	0940      	lsrs	r0, r0, #5
 801fdc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fdc8:	ea4c 0c00 	orr.w	ip, ip, r0
 801fdcc:	f824 cb02 	strh.w	ip, [r4], #2
 801fdd0:	e7c0      	b.n	801fd54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801fdd2:	f8be 3000 	ldrh.w	r3, [lr]
 801fdd6:	eba3 0308 	sub.w	r3, r3, r8
 801fdda:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fdde:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801fde2:	eba3 0308 	sub.w	r3, r3, r8
 801fde6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fdea:	e7af      	b.n	801fd4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801fdec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fdf0:	f8d9 0000 	ldr.w	r0, [r9]
 801fdf4:	42ac      	cmp	r4, r5
 801fdf6:	6803      	ldr	r3, [r0, #0]
 801fdf8:	d20e      	bcs.n	801fe18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801fdfa:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801fdfe:	4632      	mov	r2, r6
 801fe00:	463b      	mov	r3, r7
 801fe02:	4621      	mov	r1, r4
 801fe04:	47c0      	blx	r8
 801fe06:	f8ba 3000 	ldrh.w	r3, [sl]
 801fe0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe0e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801fe12:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fe16:	e7eb      	b.n	801fdf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801fe18:	4b02      	ldr	r3, [pc, #8]	; (801fe24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801fe1a:	6818      	ldr	r0, [r3, #0]
 801fe1c:	6803      	ldr	r3, [r0, #0]
 801fe1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe20:	4798      	blx	r3
 801fe22:	e76c      	b.n	801fcfe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801fe24:	20014b34 	.word	0x20014b34
 801fe28:	20014b2e 	.word	0x20014b2e

0801fe2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fe2c:	b510      	push	{r4, lr}
 801fe2e:	4604      	mov	r4, r0
 801fe30:	2104      	movs	r1, #4
 801fe32:	f00a fc80 	bl	802a736 <_ZdlPvj>
 801fe36:	4620      	mov	r0, r4
 801fe38:	bd10      	pop	{r4, pc}

0801fe3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fe3a:	b510      	push	{r4, lr}
 801fe3c:	4604      	mov	r4, r0
 801fe3e:	2104      	movs	r1, #4
 801fe40:	f00a fc79 	bl	802a736 <_ZdlPvj>
 801fe44:	4620      	mov	r0, r4
 801fe46:	bd10      	pop	{r4, pc}

0801fe48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fe48:	b510      	push	{r4, lr}
 801fe4a:	4604      	mov	r4, r0
 801fe4c:	2104      	movs	r1, #4
 801fe4e:	f00a fc72 	bl	802a736 <_ZdlPvj>
 801fe52:	4620      	mov	r0, r4
 801fe54:	bd10      	pop	{r4, pc}

0801fe56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801fe56:	b510      	push	{r4, lr}
 801fe58:	4604      	mov	r4, r0
 801fe5a:	2104      	movs	r1, #4
 801fe5c:	f00a fc6b 	bl	802a736 <_ZdlPvj>
 801fe60:	4620      	mov	r0, r4
 801fe62:	bd10      	pop	{r4, pc}

0801fe64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fe64:	b510      	push	{r4, lr}
 801fe66:	4604      	mov	r4, r0
 801fe68:	2104      	movs	r1, #4
 801fe6a:	f00a fc64 	bl	802a736 <_ZdlPvj>
 801fe6e:	4620      	mov	r0, r4
 801fe70:	bd10      	pop	{r4, pc}

0801fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fe72:	b510      	push	{r4, lr}
 801fe74:	4604      	mov	r4, r0
 801fe76:	2104      	movs	r1, #4
 801fe78:	f00a fc5d 	bl	802a736 <_ZdlPvj>
 801fe7c:	4620      	mov	r0, r4
 801fe7e:	bd10      	pop	{r4, pc}

0801fe80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fe80:	b510      	push	{r4, lr}
 801fe82:	4604      	mov	r4, r0
 801fe84:	2104      	movs	r1, #4
 801fe86:	f00a fc56 	bl	802a736 <_ZdlPvj>
 801fe8a:	4620      	mov	r0, r4
 801fe8c:	bd10      	pop	{r4, pc}

0801fe8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fe8e:	b510      	push	{r4, lr}
 801fe90:	4604      	mov	r4, r0
 801fe92:	2104      	movs	r1, #4
 801fe94:	f00a fc4f 	bl	802a736 <_ZdlPvj>
 801fe98:	4620      	mov	r0, r4
 801fe9a:	bd10      	pop	{r4, pc}

0801fe9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fe9c:	b510      	push	{r4, lr}
 801fe9e:	4604      	mov	r4, r0
 801fea0:	2104      	movs	r1, #4
 801fea2:	f00a fc48 	bl	802a736 <_ZdlPvj>
 801fea6:	4620      	mov	r0, r4
 801fea8:	bd10      	pop	{r4, pc}

0801feaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801feaa:	b510      	push	{r4, lr}
 801feac:	4604      	mov	r4, r0
 801feae:	2104      	movs	r1, #4
 801feb0:	f00a fc41 	bl	802a736 <_ZdlPvj>
 801feb4:	4620      	mov	r0, r4
 801feb6:	bd10      	pop	{r4, pc}

0801feb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801feb8:	b510      	push	{r4, lr}
 801feba:	4604      	mov	r4, r0
 801febc:	2104      	movs	r1, #4
 801febe:	f00a fc3a 	bl	802a736 <_ZdlPvj>
 801fec2:	4620      	mov	r0, r4
 801fec4:	bd10      	pop	{r4, pc}

0801fec6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fec6:	b510      	push	{r4, lr}
 801fec8:	4604      	mov	r4, r0
 801feca:	2104      	movs	r1, #4
 801fecc:	f00a fc33 	bl	802a736 <_ZdlPvj>
 801fed0:	4620      	mov	r0, r4
 801fed2:	bd10      	pop	{r4, pc}

0801fed4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fed4:	b510      	push	{r4, lr}
 801fed6:	4604      	mov	r4, r0
 801fed8:	2104      	movs	r1, #4
 801feda:	f00a fc2c 	bl	802a736 <_ZdlPvj>
 801fede:	4620      	mov	r0, r4
 801fee0:	bd10      	pop	{r4, pc}

0801fee2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fee2:	b510      	push	{r4, lr}
 801fee4:	4604      	mov	r4, r0
 801fee6:	2104      	movs	r1, #4
 801fee8:	f00a fc25 	bl	802a736 <_ZdlPvj>
 801feec:	4620      	mov	r0, r4
 801feee:	bd10      	pop	{r4, pc}

0801fef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fef0:	b510      	push	{r4, lr}
 801fef2:	4604      	mov	r4, r0
 801fef4:	2104      	movs	r1, #4
 801fef6:	f00a fc1e 	bl	802a736 <_ZdlPvj>
 801fefa:	4620      	mov	r0, r4
 801fefc:	bd10      	pop	{r4, pc}

0801fefe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fefe:	b510      	push	{r4, lr}
 801ff00:	4604      	mov	r4, r0
 801ff02:	2104      	movs	r1, #4
 801ff04:	f00a fc17 	bl	802a736 <_ZdlPvj>
 801ff08:	4620      	mov	r0, r4
 801ff0a:	bd10      	pop	{r4, pc}

0801ff0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ff0c:	b510      	push	{r4, lr}
 801ff0e:	4604      	mov	r4, r0
 801ff10:	2104      	movs	r1, #4
 801ff12:	f00a fc10 	bl	802a736 <_ZdlPvj>
 801ff16:	4620      	mov	r0, r4
 801ff18:	bd10      	pop	{r4, pc}

0801ff1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ff1a:	b510      	push	{r4, lr}
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	2104      	movs	r1, #4
 801ff20:	f00a fc09 	bl	802a736 <_ZdlPvj>
 801ff24:	4620      	mov	r0, r4
 801ff26:	bd10      	pop	{r4, pc}

0801ff28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ff28:	b510      	push	{r4, lr}
 801ff2a:	4604      	mov	r4, r0
 801ff2c:	2104      	movs	r1, #4
 801ff2e:	f00a fc02 	bl	802a736 <_ZdlPvj>
 801ff32:	4620      	mov	r0, r4
 801ff34:	bd10      	pop	{r4, pc}

0801ff36 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ff36:	b510      	push	{r4, lr}
 801ff38:	4604      	mov	r4, r0
 801ff3a:	2104      	movs	r1, #4
 801ff3c:	f00a fbfb 	bl	802a736 <_ZdlPvj>
 801ff40:	4620      	mov	r0, r4
 801ff42:	bd10      	pop	{r4, pc}

0801ff44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ff44:	b510      	push	{r4, lr}
 801ff46:	4604      	mov	r4, r0
 801ff48:	2104      	movs	r1, #4
 801ff4a:	f00a fbf4 	bl	802a736 <_ZdlPvj>
 801ff4e:	4620      	mov	r0, r4
 801ff50:	bd10      	pop	{r4, pc}

0801ff52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ff52:	b510      	push	{r4, lr}
 801ff54:	4604      	mov	r4, r0
 801ff56:	2104      	movs	r1, #4
 801ff58:	f00a fbed 	bl	802a736 <_ZdlPvj>
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	bd10      	pop	{r4, pc}

0801ff60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ff60:	b510      	push	{r4, lr}
 801ff62:	4604      	mov	r4, r0
 801ff64:	2104      	movs	r1, #4
 801ff66:	f00a fbe6 	bl	802a736 <_ZdlPvj>
 801ff6a:	4620      	mov	r0, r4
 801ff6c:	bd10      	pop	{r4, pc}

0801ff6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ff6e:	b510      	push	{r4, lr}
 801ff70:	4604      	mov	r4, r0
 801ff72:	2104      	movs	r1, #4
 801ff74:	f00a fbdf 	bl	802a736 <_ZdlPvj>
 801ff78:	4620      	mov	r0, r4
 801ff7a:	bd10      	pop	{r4, pc}

0801ff7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ff7c:	b510      	push	{r4, lr}
 801ff7e:	4604      	mov	r4, r0
 801ff80:	2104      	movs	r1, #4
 801ff82:	f00a fbd8 	bl	802a736 <_ZdlPvj>
 801ff86:	4620      	mov	r0, r4
 801ff88:	bd10      	pop	{r4, pc}

0801ff8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ff8a:	b510      	push	{r4, lr}
 801ff8c:	4604      	mov	r4, r0
 801ff8e:	2104      	movs	r1, #4
 801ff90:	f00a fbd1 	bl	802a736 <_ZdlPvj>
 801ff94:	4620      	mov	r0, r4
 801ff96:	bd10      	pop	{r4, pc}

0801ff98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ff98:	b510      	push	{r4, lr}
 801ff9a:	4604      	mov	r4, r0
 801ff9c:	2104      	movs	r1, #4
 801ff9e:	f00a fbca 	bl	802a736 <_ZdlPvj>
 801ffa2:	4620      	mov	r0, r4
 801ffa4:	bd10      	pop	{r4, pc}

0801ffa6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ffa6:	b510      	push	{r4, lr}
 801ffa8:	4604      	mov	r4, r0
 801ffaa:	2104      	movs	r1, #4
 801ffac:	f00a fbc3 	bl	802a736 <_ZdlPvj>
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	bd10      	pop	{r4, pc}

0801ffb4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ffb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffb8:	460d      	mov	r5, r1
 801ffba:	b087      	sub	sp, #28
 801ffbc:	4614      	mov	r4, r2
 801ffbe:	4698      	mov	r8, r3
 801ffc0:	b333      	cbz	r3, 8020010 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ffc2:	4608      	mov	r0, r1
 801ffc4:	f7f5 fbb7 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ffc8:	bb10      	cbnz	r0, 8020010 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ffca:	6828      	ldr	r0, [r5, #0]
 801ffcc:	ab04      	add	r3, sp, #16
 801ffce:	6869      	ldr	r1, [r5, #4]
 801ffd0:	4e72      	ldr	r6, [pc, #456]	; (802019c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801ffd2:	c303      	stmia	r3!, {r0, r1}
 801ffd4:	a804      	add	r0, sp, #16
 801ffd6:	f7f9 ffc7 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffda:	6830      	ldr	r0, [r6, #0]
 801ffdc:	6803      	ldr	r3, [r0, #0]
 801ffde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffe0:	4798      	blx	r3
 801ffe2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ffe6:	d016      	beq.n	8020016 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ffe8:	f010 0f08 	tst.w	r0, #8
 801ffec:	d016      	beq.n	802001c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801ffee:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801fff2:	6830      	ldr	r0, [r6, #0]
 801fff4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fff8:	6801      	ldr	r1, [r0, #0]
 801fffa:	9501      	str	r5, [sp, #4]
 801fffc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8020000:	f8cd 8008 	str.w	r8, [sp, #8]
 8020004:	9500      	str	r5, [sp, #0]
 8020006:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802000a:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 802000c:	4621      	mov	r1, r4
 802000e:	47a8      	blx	r5
 8020010:	b007      	add	sp, #28
 8020012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020016:	f010 0f02 	tst.w	r0, #2
 802001a:	e7e7      	b.n	801ffec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 802001c:	6830      	ldr	r0, [r6, #0]
 802001e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020022:	6803      	ldr	r3, [r0, #0]
 8020024:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8020028:	6a1b      	ldr	r3, [r3, #32]
 802002a:	4798      	blx	r3
 802002c:	495c      	ldr	r1, [pc, #368]	; (80201a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 802002e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8020032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020036:	880b      	ldrh	r3, [r1, #0]
 8020038:	468e      	mov	lr, r1
 802003a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802003e:	fb03 c202 	mla	r2, r3, r2, ip
 8020042:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020046:	fb07 f203 	mul.w	r2, r7, r3
 802004a:	d053      	beq.n	80200f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 802004c:	fa1f f388 	uxth.w	r3, r8
 8020050:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 8020054:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8020058:	ea4f 2814 	mov.w	r8, r4, lsr #8
 802005c:	00e4      	lsls	r4, r4, #3
 802005e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020062:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8020066:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 802006a:	b2e4      	uxtb	r4, r4
 802006c:	fb09 f903 	mul.w	r9, r9, r3
 8020070:	fb08 f803 	mul.w	r8, r8, r3
 8020074:	006d      	lsls	r5, r5, #1
 8020076:	4363      	muls	r3, r4
 8020078:	b2bc      	uxth	r4, r7
 802007a:	4288      	cmp	r0, r1
 802007c:	f080 8088 	bcs.w	8020190 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8020080:	eb00 0a05 	add.w	sl, r0, r5
 8020084:	4550      	cmp	r0, sl
 8020086:	d22f      	bcs.n	80200e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8020088:	8802      	ldrh	r2, [r0, #0]
 802008a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802008e:	10d7      	asrs	r7, r2, #3
 8020090:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020094:	00d2      	lsls	r2, r2, #3
 8020096:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802009a:	fb1c fc04 	smulbb	ip, ip, r4
 802009e:	b2d2      	uxtb	r2, r2
 80200a0:	fb17 f704 	smulbb	r7, r7, r4
 80200a4:	fb12 f204 	smulbb	r2, r2, r4
 80200a8:	44c4      	add	ip, r8
 80200aa:	444f      	add	r7, r9
 80200ac:	fa1f fc8c 	uxth.w	ip, ip
 80200b0:	441a      	add	r2, r3
 80200b2:	b2bf      	uxth	r7, r7
 80200b4:	b292      	uxth	r2, r2
 80200b6:	f10c 0b01 	add.w	fp, ip, #1
 80200ba:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80200be:	f102 0b01 	add.w	fp, r2, #1
 80200c2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80200c6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80200ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80200ce:	ea4c 0202 	orr.w	r2, ip, r2
 80200d2:	f107 0c01 	add.w	ip, r7, #1
 80200d6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80200da:	097f      	lsrs	r7, r7, #5
 80200dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80200e0:	433a      	orrs	r2, r7
 80200e2:	f820 2b02 	strh.w	r2, [r0], #2
 80200e6:	e7cd      	b.n	8020084 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 80200e8:	f8be 2000 	ldrh.w	r2, [lr]
 80200ec:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 80200f0:	4410      	add	r0, r2
 80200f2:	e7c2      	b.n	802007a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 80200f4:	07db      	lsls	r3, r3, #31
 80200f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80200fa:	d50e      	bpl.n	802011a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 80200fc:	006d      	lsls	r5, r5, #1
 80200fe:	4290      	cmp	r0, r2
 8020100:	d246      	bcs.n	8020190 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8020102:	1943      	adds	r3, r0, r5
 8020104:	4298      	cmp	r0, r3
 8020106:	d202      	bcs.n	802010e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8020108:	f820 4b02 	strh.w	r4, [r0], #2
 802010c:	e7fa      	b.n	8020104 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 802010e:	f8be 3000 	ldrh.w	r3, [lr]
 8020112:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8020116:	4418      	add	r0, r3
 8020118:	e7f1      	b.n	80200fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 802011a:	0787      	lsls	r7, r0, #30
 802011c:	462b      	mov	r3, r5
 802011e:	d00a      	beq.n	8020136 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8020120:	4603      	mov	r3, r0
 8020122:	4293      	cmp	r3, r2
 8020124:	d205      	bcs.n	8020132 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 8020126:	801c      	strh	r4, [r3, #0]
 8020128:	f8be 1000 	ldrh.w	r1, [lr]
 802012c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8020130:	e7f7      	b.n	8020122 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 8020132:	3002      	adds	r0, #2
 8020134:	1e6b      	subs	r3, r5, #1
 8020136:	07dd      	lsls	r5, r3, #31
 8020138:	d50d      	bpl.n	8020156 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 802013a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802013e:	3901      	subs	r1, #1
 8020140:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020144:	4291      	cmp	r1, r2
 8020146:	d205      	bcs.n	8020154 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8020148:	800c      	strh	r4, [r1, #0]
 802014a:	f8be 5000 	ldrh.w	r5, [lr]
 802014e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8020152:	e7f7      	b.n	8020144 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8020154:	3b01      	subs	r3, #1
 8020156:	b1db      	cbz	r3, 8020190 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8020158:	b2a1      	uxth	r1, r4
 802015a:	105b      	asrs	r3, r3, #1
 802015c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8020160:	009b      	lsls	r3, r3, #2
 8020162:	4290      	cmp	r0, r2
 8020164:	d214      	bcs.n	8020190 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8020166:	0781      	lsls	r1, r0, #30
 8020168:	d006      	beq.n	8020178 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 802016a:	4b0e      	ldr	r3, [pc, #56]	; (80201a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 802016c:	f44f 7162 	mov.w	r1, #904	; 0x388
 8020170:	4a0d      	ldr	r2, [pc, #52]	; (80201a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8020172:	480e      	ldr	r0, [pc, #56]	; (80201ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8020174:	f00a fb0e 	bl	802a794 <__assert_func>
 8020178:	18c5      	adds	r5, r0, r3
 802017a:	4601      	mov	r1, r0
 802017c:	42a9      	cmp	r1, r5
 802017e:	d202      	bcs.n	8020186 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8020180:	f841 4b04 	str.w	r4, [r1], #4
 8020184:	e7fa      	b.n	802017c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 8020186:	f8be 1000 	ldrh.w	r1, [lr]
 802018a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802018e:	e7e8      	b.n	8020162 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8020190:	6830      	ldr	r0, [r6, #0]
 8020192:	6803      	ldr	r3, [r0, #0]
 8020194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020196:	4798      	blx	r3
 8020198:	e73a      	b.n	8020010 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802019a:	bf00      	nop
 802019c:	20014b34 	.word	0x20014b34
 80201a0:	20014b2e 	.word	0x20014b2e
 80201a4:	08030614 	.word	0x08030614
 80201a8:	08030dc8 	.word	0x08030dc8
 80201ac:	08030643 	.word	0x08030643

080201b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	4f97      	ldr	r7, [pc, #604]	; (8020414 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80201b6:	4616      	mov	r6, r2
 80201b8:	b08f      	sub	sp, #60	; 0x3c
 80201ba:	4604      	mov	r4, r0
 80201bc:	683a      	ldr	r2, [r7, #0]
 80201be:	4689      	mov	r9, r1
 80201c0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80201c4:	2a02      	cmp	r2, #2
 80201c6:	d106      	bne.n	80201d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80201c8:	4b93      	ldr	r3, [pc, #588]	; (8020418 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80201ca:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80201ce:	4a93      	ldr	r2, [pc, #588]	; (802041c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80201d0:	4893      	ldr	r0, [pc, #588]	; (8020420 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80201d2:	f00a fadf 	bl	802a794 <__assert_func>
 80201d6:	ad0e      	add	r5, sp, #56	; 0x38
 80201d8:	f825 3d24 	strh.w	r3, [r5, #-36]!
 80201dc:	4628      	mov	r0, r5
 80201de:	f7fd fa4d 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80201e2:	6823      	ldr	r3, [r4, #0]
 80201e4:	4680      	mov	r8, r0
 80201e6:	4620      	mov	r0, r4
 80201e8:	6a1b      	ldr	r3, [r3, #32]
 80201ea:	4798      	blx	r3
 80201ec:	4580      	cmp	r8, r0
 80201ee:	d004      	beq.n	80201fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80201f0:	4b8c      	ldr	r3, [pc, #560]	; (8020424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80201f2:	f240 21ca 	movw	r1, #714	; 0x2ca
 80201f6:	4a89      	ldr	r2, [pc, #548]	; (802041c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80201f8:	e7ea      	b.n	80201d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80201fa:	4628      	mov	r0, r5
 80201fc:	f7fd f9b4 	bl	801d568 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020200:	4680      	mov	r8, r0
 8020202:	b920      	cbnz	r0, 802020e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020204:	4b88      	ldr	r3, [pc, #544]	; (8020428 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8020206:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802020a:	4a84      	ldr	r2, [pc, #528]	; (802041c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 802020c:	e7e0      	b.n	80201d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802020e:	6830      	ldr	r0, [r6, #0]
 8020210:	ab06      	add	r3, sp, #24
 8020212:	6871      	ldr	r1, [r6, #4]
 8020214:	f10d 0b20 	add.w	fp, sp, #32
 8020218:	f9b6 a000 	ldrsh.w	sl, [r6]
 802021c:	c303      	stmia	r3!, {r0, r1}
 802021e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020222:	ab08      	add	r3, sp, #32
 8020224:	f8d9 0000 	ldr.w	r0, [r9]
 8020228:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 802022c:	c303      	stmia	r3!, {r0, r1}
 802022e:	4628      	mov	r0, r5
 8020230:	f7fd f892 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020234:	4606      	mov	r6, r0
 8020236:	4628      	mov	r0, r5
 8020238:	4d7c      	ldr	r5, [pc, #496]	; (802042c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 802023a:	f7fd f8c7 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 802023e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020242:	a806      	add	r0, sp, #24
 8020244:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020248:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 802024c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8020250:	f7f9 fe8a 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020254:	4658      	mov	r0, fp
 8020256:	f7f9 fe87 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802025a:	a80a      	add	r0, sp, #40	; 0x28
 802025c:	f7f9 fe84 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020260:	4b73      	ldr	r3, [pc, #460]	; (8020430 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020262:	2100      	movs	r1, #0
 8020264:	f9b5 2000 	ldrsh.w	r2, [r5]
 8020268:	f9b3 3000 	ldrsh.w	r3, [r3]
 802026c:	4658      	mov	r0, fp
 802026e:	910c      	str	r1, [sp, #48]	; 0x30
 8020270:	a90c      	add	r1, sp, #48	; 0x30
 8020272:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020276:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802027a:	f7f5 fa19 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 802027e:	4658      	mov	r0, fp
 8020280:	f7f5 fa59 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020284:	2800      	cmp	r0, #0
 8020286:	f040 809a 	bne.w	80203be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 802028a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802028e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020292:	4288      	cmp	r0, r1
 8020294:	db38      	blt.n	8020308 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020296:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 802029a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802029e:	429a      	cmp	r2, r3
 80202a0:	db32      	blt.n	8020308 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80202a2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80202a6:	4430      	add	r0, r6
 80202a8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80202ac:	4431      	add	r1, r6
 80202ae:	b200      	sxth	r0, r0
 80202b0:	b209      	sxth	r1, r1
 80202b2:	4288      	cmp	r0, r1
 80202b4:	dc28      	bgt.n	8020308 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80202b6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80202ba:	440a      	add	r2, r1
 80202bc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80202c0:	440b      	add	r3, r1
 80202c2:	b212      	sxth	r2, r2
 80202c4:	b21b      	sxth	r3, r3
 80202c6:	429a      	cmp	r2, r3
 80202c8:	dc1e      	bgt.n	8020308 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80202ca:	6823      	ldr	r3, [r4, #0]
 80202cc:	4620      	mov	r0, r4
 80202ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202d0:	4798      	blx	r3
 80202d2:	4682      	mov	sl, r0
 80202d4:	6838      	ldr	r0, [r7, #0]
 80202d6:	6803      	ldr	r3, [r0, #0]
 80202d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80202da:	4798      	blx	r3
 80202dc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80202e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80202e4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80202e8:	1a5b      	subs	r3, r3, r1
 80202ea:	b29b      	uxth	r3, r3
 80202ec:	b21c      	sxth	r4, r3
 80202ee:	2c00      	cmp	r4, #0
 80202f0:	dc0f      	bgt.n	8020312 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 80202f2:	bf18      	it	ne
 80202f4:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80202f8:	4644      	mov	r4, r8
 80202fa:	bf1e      	ittt	ne
 80202fc:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020300:	185b      	addne	r3, r3, r1
 8020302:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8020306:	e009      	b.n	802031c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8020308:	4b4a      	ldr	r3, [pc, #296]	; (8020434 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 802030a:	f240 21da 	movw	r1, #730	; 0x2da
 802030e:	4a43      	ldr	r2, [pc, #268]	; (802041c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020310:	e75e      	b.n	80201d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020312:	1ad3      	subs	r3, r2, r3
 8020314:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020318:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 802031c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020320:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020324:	1b9b      	subs	r3, r3, r6
 8020326:	b29b      	uxth	r3, r3
 8020328:	b219      	sxth	r1, r3
 802032a:	2900      	cmp	r1, #0
 802032c:	dd4b      	ble.n	80203c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 802032e:	4351      	muls	r1, r2
 8020330:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020334:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020338:	1acb      	subs	r3, r1, r3
 802033a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 802033e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020342:	2e00      	cmp	r6, #0
 8020344:	dd3b      	ble.n	80203be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020346:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 802034a:	2b00      	cmp	r3, #0
 802034c:	dd37      	ble.n	80203be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 802034e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8020352:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020356:	fb0a f90c 	mul.w	r9, sl, ip
 802035a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 802035e:	4481      	add	r9, r0
 8020360:	8828      	ldrh	r0, [r5, #0]
 8020362:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8020366:	1a41      	subs	r1, r0, r1
 8020368:	42ae      	cmp	r6, r5
 802036a:	bfa8      	it	ge
 802036c:	462e      	movge	r6, r5
 802036e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020372:	428e      	cmp	r6, r1
 8020374:	bfa8      	it	ge
 8020376:	460e      	movge	r6, r1
 8020378:	429d      	cmp	r5, r3
 802037a:	bfa8      	it	ge
 802037c:	461d      	movge	r5, r3
 802037e:	4b2c      	ldr	r3, [pc, #176]	; (8020430 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020380:	881b      	ldrh	r3, [r3, #0]
 8020382:	eba3 030c 	sub.w	r3, r3, ip
 8020386:	429d      	cmp	r5, r3
 8020388:	bfa8      	it	ge
 802038a:	461d      	movge	r5, r3
 802038c:	42b0      	cmp	r0, r6
 802038e:	d12c      	bne.n	80203ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020390:	4290      	cmp	r0, r2
 8020392:	d12a      	bne.n	80203ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020394:	6838      	ldr	r0, [r7, #0]
 8020396:	9203      	str	r2, [sp, #12]
 8020398:	6803      	ldr	r3, [r0, #0]
 802039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802039c:	4798      	blx	r3
 802039e:	07c3      	lsls	r3, r0, #31
 80203a0:	d51a      	bpl.n	80203d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80203a2:	9a03      	ldr	r2, [sp, #12]
 80203a4:	6838      	ldr	r0, [r7, #0]
 80203a6:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80203aa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80203ae:	6803      	ldr	r3, [r0, #0]
 80203b0:	9200      	str	r2, [sp, #0]
 80203b2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80203b4:	4623      	mov	r3, r4
 80203b6:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80203ba:	47a8      	blx	r5
 80203bc:	4680      	mov	r8, r0
 80203be:	4640      	mov	r0, r8
 80203c0:	b00f      	add	sp, #60	; 0x3c
 80203c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c6:	bf1f      	itttt	ne
 80203c8:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 80203cc:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 80203d0:	185b      	addne	r3, r3, r1
 80203d2:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80203d6:	e7b2      	b.n	802033e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 80203d8:	6838      	ldr	r0, [r7, #0]
 80203da:	464a      	mov	r2, r9
 80203dc:	4621      	mov	r1, r4
 80203de:	6803      	ldr	r3, [r0, #0]
 80203e0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80203e2:	fb05 f30a 	mul.w	r3, r5, sl
 80203e6:	47b0      	blx	r6
 80203e8:	e7e9      	b.n	80203be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80203ea:	4355      	muls	r5, r2
 80203ec:	0076      	lsls	r6, r6, #1
 80203ee:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80203f2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80203f6:	9303      	str	r3, [sp, #12]
 80203f8:	9b03      	ldr	r3, [sp, #12]
 80203fa:	429c      	cmp	r4, r3
 80203fc:	d2df      	bcs.n	80203be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80203fe:	6838      	ldr	r0, [r7, #0]
 8020400:	464a      	mov	r2, r9
 8020402:	4621      	mov	r1, r4
 8020404:	44d1      	add	r9, sl
 8020406:	6803      	ldr	r3, [r0, #0]
 8020408:	445c      	add	r4, fp
 802040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802040c:	461d      	mov	r5, r3
 802040e:	4633      	mov	r3, r6
 8020410:	47a8      	blx	r5
 8020412:	e7f1      	b.n	80203f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8020414:	20014b34 	.word	0x20014b34
 8020418:	0803043a 	.word	0x0803043a
 802041c:	08030cab 	.word	0x08030cab
 8020420:	08030643 	.word	0x08030643
 8020424:	080304ec 	.word	0x080304ec
 8020428:	08030541 	.word	0x08030541
 802042c:	20014b2e 	.word	0x20014b2e
 8020430:	20014b30 	.word	0x20014b30
 8020434:	0803057f 	.word	0x0803057f

08020438 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020438:	2200      	movs	r2, #0
 802043a:	4910      	ldr	r1, [pc, #64]	; (802047c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 802043c:	6042      	str	r2, [r0, #4]
 802043e:	6001      	str	r1, [r0, #0]
 8020440:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020444:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020448:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802044c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020450:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020454:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020458:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802045c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020460:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020464:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020468:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 802046c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020470:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020474:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020478:	4770      	bx	lr
 802047a:	bf00      	nop
 802047c:	08030924 	.word	0x08030924

08020480 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020484:	b08b      	sub	sp, #44	; 0x2c
 8020486:	460d      	mov	r5, r1
 8020488:	4604      	mov	r4, r0
 802048a:	4699      	mov	r9, r3
 802048c:	6808      	ldr	r0, [r1, #0]
 802048e:	ab06      	add	r3, sp, #24
 8020490:	6849      	ldr	r1, [r1, #4]
 8020492:	c303      	stmia	r3!, {r0, r1}
 8020494:	6810      	ldr	r0, [r2, #0]
 8020496:	ab08      	add	r3, sp, #32
 8020498:	6851      	ldr	r1, [r2, #4]
 802049a:	c303      	stmia	r3!, {r0, r1}
 802049c:	a806      	add	r0, sp, #24
 802049e:	f7f9 fd63 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204a2:	4629      	mov	r1, r5
 80204a4:	a808      	add	r0, sp, #32
 80204a6:	4d63      	ldr	r5, [pc, #396]	; (8020634 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 80204a8:	f7f9 fd46 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80204b0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80204b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80204b8:	6828      	ldr	r0, [r5, #0]
 80204ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 80204be:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80204c2:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80204c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80204ca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80204ce:	440a      	add	r2, r1
 80204d0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80204d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80204d8:	4413      	add	r3, r2
 80204da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80204de:	6803      	ldr	r3, [r0, #0]
 80204e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204e2:	4798      	blx	r3
 80204e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80204e8:	d118      	bne.n	802051c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80204ea:	f010 0f20 	tst.w	r0, #32
 80204ee:	6828      	ldr	r0, [r5, #0]
 80204f0:	d017      	beq.n	8020522 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80204f2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80204f6:	b2b6      	uxth	r6, r6
 80204f8:	6801      	ldr	r1, [r0, #0]
 80204fa:	9502      	str	r5, [sp, #8]
 80204fc:	fa1f f588 	uxth.w	r5, r8
 8020500:	f8cd 900c 	str.w	r9, [sp, #12]
 8020504:	9601      	str	r6, [sp, #4]
 8020506:	9500      	str	r5, [sp, #0]
 8020508:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802050c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 802050e:	4621      	mov	r1, r4
 8020510:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020514:	47a8      	blx	r5
 8020516:	b00b      	add	sp, #44	; 0x2c
 8020518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802051c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020520:	e7e5      	b.n	80204ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020522:	6803      	ldr	r3, [r0, #0]
 8020524:	6a1b      	ldr	r3, [r3, #32]
 8020526:	4798      	blx	r3
 8020528:	4a43      	ldr	r2, [pc, #268]	; (8020638 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 802052a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802052e:	f8b2 e000 	ldrh.w	lr, [r2]
 8020532:	4692      	mov	sl, r2
 8020534:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020538:	fb0e 1303 	mla	r3, lr, r3, r1
 802053c:	fb0e fe06 	mul.w	lr, lr, r6
 8020540:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020544:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020548:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 802054c:	9305      	str	r3, [sp, #20]
 802054e:	4570      	cmp	r0, lr
 8020550:	d26a      	bcs.n	8020628 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 8020552:	9b05      	ldr	r3, [sp, #20]
 8020554:	4621      	mov	r1, r4
 8020556:	eb00 0b03 	add.w	fp, r0, r3
 802055a:	4558      	cmp	r0, fp
 802055c:	d257      	bcs.n	802060e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 802055e:	f851 4b04 	ldr.w	r4, [r1], #4
 8020562:	0e22      	lsrs	r2, r4, #24
 8020564:	d012      	beq.n	802058c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8020566:	2aff      	cmp	r2, #255	; 0xff
 8020568:	ea4f 2714 	mov.w	r7, r4, lsr #8
 802056c:	d110      	bne.n	8020590 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802056e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020572:	d10d      	bne.n	8020590 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020574:	0963      	lsrs	r3, r4, #5
 8020576:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802057a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802057e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020582:	f027 0707 	bic.w	r7, r7, #7
 8020586:	431f      	orrs	r7, r3
 8020588:	433c      	orrs	r4, r7
 802058a:	8004      	strh	r4, [r0, #0]
 802058c:	3002      	adds	r0, #2
 802058e:	e7e4      	b.n	802055a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8020590:	fb09 f302 	mul.w	r3, r9, r2
 8020594:	f8b0 c000 	ldrh.w	ip, [r0]
 8020598:	f3c4 4507 	ubfx	r5, r4, #16, #8
 802059c:	b2ff      	uxtb	r7, r7
 802059e:	1c5a      	adds	r2, r3, #1
 80205a0:	ea4f 262c 	mov.w	r6, ip, asr #8
 80205a4:	b2e4      	uxtb	r4, r4
 80205a6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80205aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80205ae:	1212      	asrs	r2, r2, #8
 80205b0:	b293      	uxth	r3, r2
 80205b2:	43d2      	mvns	r2, r2
 80205b4:	fb15 f503 	smulbb	r5, r5, r3
 80205b8:	b2d2      	uxtb	r2, r2
 80205ba:	fb17 f703 	smulbb	r7, r7, r3
 80205be:	fb06 5602 	mla	r6, r6, r2, r5
 80205c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80205c6:	fb14 f403 	smulbb	r4, r4, r3
 80205ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80205ce:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80205d2:	b2b6      	uxth	r6, r6
 80205d4:	fa5f fc8c 	uxtb.w	ip, ip
 80205d8:	fb05 7702 	mla	r7, r5, r2, r7
 80205dc:	1c73      	adds	r3, r6, #1
 80205de:	fb0c 4202 	mla	r2, ip, r2, r4
 80205e2:	b2bf      	uxth	r7, r7
 80205e4:	b292      	uxth	r2, r2
 80205e6:	1c7d      	adds	r5, r7, #1
 80205e8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80205ec:	f102 0c01 	add.w	ip, r2, #1
 80205f0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80205f4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80205f8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80205fc:	097f      	lsrs	r7, r7, #5
 80205fe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020602:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020606:	4316      	orrs	r6, r2
 8020608:	433e      	orrs	r6, r7
 802060a:	8006      	strh	r6, [r0, #0]
 802060c:	e7be      	b.n	802058c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 802060e:	f8ba 3000 	ldrh.w	r3, [sl]
 8020612:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8020616:	eba3 0308 	sub.w	r3, r3, r8
 802061a:	eba4 0408 	sub.w	r4, r4, r8
 802061e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020622:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020626:	e792      	b.n	802054e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020628:	4b02      	ldr	r3, [pc, #8]	; (8020634 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 802062a:	6818      	ldr	r0, [r3, #0]
 802062c:	6803      	ldr	r3, [r0, #0]
 802062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020630:	4798      	blx	r3
 8020632:	e770      	b.n	8020516 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020634:	20014b34 	.word	0x20014b34
 8020638:	20014b2e 	.word	0x20014b2e

0802063c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802063c:	b570      	push	{r4, r5, r6, lr}
 802063e:	9d04      	ldr	r5, [sp, #16]
 8020640:	460c      	mov	r4, r1
 8020642:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8020646:	4619      	mov	r1, r3
 8020648:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802064c:	2a0d      	cmp	r2, #13
 802064e:	d820      	bhi.n	8020692 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8020650:	e8df f002 	tbb	[pc, r2]
 8020654:	18121807 	.word	0x18121807
 8020658:	18181818 	.word	0x18181818
 802065c:	18181818 	.word	0x18181818
 8020660:	1818      	.short	0x1818
 8020662:	6802      	ldr	r2, [r0, #0]
 8020664:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020668:	68d6      	ldr	r6, [r2, #12]
 802066a:	462b      	mov	r3, r5
 802066c:	460a      	mov	r2, r1
 802066e:	4621      	mov	r1, r4
 8020670:	46b4      	mov	ip, r6
 8020672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020676:	4760      	bx	ip
 8020678:	462a      	mov	r2, r5
 802067a:	4620      	mov	r0, r4
 802067c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020680:	f7ff befe 	b.w	8020480 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020684:	4b03      	ldr	r3, [pc, #12]	; (8020694 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8020686:	f240 21c1 	movw	r1, #705	; 0x2c1
 802068a:	4a03      	ldr	r2, [pc, #12]	; (8020698 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 802068c:	4803      	ldr	r0, [pc, #12]	; (802069c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 802068e:	f00a f881 	bl	802a794 <__assert_func>
 8020692:	bd70      	pop	{r4, r5, r6, pc}
 8020694:	080305df 	.word	0x080305df
 8020698:	08030d31 	.word	0x08030d31
 802069c:	08030643 	.word	0x08030643

080206a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80206a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206a4:	b093      	sub	sp, #76	; 0x4c
 80206a6:	880f      	ldrh	r7, [r1, #0]
 80206a8:	4604      	mov	r4, r0
 80206aa:	4688      	mov	r8, r1
 80206ac:	4616      	mov	r6, r2
 80206ae:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80206b2:	b12f      	cbz	r7, 80206c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80206b4:	4b6f      	ldr	r3, [pc, #444]	; (8020874 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80206b6:	21e2      	movs	r1, #226	; 0xe2
 80206b8:	4a6f      	ldr	r2, [pc, #444]	; (8020878 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80206ba:	4870      	ldr	r0, [pc, #448]	; (802087c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80206bc:	f00a f86a 	bl	802a794 <__assert_func>
 80206c0:	6810      	ldr	r0, [r2, #0]
 80206c2:	ad0e      	add	r5, sp, #56	; 0x38
 80206c4:	6851      	ldr	r1, [r2, #4]
 80206c6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8020884 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 80206ca:	c503      	stmia	r5!, {r0, r1}
 80206cc:	6818      	ldr	r0, [r3, #0]
 80206ce:	ad10      	add	r5, sp, #64	; 0x40
 80206d0:	6859      	ldr	r1, [r3, #4]
 80206d2:	c503      	stmia	r5!, {r0, r1}
 80206d4:	a80e      	add	r0, sp, #56	; 0x38
 80206d6:	f7f9 fc47 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206da:	4631      	mov	r1, r6
 80206dc:	a810      	add	r0, sp, #64	; 0x40
 80206de:	4e68      	ldr	r6, [pc, #416]	; (8020880 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80206e0:	f7f9 fc2a 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206e4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80206e8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80206ec:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80206f0:	f8db 0000 	ldr.w	r0, [fp]
 80206f4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80206f8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80206fc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8020700:	440c      	add	r4, r1
 8020702:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020706:	440a      	add	r2, r1
 8020708:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802070c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020710:	4413      	add	r3, r2
 8020712:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020716:	6803      	ldr	r3, [r0, #0]
 8020718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802071c:	4798      	blx	r3
 802071e:	2801      	cmp	r0, #1
 8020720:	d11d      	bne.n	802075e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020722:	220b      	movs	r2, #11
 8020724:	9708      	str	r7, [sp, #32]
 8020726:	b2ad      	uxth	r5, r5
 8020728:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802072c:	9207      	str	r2, [sp, #28]
 802072e:	4621      	mov	r1, r4
 8020730:	8832      	ldrh	r2, [r6, #0]
 8020732:	f8cd a010 	str.w	sl, [sp, #16]
 8020736:	9502      	str	r5, [sp, #8]
 8020738:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802073c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020740:	9203      	str	r2, [sp, #12]
 8020742:	fa1f f289 	uxth.w	r2, r9
 8020746:	9201      	str	r2, [sp, #4]
 8020748:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802074c:	9200      	str	r2, [sp, #0]
 802074e:	4642      	mov	r2, r8
 8020750:	f8db 0000 	ldr.w	r0, [fp]
 8020754:	f7f5 fbf8 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020758:	b013      	add	sp, #76	; 0x4c
 802075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802075e:	f8db 0000 	ldr.w	r0, [fp]
 8020762:	6803      	ldr	r3, [r0, #0]
 8020764:	6a1b      	ldr	r3, [r3, #32]
 8020766:	4798      	blx	r3
 8020768:	8832      	ldrh	r2, [r6, #0]
 802076a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802076e:	f04f 0e04 	mov.w	lr, #4
 8020772:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020776:	4355      	muls	r5, r2
 8020778:	960d      	str	r6, [sp, #52]	; 0x34
 802077a:	fb02 1303 	mla	r3, r2, r3, r1
 802077e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020782:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8020786:	930c      	str	r3, [sp, #48]	; 0x30
 8020788:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802078c:	930b      	str	r3, [sp, #44]	; 0x2c
 802078e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020790:	4298      	cmp	r0, r3
 8020792:	d269      	bcs.n	8020868 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8020794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020796:	4621      	mov	r1, r4
 8020798:	eb00 0b03 	add.w	fp, r0, r3
 802079c:	4558      	cmp	r0, fp
 802079e:	460b      	mov	r3, r1
 80207a0:	d256      	bcs.n	8020850 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80207a2:	781b      	ldrb	r3, [r3, #0]
 80207a4:	3101      	adds	r1, #1
 80207a6:	fb1e e303 	smlabb	r3, lr, r3, lr
 80207aa:	f858 2003 	ldr.w	r2, [r8, r3]
 80207ae:	0e14      	lsrs	r4, r2, #24
 80207b0:	d012      	beq.n	80207d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80207b2:	2cff      	cmp	r4, #255	; 0xff
 80207b4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80207b8:	d110      	bne.n	80207dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80207ba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80207be:	d10d      	bne.n	80207dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80207c0:	0953      	lsrs	r3, r2, #5
 80207c2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80207c6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80207ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80207ce:	f026 0607 	bic.w	r6, r6, #7
 80207d2:	431e      	orrs	r6, r3
 80207d4:	4332      	orrs	r2, r6
 80207d6:	8002      	strh	r2, [r0, #0]
 80207d8:	3002      	adds	r0, #2
 80207da:	e7df      	b.n	802079c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 80207dc:	fb0a f404 	mul.w	r4, sl, r4
 80207e0:	8807      	ldrh	r7, [r0, #0]
 80207e2:	b2f6      	uxtb	r6, r6
 80207e4:	1c63      	adds	r3, r4, #1
 80207e6:	123d      	asrs	r5, r7, #8
 80207e8:	eb03 2324 	add.w	r3, r3, r4, asr #8
 80207ec:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80207f0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80207f4:	b2d2      	uxtb	r2, r2
 80207f6:	121b      	asrs	r3, r3, #8
 80207f8:	fa1f fc83 	uxth.w	ip, r3
 80207fc:	43db      	mvns	r3, r3
 80207fe:	fb14 f40c 	smulbb	r4, r4, ip
 8020802:	b2db      	uxtb	r3, r3
 8020804:	fb12 f20c 	smulbb	r2, r2, ip
 8020808:	fb05 4503 	mla	r5, r5, r3, r4
 802080c:	10fc      	asrs	r4, r7, #3
 802080e:	fb16 f60c 	smulbb	r6, r6, ip
 8020812:	00ff      	lsls	r7, r7, #3
 8020814:	b2ad      	uxth	r5, r5
 8020816:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802081a:	b2ff      	uxtb	r7, r7
 802081c:	fb04 6603 	mla	r6, r4, r3, r6
 8020820:	fb07 2203 	mla	r2, r7, r3, r2
 8020824:	1c6b      	adds	r3, r5, #1
 8020826:	b2b6      	uxth	r6, r6
 8020828:	b292      	uxth	r2, r2
 802082a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802082e:	1c54      	adds	r4, r2, #1
 8020830:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020834:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020838:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802083c:	4325      	orrs	r5, r4
 802083e:	1c74      	adds	r4, r6, #1
 8020840:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020844:	0976      	lsrs	r6, r6, #5
 8020846:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802084a:	4335      	orrs	r5, r6
 802084c:	8005      	strh	r5, [r0, #0]
 802084e:	e7c3      	b.n	80207d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020852:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020856:	881b      	ldrh	r3, [r3, #0]
 8020858:	eba4 0409 	sub.w	r4, r4, r9
 802085c:	eba3 0309 	sub.w	r3, r3, r9
 8020860:	440c      	add	r4, r1
 8020862:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020866:	e792      	b.n	802078e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020868:	4b06      	ldr	r3, [pc, #24]	; (8020884 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802086a:	6818      	ldr	r0, [r3, #0]
 802086c:	6803      	ldr	r3, [r0, #0]
 802086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020870:	4798      	blx	r3
 8020872:	e771      	b.n	8020758 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020874:	080303ea 	.word	0x080303ea
 8020878:	08030b02 	.word	0x08030b02
 802087c:	08030643 	.word	0x08030643
 8020880:	20014b2e 	.word	0x20014b2e
 8020884:	20014b34 	.word	0x20014b34

08020888 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802088c:	4614      	mov	r4, r2
 802088e:	880a      	ldrh	r2, [r1, #0]
 8020890:	b091      	sub	sp, #68	; 0x44
 8020892:	4607      	mov	r7, r0
 8020894:	2a02      	cmp	r2, #2
 8020896:	4689      	mov	r9, r1
 8020898:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 802089c:	d006      	beq.n	80208ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 802089e:	4b77      	ldr	r3, [pc, #476]	; (8020a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 80208a0:	f240 113b 	movw	r1, #315	; 0x13b
 80208a4:	4a76      	ldr	r2, [pc, #472]	; (8020a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80208a6:	4877      	ldr	r0, [pc, #476]	; (8020a84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80208a8:	f009 ff74 	bl	802a794 <__assert_func>
 80208ac:	2e00      	cmp	r6, #0
 80208ae:	d04b      	beq.n	8020948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80208b0:	6820      	ldr	r0, [r4, #0]
 80208b2:	ad0c      	add	r5, sp, #48	; 0x30
 80208b4:	6861      	ldr	r1, [r4, #4]
 80208b6:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 80208ba:	c503      	stmia	r5!, {r0, r1}
 80208bc:	6818      	ldr	r0, [r3, #0]
 80208be:	ad0e      	add	r5, sp, #56	; 0x38
 80208c0:	6859      	ldr	r1, [r3, #4]
 80208c2:	c503      	stmia	r5!, {r0, r1}
 80208c4:	a80c      	add	r0, sp, #48	; 0x30
 80208c6:	f7f9 fb4f 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80208ca:	4621      	mov	r1, r4
 80208cc:	a80e      	add	r0, sp, #56	; 0x38
 80208ce:	f7f9 fb33 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80208d2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80208d6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80208da:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80208de:	f8da 0000 	ldr.w	r0, [sl]
 80208e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80208e6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80208ea:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80208ee:	187c      	adds	r4, r7, r1
 80208f0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80208f4:	4f64      	ldr	r7, [pc, #400]	; (8020a88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 80208f6:	440a      	add	r2, r1
 80208f8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80208fc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020900:	4413      	add	r3, r2
 8020902:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020906:	6803      	ldr	r3, [r0, #0]
 8020908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802090c:	4798      	blx	r3
 802090e:	2801      	cmp	r0, #1
 8020910:	d11d      	bne.n	802094e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8020912:	2200      	movs	r2, #0
 8020914:	210b      	movs	r1, #11
 8020916:	b2ad      	uxth	r5, r5
 8020918:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802091c:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8020920:	8839      	ldrh	r1, [r7, #0]
 8020922:	9604      	str	r6, [sp, #16]
 8020924:	9502      	str	r5, [sp, #8]
 8020926:	e9cd 2105 	strd	r2, r1, [sp, #20]
 802092a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802092e:	4621      	mov	r1, r4
 8020930:	9203      	str	r2, [sp, #12]
 8020932:	fa1f f288 	uxth.w	r2, r8
 8020936:	9201      	str	r2, [sp, #4]
 8020938:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802093c:	9200      	str	r2, [sp, #0]
 802093e:	464a      	mov	r2, r9
 8020940:	f8da 0000 	ldr.w	r0, [sl]
 8020944:	f7f5 fb00 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020948:	b011      	add	sp, #68	; 0x44
 802094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802094e:	f8da 0000 	ldr.w	r0, [sl]
 8020952:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8020956:	6803      	ldr	r3, [r0, #0]
 8020958:	6a1b      	ldr	r3, [r3, #32]
 802095a:	4798      	blx	r3
 802095c:	8839      	ldrh	r1, [r7, #0]
 802095e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020962:	2eff      	cmp	r6, #255	; 0xff
 8020964:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020968:	fb05 f501 	mul.w	r5, r5, r1
 802096c:	fb01 2303 	mla	r3, r1, r3, r2
 8020970:	f109 0204 	add.w	r2, r9, #4
 8020974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020978:	d05f      	beq.n	8020a3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 802097a:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 802097e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020982:	b2b6      	uxth	r6, r6
 8020984:	970b      	str	r7, [sp, #44]	; 0x2c
 8020986:	fa1f f989 	uxth.w	r9, r9
 802098a:	42a8      	cmp	r0, r5
 802098c:	d26f      	bcs.n	8020a6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802098e:	eb00 010b 	add.w	r1, r0, fp
 8020992:	4288      	cmp	r0, r1
 8020994:	4623      	mov	r3, r4
 8020996:	d244      	bcs.n	8020a22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8020998:	8807      	ldrh	r7, [r0, #0]
 802099a:	3401      	adds	r4, #1
 802099c:	781b      	ldrb	r3, [r3, #0]
 802099e:	ea4f 2c27 	mov.w	ip, r7, asr #8
 80209a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80209a6:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 80209aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80209ae:	00ff      	lsls	r7, r7, #3
 80209b0:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80209b4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80209b8:	fb1c fc09 	smulbb	ip, ip, r9
 80209bc:	b2ff      	uxtb	r7, r7
 80209be:	fb1a fa09 	smulbb	sl, sl, r9
 80209c2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80209c6:	fb17 f709 	smulbb	r7, r7, r9
 80209ca:	fb0e ce06 	mla	lr, lr, r6, ip
 80209ce:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 80209d2:	00db      	lsls	r3, r3, #3
 80209d4:	fa1f fe8e 	uxth.w	lr, lr
 80209d8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	fb0c ac06 	mla	ip, ip, r6, sl
 80209e2:	f10e 0a01 	add.w	sl, lr, #1
 80209e6:	fb03 7306 	mla	r3, r3, r6, r7
 80209ea:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80209ee:	b29b      	uxth	r3, r3
 80209f0:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 80209f4:	fa1f fc8c 	uxth.w	ip, ip
 80209f8:	f103 0e01 	add.w	lr, r3, #1
 80209fc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020a00:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020a04:	ea4a 0e03 	orr.w	lr, sl, r3
 8020a08:	f10c 0a01 	add.w	sl, ip, #1
 8020a0c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8020a10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020a14:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020a18:	ea4e 0e0c 	orr.w	lr, lr, ip
 8020a1c:	f820 eb02 	strh.w	lr, [r0], #2
 8020a20:	e7b7      	b.n	8020992 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8020a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a24:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020a28:	881b      	ldrh	r3, [r3, #0]
 8020a2a:	eba1 0108 	sub.w	r1, r1, r8
 8020a2e:	eba3 0308 	sub.w	r3, r3, r8
 8020a32:	440c      	add	r4, r1
 8020a34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020a38:	e7a7      	b.n	802098a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8020a3a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020a3e:	42a8      	cmp	r0, r5
 8020a40:	d215      	bcs.n	8020a6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8020a42:	eb00 010b 	add.w	r1, r0, fp
 8020a46:	4288      	cmp	r0, r1
 8020a48:	d206      	bcs.n	8020a58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020a4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020a52:	f820 3b02 	strh.w	r3, [r0], #2
 8020a56:	e7f6      	b.n	8020a46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8020a58:	883b      	ldrh	r3, [r7, #0]
 8020a5a:	eba3 0308 	sub.w	r3, r3, r8
 8020a5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020a62:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020a66:	eba3 0308 	sub.w	r3, r3, r8
 8020a6a:	441c      	add	r4, r3
 8020a6c:	e7e7      	b.n	8020a3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020a6e:	4b07      	ldr	r3, [pc, #28]	; (8020a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8020a70:	6818      	ldr	r0, [r3, #0]
 8020a72:	6803      	ldr	r3, [r0, #0]
 8020a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a76:	4798      	blx	r3
 8020a78:	e766      	b.n	8020948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020a7a:	bf00      	nop
 8020a7c:	080302a8 	.word	0x080302a8
 8020a80:	0803096c 	.word	0x0803096c
 8020a84:	08030643 	.word	0x08030643
 8020a88:	20014b2e 	.word	0x20014b2e
 8020a8c:	20014b34 	.word	0x20014b34

08020a90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a94:	4614      	mov	r4, r2
 8020a96:	880a      	ldrh	r2, [r1, #0]
 8020a98:	b091      	sub	sp, #68	; 0x44
 8020a9a:	4606      	mov	r6, r0
 8020a9c:	2a01      	cmp	r2, #1
 8020a9e:	4688      	mov	r8, r1
 8020aa0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020aa4:	d006      	beq.n	8020ab4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8020aa6:	4b7c      	ldr	r3, [pc, #496]	; (8020c98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8020aa8:	f240 1197 	movw	r1, #407	; 0x197
 8020aac:	4a7b      	ldr	r2, [pc, #492]	; (8020c9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8020aae:	487c      	ldr	r0, [pc, #496]	; (8020ca0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8020ab0:	f009 fe70 	bl	802a794 <__assert_func>
 8020ab4:	2f00      	cmp	r7, #0
 8020ab6:	d04b      	beq.n	8020b50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020ab8:	6820      	ldr	r0, [r4, #0]
 8020aba:	ad0c      	add	r5, sp, #48	; 0x30
 8020abc:	6861      	ldr	r1, [r4, #4]
 8020abe:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8020cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8020ac2:	c503      	stmia	r5!, {r0, r1}
 8020ac4:	6818      	ldr	r0, [r3, #0]
 8020ac6:	ad0e      	add	r5, sp, #56	; 0x38
 8020ac8:	6859      	ldr	r1, [r3, #4]
 8020aca:	c503      	stmia	r5!, {r0, r1}
 8020acc:	a80c      	add	r0, sp, #48	; 0x30
 8020ace:	f7f9 fa4b 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ad2:	4621      	mov	r1, r4
 8020ad4:	a80e      	add	r0, sp, #56	; 0x38
 8020ad6:	f7f9 fa2f 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ada:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020ade:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020ae2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020ae6:	f8da 0000 	ldr.w	r0, [sl]
 8020aea:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020aee:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8020af2:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 8020af6:	1874      	adds	r4, r6, r1
 8020af8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020afc:	4e69      	ldr	r6, [pc, #420]	; (8020ca4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8020afe:	440a      	add	r2, r1
 8020b00:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020b04:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020b08:	4413      	add	r3, r2
 8020b0a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020b0e:	6803      	ldr	r3, [r0, #0]
 8020b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020b14:	4798      	blx	r3
 8020b16:	2801      	cmp	r0, #1
 8020b18:	d11d      	bne.n	8020b56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8020b1a:	220b      	movs	r2, #11
 8020b1c:	2100      	movs	r1, #0
 8020b1e:	b2ad      	uxth	r5, r5
 8020b20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020b24:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8020b28:	8832      	ldrh	r2, [r6, #0]
 8020b2a:	4621      	mov	r1, r4
 8020b2c:	9704      	str	r7, [sp, #16]
 8020b2e:	9501      	str	r5, [sp, #4]
 8020b30:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020b34:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020b38:	9203      	str	r2, [sp, #12]
 8020b3a:	fa1f f289 	uxth.w	r2, r9
 8020b3e:	9202      	str	r2, [sp, #8]
 8020b40:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020b44:	9200      	str	r2, [sp, #0]
 8020b46:	4642      	mov	r2, r8
 8020b48:	f8da 0000 	ldr.w	r0, [sl]
 8020b4c:	f7f5 f9fc 	bl	8015f48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020b50:	b011      	add	sp, #68	; 0x44
 8020b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b56:	f8da 0000 	ldr.w	r0, [sl]
 8020b5a:	6803      	ldr	r3, [r0, #0]
 8020b5c:	6a1b      	ldr	r3, [r3, #32]
 8020b5e:	4798      	blx	r3
 8020b60:	8832      	ldrh	r2, [r6, #0]
 8020b62:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020b66:	2fff      	cmp	r7, #255	; 0xff
 8020b68:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020b6c:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8020b70:	fb09 f902 	mul.w	r9, r9, r2
 8020b74:	fb02 1303 	mla	r3, r2, r3, r1
 8020b78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020b7c:	d056      	beq.n	8020c2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8020b7e:	ea6f 0c07 	mvn.w	ip, r7
 8020b82:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020b86:	b2bb      	uxth	r3, r7
 8020b88:	960b      	str	r6, [sp, #44]	; 0x2c
 8020b8a:	fa5f fc8c 	uxtb.w	ip, ip
 8020b8e:	4548      	cmp	r0, r9
 8020b90:	d27b      	bcs.n	8020c8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020b92:	eb00 0a0e 	add.w	sl, r0, lr
 8020b96:	4550      	cmp	r0, sl
 8020b98:	4622      	mov	r2, r4
 8020b9a:	d23d      	bcs.n	8020c18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8020b9c:	7811      	ldrb	r1, [r2, #0]
 8020b9e:	2604      	movs	r6, #4
 8020ba0:	2203      	movs	r2, #3
 8020ba2:	3401      	adds	r4, #1
 8020ba4:	fb12 6101 	smlabb	r1, r2, r1, r6
 8020ba8:	8802      	ldrh	r2, [r0, #0]
 8020baa:	eb08 0b01 	add.w	fp, r8, r1
 8020bae:	1217      	asrs	r7, r2, #8
 8020bb0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020bb4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020bb8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bbc:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020bc0:	fb16 f603 	smulbb	r6, r6, r3
 8020bc4:	fb1b fb03 	smulbb	fp, fp, r3
 8020bc8:	fb07 670c 	mla	r7, r7, ip, r6
 8020bcc:	10d6      	asrs	r6, r2, #3
 8020bce:	00d2      	lsls	r2, r2, #3
 8020bd0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020bd4:	b2bf      	uxth	r7, r7
 8020bd6:	b2d2      	uxtb	r2, r2
 8020bd8:	fb06 b60c 	mla	r6, r6, ip, fp
 8020bdc:	fb12 f20c 	smulbb	r2, r2, ip
 8020be0:	b2b6      	uxth	r6, r6
 8020be2:	fb01 2103 	mla	r1, r1, r3, r2
 8020be6:	1c7a      	adds	r2, r7, #1
 8020be8:	f106 0b01 	add.w	fp, r6, #1
 8020bec:	b289      	uxth	r1, r1
 8020bee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020bf2:	1c4a      	adds	r2, r1, #1
 8020bf4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020bf8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020bfc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020c00:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020c04:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020c08:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020c0c:	4317      	orrs	r7, r2
 8020c0e:	ea47 070b 	orr.w	r7, r7, fp
 8020c12:	f820 7b02 	strh.w	r7, [r0], #2
 8020c16:	e7be      	b.n	8020b96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c1a:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020c1e:	8812      	ldrh	r2, [r2, #0]
 8020c20:	1b49      	subs	r1, r1, r5
 8020c22:	1b52      	subs	r2, r2, r5
 8020c24:	440c      	add	r4, r1
 8020c26:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020c2a:	e7b0      	b.n	8020b8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020c2c:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020c30:	2203      	movs	r2, #3
 8020c32:	2704      	movs	r7, #4
 8020c34:	491c      	ldr	r1, [pc, #112]	; (8020ca8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020c36:	4548      	cmp	r0, r9
 8020c38:	d227      	bcs.n	8020c8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020c3a:	eb00 0c0e 	add.w	ip, r0, lr
 8020c3e:	4560      	cmp	r0, ip
 8020c40:	4623      	mov	r3, r4
 8020c42:	d219      	bcs.n	8020c78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020c44:	f893 a000 	ldrb.w	sl, [r3]
 8020c48:	3401      	adds	r4, #1
 8020c4a:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 8020c4e:	eb08 0b0a 	add.w	fp, r8, sl
 8020c52:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8020c56:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020c5a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020c5e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020c62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020c66:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020c6a:	ea43 030b 	orr.w	r3, r3, fp
 8020c6e:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8020c72:	f820 3b02 	strh.w	r3, [r0], #2
 8020c76:	e7e2      	b.n	8020c3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020c78:	8833      	ldrh	r3, [r6, #0]
 8020c7a:	1b5b      	subs	r3, r3, r5
 8020c7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020c80:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020c84:	1b5b      	subs	r3, r3, r5
 8020c86:	441c      	add	r4, r3
 8020c88:	e7d5      	b.n	8020c36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8020c8a:	4b08      	ldr	r3, [pc, #32]	; (8020cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020c8c:	6818      	ldr	r0, [r3, #0]
 8020c8e:	6803      	ldr	r3, [r0, #0]
 8020c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c92:	4798      	blx	r3
 8020c94:	e75c      	b.n	8020b50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020c96:	bf00      	nop
 8020c98:	080302f6 	.word	0x080302f6
 8020c9c:	080309f5 	.word	0x080309f5
 8020ca0:	08030643 	.word	0x08030643
 8020ca4:	20014b2e 	.word	0x20014b2e
 8020ca8:	fffff800 	.word	0xfffff800
 8020cac:	20014b34 	.word	0x20014b34

08020cb0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020cb0:	b430      	push	{r4, r5}
 8020cb2:	780d      	ldrb	r5, [r1, #0]
 8020cb4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020cb8:	2d01      	cmp	r5, #1
 8020cba:	d00a      	beq.n	8020cd2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020cbc:	d305      	bcc.n	8020cca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8020cbe:	2d02      	cmp	r5, #2
 8020cc0:	d10b      	bne.n	8020cda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8020cc2:	9402      	str	r4, [sp, #8]
 8020cc4:	bc30      	pop	{r4, r5}
 8020cc6:	f7ff bddf 	b.w	8020888 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020cca:	9402      	str	r4, [sp, #8]
 8020ccc:	bc30      	pop	{r4, r5}
 8020cce:	f7ff bce7 	b.w	80206a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020cd2:	9402      	str	r4, [sp, #8]
 8020cd4:	bc30      	pop	{r4, r5}
 8020cd6:	f7ff bedb 	b.w	8020a90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020cda:	bc30      	pop	{r4, r5}
 8020cdc:	4770      	bx	lr
	...

08020ce0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce4:	b087      	sub	sp, #28
 8020ce6:	4604      	mov	r4, r0
 8020ce8:	460e      	mov	r6, r1
 8020cea:	6810      	ldr	r0, [r2, #0]
 8020cec:	6851      	ldr	r1, [r2, #4]
 8020cee:	ad02      	add	r5, sp, #8
 8020cf0:	4617      	mov	r7, r2
 8020cf2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020cf6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8020f28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020cfa:	c503      	stmia	r5!, {r0, r1}
 8020cfc:	6818      	ldr	r0, [r3, #0]
 8020cfe:	ad04      	add	r5, sp, #16
 8020d00:	6859      	ldr	r1, [r3, #4]
 8020d02:	c503      	stmia	r5!, {r0, r1}
 8020d04:	a802      	add	r0, sp, #8
 8020d06:	f7f9 f92f 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d0a:	4639      	mov	r1, r7
 8020d0c:	a804      	add	r0, sp, #16
 8020d0e:	f7f9 f913 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d12:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020d16:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020d1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020d1e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020d22:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020d26:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020d2a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020d2e:	440e      	add	r6, r1
 8020d30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020d34:	440a      	add	r2, r1
 8020d36:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020d3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020d3e:	4413      	add	r3, r2
 8020d40:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020d44:	4b77      	ldr	r3, [pc, #476]	; (8020f24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020d46:	6818      	ldr	r0, [r3, #0]
 8020d48:	6803      	ldr	r3, [r0, #0]
 8020d4a:	6a1b      	ldr	r3, [r3, #32]
 8020d4c:	4798      	blx	r3
 8020d4e:	f8b9 b000 	ldrh.w	fp, [r9]
 8020d52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020d56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020d5a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020d5e:	fb05 f50b 	mul.w	r5, r5, fp
 8020d62:	fb0b 2303 	mla	r3, fp, r3, r2
 8020d66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d6a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020d6e:	9300      	str	r3, [sp, #0]
 8020d70:	d068      	beq.n	8020e44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8020d72:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020d76:	4558      	cmp	r0, fp
 8020d78:	f080 80cc 	bcs.w	8020f14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020d7c:	9b00      	ldr	r3, [sp, #0]
 8020d7e:	4631      	mov	r1, r6
 8020d80:	18c3      	adds	r3, r0, r3
 8020d82:	9301      	str	r3, [sp, #4]
 8020d84:	9b01      	ldr	r3, [sp, #4]
 8020d86:	4298      	cmp	r0, r3
 8020d88:	d24e      	bcs.n	8020e28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8020d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d8e:	2a00      	cmp	r2, #0
 8020d90:	d047      	beq.n	8020e22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8020d92:	fb0a f202 	mul.w	r2, sl, r2
 8020d96:	1c53      	adds	r3, r2, #1
 8020d98:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020d9c:	121b      	asrs	r3, r3, #8
 8020d9e:	d040      	beq.n	8020e22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8020da0:	8802      	ldrh	r2, [r0, #0]
 8020da2:	b29e      	uxth	r6, r3
 8020da4:	f8b4 c000 	ldrh.w	ip, [r4]
 8020da8:	43db      	mvns	r3, r3
 8020daa:	1215      	asrs	r5, r2, #8
 8020dac:	b2db      	uxtb	r3, r3
 8020dae:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020db2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020db6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020dba:	fb15 f503 	smulbb	r5, r5, r3
 8020dbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020dc2:	00d2      	lsls	r2, r2, #3
 8020dc4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020dc8:	fb07 5706 	mla	r7, r7, r6, r5
 8020dcc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020dd0:	b2d2      	uxtb	r2, r2
 8020dd2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020dd6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020dda:	fb1e fe03 	smulbb	lr, lr, r3
 8020dde:	b2bf      	uxth	r7, r7
 8020de0:	fb12 f203 	smulbb	r2, r2, r3
 8020de4:	fa5f fc8c 	uxtb.w	ip, ip
 8020de8:	fb05 e506 	mla	r5, r5, r6, lr
 8020dec:	1c7b      	adds	r3, r7, #1
 8020dee:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020df2:	b2ad      	uxth	r5, r5
 8020df4:	fa1f fc8c 	uxth.w	ip, ip
 8020df8:	f105 0e01 	add.w	lr, r5, #1
 8020dfc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020e00:	f10c 0601 	add.w	r6, ip, #1
 8020e04:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020e08:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020e0c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020e10:	096d      	lsrs	r5, r5, #5
 8020e12:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020e16:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e1a:	ea47 070c 	orr.w	r7, r7, ip
 8020e1e:	432f      	orrs	r7, r5
 8020e20:	8007      	strh	r7, [r0, #0]
 8020e22:	3002      	adds	r0, #2
 8020e24:	3402      	adds	r4, #2
 8020e26:	e7ad      	b.n	8020d84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020e28:	f8b9 3000 	ldrh.w	r3, [r9]
 8020e2c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020e30:	eba3 0308 	sub.w	r3, r3, r8
 8020e34:	eba6 0608 	sub.w	r6, r6, r8
 8020e38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020e3c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020e40:	440e      	add	r6, r1
 8020e42:	e798      	b.n	8020d76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020e44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020e48:	42a8      	cmp	r0, r5
 8020e4a:	d263      	bcs.n	8020f14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020e4c:	9b00      	ldr	r3, [sp, #0]
 8020e4e:	4631      	mov	r1, r6
 8020e50:	eb00 0b03 	add.w	fp, r0, r3
 8020e54:	4558      	cmp	r0, fp
 8020e56:	d24f      	bcs.n	8020ef8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e5c:	b12b      	cbz	r3, 8020e6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8020e5e:	2bff      	cmp	r3, #255	; 0xff
 8020e60:	f8b4 e000 	ldrh.w	lr, [r4]
 8020e64:	d104      	bne.n	8020e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8020e66:	f8a0 e000 	strh.w	lr, [r0]
 8020e6a:	3002      	adds	r0, #2
 8020e6c:	3402      	adds	r4, #2
 8020e6e:	e7f1      	b.n	8020e54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8020e70:	8802      	ldrh	r2, [r0, #0]
 8020e72:	b29f      	uxth	r7, r3
 8020e74:	43db      	mvns	r3, r3
 8020e76:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020e7a:	1216      	asrs	r6, r2, #8
 8020e7c:	b2db      	uxtb	r3, r3
 8020e7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020e82:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020e86:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020e8a:	00d2      	lsls	r2, r2, #3
 8020e8c:	fb16 f603 	smulbb	r6, r6, r3
 8020e90:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020e94:	b2d2      	uxtb	r2, r2
 8020e96:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020e9a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020e9e:	fb1a fa03 	smulbb	sl, sl, r3
 8020ea2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020ea6:	fb12 f303 	smulbb	r3, r2, r3
 8020eaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020eae:	fa5f fe8e 	uxtb.w	lr, lr
 8020eb2:	fb06 a607 	mla	r6, r6, r7, sl
 8020eb6:	fa1f fc8c 	uxth.w	ip, ip
 8020eba:	fb0e 3e07 	mla	lr, lr, r7, r3
 8020ebe:	b2b6      	uxth	r6, r6
 8020ec0:	f10c 0201 	add.w	r2, ip, #1
 8020ec4:	fa1f fe8e 	uxth.w	lr, lr
 8020ec8:	f106 0a01 	add.w	sl, r6, #1
 8020ecc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020ed0:	f10e 0301 	add.w	r3, lr, #1
 8020ed4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020ed8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020edc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8020ee0:	0976      	lsrs	r6, r6, #5
 8020ee2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020ee6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020eea:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020eee:	ea4c 0c06 	orr.w	ip, ip, r6
 8020ef2:	f8a0 c000 	strh.w	ip, [r0]
 8020ef6:	e7b8      	b.n	8020e6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8020ef8:	f8b9 3000 	ldrh.w	r3, [r9]
 8020efc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020f00:	eba3 0308 	sub.w	r3, r3, r8
 8020f04:	eba6 0608 	sub.w	r6, r6, r8
 8020f08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f0c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020f10:	440e      	add	r6, r1
 8020f12:	e799      	b.n	8020e48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8020f14:	4b03      	ldr	r3, [pc, #12]	; (8020f24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020f16:	6818      	ldr	r0, [r3, #0]
 8020f18:	6803      	ldr	r3, [r0, #0]
 8020f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f1c:	4798      	blx	r3
 8020f1e:	b007      	add	sp, #28
 8020f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f24:	20014b34 	.word	0x20014b34
 8020f28:	20014b2e 	.word	0x20014b2e

08020f2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f30:	b089      	sub	sp, #36	; 0x24
 8020f32:	4682      	mov	sl, r0
 8020f34:	460d      	mov	r5, r1
 8020f36:	4691      	mov	r9, r2
 8020f38:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020f3c:	4698      	mov	r8, r3
 8020f3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f40:	b3ae      	cbz	r6, 8020fae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8020f42:	4608      	mov	r0, r1
 8020f44:	f7fc fa08 	bl	801d358 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020f48:	4607      	mov	r7, r0
 8020f4a:	4628      	mov	r0, r5
 8020f4c:	f7fc fa3e 	bl	801d3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020f50:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020f54:	4628      	mov	r0, r5
 8020f56:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020f5a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020f5e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020f62:	f7fc fb8b 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f66:	b178      	cbz	r0, 8020f88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f68:	4628      	mov	r0, r5
 8020f6a:	f7fc fb87 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f6e:	2802      	cmp	r0, #2
 8020f70:	d00a      	beq.n	8020f88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f72:	4628      	mov	r0, r5
 8020f74:	f7fc fb82 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f78:	280b      	cmp	r0, #11
 8020f7a:	d005      	beq.n	8020f88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f7c:	4b69      	ldr	r3, [pc, #420]	; (8021124 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8020f7e:	214b      	movs	r1, #75	; 0x4b
 8020f80:	4a69      	ldr	r2, [pc, #420]	; (8021128 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8020f82:	486a      	ldr	r0, [pc, #424]	; (802112c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8020f84:	f009 fc06 	bl	802a794 <__assert_func>
 8020f88:	4628      	mov	r0, r5
 8020f8a:	f7fc faed 	bl	801d568 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f8e:	4607      	mov	r7, r0
 8020f90:	4628      	mov	r0, r5
 8020f92:	f7fc fb1b 	bl	801d5cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020f96:	4681      	mov	r9, r0
 8020f98:	4628      	mov	r0, r5
 8020f9a:	f7fc fb6f 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f9e:	2802      	cmp	r0, #2
 8020fa0:	d108      	bne.n	8020fb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8020fa2:	4633      	mov	r3, r6
 8020fa4:	4622      	mov	r2, r4
 8020fa6:	a902      	add	r1, sp, #8
 8020fa8:	4638      	mov	r0, r7
 8020faa:	f7ff fa69 	bl	8020480 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020fae:	b009      	add	sp, #36	; 0x24
 8020fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fb4:	4628      	mov	r0, r5
 8020fb6:	f7fc fb61 	bl	801d67c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020fba:	280b      	cmp	r0, #11
 8020fbc:	d107      	bne.n	8020fce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8020fbe:	9600      	str	r6, [sp, #0]
 8020fc0:	4623      	mov	r3, r4
 8020fc2:	aa02      	add	r2, sp, #8
 8020fc4:	4649      	mov	r1, r9
 8020fc6:	4638      	mov	r0, r7
 8020fc8:	f7ff fe72 	bl	8020cb0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020fcc:	e7ef      	b.n	8020fae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8020fce:	4628      	mov	r0, r5
 8020fd0:	f7fc fa90 	bl	801d4f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020fd4:	b950      	cbnz	r0, 8020fec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8020fd6:	f8da 3000 	ldr.w	r3, [sl]
 8020fda:	aa02      	add	r2, sp, #8
 8020fdc:	4639      	mov	r1, r7
 8020fde:	e9cd 6000 	strd	r6, r0, [sp]
 8020fe2:	4650      	mov	r0, sl
 8020fe4:	68dd      	ldr	r5, [r3, #12]
 8020fe6:	4623      	mov	r3, r4
 8020fe8:	47a8      	blx	r5
 8020fea:	e7e0      	b.n	8020fae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8020fec:	f10d 0818 	add.w	r8, sp, #24
 8020ff0:	4629      	mov	r1, r5
 8020ff2:	ad04      	add	r5, sp, #16
 8020ff4:	4640      	mov	r0, r8
 8020ff6:	f7fc fa23 	bl	801d440 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020ffa:	e898 0003 	ldmia.w	r8, {r0, r1}
 8020ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8021002:	4628      	mov	r0, r5
 8021004:	4621      	mov	r1, r4
 8021006:	f7f4 fb53 	bl	80156b0 <_ZN8touchgfx4RectaNERKS0_>
 802100a:	4628      	mov	r0, r5
 802100c:	f7f4 fb93 	bl	8015736 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021010:	b138      	cbz	r0, 8021022 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8021012:	4623      	mov	r3, r4
 8021014:	9600      	str	r6, [sp, #0]
 8021016:	aa02      	add	r2, sp, #8
 8021018:	4649      	mov	r1, r9
 802101a:	4638      	mov	r0, r7
 802101c:	f7ff fe60 	bl	8020ce0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021020:	e7c5      	b.n	8020fae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8021022:	f8da 3000 	ldr.w	r3, [sl]
 8021026:	aa02      	add	r2, sp, #8
 8021028:	4639      	mov	r1, r7
 802102a:	e9cd 6000 	strd	r6, r0, [sp]
 802102e:	4650      	mov	r0, sl
 8021030:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021034:	462b      	mov	r3, r5
 8021036:	47d8      	blx	fp
 8021038:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802103c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021040:	4293      	cmp	r3, r2
 8021042:	dd13      	ble.n	802106c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8021044:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021048:	1a9b      	subs	r3, r3, r2
 802104a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802104e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021052:	4638      	mov	r0, r7
 8021054:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021058:	aa02      	add	r2, sp, #8
 802105a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802105e:	4649      	mov	r1, r9
 8021060:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021064:	4643      	mov	r3, r8
 8021066:	9600      	str	r6, [sp, #0]
 8021068:	f7ff fe3a 	bl	8020ce0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802106c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021070:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021074:	4293      	cmp	r3, r2
 8021076:	dd13      	ble.n	80210a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8021078:	1a9b      	subs	r3, r3, r2
 802107a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802107e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021082:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021086:	aa02      	add	r2, sp, #8
 8021088:	f8ad 001a 	strh.w	r0, [sp, #26]
 802108c:	4638      	mov	r0, r7
 802108e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021092:	4643      	mov	r3, r8
 8021094:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021098:	4649      	mov	r1, r9
 802109a:	9600      	str	r6, [sp, #0]
 802109c:	f7ff fe20 	bl	8020ce0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80210a0:	88a2      	ldrh	r2, [r4, #4]
 80210a2:	8823      	ldrh	r3, [r4, #0]
 80210a4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80210a8:	4413      	add	r3, r2
 80210aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80210ae:	440a      	add	r2, r1
 80210b0:	b29b      	uxth	r3, r3
 80210b2:	b292      	uxth	r2, r2
 80210b4:	b218      	sxth	r0, r3
 80210b6:	b211      	sxth	r1, r2
 80210b8:	4288      	cmp	r0, r1
 80210ba:	dd13      	ble.n	80210e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80210bc:	1a9b      	subs	r3, r3, r2
 80210be:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80210c2:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80210c6:	aa02      	add	r2, sp, #8
 80210c8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80210cc:	4649      	mov	r1, r9
 80210ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 80210d2:	4643      	mov	r3, r8
 80210d4:	f8ad 001e 	strh.w	r0, [sp, #30]
 80210d8:	4638      	mov	r0, r7
 80210da:	9600      	str	r6, [sp, #0]
 80210dc:	f8ad 501a 	strh.w	r5, [sp, #26]
 80210e0:	f7ff fdfe 	bl	8020ce0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80210e4:	88e2      	ldrh	r2, [r4, #6]
 80210e6:	8863      	ldrh	r3, [r4, #2]
 80210e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80210ec:	4413      	add	r3, r2
 80210ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80210f2:	440a      	add	r2, r1
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	b292      	uxth	r2, r2
 80210f8:	b218      	sxth	r0, r3
 80210fa:	b211      	sxth	r1, r2
 80210fc:	4288      	cmp	r0, r1
 80210fe:	f77f af56 	ble.w	8020fae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8021102:	f9b4 5000 	ldrsh.w	r5, [r4]
 8021106:	1a9b      	subs	r3, r3, r2
 8021108:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802110c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021110:	4643      	mov	r3, r8
 8021112:	f8ad 5018 	strh.w	r5, [sp, #24]
 8021116:	f8ad 101a 	strh.w	r1, [sp, #26]
 802111a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802111e:	9600      	str	r6, [sp, #0]
 8021120:	e779      	b.n	8021016 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8021122:	bf00      	nop
 8021124:	08030344 	.word	0x08030344
 8021128:	08030a7e 	.word	0x08030a7e
 802112c:	08030643 	.word	0x08030643

08021130 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021130:	b508      	push	{r3, lr}
 8021132:	b180      	cbz	r0, 8021156 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8021134:	2902      	cmp	r1, #2
 8021136:	d014      	beq.n	8021162 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8021138:	2903      	cmp	r1, #3
 802113a:	d01d      	beq.n	8021178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802113c:	2901      	cmp	r1, #1
 802113e:	d101      	bne.n	8021144 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021140:	2001      	movs	r0, #1
 8021142:	bd08      	pop	{r3, pc}
 8021144:	4b0e      	ldr	r3, [pc, #56]	; (8021180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021146:	8818      	ldrh	r0, [r3, #0]
 8021148:	b990      	cbnz	r0, 8021170 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802114a:	4b0e      	ldr	r3, [pc, #56]	; (8021184 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 802114c:	2154      	movs	r1, #84	; 0x54
 802114e:	4a0e      	ldr	r2, [pc, #56]	; (8021188 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8021150:	480e      	ldr	r0, [pc, #56]	; (802118c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8021152:	f009 fb1f 	bl	802a794 <__assert_func>
 8021156:	2902      	cmp	r1, #2
 8021158:	d00e      	beq.n	8021178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802115a:	2903      	cmp	r1, #3
 802115c:	d0f2      	beq.n	8021144 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802115e:	2901      	cmp	r1, #1
 8021160:	d1ee      	bne.n	8021140 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8021162:	4b07      	ldr	r3, [pc, #28]	; (8021180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021164:	8818      	ldrh	r0, [r3, #0]
 8021166:	2800      	cmp	r0, #0
 8021168:	d0ef      	beq.n	802114a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802116a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802116e:	e7e8      	b.n	8021142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021170:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021174:	4240      	negs	r0, r0
 8021176:	e7e4      	b.n	8021142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021178:	f04f 30ff 	mov.w	r0, #4294967295
 802117c:	e7e1      	b.n	8021142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802117e:	bf00      	nop
 8021180:	20014b2e 	.word	0x20014b2e
 8021184:	08030675 	.word	0x08030675
 8021188:	08030bfb 	.word	0x08030bfb
 802118c:	080306b7 	.word	0x080306b7

08021190 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021190:	b508      	push	{r3, lr}
 8021192:	b180      	cbz	r0, 80211b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8021194:	2902      	cmp	r1, #2
 8021196:	d014      	beq.n	80211c2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8021198:	2903      	cmp	r1, #3
 802119a:	d018      	beq.n	80211ce <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802119c:	2901      	cmp	r1, #1
 802119e:	d001      	beq.n	80211a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80211a0:	2001      	movs	r0, #1
 80211a2:	e013      	b.n	80211cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80211a4:	4b0e      	ldr	r3, [pc, #56]	; (80211e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80211a6:	8818      	ldrh	r0, [r3, #0]
 80211a8:	b970      	cbnz	r0, 80211c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80211aa:	4b0e      	ldr	r3, [pc, #56]	; (80211e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80211ac:	2154      	movs	r1, #84	; 0x54
 80211ae:	4a0e      	ldr	r2, [pc, #56]	; (80211e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80211b0:	480e      	ldr	r0, [pc, #56]	; (80211ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80211b2:	f009 faef 	bl	802a794 <__assert_func>
 80211b6:	2902      	cmp	r1, #2
 80211b8:	d009      	beq.n	80211ce <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80211ba:	2903      	cmp	r1, #3
 80211bc:	d0f0      	beq.n	80211a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80211be:	2901      	cmp	r1, #1
 80211c0:	d1f0      	bne.n	80211a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80211c2:	f04f 30ff 	mov.w	r0, #4294967295
 80211c6:	e001      	b.n	80211cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80211c8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80211cc:	bd08      	pop	{r3, pc}
 80211ce:	4b04      	ldr	r3, [pc, #16]	; (80211e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80211d0:	8818      	ldrh	r0, [r3, #0]
 80211d2:	2800      	cmp	r0, #0
 80211d4:	d0e9      	beq.n	80211aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80211d6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80211da:	4240      	negs	r0, r0
 80211dc:	e7f6      	b.n	80211cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80211de:	bf00      	nop
 80211e0:	20014b2e 	.word	0x20014b2e
 80211e4:	08030675 	.word	0x08030675
 80211e8:	08030bfb 	.word	0x08030bfb
 80211ec:	080306b7 	.word	0x080306b7

080211f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80211f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f4:	b099      	sub	sp, #100	; 0x64
 80211f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80211f8:	a914      	add	r1, sp, #80	; 0x50
 80211fa:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 80211fe:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8021202:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8021206:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 802120a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 802120e:	e881 000c 	stmia.w	r1, {r2, r3}
 8021212:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021216:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 802121a:	9308      	str	r3, [sp, #32]
 802121c:	910c      	str	r1, [sp, #48]	; 0x30
 802121e:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8021222:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8021226:	910d      	str	r1, [sp, #52]	; 0x34
 8021228:	f893 b00d 	ldrb.w	fp, [r3, #13]
 802122c:	7998      	ldrb	r0, [r3, #6]
 802122e:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8021232:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8021236:	4301      	orrs	r1, r0
 8021238:	9109      	str	r1, [sp, #36]	; 0x24
 802123a:	f000 81e4 	beq.w	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802123e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8021242:	79d9      	ldrb	r1, [r3, #7]
 8021244:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8021248:	ea51 0b0b 	orrs.w	fp, r1, fp
 802124c:	f000 81db 	beq.w	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021250:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8021254:	b29b      	uxth	r3, r3
 8021256:	2e00      	cmp	r6, #0
 8021258:	f000 80fd 	beq.w	8021456 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802125c:	1af6      	subs	r6, r6, r3
 802125e:	b2b6      	uxth	r6, r6
 8021260:	0433      	lsls	r3, r6, #16
 8021262:	d502      	bpl.n	802126a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021264:	1bad      	subs	r5, r5, r6
 8021266:	2600      	movs	r6, #0
 8021268:	b22d      	sxth	r5, r5
 802126a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802126e:	a814      	add	r0, sp, #80	; 0x50
 8021270:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8021274:	428d      	cmp	r5, r1
 8021276:	b28b      	uxth	r3, r1
 8021278:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802127c:	bfbf      	itttt	lt
 802127e:	18f6      	addlt	r6, r6, r3
 8021280:	1b75      	sublt	r5, r6, r5
 8021282:	b2ae      	uxthlt	r6, r5
 8021284:	460d      	movlt	r5, r1
 8021286:	8891      	ldrh	r1, [r2, #4]
 8021288:	440b      	add	r3, r1
 802128a:	4629      	mov	r1, r5
 802128c:	b21b      	sxth	r3, r3
 802128e:	9311      	str	r3, [sp, #68]	; 0x44
 8021290:	8853      	ldrh	r3, [r2, #2]
 8021292:	88d2      	ldrh	r2, [r2, #6]
 8021294:	4413      	add	r3, r2
 8021296:	9a08      	ldr	r2, [sp, #32]
 8021298:	b21b      	sxth	r3, r3
 802129a:	9310      	str	r3, [sp, #64]	; 0x40
 802129c:	4bb1      	ldr	r3, [pc, #708]	; (8021564 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 802129e:	f893 9000 	ldrb.w	r9, [r3]
 80212a2:	f109 3cff 	add.w	ip, r9, #4294967295
 80212a6:	f1dc 0300 	rsbs	r3, ip, #0
 80212aa:	eb43 030c 	adc.w	r3, r3, ip
 80212ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80212b0:	4653      	mov	r3, sl
 80212b2:	f7f8 fcb2 	bl	8019c1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80212b6:	4629      	mov	r1, r5
 80212b8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80212bc:	4653      	mov	r3, sl
 80212be:	9a08      	ldr	r2, [sp, #32]
 80212c0:	a814      	add	r0, sp, #80	; 0x50
 80212c2:	f7f8 fcc2 	bl	8019c4a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80212c6:	a918      	add	r1, sp, #96	; 0x60
 80212c8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80212cc:	a817      	add	r0, sp, #92	; 0x5c
 80212ce:	f7f8 fe1d 	bl	8019f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80212d2:	f1ba 0f00 	cmp.w	sl, #0
 80212d6:	f040 80c1 	bne.w	802145c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 80212da:	f1b9 0f01 	cmp.w	r9, #1
 80212de:	f040 80c5 	bne.w	802146c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 80212e2:	2301      	movs	r3, #1
 80212e4:	f1b8 0f01 	cmp.w	r8, #1
 80212e8:	fa03 f308 	lsl.w	r3, r3, r8
 80212ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80212f0:	b2db      	uxtb	r3, r3
 80212f2:	930a      	str	r3, [sp, #40]	; 0x28
 80212f4:	f000 80e5 	beq.w	80214c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 80212f8:	f1b8 0f02 	cmp.w	r8, #2
 80212fc:	f000 80e4 	beq.w	80214c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8021300:	f1b8 0f04 	cmp.w	r8, #4
 8021304:	bf15      	itete	ne
 8021306:	46c1      	movne	r9, r8
 8021308:	f04f 0904 	moveq.w	r9, #4
 802130c:	2301      	movne	r3, #1
 802130e:	2311      	moveq	r3, #17
 8021310:	9307      	str	r3, [sp, #28]
 8021312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021314:	b153      	cbz	r3, 802132c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8021316:	2408      	movs	r4, #8
 8021318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802131a:	fb94 f3f9 	sdiv	r3, r4, r9
 802131e:	1e5c      	subs	r4, r3, #1
 8021320:	4414      	add	r4, r2
 8021322:	fb94 f4f3 	sdiv	r4, r4, r3
 8021326:	fb14 f403 	smulbb	r4, r4, r3
 802132a:	b2a4      	uxth	r4, r4
 802132c:	b906      	cbnz	r6, 8021330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 802132e:	b16f      	cbz	r7, 802134c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8021330:	fb07 6304 	mla	r3, r7, r4, r6
 8021334:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021336:	4639      	mov	r1, r7
 8021338:	fb08 f303 	mul.w	r3, r8, r3
 802133c:	f003 0707 	and.w	r7, r3, #7
 8021340:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8021344:	9328      	str	r3, [sp, #160]	; 0xa0
 8021346:	ebab 0301 	sub.w	r3, fp, r1
 802134a:	930e      	str	r3, [sp, #56]	; 0x38
 802134c:	4651      	mov	r1, sl
 802134e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021350:	f7ff feee 	bl	8021130 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021354:	4651      	mov	r1, sl
 8021356:	4683      	mov	fp, r0
 8021358:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802135a:	f7ff ff19 	bl	8021190 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802135e:	9a08      	ldr	r2, [sp, #32]
 8021360:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021362:	4682      	mov	sl, r0
 8021364:	1a9b      	subs	r3, r3, r2
 8021366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021368:	429a      	cmp	r2, r3
 802136a:	bfa8      	it	ge
 802136c:	461a      	movge	r2, r3
 802136e:	2a00      	cmp	r2, #0
 8021370:	9208      	str	r2, [sp, #32]
 8021372:	f340 8148 	ble.w	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021376:	1bad      	subs	r5, r5, r6
 8021378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802137a:	1b5d      	subs	r5, r3, r5
 802137c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802137e:	429d      	cmp	r5, r3
 8021380:	bfd4      	ite	le
 8021382:	ebc6 0605 	rsble	r6, r6, r5
 8021386:	ebc6 0603 	rsbgt	r6, r6, r3
 802138a:	2e00      	cmp	r6, #0
 802138c:	f340 813b 	ble.w	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021390:	1ba4      	subs	r4, r4, r6
 8021392:	fb09 f304 	mul.w	r3, r9, r4
 8021396:	930e      	str	r3, [sp, #56]	; 0x38
 8021398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802139a:	2b00      	cmp	r3, #0
 802139c:	f040 809d 	bne.w	80214da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 80213a0:	4b71      	ldr	r3, [pc, #452]	; (8021568 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80213a2:	6818      	ldr	r0, [r3, #0]
 80213a4:	6803      	ldr	r3, [r0, #0]
 80213a6:	6a1b      	ldr	r3, [r3, #32]
 80213a8:	4798      	blx	r3
 80213aa:	4970      	ldr	r1, [pc, #448]	; (802156c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80213ac:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80213b0:	880c      	ldrh	r4, [r1, #0]
 80213b2:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80213b6:	fb04 1303 	mla	r3, r4, r3, r1
 80213ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80213be:	9309      	str	r3, [sp, #36]	; 0x24
 80213c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213c2:	7819      	ldrb	r1, [r3, #0]
 80213c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213c6:	4139      	asrs	r1, r7
 80213c8:	0a1b      	lsrs	r3, r3, #8
 80213ca:	b2c9      	uxtb	r1, r1
 80213cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80213d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80213d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213d4:	08db      	lsrs	r3, r3, #3
 80213d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80213da:	9310      	str	r3, [sp, #64]	; 0x40
 80213dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213de:	00db      	lsls	r3, r3, #3
 80213e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80213e4:	9311      	str	r3, [sp, #68]	; 0x44
 80213e6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80213ea:	fb0b ab16 	mls	fp, fp, r6, sl
 80213ee:	fb03 fa06 	mul.w	sl, r3, r6
 80213f2:	930c      	str	r3, [sp, #48]	; 0x30
 80213f4:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 80213f8:	9312      	str	r3, [sp, #72]	; 0x48
 80213fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213fc:	b29b      	uxth	r3, r3
 80213fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8021400:	9b08      	ldr	r3, [sp, #32]
 8021402:	3b01      	subs	r3, #1
 8021404:	9308      	str	r3, [sp, #32]
 8021406:	3301      	adds	r3, #1
 8021408:	f000 80c4 	beq.w	8021594 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 802140c:	46b2      	mov	sl, r6
 802140e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021412:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021416:	f0c0 80ab 	bcc.w	8021570 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 802141a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802141c:	400b      	ands	r3, r1
 802141e:	d00a      	beq.n	8021436 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8021420:	9807      	ldr	r0, [sp, #28]
 8021422:	fb13 f300 	smulbb	r3, r3, r0
 8021426:	2bfe      	cmp	r3, #254	; 0xfe
 8021428:	dd59      	ble.n	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 802142a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802142c:	28ff      	cmp	r0, #255	; 0xff
 802142e:	d156      	bne.n	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8021430:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021432:	f8ae 4000 	strh.w	r4, [lr]
 8021436:	4447      	add	r7, r8
 8021438:	b2bf      	uxth	r7, r7
 802143a:	2f07      	cmp	r7, #7
 802143c:	bf89      	itett	hi
 802143e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8021440:	fa41 f109 	asrls.w	r1, r1, r9
 8021444:	2700      	movhi	r7, #0
 8021446:	7859      	ldrbhi	r1, [r3, #1]
 8021448:	bf8a      	itet	hi
 802144a:	3301      	addhi	r3, #1
 802144c:	b2c9      	uxtbls	r1, r1
 802144e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8021450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021452:	449e      	add	lr, r3
 8021454:	e7dd      	b.n	8021412 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8021456:	441d      	add	r5, r3
 8021458:	b22d      	sxth	r5, r5
 802145a:	e706      	b.n	802126a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802145c:	f1ba 0f01 	cmp.w	sl, #1
 8021460:	f47f af3f 	bne.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021464:	f1b9 0f01 	cmp.w	r9, #1
 8021468:	f47f af3b 	bne.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 802146c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8021568 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021470:	f8d9 0000 	ldr.w	r0, [r9]
 8021474:	6803      	ldr	r3, [r0, #0]
 8021476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021478:	4798      	blx	r3
 802147a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802147e:	464a      	mov	r2, r9
 8021480:	d006      	beq.n	8021490 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021482:	f1b8 0f04 	cmp.w	r8, #4
 8021486:	d11a      	bne.n	80214be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8021488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802148a:	3300      	adds	r3, #0
 802148c:	bf18      	it	ne
 802148e:	2301      	movne	r3, #1
 8021490:	05c0      	lsls	r0, r0, #23
 8021492:	f140 8088 	bpl.w	80215a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8021496:	f1b8 0f08 	cmp.w	r8, #8
 802149a:	f040 8084 	bne.w	80215a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 802149e:	2b00      	cmp	r3, #0
 80214a0:	bf14      	ite	ne
 80214a2:	2180      	movne	r1, #128	; 0x80
 80214a4:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80214a8:	2e00      	cmp	r6, #0
 80214aa:	f040 80af 	bne.w	802160c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 80214ae:	2f00      	cmp	r7, #0
 80214b0:	f000 8083 	beq.w	80215ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80214b4:	23ff      	movs	r3, #255	; 0xff
 80214b6:	46c1      	mov	r9, r8
 80214b8:	930a      	str	r3, [sp, #40]	; 0x28
 80214ba:	2301      	movs	r3, #1
 80214bc:	e728      	b.n	8021310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 80214be:	2300      	movs	r3, #0
 80214c0:	e7e6      	b.n	8021490 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80214c2:	46c1      	mov	r9, r8
 80214c4:	23ff      	movs	r3, #255	; 0xff
 80214c6:	e723      	b.n	8021310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 80214c8:	46c1      	mov	r9, r8
 80214ca:	2355      	movs	r3, #85	; 0x55
 80214cc:	e720      	b.n	8021310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 80214ce:	23ff      	movs	r3, #255	; 0xff
 80214d0:	46c1      	mov	r9, r8
 80214d2:	930a      	str	r3, [sp, #40]	; 0x28
 80214d4:	2301      	movs	r3, #1
 80214d6:	9307      	str	r3, [sp, #28]
 80214d8:	e71d      	b.n	8021316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 80214da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80214dc:	e765      	b.n	80213aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 80214de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80214e0:	f8be 5000 	ldrh.w	r5, [lr]
 80214e4:	fb10 f303 	smulbb	r3, r0, r3
 80214e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214ea:	122c      	asrs	r4, r5, #8
 80214ec:	b29b      	uxth	r3, r3
 80214ee:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80214f2:	1c58      	adds	r0, r3, #1
 80214f4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80214f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80214fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80214fe:	fa1f fc83 	uxth.w	ip, r3
 8021502:	43db      	mvns	r3, r3
 8021504:	fb10 f00c 	smulbb	r0, r0, ip
 8021508:	b2db      	uxtb	r3, r3
 802150a:	fb1c fb02 	smulbb	fp, ip, r2
 802150e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021510:	fb04 0403 	mla	r4, r4, r3, r0
 8021514:	10e8      	asrs	r0, r5, #3
 8021516:	fb1c fc02 	smulbb	ip, ip, r2
 802151a:	00ed      	lsls	r5, r5, #3
 802151c:	b2a4      	uxth	r4, r4
 802151e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021522:	b2ed      	uxtb	r5, r5
 8021524:	fb00 b003 	mla	r0, r0, r3, fp
 8021528:	fb05 cc03 	mla	ip, r5, r3, ip
 802152c:	1c63      	adds	r3, r4, #1
 802152e:	b280      	uxth	r0, r0
 8021530:	fa1f fc8c 	uxth.w	ip, ip
 8021534:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021538:	f10c 0b01 	add.w	fp, ip, #1
 802153c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021540:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8021544:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8021548:	ea44 040b 	orr.w	r4, r4, fp
 802154c:	f100 0b01 	add.w	fp, r0, #1
 8021550:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8021554:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8021558:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802155c:	ea44 040b 	orr.w	r4, r4, fp
 8021560:	e767      	b.n	8021432 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8021562:	bf00      	nop
 8021564:	20014b2c 	.word	0x20014b2c
 8021568:	20014b34 	.word	0x20014b34
 802156c:	20014b2e 	.word	0x20014b2e
 8021570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021572:	b153      	cbz	r3, 802158a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8021574:	441f      	add	r7, r3
 8021576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021578:	b2bf      	uxth	r7, r7
 802157a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 802157e:	f007 0707 	and.w	r7, r7, #7
 8021582:	7819      	ldrb	r1, [r3, #0]
 8021584:	9328      	str	r3, [sp, #160]	; 0xa0
 8021586:	4139      	asrs	r1, r7
 8021588:	b2c9      	uxtb	r1, r1
 802158a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802158c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802158e:	441a      	add	r2, r3
 8021590:	9209      	str	r2, [sp, #36]	; 0x24
 8021592:	e735      	b.n	8021400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8021594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021596:	2b00      	cmp	r3, #0
 8021598:	d135      	bne.n	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802159a:	4b21      	ldr	r3, [pc, #132]	; (8021620 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 802159c:	6818      	ldr	r0, [r3, #0]
 802159e:	6803      	ldr	r3, [r0, #0]
 80215a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215a2:	4798      	blx	r3
 80215a4:	e02f      	b.n	8021606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	f43f ae9b 	beq.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80215ac:	2e00      	cmp	r6, #0
 80215ae:	f47f ae98 	bne.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80215b2:	2f00      	cmp	r7, #0
 80215b4:	f47f ae95 	bne.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80215b8:	2180      	movs	r1, #128	; 0x80
 80215ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80215be:	18eb      	adds	r3, r5, r3
 80215c0:	4283      	cmp	r3, r0
 80215c2:	f73f ae8e 	bgt.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80215c6:	9b08      	ldr	r3, [sp, #32]
 80215c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80215ca:	445b      	add	r3, fp
 80215cc:	4283      	cmp	r3, r0
 80215ce:	f73f ae88 	bgt.w	80212e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80215d2:	f1b8 0f08 	cmp.w	r8, #8
 80215d6:	6810      	ldr	r0, [r2, #0]
 80215d8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80215dc:	bf18      	it	ne
 80215de:	3401      	addne	r4, #1
 80215e0:	6805      	ldr	r5, [r0, #0]
 80215e2:	9105      	str	r1, [sp, #20]
 80215e4:	bf18      	it	ne
 80215e6:	f024 0401 	bicne.w	r4, r4, #1
 80215ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80215ec:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80215f0:	bf18      	it	ne
 80215f2:	b2a4      	uxthne	r4, r4
 80215f4:	9104      	str	r1, [sp, #16]
 80215f6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80215f8:	e9cd 4b00 	strd	r4, fp, [sp]
 80215fc:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8021600:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021602:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8021604:	47a0      	blx	r4
 8021606:	b019      	add	sp, #100	; 0x64
 8021608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802160c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802160e:	2b00      	cmp	r3, #0
 8021610:	f47f af5d 	bne.w	80214ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8021614:	23ff      	movs	r3, #255	; 0xff
 8021616:	46c1      	mov	r9, r8
 8021618:	930a      	str	r3, [sp, #40]	; 0x28
 802161a:	2301      	movs	r3, #1
 802161c:	9307      	str	r3, [sp, #28]
 802161e:	e687      	b.n	8021330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8021620:	20014b34 	.word	0x20014b34

08021624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021624:	b538      	push	{r3, r4, r5, lr}
 8021626:	4c15      	ldr	r4, [pc, #84]	; (802167c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021628:	4605      	mov	r5, r0
 802162a:	7823      	ldrb	r3, [r4, #0]
 802162c:	f3bf 8f5b 	dmb	ish
 8021630:	07da      	lsls	r2, r3, #31
 8021632:	d40b      	bmi.n	802164c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021634:	4620      	mov	r0, r4
 8021636:	f009 f880 	bl	802a73a <__cxa_guard_acquire>
 802163a:	b138      	cbz	r0, 802164c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802163c:	4620      	mov	r0, r4
 802163e:	f009 f888 	bl	802a752 <__cxa_guard_release>
 8021642:	4a0f      	ldr	r2, [pc, #60]	; (8021680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021644:	490f      	ldr	r1, [pc, #60]	; (8021684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021646:	4810      	ldr	r0, [pc, #64]	; (8021688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021648:	f009 f870 	bl	802a72c <__aeabi_atexit>
 802164c:	4c0f      	ldr	r4, [pc, #60]	; (802168c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802164e:	7823      	ldrb	r3, [r4, #0]
 8021650:	f3bf 8f5b 	dmb	ish
 8021654:	07db      	lsls	r3, r3, #31
 8021656:	d40b      	bmi.n	8021670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021658:	4620      	mov	r0, r4
 802165a:	f009 f86e 	bl	802a73a <__cxa_guard_acquire>
 802165e:	b138      	cbz	r0, 8021670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021660:	4620      	mov	r0, r4
 8021662:	f009 f876 	bl	802a752 <__cxa_guard_release>
 8021666:	4a06      	ldr	r2, [pc, #24]	; (8021680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021668:	4909      	ldr	r1, [pc, #36]	; (8021690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802166a:	480a      	ldr	r0, [pc, #40]	; (8021694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802166c:	f009 f85e 	bl	802a72c <__aeabi_atexit>
 8021670:	4b05      	ldr	r3, [pc, #20]	; (8021688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021672:	612b      	str	r3, [r5, #16]
 8021674:	4b07      	ldr	r3, [pc, #28]	; (8021694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021676:	616b      	str	r3, [r5, #20]
 8021678:	bd38      	pop	{r3, r4, r5, pc}
 802167a:	bf00      	nop
 802167c:	20014c20 	.word	0x20014c20
 8021680:	20000000 	.word	0x20000000
 8021684:	0801fc27 	.word	0x0801fc27
 8021688:	20000060 	.word	0x20000060
 802168c:	20014c24 	.word	0x20014c24
 8021690:	0801fc25 	.word	0x0801fc25
 8021694:	20000064 	.word	0x20000064

08021698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021698:	b538      	push	{r3, r4, r5, lr}
 802169a:	4c15      	ldr	r4, [pc, #84]	; (80216f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802169c:	4605      	mov	r5, r0
 802169e:	7823      	ldrb	r3, [r4, #0]
 80216a0:	f3bf 8f5b 	dmb	ish
 80216a4:	07da      	lsls	r2, r3, #31
 80216a6:	d40b      	bmi.n	80216c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80216a8:	4620      	mov	r0, r4
 80216aa:	f009 f846 	bl	802a73a <__cxa_guard_acquire>
 80216ae:	b138      	cbz	r0, 80216c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80216b0:	4620      	mov	r0, r4
 80216b2:	f009 f84e 	bl	802a752 <__cxa_guard_release>
 80216b6:	4a0f      	ldr	r2, [pc, #60]	; (80216f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80216b8:	490f      	ldr	r1, [pc, #60]	; (80216f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80216ba:	4810      	ldr	r0, [pc, #64]	; (80216fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80216bc:	f009 f836 	bl	802a72c <__aeabi_atexit>
 80216c0:	4c0f      	ldr	r4, [pc, #60]	; (8021700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80216c2:	7823      	ldrb	r3, [r4, #0]
 80216c4:	f3bf 8f5b 	dmb	ish
 80216c8:	07db      	lsls	r3, r3, #31
 80216ca:	d40b      	bmi.n	80216e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80216cc:	4620      	mov	r0, r4
 80216ce:	f009 f834 	bl	802a73a <__cxa_guard_acquire>
 80216d2:	b138      	cbz	r0, 80216e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80216d4:	4620      	mov	r0, r4
 80216d6:	f009 f83c 	bl	802a752 <__cxa_guard_release>
 80216da:	4a06      	ldr	r2, [pc, #24]	; (80216f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80216dc:	4909      	ldr	r1, [pc, #36]	; (8021704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80216de:	480a      	ldr	r0, [pc, #40]	; (8021708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80216e0:	f009 f824 	bl	802a72c <__aeabi_atexit>
 80216e4:	4b05      	ldr	r3, [pc, #20]	; (80216fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80216e6:	60ab      	str	r3, [r5, #8]
 80216e8:	4b07      	ldr	r3, [pc, #28]	; (8021708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80216ea:	60eb      	str	r3, [r5, #12]
 80216ec:	bd38      	pop	{r3, r4, r5, pc}
 80216ee:	bf00      	nop
 80216f0:	20014bf8 	.word	0x20014bf8
 80216f4:	20000000 	.word	0x20000000
 80216f8:	0801fc2b 	.word	0x0801fc2b
 80216fc:	20000038 	.word	0x20000038
 8021700:	20014bfc 	.word	0x20014bfc
 8021704:	0801fc29 	.word	0x0801fc29
 8021708:	2000003c 	.word	0x2000003c

0802170c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802170c:	b510      	push	{r4, lr}
 802170e:	4604      	mov	r4, r0
 8021710:	f7ff ff88 	bl	8021624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021714:	4620      	mov	r0, r4
 8021716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802171a:	f7ff bfbd 	b.w	8021698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021720:	b538      	push	{r3, r4, r5, lr}
 8021722:	4c15      	ldr	r4, [pc, #84]	; (8021778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021724:	4605      	mov	r5, r0
 8021726:	7823      	ldrb	r3, [r4, #0]
 8021728:	f3bf 8f5b 	dmb	ish
 802172c:	07da      	lsls	r2, r3, #31
 802172e:	d40b      	bmi.n	8021748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021730:	4620      	mov	r0, r4
 8021732:	f009 f802 	bl	802a73a <__cxa_guard_acquire>
 8021736:	b138      	cbz	r0, 8021748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021738:	4620      	mov	r0, r4
 802173a:	f009 f80a 	bl	802a752 <__cxa_guard_release>
 802173e:	4a0f      	ldr	r2, [pc, #60]	; (802177c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021740:	490f      	ldr	r1, [pc, #60]	; (8021780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021742:	4810      	ldr	r0, [pc, #64]	; (8021784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021744:	f008 fff2 	bl	802a72c <__aeabi_atexit>
 8021748:	4c0f      	ldr	r4, [pc, #60]	; (8021788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802174a:	7823      	ldrb	r3, [r4, #0]
 802174c:	f3bf 8f5b 	dmb	ish
 8021750:	07db      	lsls	r3, r3, #31
 8021752:	d40b      	bmi.n	802176c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021754:	4620      	mov	r0, r4
 8021756:	f008 fff0 	bl	802a73a <__cxa_guard_acquire>
 802175a:	b138      	cbz	r0, 802176c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802175c:	4620      	mov	r0, r4
 802175e:	f008 fff8 	bl	802a752 <__cxa_guard_release>
 8021762:	4a06      	ldr	r2, [pc, #24]	; (802177c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021764:	4909      	ldr	r1, [pc, #36]	; (802178c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021766:	480a      	ldr	r0, [pc, #40]	; (8021790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021768:	f008 ffe0 	bl	802a72c <__aeabi_atexit>
 802176c:	4b05      	ldr	r3, [pc, #20]	; (8021784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802176e:	622b      	str	r3, [r5, #32]
 8021770:	4b07      	ldr	r3, [pc, #28]	; (8021790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021772:	626b      	str	r3, [r5, #36]	; 0x24
 8021774:	bd38      	pop	{r3, r4, r5, pc}
 8021776:	bf00      	nop
 8021778:	20014c28 	.word	0x20014c28
 802177c:	20000000 	.word	0x20000000
 8021780:	0801fc1f 	.word	0x0801fc1f
 8021784:	20000068 	.word	0x20000068
 8021788:	20014c2c 	.word	0x20014c2c
 802178c:	0801fc1d 	.word	0x0801fc1d
 8021790:	2000006c 	.word	0x2000006c

08021794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021794:	b538      	push	{r3, r4, r5, lr}
 8021796:	4c15      	ldr	r4, [pc, #84]	; (80217ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021798:	4605      	mov	r5, r0
 802179a:	7823      	ldrb	r3, [r4, #0]
 802179c:	f3bf 8f5b 	dmb	ish
 80217a0:	07da      	lsls	r2, r3, #31
 80217a2:	d40b      	bmi.n	80217bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80217a4:	4620      	mov	r0, r4
 80217a6:	f008 ffc8 	bl	802a73a <__cxa_guard_acquire>
 80217aa:	b138      	cbz	r0, 80217bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80217ac:	4620      	mov	r0, r4
 80217ae:	f008 ffd0 	bl	802a752 <__cxa_guard_release>
 80217b2:	4a0f      	ldr	r2, [pc, #60]	; (80217f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80217b4:	490f      	ldr	r1, [pc, #60]	; (80217f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80217b6:	4810      	ldr	r0, [pc, #64]	; (80217f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80217b8:	f008 ffb8 	bl	802a72c <__aeabi_atexit>
 80217bc:	4c0f      	ldr	r4, [pc, #60]	; (80217fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80217be:	7823      	ldrb	r3, [r4, #0]
 80217c0:	f3bf 8f5b 	dmb	ish
 80217c4:	07db      	lsls	r3, r3, #31
 80217c6:	d40b      	bmi.n	80217e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80217c8:	4620      	mov	r0, r4
 80217ca:	f008 ffb6 	bl	802a73a <__cxa_guard_acquire>
 80217ce:	b138      	cbz	r0, 80217e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80217d0:	4620      	mov	r0, r4
 80217d2:	f008 ffbe 	bl	802a752 <__cxa_guard_release>
 80217d6:	4a06      	ldr	r2, [pc, #24]	; (80217f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80217d8:	4909      	ldr	r1, [pc, #36]	; (8021800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80217da:	480a      	ldr	r0, [pc, #40]	; (8021804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80217dc:	f008 ffa6 	bl	802a72c <__aeabi_atexit>
 80217e0:	4b05      	ldr	r3, [pc, #20]	; (80217f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80217e2:	61ab      	str	r3, [r5, #24]
 80217e4:	4b07      	ldr	r3, [pc, #28]	; (8021804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80217e6:	61eb      	str	r3, [r5, #28]
 80217e8:	bd38      	pop	{r3, r4, r5, pc}
 80217ea:	bf00      	nop
 80217ec:	20014c00 	.word	0x20014c00
 80217f0:	20000000 	.word	0x20000000
 80217f4:	0801fc23 	.word	0x0801fc23
 80217f8:	20000040 	.word	0x20000040
 80217fc:	20014c04 	.word	0x20014c04
 8021800:	0801fc21 	.word	0x0801fc21
 8021804:	20000044 	.word	0x20000044

08021808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021808:	b510      	push	{r4, lr}
 802180a:	4604      	mov	r4, r0
 802180c:	f7ff ff88 	bl	8021720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021810:	4620      	mov	r0, r4
 8021812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021816:	f7ff bfbd 	b.w	8021794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802181c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802181c:	b538      	push	{r3, r4, r5, lr}
 802181e:	4c15      	ldr	r4, [pc, #84]	; (8021874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021820:	4605      	mov	r5, r0
 8021822:	7823      	ldrb	r3, [r4, #0]
 8021824:	f3bf 8f5b 	dmb	ish
 8021828:	07da      	lsls	r2, r3, #31
 802182a:	d40b      	bmi.n	8021844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802182c:	4620      	mov	r0, r4
 802182e:	f008 ff84 	bl	802a73a <__cxa_guard_acquire>
 8021832:	b138      	cbz	r0, 8021844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021834:	4620      	mov	r0, r4
 8021836:	f008 ff8c 	bl	802a752 <__cxa_guard_release>
 802183a:	4a0f      	ldr	r2, [pc, #60]	; (8021878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802183c:	490f      	ldr	r1, [pc, #60]	; (802187c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802183e:	4810      	ldr	r0, [pc, #64]	; (8021880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021840:	f008 ff74 	bl	802a72c <__aeabi_atexit>
 8021844:	4c0f      	ldr	r4, [pc, #60]	; (8021884 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021846:	7823      	ldrb	r3, [r4, #0]
 8021848:	f3bf 8f5b 	dmb	ish
 802184c:	07db      	lsls	r3, r3, #31
 802184e:	d40b      	bmi.n	8021868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021850:	4620      	mov	r0, r4
 8021852:	f008 ff72 	bl	802a73a <__cxa_guard_acquire>
 8021856:	b138      	cbz	r0, 8021868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021858:	4620      	mov	r0, r4
 802185a:	f008 ff7a 	bl	802a752 <__cxa_guard_release>
 802185e:	4a06      	ldr	r2, [pc, #24]	; (8021878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021860:	4909      	ldr	r1, [pc, #36]	; (8021888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021862:	480a      	ldr	r0, [pc, #40]	; (802188c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021864:	f008 ff62 	bl	802a72c <__aeabi_atexit>
 8021868:	4b05      	ldr	r3, [pc, #20]	; (8021880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802186a:	632b      	str	r3, [r5, #48]	; 0x30
 802186c:	4b07      	ldr	r3, [pc, #28]	; (802188c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802186e:	636b      	str	r3, [r5, #52]	; 0x34
 8021870:	bd38      	pop	{r3, r4, r5, pc}
 8021872:	bf00      	nop
 8021874:	20014c38 	.word	0x20014c38
 8021878:	20000000 	.word	0x20000000
 802187c:	0801fc17 	.word	0x0801fc17
 8021880:	20000078 	.word	0x20000078
 8021884:	20014c3c 	.word	0x20014c3c
 8021888:	0801fc15 	.word	0x0801fc15
 802188c:	2000007c 	.word	0x2000007c

08021890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021890:	b538      	push	{r3, r4, r5, lr}
 8021892:	4c15      	ldr	r4, [pc, #84]	; (80218e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021894:	4605      	mov	r5, r0
 8021896:	7823      	ldrb	r3, [r4, #0]
 8021898:	f3bf 8f5b 	dmb	ish
 802189c:	07da      	lsls	r2, r3, #31
 802189e:	d40b      	bmi.n	80218b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80218a0:	4620      	mov	r0, r4
 80218a2:	f008 ff4a 	bl	802a73a <__cxa_guard_acquire>
 80218a6:	b138      	cbz	r0, 80218b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80218a8:	4620      	mov	r0, r4
 80218aa:	f008 ff52 	bl	802a752 <__cxa_guard_release>
 80218ae:	4a0f      	ldr	r2, [pc, #60]	; (80218ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80218b0:	490f      	ldr	r1, [pc, #60]	; (80218f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80218b2:	4810      	ldr	r0, [pc, #64]	; (80218f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80218b4:	f008 ff3a 	bl	802a72c <__aeabi_atexit>
 80218b8:	4c0f      	ldr	r4, [pc, #60]	; (80218f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80218ba:	7823      	ldrb	r3, [r4, #0]
 80218bc:	f3bf 8f5b 	dmb	ish
 80218c0:	07db      	lsls	r3, r3, #31
 80218c2:	d40b      	bmi.n	80218dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80218c4:	4620      	mov	r0, r4
 80218c6:	f008 ff38 	bl	802a73a <__cxa_guard_acquire>
 80218ca:	b138      	cbz	r0, 80218dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80218cc:	4620      	mov	r0, r4
 80218ce:	f008 ff40 	bl	802a752 <__cxa_guard_release>
 80218d2:	4a06      	ldr	r2, [pc, #24]	; (80218ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80218d4:	4909      	ldr	r1, [pc, #36]	; (80218fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80218d6:	480a      	ldr	r0, [pc, #40]	; (8021900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80218d8:	f008 ff28 	bl	802a72c <__aeabi_atexit>
 80218dc:	4b05      	ldr	r3, [pc, #20]	; (80218f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80218de:	62ab      	str	r3, [r5, #40]	; 0x28
 80218e0:	4b07      	ldr	r3, [pc, #28]	; (8021900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80218e2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80218e4:	bd38      	pop	{r3, r4, r5, pc}
 80218e6:	bf00      	nop
 80218e8:	20014c08 	.word	0x20014c08
 80218ec:	20000000 	.word	0x20000000
 80218f0:	0801fc1b 	.word	0x0801fc1b
 80218f4:	20000048 	.word	0x20000048
 80218f8:	20014c0c 	.word	0x20014c0c
 80218fc:	0801fc19 	.word	0x0801fc19
 8021900:	2000004c 	.word	0x2000004c

08021904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021904:	b510      	push	{r4, lr}
 8021906:	4604      	mov	r4, r0
 8021908:	f7ff ff88 	bl	802181c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802190c:	4620      	mov	r0, r4
 802190e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021912:	f7ff bfbd 	b.w	8021890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021918:	b538      	push	{r3, r4, r5, lr}
 802191a:	4c15      	ldr	r4, [pc, #84]	; (8021970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802191c:	4605      	mov	r5, r0
 802191e:	7823      	ldrb	r3, [r4, #0]
 8021920:	f3bf 8f5b 	dmb	ish
 8021924:	07da      	lsls	r2, r3, #31
 8021926:	d40b      	bmi.n	8021940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021928:	4620      	mov	r0, r4
 802192a:	f008 ff06 	bl	802a73a <__cxa_guard_acquire>
 802192e:	b138      	cbz	r0, 8021940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021930:	4620      	mov	r0, r4
 8021932:	f008 ff0e 	bl	802a752 <__cxa_guard_release>
 8021936:	4a0f      	ldr	r2, [pc, #60]	; (8021974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021938:	490f      	ldr	r1, [pc, #60]	; (8021978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802193a:	4810      	ldr	r0, [pc, #64]	; (802197c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802193c:	f008 fef6 	bl	802a72c <__aeabi_atexit>
 8021940:	4c0f      	ldr	r4, [pc, #60]	; (8021980 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021942:	7823      	ldrb	r3, [r4, #0]
 8021944:	f3bf 8f5b 	dmb	ish
 8021948:	07db      	lsls	r3, r3, #31
 802194a:	d40b      	bmi.n	8021964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802194c:	4620      	mov	r0, r4
 802194e:	f008 fef4 	bl	802a73a <__cxa_guard_acquire>
 8021952:	b138      	cbz	r0, 8021964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021954:	4620      	mov	r0, r4
 8021956:	f008 fefc 	bl	802a752 <__cxa_guard_release>
 802195a:	4a06      	ldr	r2, [pc, #24]	; (8021974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802195c:	4909      	ldr	r1, [pc, #36]	; (8021984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802195e:	480a      	ldr	r0, [pc, #40]	; (8021988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021960:	f008 fee4 	bl	802a72c <__aeabi_atexit>
 8021964:	4b05      	ldr	r3, [pc, #20]	; (802197c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021966:	652b      	str	r3, [r5, #80]	; 0x50
 8021968:	4b07      	ldr	r3, [pc, #28]	; (8021988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802196a:	656b      	str	r3, [r5, #84]	; 0x54
 802196c:	bd38      	pop	{r3, r4, r5, pc}
 802196e:	bf00      	nop
 8021970:	20014c40 	.word	0x20014c40
 8021974:	20000000 	.word	0x20000000
 8021978:	0801fc07 	.word	0x0801fc07
 802197c:	20000080 	.word	0x20000080
 8021980:	20014c44 	.word	0x20014c44
 8021984:	0801fc05 	.word	0x0801fc05
 8021988:	20000084 	.word	0x20000084

0802198c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802198c:	b538      	push	{r3, r4, r5, lr}
 802198e:	4c15      	ldr	r4, [pc, #84]	; (80219e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021990:	4605      	mov	r5, r0
 8021992:	7823      	ldrb	r3, [r4, #0]
 8021994:	f3bf 8f5b 	dmb	ish
 8021998:	07da      	lsls	r2, r3, #31
 802199a:	d40b      	bmi.n	80219b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802199c:	4620      	mov	r0, r4
 802199e:	f008 fecc 	bl	802a73a <__cxa_guard_acquire>
 80219a2:	b138      	cbz	r0, 80219b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80219a4:	4620      	mov	r0, r4
 80219a6:	f008 fed4 	bl	802a752 <__cxa_guard_release>
 80219aa:	4a0f      	ldr	r2, [pc, #60]	; (80219e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80219ac:	490f      	ldr	r1, [pc, #60]	; (80219ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80219ae:	4810      	ldr	r0, [pc, #64]	; (80219f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80219b0:	f008 febc 	bl	802a72c <__aeabi_atexit>
 80219b4:	4c0f      	ldr	r4, [pc, #60]	; (80219f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80219b6:	7823      	ldrb	r3, [r4, #0]
 80219b8:	f3bf 8f5b 	dmb	ish
 80219bc:	07db      	lsls	r3, r3, #31
 80219be:	d40b      	bmi.n	80219d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80219c0:	4620      	mov	r0, r4
 80219c2:	f008 feba 	bl	802a73a <__cxa_guard_acquire>
 80219c6:	b138      	cbz	r0, 80219d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80219c8:	4620      	mov	r0, r4
 80219ca:	f008 fec2 	bl	802a752 <__cxa_guard_release>
 80219ce:	4a06      	ldr	r2, [pc, #24]	; (80219e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80219d0:	4909      	ldr	r1, [pc, #36]	; (80219f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80219d2:	480a      	ldr	r0, [pc, #40]	; (80219fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80219d4:	f008 feaa 	bl	802a72c <__aeabi_atexit>
 80219d8:	4b05      	ldr	r3, [pc, #20]	; (80219f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80219da:	64ab      	str	r3, [r5, #72]	; 0x48
 80219dc:	4b07      	ldr	r3, [pc, #28]	; (80219fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80219de:	64eb      	str	r3, [r5, #76]	; 0x4c
 80219e0:	bd38      	pop	{r3, r4, r5, pc}
 80219e2:	bf00      	nop
 80219e4:	20014c48 	.word	0x20014c48
 80219e8:	20000000 	.word	0x20000000
 80219ec:	0801fc0b 	.word	0x0801fc0b
 80219f0:	20000088 	.word	0x20000088
 80219f4:	20014c4c 	.word	0x20014c4c
 80219f8:	0801fc09 	.word	0x0801fc09
 80219fc:	2000008c 	.word	0x2000008c

08021a00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021a00:	b538      	push	{r3, r4, r5, lr}
 8021a02:	4c15      	ldr	r4, [pc, #84]	; (8021a58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021a04:	4605      	mov	r5, r0
 8021a06:	7823      	ldrb	r3, [r4, #0]
 8021a08:	f3bf 8f5b 	dmb	ish
 8021a0c:	07da      	lsls	r2, r3, #31
 8021a0e:	d40b      	bmi.n	8021a28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021a10:	4620      	mov	r0, r4
 8021a12:	f008 fe92 	bl	802a73a <__cxa_guard_acquire>
 8021a16:	b138      	cbz	r0, 8021a28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021a18:	4620      	mov	r0, r4
 8021a1a:	f008 fe9a 	bl	802a752 <__cxa_guard_release>
 8021a1e:	4a0f      	ldr	r2, [pc, #60]	; (8021a5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021a20:	490f      	ldr	r1, [pc, #60]	; (8021a60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021a22:	4810      	ldr	r0, [pc, #64]	; (8021a64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021a24:	f008 fe82 	bl	802a72c <__aeabi_atexit>
 8021a28:	4c0f      	ldr	r4, [pc, #60]	; (8021a68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021a2a:	7823      	ldrb	r3, [r4, #0]
 8021a2c:	f3bf 8f5b 	dmb	ish
 8021a30:	07db      	lsls	r3, r3, #31
 8021a32:	d40b      	bmi.n	8021a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021a34:	4620      	mov	r0, r4
 8021a36:	f008 fe80 	bl	802a73a <__cxa_guard_acquire>
 8021a3a:	b138      	cbz	r0, 8021a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021a3c:	4620      	mov	r0, r4
 8021a3e:	f008 fe88 	bl	802a752 <__cxa_guard_release>
 8021a42:	4a06      	ldr	r2, [pc, #24]	; (8021a5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021a44:	4909      	ldr	r1, [pc, #36]	; (8021a6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021a46:	480a      	ldr	r0, [pc, #40]	; (8021a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021a48:	f008 fe70 	bl	802a72c <__aeabi_atexit>
 8021a4c:	4b05      	ldr	r3, [pc, #20]	; (8021a64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021a4e:	642b      	str	r3, [r5, #64]	; 0x40
 8021a50:	4b07      	ldr	r3, [pc, #28]	; (8021a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021a52:	646b      	str	r3, [r5, #68]	; 0x44
 8021a54:	bd38      	pop	{r3, r4, r5, pc}
 8021a56:	bf00      	nop
 8021a58:	20014c10 	.word	0x20014c10
 8021a5c:	20000000 	.word	0x20000000
 8021a60:	0801fc0f 	.word	0x0801fc0f
 8021a64:	20000050 	.word	0x20000050
 8021a68:	20014c14 	.word	0x20014c14
 8021a6c:	0801fc0d 	.word	0x0801fc0d
 8021a70:	20000054 	.word	0x20000054

08021a74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021a74:	b538      	push	{r3, r4, r5, lr}
 8021a76:	4c15      	ldr	r4, [pc, #84]	; (8021acc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021a78:	4605      	mov	r5, r0
 8021a7a:	7823      	ldrb	r3, [r4, #0]
 8021a7c:	f3bf 8f5b 	dmb	ish
 8021a80:	07da      	lsls	r2, r3, #31
 8021a82:	d40b      	bmi.n	8021a9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021a84:	4620      	mov	r0, r4
 8021a86:	f008 fe58 	bl	802a73a <__cxa_guard_acquire>
 8021a8a:	b138      	cbz	r0, 8021a9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021a8c:	4620      	mov	r0, r4
 8021a8e:	f008 fe60 	bl	802a752 <__cxa_guard_release>
 8021a92:	4a0f      	ldr	r2, [pc, #60]	; (8021ad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021a94:	490f      	ldr	r1, [pc, #60]	; (8021ad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021a96:	4810      	ldr	r0, [pc, #64]	; (8021ad8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021a98:	f008 fe48 	bl	802a72c <__aeabi_atexit>
 8021a9c:	4c0f      	ldr	r4, [pc, #60]	; (8021adc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021a9e:	7823      	ldrb	r3, [r4, #0]
 8021aa0:	f3bf 8f5b 	dmb	ish
 8021aa4:	07db      	lsls	r3, r3, #31
 8021aa6:	d40b      	bmi.n	8021ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021aa8:	4620      	mov	r0, r4
 8021aaa:	f008 fe46 	bl	802a73a <__cxa_guard_acquire>
 8021aae:	b138      	cbz	r0, 8021ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	f008 fe4e 	bl	802a752 <__cxa_guard_release>
 8021ab6:	4a06      	ldr	r2, [pc, #24]	; (8021ad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021ab8:	4909      	ldr	r1, [pc, #36]	; (8021ae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021aba:	480a      	ldr	r0, [pc, #40]	; (8021ae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021abc:	f008 fe36 	bl	802a72c <__aeabi_atexit>
 8021ac0:	4b05      	ldr	r3, [pc, #20]	; (8021ad8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021ac2:	63ab      	str	r3, [r5, #56]	; 0x38
 8021ac4:	4b07      	ldr	r3, [pc, #28]	; (8021ae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021ac6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021ac8:	bd38      	pop	{r3, r4, r5, pc}
 8021aca:	bf00      	nop
 8021acc:	20014c30 	.word	0x20014c30
 8021ad0:	20000000 	.word	0x20000000
 8021ad4:	0801fc13 	.word	0x0801fc13
 8021ad8:	20000070 	.word	0x20000070
 8021adc:	20014c34 	.word	0x20014c34
 8021ae0:	0801fc11 	.word	0x0801fc11
 8021ae4:	20000074 	.word	0x20000074

08021ae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021ae8:	b510      	push	{r4, lr}
 8021aea:	4604      	mov	r4, r0
 8021aec:	f7ff ff14 	bl	8021918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021af0:	4620      	mov	r0, r4
 8021af2:	f7ff ff85 	bl	8021a00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021af6:	4620      	mov	r0, r4
 8021af8:	f7ff ff48 	bl	802198c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021afc:	4620      	mov	r0, r4
 8021afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b02:	f7ff bfb7 	b.w	8021a74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021b08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021b08:	b538      	push	{r3, r4, r5, lr}
 8021b0a:	4c15      	ldr	r4, [pc, #84]	; (8021b60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021b0c:	4605      	mov	r5, r0
 8021b0e:	7823      	ldrb	r3, [r4, #0]
 8021b10:	f3bf 8f5b 	dmb	ish
 8021b14:	07da      	lsls	r2, r3, #31
 8021b16:	d40b      	bmi.n	8021b30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021b18:	4620      	mov	r0, r4
 8021b1a:	f008 fe0e 	bl	802a73a <__cxa_guard_acquire>
 8021b1e:	b138      	cbz	r0, 8021b30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021b20:	4620      	mov	r0, r4
 8021b22:	f008 fe16 	bl	802a752 <__cxa_guard_release>
 8021b26:	4a0f      	ldr	r2, [pc, #60]	; (8021b64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021b28:	490f      	ldr	r1, [pc, #60]	; (8021b68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021b2a:	4810      	ldr	r0, [pc, #64]	; (8021b6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021b2c:	f008 fdfe 	bl	802a72c <__aeabi_atexit>
 8021b30:	4c0f      	ldr	r4, [pc, #60]	; (8021b70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021b32:	7823      	ldrb	r3, [r4, #0]
 8021b34:	f3bf 8f5b 	dmb	ish
 8021b38:	07db      	lsls	r3, r3, #31
 8021b3a:	d40b      	bmi.n	8021b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021b3c:	4620      	mov	r0, r4
 8021b3e:	f008 fdfc 	bl	802a73a <__cxa_guard_acquire>
 8021b42:	b138      	cbz	r0, 8021b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021b44:	4620      	mov	r0, r4
 8021b46:	f008 fe04 	bl	802a752 <__cxa_guard_release>
 8021b4a:	4a06      	ldr	r2, [pc, #24]	; (8021b64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021b4c:	4909      	ldr	r1, [pc, #36]	; (8021b74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021b4e:	480a      	ldr	r0, [pc, #40]	; (8021b78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021b50:	f008 fdec 	bl	802a72c <__aeabi_atexit>
 8021b54:	4b05      	ldr	r3, [pc, #20]	; (8021b6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021b56:	662b      	str	r3, [r5, #96]	; 0x60
 8021b58:	4b07      	ldr	r3, [pc, #28]	; (8021b78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021b5a:	666b      	str	r3, [r5, #100]	; 0x64
 8021b5c:	bd38      	pop	{r3, r4, r5, pc}
 8021b5e:	bf00      	nop
 8021b60:	20014c18 	.word	0x20014c18
 8021b64:	20000000 	.word	0x20000000
 8021b68:	0801fbff 	.word	0x0801fbff
 8021b6c:	20000058 	.word	0x20000058
 8021b70:	20014c1c 	.word	0x20014c1c
 8021b74:	0801fbfd 	.word	0x0801fbfd
 8021b78:	2000005c 	.word	0x2000005c

08021b7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021b7c:	b538      	push	{r3, r4, r5, lr}
 8021b7e:	4c15      	ldr	r4, [pc, #84]	; (8021bd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021b80:	4605      	mov	r5, r0
 8021b82:	7823      	ldrb	r3, [r4, #0]
 8021b84:	f3bf 8f5b 	dmb	ish
 8021b88:	07da      	lsls	r2, r3, #31
 8021b8a:	d40b      	bmi.n	8021ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021b8c:	4620      	mov	r0, r4
 8021b8e:	f008 fdd4 	bl	802a73a <__cxa_guard_acquire>
 8021b92:	b138      	cbz	r0, 8021ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021b94:	4620      	mov	r0, r4
 8021b96:	f008 fddc 	bl	802a752 <__cxa_guard_release>
 8021b9a:	4a0f      	ldr	r2, [pc, #60]	; (8021bd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021b9c:	490f      	ldr	r1, [pc, #60]	; (8021bdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021b9e:	4810      	ldr	r0, [pc, #64]	; (8021be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021ba0:	f008 fdc4 	bl	802a72c <__aeabi_atexit>
 8021ba4:	4c0f      	ldr	r4, [pc, #60]	; (8021be4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021ba6:	7823      	ldrb	r3, [r4, #0]
 8021ba8:	f3bf 8f5b 	dmb	ish
 8021bac:	07db      	lsls	r3, r3, #31
 8021bae:	d40b      	bmi.n	8021bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	f008 fdc2 	bl	802a73a <__cxa_guard_acquire>
 8021bb6:	b138      	cbz	r0, 8021bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021bb8:	4620      	mov	r0, r4
 8021bba:	f008 fdca 	bl	802a752 <__cxa_guard_release>
 8021bbe:	4a06      	ldr	r2, [pc, #24]	; (8021bd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021bc0:	4909      	ldr	r1, [pc, #36]	; (8021be8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021bc2:	480a      	ldr	r0, [pc, #40]	; (8021bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021bc4:	f008 fdb2 	bl	802a72c <__aeabi_atexit>
 8021bc8:	4b05      	ldr	r3, [pc, #20]	; (8021be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021bca:	65ab      	str	r3, [r5, #88]	; 0x58
 8021bcc:	4b07      	ldr	r3, [pc, #28]	; (8021bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021bce:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021bd0:	bd38      	pop	{r3, r4, r5, pc}
 8021bd2:	bf00      	nop
 8021bd4:	20014bf0 	.word	0x20014bf0
 8021bd8:	20000000 	.word	0x20000000
 8021bdc:	0801fc03 	.word	0x0801fc03
 8021be0:	20000030 	.word	0x20000030
 8021be4:	20014bf4 	.word	0x20014bf4
 8021be8:	0801fc01 	.word	0x0801fc01
 8021bec:	20000034 	.word	0x20000034

08021bf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8021bf0:	b510      	push	{r4, lr}
 8021bf2:	4604      	mov	r4, r0
 8021bf4:	f7ff ff88 	bl	8021b08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021bf8:	4620      	mov	r0, r4
 8021bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bfe:	f7ff bfbd 	b.w	8021b7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021c04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021c04:	b538      	push	{r3, r4, r5, lr}
 8021c06:	4c15      	ldr	r4, [pc, #84]	; (8021c5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021c08:	4605      	mov	r5, r0
 8021c0a:	7823      	ldrb	r3, [r4, #0]
 8021c0c:	f3bf 8f5b 	dmb	ish
 8021c10:	07da      	lsls	r2, r3, #31
 8021c12:	d40b      	bmi.n	8021c2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021c14:	4620      	mov	r0, r4
 8021c16:	f008 fd90 	bl	802a73a <__cxa_guard_acquire>
 8021c1a:	b138      	cbz	r0, 8021c2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021c1c:	4620      	mov	r0, r4
 8021c1e:	f008 fd98 	bl	802a752 <__cxa_guard_release>
 8021c22:	4a0f      	ldr	r2, [pc, #60]	; (8021c60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021c24:	490f      	ldr	r1, [pc, #60]	; (8021c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021c26:	4810      	ldr	r0, [pc, #64]	; (8021c68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021c28:	f008 fd80 	bl	802a72c <__aeabi_atexit>
 8021c2c:	4c0f      	ldr	r4, [pc, #60]	; (8021c6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021c2e:	7823      	ldrb	r3, [r4, #0]
 8021c30:	f3bf 8f5b 	dmb	ish
 8021c34:	07db      	lsls	r3, r3, #31
 8021c36:	d40b      	bmi.n	8021c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021c38:	4620      	mov	r0, r4
 8021c3a:	f008 fd7e 	bl	802a73a <__cxa_guard_acquire>
 8021c3e:	b138      	cbz	r0, 8021c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021c40:	4620      	mov	r0, r4
 8021c42:	f008 fd86 	bl	802a752 <__cxa_guard_release>
 8021c46:	4a06      	ldr	r2, [pc, #24]	; (8021c60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021c48:	4909      	ldr	r1, [pc, #36]	; (8021c70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021c4a:	480a      	ldr	r0, [pc, #40]	; (8021c74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021c4c:	f008 fd6e 	bl	802a72c <__aeabi_atexit>
 8021c50:	4b05      	ldr	r3, [pc, #20]	; (8021c68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021c52:	672b      	str	r3, [r5, #112]	; 0x70
 8021c54:	4b07      	ldr	r3, [pc, #28]	; (8021c74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021c56:	676b      	str	r3, [r5, #116]	; 0x74
 8021c58:	bd38      	pop	{r3, r4, r5, pc}
 8021c5a:	bf00      	nop
 8021c5c:	20014be8 	.word	0x20014be8
 8021c60:	20000000 	.word	0x20000000
 8021c64:	0801fbf7 	.word	0x0801fbf7
 8021c68:	20000028 	.word	0x20000028
 8021c6c:	20014bec 	.word	0x20014bec
 8021c70:	0801fbf5 	.word	0x0801fbf5
 8021c74:	2000002c 	.word	0x2000002c

08021c78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021c78:	b538      	push	{r3, r4, r5, lr}
 8021c7a:	4c15      	ldr	r4, [pc, #84]	; (8021cd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021c7c:	4605      	mov	r5, r0
 8021c7e:	7823      	ldrb	r3, [r4, #0]
 8021c80:	f3bf 8f5b 	dmb	ish
 8021c84:	07da      	lsls	r2, r3, #31
 8021c86:	d40b      	bmi.n	8021ca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021c88:	4620      	mov	r0, r4
 8021c8a:	f008 fd56 	bl	802a73a <__cxa_guard_acquire>
 8021c8e:	b138      	cbz	r0, 8021ca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021c90:	4620      	mov	r0, r4
 8021c92:	f008 fd5e 	bl	802a752 <__cxa_guard_release>
 8021c96:	4a0f      	ldr	r2, [pc, #60]	; (8021cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021c98:	490f      	ldr	r1, [pc, #60]	; (8021cd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021c9a:	4810      	ldr	r0, [pc, #64]	; (8021cdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021c9c:	f008 fd46 	bl	802a72c <__aeabi_atexit>
 8021ca0:	4c0f      	ldr	r4, [pc, #60]	; (8021ce0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021ca2:	7823      	ldrb	r3, [r4, #0]
 8021ca4:	f3bf 8f5b 	dmb	ish
 8021ca8:	07db      	lsls	r3, r3, #31
 8021caa:	d40b      	bmi.n	8021cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021cac:	4620      	mov	r0, r4
 8021cae:	f008 fd44 	bl	802a73a <__cxa_guard_acquire>
 8021cb2:	b138      	cbz	r0, 8021cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021cb4:	4620      	mov	r0, r4
 8021cb6:	f008 fd4c 	bl	802a752 <__cxa_guard_release>
 8021cba:	4a06      	ldr	r2, [pc, #24]	; (8021cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021cbc:	4909      	ldr	r1, [pc, #36]	; (8021ce4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021cbe:	480a      	ldr	r0, [pc, #40]	; (8021ce8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021cc0:	f008 fd34 	bl	802a72c <__aeabi_atexit>
 8021cc4:	4b05      	ldr	r3, [pc, #20]	; (8021cdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021cc6:	66ab      	str	r3, [r5, #104]	; 0x68
 8021cc8:	4b07      	ldr	r3, [pc, #28]	; (8021ce8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021cca:	66eb      	str	r3, [r5, #108]	; 0x6c
 8021ccc:	bd38      	pop	{r3, r4, r5, pc}
 8021cce:	bf00      	nop
 8021cd0:	20014be0 	.word	0x20014be0
 8021cd4:	20000000 	.word	0x20000000
 8021cd8:	0801fbfb 	.word	0x0801fbfb
 8021cdc:	20000020 	.word	0x20000020
 8021ce0:	20014be4 	.word	0x20014be4
 8021ce4:	0801fbf9 	.word	0x0801fbf9
 8021ce8:	20000024 	.word	0x20000024

08021cec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021cec:	b510      	push	{r4, lr}
 8021cee:	4604      	mov	r4, r0
 8021cf0:	f7ff ff88 	bl	8021c04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cfa:	f7ff bfbd 	b.w	8021c78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08021cfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8021cfe:	b510      	push	{r4, lr}
 8021d00:	4604      	mov	r4, r0
 8021d02:	f7ff fff3 	bl	8021cec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021d06:	4620      	mov	r0, r4
 8021d08:	f7ff ff72 	bl	8021bf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	f7ff fdf9 	bl	8021904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8021d12:	4620      	mov	r0, r4
 8021d14:	f7ff fcfa 	bl	802170c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f7ff fd75 	bl	8021808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8021d1e:	4620      	mov	r0, r4
 8021d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d24:	f7ff bee0 	b.w	8021ae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d2c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8021d30:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021d34:	f1be 0f00 	cmp.w	lr, #0
 8021d38:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8021d3c:	fb0e 4708 	mla	r7, lr, r8, r4
 8021d40:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021d44:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8021d48:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021d4c:	eb02 0a07 	add.w	sl, r2, r7
 8021d50:	8808      	ldrh	r0, [r1, #0]
 8021d52:	db37      	blt.n	8021dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021d54:	45f3      	cmp	fp, lr
 8021d56:	dd35      	ble.n	8021dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021d58:	2c00      	cmp	r4, #0
 8021d5a:	db31      	blt.n	8021dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021d5c:	45a0      	cmp	r8, r4
 8021d5e:	dd2f      	ble.n	8021dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021d60:	5dd2      	ldrb	r2, [r2, r7]
 8021d62:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8021d66:	1c62      	adds	r2, r4, #1
 8021d68:	d42f      	bmi.n	8021dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021d6a:	4590      	cmp	r8, r2
 8021d6c:	dd2d      	ble.n	8021dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021d6e:	b366      	cbz	r6, 8021dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021d70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021d74:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021d78:	f11e 0e01 	adds.w	lr, lr, #1
 8021d7c:	d429      	bmi.n	8021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8021d7e:	45f3      	cmp	fp, lr
 8021d80:	dd27      	ble.n	8021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8021d82:	f1bc 0f00 	cmp.w	ip, #0
 8021d86:	f000 80a0 	beq.w	8021eca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8021d8a:	2c00      	cmp	r4, #0
 8021d8c:	db1f      	blt.n	8021dce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021d8e:	45a0      	cmp	r8, r4
 8021d90:	dd1d      	ble.n	8021dce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021d92:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8021d96:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8021d9a:	3401      	adds	r4, #1
 8021d9c:	d41c      	bmi.n	8021dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8021d9e:	45a0      	cmp	r8, r4
 8021da0:	dd1a      	ble.n	8021dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8021da2:	b1de      	cbz	r6, 8021ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8021da4:	44d0      	add	r8, sl
 8021da6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021daa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021dae:	2e0f      	cmp	r6, #15
 8021db0:	d915      	bls.n	8021dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8021db2:	4b49      	ldr	r3, [pc, #292]	; (8021ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8021db4:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021db8:	4a48      	ldr	r2, [pc, #288]	; (8021edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8021dba:	4849      	ldr	r0, [pc, #292]	; (8021ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8021dbc:	f008 fcea 	bl	802a794 <__assert_func>
 8021dc0:	4681      	mov	r9, r0
 8021dc2:	e7d0      	b.n	8021d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8021dc4:	4607      	mov	r7, r0
 8021dc6:	4681      	mov	r9, r0
 8021dc8:	e7d6      	b.n	8021d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8021dca:	4607      	mov	r7, r0
 8021dcc:	e7d4      	b.n	8021d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8021dce:	4686      	mov	lr, r0
 8021dd0:	e7e3      	b.n	8021d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8021dd2:	4603      	mov	r3, r0
 8021dd4:	4686      	mov	lr, r0
 8021dd6:	e7ea      	b.n	8021dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8021dd8:	4603      	mov	r3, r0
 8021dda:	e7e8      	b.n	8021dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8021ddc:	4603      	mov	r3, r0
 8021dde:	f1bc 0f0f 	cmp.w	ip, #15
 8021de2:	d8e6      	bhi.n	8021db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8021de4:	fb16 f80c 	smulbb	r8, r6, ip
 8021de8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8021dec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021df0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021df4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021df8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021dfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e00:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021e04:	ea44 0909 	orr.w	r9, r4, r9
 8021e08:	f1cc 0410 	rsb	r4, ip, #16
 8021e0c:	041a      	lsls	r2, r3, #16
 8021e0e:	ea4a 0707 	orr.w	r7, sl, r7
 8021e12:	1ba4      	subs	r4, r4, r6
 8021e14:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8021e18:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021e1c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021e20:	4377      	muls	r7, r6
 8021e22:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021e26:	4313      	orrs	r3, r2
 8021e28:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8021e2c:	fb04 7409 	mla	r4, r4, r9, r7
 8021e30:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8021e34:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021e38:	b2af      	uxth	r7, r5
 8021e3a:	fb08 4303 	mla	r3, r8, r3, r4
 8021e3e:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8021e42:	43ed      	mvns	r5, r5
 8021e44:	10c6      	asrs	r6, r0, #3
 8021e46:	4322      	orrs	r2, r4
 8021e48:	b2ed      	uxtb	r5, r5
 8021e4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021e52:	fb16 f605 	smulbb	r6, r6, r5
 8021e56:	0d53      	lsrs	r3, r2, #21
 8021e58:	0952      	lsrs	r2, r2, #5
 8021e5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021e5e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e62:	431a      	orrs	r2, r3
 8021e64:	b293      	uxth	r3, r2
 8021e66:	1202      	asrs	r2, r0, #8
 8021e68:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021e6c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021e70:	00dc      	lsls	r4, r3, #3
 8021e72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e76:	fb12 f205 	smulbb	r2, r2, r5
 8021e7a:	b2e4      	uxtb	r4, r4
 8021e7c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8021e80:	10da      	asrs	r2, r3, #3
 8021e82:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021e86:	fa1f fc8c 	uxth.w	ip, ip
 8021e8a:	fb02 6207 	mla	r2, r2, r7, r6
 8021e8e:	f10c 0301 	add.w	r3, ip, #1
 8021e92:	b296      	uxth	r6, r2
 8021e94:	00c2      	lsls	r2, r0, #3
 8021e96:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021e9a:	b2d2      	uxtb	r2, r2
 8021e9c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021ea0:	fb12 f205 	smulbb	r2, r2, r5
 8021ea4:	fb04 2207 	mla	r2, r4, r7, r2
 8021ea8:	b292      	uxth	r2, r2
 8021eaa:	1c50      	adds	r0, r2, #1
 8021eac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021eb0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021eb4:	4313      	orrs	r3, r2
 8021eb6:	1c72      	adds	r2, r6, #1
 8021eb8:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8021ebc:	0952      	lsrs	r2, r2, #5
 8021ebe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ec2:	4313      	orrs	r3, r2
 8021ec4:	800b      	strh	r3, [r1, #0]
 8021ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eca:	2e0f      	cmp	r6, #15
 8021ecc:	f63f af71 	bhi.w	8021db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8021ed0:	4603      	mov	r3, r0
 8021ed2:	4686      	mov	lr, r0
 8021ed4:	e786      	b.n	8021de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8021ed6:	bf00      	nop
 8021ed8:	080305ce 	.word	0x080305ce
 8021edc:	08030c36 	.word	0x08030c36
 8021ee0:	080306b7 	.word	0x080306b7

08021ee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee8:	ed2d 8b08 	vpush	{d8-d11}
 8021eec:	b099      	sub	sp, #100	; 0x64
 8021eee:	eeb0 aa40 	vmov.f32	s20, s0
 8021ef2:	eef0 9a60 	vmov.f32	s19, s1
 8021ef6:	9215      	str	r2, [sp, #84]	; 0x54
 8021ef8:	eeb0 9a41 	vmov.f32	s18, s2
 8021efc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021efe:	eeb0 8a62 	vmov.f32	s16, s5
 8021f02:	9309      	str	r3, [sp, #36]	; 0x24
 8021f04:	eef0 8a43 	vmov.f32	s17, s6
 8021f08:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8021f0c:	eef0 ba44 	vmov.f32	s23, s8
 8021f10:	9016      	str	r0, [sp, #88]	; 0x58
 8021f12:	eeb0 ba64 	vmov.f32	s22, s9
 8021f16:	930d      	str	r3, [sp, #52]	; 0x34
 8021f18:	eef0 aa45 	vmov.f32	s21, s10
 8021f1c:	6850      	ldr	r0, [r2, #4]
 8021f1e:	910c      	str	r1, [sp, #48]	; 0x30
 8021f20:	6812      	ldr	r2, [r2, #0]
 8021f22:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021f26:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8021f2a:	fb00 1303 	mla	r3, r0, r3, r1
 8021f2e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021f32:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8021f38:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021f3a:	685e      	ldr	r6, [r3, #4]
 8021f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f3e:	3604      	adds	r6, #4
 8021f40:	43db      	mvns	r3, r3
 8021f42:	b2db      	uxtb	r3, r3
 8021f44:	930a      	str	r3, [sp, #40]	; 0x28
 8021f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	dc03      	bgt.n	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	f340 8226 	ble.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8021f54:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021f56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f5e:	1e48      	subs	r0, r1, #1
 8021f60:	1e57      	subs	r7, r2, #1
 8021f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	f340 80e4 	ble.w	8022132 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8021f6a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8021f6e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021f72:	d406      	bmi.n	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021f74:	4584      	cmp	ip, r0
 8021f76:	da04      	bge.n	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	db02      	blt.n	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021f7c:	42bb      	cmp	r3, r7
 8021f7e:	f2c0 80d9 	blt.w	8022134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021f82:	f11c 0c01 	adds.w	ip, ip, #1
 8021f86:	f100 80ca 	bmi.w	802211e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021f8a:	4561      	cmp	r1, ip
 8021f8c:	f2c0 80c7 	blt.w	802211e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021f90:	3301      	adds	r3, #1
 8021f92:	f100 80c4 	bmi.w	802211e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021f96:	429a      	cmp	r2, r3
 8021f98:	f2c0 80c1 	blt.w	802211e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021f9c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021fa0:	4647      	mov	r7, r8
 8021fa2:	f1bb 0f00 	cmp.w	fp, #0
 8021fa6:	f340 80e4 	ble.w	8022172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8021faa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021fac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021fb0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fb2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021fb6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021fba:	ea5f 422a 	movs.w	r2, sl, asr #16
 8021fbe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021fc2:	689b      	ldr	r3, [r3, #8]
 8021fc4:	f100 8122 	bmi.w	802220c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8021fc8:	f103 39ff 	add.w	r9, r3, #4294967295
 8021fcc:	454a      	cmp	r2, r9
 8021fce:	f280 811d 	bge.w	802220c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8021fd2:	f1bc 0f00 	cmp.w	ip, #0
 8021fd6:	f2c0 8119 	blt.w	802220c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8021fda:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021fde:	45cc      	cmp	ip, r9
 8021fe0:	f280 8114 	bge.w	802220c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8021fe4:	b21b      	sxth	r3, r3
 8021fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021fe8:	fb0c 2203 	mla	r2, ip, r3, r2
 8021fec:	eb04 0902 	add.w	r9, r4, r2
 8021ff0:	5ca2      	ldrb	r2, [r4, r2]
 8021ff2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021ff6:	2800      	cmp	r0, #0
 8021ff8:	f000 80ff 	beq.w	80221fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8021ffc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022000:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022004:	9211      	str	r2, [sp, #68]	; 0x44
 8022006:	b151      	cbz	r1, 802201e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022008:	eb09 0203 	add.w	r2, r9, r3
 802200c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022010:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022014:	930f      	str	r3, [sp, #60]	; 0x3c
 8022016:	7853      	ldrb	r3, [r2, #1]
 8022018:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802201c:	9312      	str	r3, [sp, #72]	; 0x48
 802201e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022020:	fb10 f201 	smulbb	r2, r0, r1
 8022024:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022026:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802202a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802202e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022032:	10d2      	asrs	r2, r2, #3
 8022034:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022038:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802203c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022042:	041b      	lsls	r3, r3, #16
 8022044:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022048:	4323      	orrs	r3, r4
 802204a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802204c:	4353      	muls	r3, r2
 802204e:	fb09 330c 	mla	r3, r9, ip, r3
 8022052:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022056:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802205a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802205e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022062:	f1c1 0c10 	rsb	ip, r1, #16
 8022066:	ebac 0c00 	sub.w	ip, ip, r0
 802206a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802206e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022072:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022078:	0418      	lsls	r0, r3, #16
 802207a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802207e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022082:	4318      	orrs	r0, r3
 8022084:	fb02 c200 	mla	r2, r2, r0, ip
 8022088:	f8b7 c000 	ldrh.w	ip, [r7]
 802208c:	0d53      	lsrs	r3, r2, #21
 802208e:	0952      	lsrs	r2, r2, #5
 8022090:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022094:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022098:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802209c:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80220a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80220a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80220a8:	431a      	orrs	r2, r3
 80220aa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80220ae:	fb11 f104 	smulbb	r1, r1, r4
 80220b2:	fa5f fc8c 	uxtb.w	ip, ip
 80220b6:	b292      	uxth	r2, r2
 80220b8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80220bc:	fb1c fc04 	smulbb	ip, ip, r4
 80220c0:	fb1e fe04 	smulbb	lr, lr, r4
 80220c4:	1210      	asrs	r0, r2, #8
 80220c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80220ca:	fb00 1003 	mla	r0, r0, r3, r1
 80220ce:	10d1      	asrs	r1, r2, #3
 80220d0:	00d2      	lsls	r2, r2, #3
 80220d2:	b280      	uxth	r0, r0
 80220d4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80220d8:	b2d2      	uxtb	r2, r2
 80220da:	fb01 e103 	mla	r1, r1, r3, lr
 80220de:	fb02 c203 	mla	r2, r2, r3, ip
 80220e2:	1c43      	adds	r3, r0, #1
 80220e4:	b289      	uxth	r1, r1
 80220e6:	b292      	uxth	r2, r2
 80220e8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80220ec:	f102 0c01 	add.w	ip, r2, #1
 80220f0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80220f4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80220f8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80220fc:	4313      	orrs	r3, r2
 80220fe:	1c4a      	adds	r2, r1, #1
 8022100:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022104:	0949      	lsrs	r1, r1, #5
 8022106:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802210a:	430b      	orrs	r3, r1
 802210c:	803b      	strh	r3, [r7, #0]
 802210e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022110:	3702      	adds	r7, #2
 8022112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022116:	449a      	add	sl, r3
 8022118:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802211a:	441d      	add	r5, r3
 802211c:	e741      	b.n	8021fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802211e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022120:	f108 0802 	add.w	r8, r8, #2
 8022124:	449a      	add	sl, r3
 8022126:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022128:	441d      	add	r5, r3
 802212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802212c:	3b01      	subs	r3, #1
 802212e:	9309      	str	r3, [sp, #36]	; 0x24
 8022130:	e717      	b.n	8021f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022132:	d023      	beq.n	802217c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8022134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022136:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022138:	3b01      	subs	r3, #1
 802213a:	fb00 a003 	mla	r0, r0, r3, sl
 802213e:	1400      	asrs	r0, r0, #16
 8022140:	f53f af2c 	bmi.w	8021f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022144:	3901      	subs	r1, #1
 8022146:	4288      	cmp	r0, r1
 8022148:	f6bf af28 	bge.w	8021f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802214c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802214e:	fb01 5303 	mla	r3, r1, r3, r5
 8022152:	141b      	asrs	r3, r3, #16
 8022154:	f53f af22 	bmi.w	8021f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022158:	3a01      	subs	r2, #1
 802215a:	4293      	cmp	r3, r2
 802215c:	f6bf af1e 	bge.w	8021f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022160:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022164:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022168:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802216c:	f1be 0f00 	cmp.w	lr, #0
 8022170:	dc6c      	bgt.n	802224c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022174:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022178:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802217c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802217e:	2b00      	cmp	r3, #0
 8022180:	f340 810e 	ble.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8022184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022188:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802218a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802218e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022192:	eef0 6a48 	vmov.f32	s13, s16
 8022196:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802219a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802219e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221a2:	ee16 aa90 	vmov	sl, s13
 80221a6:	eef0 6a68 	vmov.f32	s13, s17
 80221aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221ae:	ee16 5a90 	vmov	r5, s13
 80221b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80221b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80221ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80221be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80221c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80221c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80221ca:	ee18 2a10 	vmov	r2, s16
 80221ce:	eeb0 8a47 	vmov.f32	s16, s14
 80221d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221d6:	ee18 2a90 	vmov	r2, s17
 80221da:	932d      	str	r3, [sp, #180]	; 0xb4
 80221dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221de:	eef0 8a67 	vmov.f32	s17, s15
 80221e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80221e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80221ec:	3b01      	subs	r3, #1
 80221ee:	930c      	str	r3, [sp, #48]	; 0x30
 80221f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221f2:	bf08      	it	eq
 80221f4:	4613      	moveq	r3, r2
 80221f6:	9309      	str	r3, [sp, #36]	; 0x24
 80221f8:	e6a5      	b.n	8021f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80221fa:	2900      	cmp	r1, #0
 80221fc:	f43f af0f 	beq.w	802201e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022200:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022204:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022208:	930f      	str	r3, [sp, #60]	; 0x3c
 802220a:	e708      	b.n	802201e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802220c:	f112 0901 	adds.w	r9, r2, #1
 8022210:	f53f af7d 	bmi.w	802210e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022214:	454b      	cmp	r3, r9
 8022216:	f6ff af7a 	blt.w	802210e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802221a:	f11c 0901 	adds.w	r9, ip, #1
 802221e:	f53f af76 	bmi.w	802210e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022222:	45ce      	cmp	lr, r9
 8022224:	f6ff af73 	blt.w	802210e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022228:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802222a:	b21b      	sxth	r3, r3
 802222c:	9202      	str	r2, [sp, #8]
 802222e:	fa0f f28e 	sxth.w	r2, lr
 8022232:	9300      	str	r3, [sp, #0]
 8022234:	4633      	mov	r3, r6
 8022236:	9201      	str	r2, [sp, #4]
 8022238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802223a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802223e:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022242:	4639      	mov	r1, r7
 8022244:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022246:	f7ff fd6f 	bl	8021d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802224a:	e760      	b.n	802210e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802224c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802224e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022252:	1429      	asrs	r1, r5, #16
 8022254:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802225a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802225e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022262:	fb03 2101 	mla	r1, r3, r1, r2
 8022266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022268:	440a      	add	r2, r1
 802226a:	5c61      	ldrb	r1, [r4, r1]
 802226c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022270:	f1bc 0f00 	cmp.w	ip, #0
 8022274:	f000 808c 	beq.w	8022390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022278:	7857      	ldrb	r7, [r2, #1]
 802227a:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802227e:	9413      	str	r4, [sp, #76]	; 0x4c
 8022280:	b140      	cbz	r0, 8022294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8022282:	18d7      	adds	r7, r2, r3
 8022284:	5cd3      	ldrb	r3, [r2, r3]
 8022286:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802228a:	9310      	str	r3, [sp, #64]	; 0x40
 802228c:	787b      	ldrb	r3, [r7, #1]
 802228e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022292:	9314      	str	r3, [sp, #80]	; 0x50
 8022294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022296:	fb1c f200 	smulbb	r2, ip, r0
 802229a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802229c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80222a0:	041f      	lsls	r7, r3, #16
 80222a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80222a6:	10d2      	asrs	r2, r2, #3
 80222a8:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80222ac:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80222b0:	431f      	orrs	r7, r3
 80222b2:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80222b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80222b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80222ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80222bc:	041b      	lsls	r3, r3, #16
 80222be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80222c2:	ea43 030b 	orr.w	r3, r3, fp
 80222c6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80222ca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80222ce:	4353      	muls	r3, r2
 80222d0:	fb04 3707 	mla	r7, r4, r7, r3
 80222d4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80222d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80222da:	ea43 0b01 	orr.w	fp, r3, r1
 80222de:	f1c0 0110 	rsb	r1, r0, #16
 80222e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222e4:	eba1 0c0c 	sub.w	ip, r1, ip
 80222e8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80222ec:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80222f0:	fb0c 770b 	mla	r7, ip, fp, r7
 80222f4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80222f8:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80222fc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022300:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022304:	fb02 770c 	mla	r7, r2, ip, r7
 8022308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802230a:	0d79      	lsrs	r1, r7, #21
 802230c:	8812      	ldrh	r2, [r2, #0]
 802230e:	097f      	lsrs	r7, r7, #5
 8022310:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022314:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022318:	430f      	orrs	r7, r1
 802231a:	1211      	asrs	r1, r2, #8
 802231c:	b2bb      	uxth	r3, r7
 802231e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022322:	10d7      	asrs	r7, r2, #3
 8022324:	fb11 f104 	smulbb	r1, r1, r4
 8022328:	1218      	asrs	r0, r3, #8
 802232a:	00d2      	lsls	r2, r2, #3
 802232c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022330:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022334:	fb17 f704 	smulbb	r7, r7, r4
 8022338:	b2d2      	uxtb	r2, r2
 802233a:	fb00 1009 	mla	r0, r0, r9, r1
 802233e:	10d9      	asrs	r1, r3, #3
 8022340:	fb12 f204 	smulbb	r2, r2, r4
 8022344:	00db      	lsls	r3, r3, #3
 8022346:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802234a:	b280      	uxth	r0, r0
 802234c:	b2db      	uxtb	r3, r3
 802234e:	fb01 7109 	mla	r1, r1, r9, r7
 8022352:	fb03 2309 	mla	r3, r3, r9, r2
 8022356:	1c42      	adds	r2, r0, #1
 8022358:	b289      	uxth	r1, r1
 802235a:	b29b      	uxth	r3, r3
 802235c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022360:	1c4f      	adds	r7, r1, #1
 8022362:	1c5a      	adds	r2, r3, #1
 8022364:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022368:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802236c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022372:	0949      	lsrs	r1, r1, #5
 8022374:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022378:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802237c:	4310      	orrs	r0, r2
 802237e:	4308      	orrs	r0, r1
 8022380:	f823 0b02 	strh.w	r0, [r3], #2
 8022384:	930e      	str	r3, [sp, #56]	; 0x38
 8022386:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022388:	449a      	add	sl, r3
 802238a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802238c:	441d      	add	r5, r3
 802238e:	e6ed      	b.n	802216c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022390:	2800      	cmp	r0, #0
 8022392:	f43f af7f 	beq.w	8022294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8022396:	5cd3      	ldrb	r3, [r2, r3]
 8022398:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802239c:	9310      	str	r3, [sp, #64]	; 0x40
 802239e:	e779      	b.n	8022294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80223a0:	b019      	add	sp, #100	; 0x64
 80223a2:	ecbd 8b08 	vpop	{d8-d11}
 80223a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080223ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80223ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223b0:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80223b4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80223b8:	2e00      	cmp	r6, #0
 80223ba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80223be:	fb06 570e 	mla	r7, r6, lr, r5
 80223c2:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80223c6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80223ca:	eb02 0807 	add.w	r8, r2, r7
 80223ce:	8808      	ldrh	r0, [r1, #0]
 80223d0:	db38      	blt.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80223d2:	45b1      	cmp	r9, r6
 80223d4:	dd36      	ble.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80223d6:	2d00      	cmp	r5, #0
 80223d8:	db32      	blt.n	8022440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80223da:	45ae      	cmp	lr, r5
 80223dc:	dd30      	ble.n	8022440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80223de:	5dd2      	ldrb	r2, [r2, r7]
 80223e0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80223e4:	1c6a      	adds	r2, r5, #1
 80223e6:	d430      	bmi.n	802244a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80223e8:	4596      	cmp	lr, r2
 80223ea:	dd2e      	ble.n	802244a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80223ec:	b36c      	cbz	r4, 802244a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80223ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 80223f2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80223f6:	3601      	adds	r6, #1
 80223f8:	d42b      	bmi.n	8022452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80223fa:	45b1      	cmp	r9, r6
 80223fc:	dd29      	ble.n	8022452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80223fe:	f1bc 0f00 	cmp.w	ip, #0
 8022402:	d028      	beq.n	8022456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8022404:	2d00      	cmp	r5, #0
 8022406:	db22      	blt.n	802244e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8022408:	45ae      	cmp	lr, r5
 802240a:	dd20      	ble.n	802244e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 802240c:	f818 600e 	ldrb.w	r6, [r8, lr]
 8022410:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8022414:	3501      	adds	r5, #1
 8022416:	d407      	bmi.n	8022428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022418:	45ae      	cmp	lr, r5
 802241a:	dd05      	ble.n	8022428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802241c:	b134      	cbz	r4, 802242c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802241e:	44c6      	add	lr, r8
 8022420:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022424:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022428:	2c0f      	cmp	r4, #15
 802242a:	d802      	bhi.n	8022432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802242c:	f1bc 0f0f 	cmp.w	ip, #15
 8022430:	d914      	bls.n	802245c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8022432:	4b26      	ldr	r3, [pc, #152]	; (80224cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8022434:	f240 11ef 	movw	r1, #495	; 0x1ef
 8022438:	4a25      	ldr	r2, [pc, #148]	; (80224d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802243a:	4826      	ldr	r0, [pc, #152]	; (80224d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 802243c:	f008 f9aa 	bl	802a794 <__assert_func>
 8022440:	4607      	mov	r7, r0
 8022442:	e7cf      	b.n	80223e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8022444:	4602      	mov	r2, r0
 8022446:	4607      	mov	r7, r0
 8022448:	e7d5      	b.n	80223f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802244a:	4602      	mov	r2, r0
 802244c:	e7d3      	b.n	80223f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802244e:	4606      	mov	r6, r0
 8022450:	e7e0      	b.n	8022414 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8022452:	4606      	mov	r6, r0
 8022454:	e7e8      	b.n	8022428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022456:	2c0f      	cmp	r4, #15
 8022458:	d8eb      	bhi.n	8022432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802245a:	4606      	mov	r6, r0
 802245c:	fb14 f30c 	smulbb	r3, r4, ip
 8022460:	043d      	lsls	r5, r7, #16
 8022462:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022466:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802246a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802246e:	10db      	asrs	r3, r3, #3
 8022470:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022474:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022478:	432f      	orrs	r7, r5
 802247a:	f1cc 0510 	rsb	r5, ip, #16
 802247e:	ea4e 0202 	orr.w	r2, lr, r2
 8022482:	1b2d      	subs	r5, r5, r4
 8022484:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8022488:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802248c:	4354      	muls	r4, r2
 802248e:	fb05 4507 	mla	r5, r5, r7, r4
 8022492:	0404      	lsls	r4, r0, #16
 8022494:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022498:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802249c:	4320      	orrs	r0, r4
 802249e:	fb03 5400 	mla	r4, r3, r0, r5
 80224a2:	0430      	lsls	r0, r6, #16
 80224a4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80224a8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80224ac:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80224b0:	4330      	orrs	r0, r6
 80224b2:	fb03 4000 	mla	r0, r3, r0, r4
 80224b6:	0d43      	lsrs	r3, r0, #21
 80224b8:	0940      	lsrs	r0, r0, #5
 80224ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80224c2:	4318      	orrs	r0, r3
 80224c4:	8008      	strh	r0, [r1, #0]
 80224c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80224ca:	bf00      	nop
 80224cc:	080305ce 	.word	0x080305ce
 80224d0:	08030c36 	.word	0x08030c36
 80224d4:	080306b7 	.word	0x080306b7

080224d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224dc:	ed2d 8b0a 	vpush	{d8-d12}
 80224e0:	b093      	sub	sp, #76	; 0x4c
 80224e2:	eeb0 aa40 	vmov.f32	s20, s0
 80224e6:	eef0 9a60 	vmov.f32	s19, s1
 80224ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80224ec:	eeb0 9a41 	vmov.f32	s18, s2
 80224f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80224f2:	eeb0 8a62 	vmov.f32	s16, s5
 80224f6:	9010      	str	r0, [sp, #64]	; 0x40
 80224f8:	eef0 8a43 	vmov.f32	s17, s6
 80224fc:	6850      	ldr	r0, [r2, #4]
 80224fe:	eeb0 ca44 	vmov.f32	s24, s8
 8022502:	9108      	str	r1, [sp, #32]
 8022504:	eef0 ba64 	vmov.f32	s23, s9
 8022508:	9306      	str	r3, [sp, #24]
 802250a:	eeb0 ba45 	vmov.f32	s22, s10
 802250e:	6812      	ldr	r2, [r2, #0]
 8022510:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022514:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022518:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802251c:	fb00 1303 	mla	r3, r0, r3, r1
 8022520:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022524:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	9307      	str	r3, [sp, #28]
 802252a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802252c:	685f      	ldr	r7, [r3, #4]
 802252e:	3704      	adds	r7, #4
 8022530:	9b08      	ldr	r3, [sp, #32]
 8022532:	2b00      	cmp	r3, #0
 8022534:	dc03      	bgt.n	802253e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022538:	2b00      	cmp	r3, #0
 802253a:	f340 81b2 	ble.w	80228a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802253e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022540:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022544:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022548:	1e48      	subs	r0, r1, #1
 802254a:	f102 3cff 	add.w	ip, r2, #4294967295
 802254e:	9b06      	ldr	r3, [sp, #24]
 8022550:	2b00      	cmp	r3, #0
 8022552:	f340 80a9 	ble.w	80226a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8022556:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802255a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802255e:	d406      	bmi.n	802256e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022560:	4586      	cmp	lr, r0
 8022562:	da04      	bge.n	802256e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022564:	2b00      	cmp	r3, #0
 8022566:	db02      	blt.n	802256e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022568:	4563      	cmp	r3, ip
 802256a:	f2c0 809e 	blt.w	80226aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802256e:	f11e 0e01 	adds.w	lr, lr, #1
 8022572:	f100 808f 	bmi.w	8022694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022576:	4571      	cmp	r1, lr
 8022578:	f2c0 808c 	blt.w	8022694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802257c:	3301      	adds	r3, #1
 802257e:	f100 8089 	bmi.w	8022694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022582:	429a      	cmp	r2, r3
 8022584:	f2c0 8086 	blt.w	8022694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022588:	f8dd b018 	ldr.w	fp, [sp, #24]
 802258c:	46c8      	mov	r8, r9
 802258e:	f1bb 0f00 	cmp.w	fp, #0
 8022592:	f340 80a6 	ble.w	80226e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022596:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022598:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802259c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802259e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80225a2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80225a6:	1422      	asrs	r2, r4, #16
 80225a8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80225ac:	689b      	ldr	r3, [r3, #8]
 80225ae:	f100 80e3 	bmi.w	8022778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80225b2:	f103 3aff 	add.w	sl, r3, #4294967295
 80225b6:	4552      	cmp	r2, sl
 80225b8:	f280 80de 	bge.w	8022778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80225bc:	f1bc 0f00 	cmp.w	ip, #0
 80225c0:	f2c0 80da 	blt.w	8022778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80225c4:	f10e 3aff 	add.w	sl, lr, #4294967295
 80225c8:	45d4      	cmp	ip, sl
 80225ca:	f280 80d5 	bge.w	8022778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80225ce:	b21b      	sxth	r3, r3
 80225d0:	9d07      	ldr	r5, [sp, #28]
 80225d2:	fb0c 2203 	mla	r2, ip, r3, r2
 80225d6:	eb05 0a02 	add.w	sl, r5, r2
 80225da:	5caa      	ldrb	r2, [r5, r2]
 80225dc:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80225e0:	2800      	cmp	r0, #0
 80225e2:	f000 80c0 	beq.w	8022766 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80225e6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80225ea:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80225ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80225f0:	b151      	cbz	r1, 8022608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80225f2:	eb0a 0203 	add.w	r2, sl, r3
 80225f6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80225fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80225fe:	9309      	str	r3, [sp, #36]	; 0x24
 8022600:	7853      	ldrb	r3, [r2, #1]
 8022602:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022606:	930c      	str	r3, [sp, #48]	; 0x30
 8022608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802260a:	fb10 f201 	smulbb	r2, r0, r1
 802260e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022610:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022614:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022618:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802261c:	10d2      	asrs	r2, r2, #3
 802261e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022622:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022626:	ea4c 0c03 	orr.w	ip, ip, r3
 802262a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802262c:	041b      	lsls	r3, r3, #16
 802262e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022632:	432b      	orrs	r3, r5
 8022634:	4353      	muls	r3, r2
 8022636:	fb0a 330c 	mla	r3, sl, ip, r3
 802263a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802263e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022642:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022646:	ea4c 0e0e 	orr.w	lr, ip, lr
 802264a:	f1c1 0c10 	rsb	ip, r1, #16
 802264e:	ebac 0c00 	sub.w	ip, ip, r0
 8022652:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022656:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802265a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802265e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022660:	0418      	lsls	r0, r3, #16
 8022662:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022666:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802266a:	4318      	orrs	r0, r3
 802266c:	fb02 c200 	mla	r2, r2, r0, ip
 8022670:	0d53      	lsrs	r3, r2, #21
 8022672:	0952      	lsrs	r2, r2, #5
 8022674:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022678:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802267c:	431a      	orrs	r2, r3
 802267e:	f8a8 2000 	strh.w	r2, [r8]
 8022682:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022684:	f108 0802 	add.w	r8, r8, #2
 8022688:	f10b 3bff 	add.w	fp, fp, #4294967295
 802268c:	441c      	add	r4, r3
 802268e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022690:	441e      	add	r6, r3
 8022692:	e77c      	b.n	802258e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022694:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022696:	f109 0902 	add.w	r9, r9, #2
 802269a:	441c      	add	r4, r3
 802269c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802269e:	441e      	add	r6, r3
 80226a0:	9b06      	ldr	r3, [sp, #24]
 80226a2:	3b01      	subs	r3, #1
 80226a4:	9306      	str	r3, [sp, #24]
 80226a6:	e752      	b.n	802254e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226a8:	d020      	beq.n	80226ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226aa:	9b06      	ldr	r3, [sp, #24]
 80226ac:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80226ae:	3b01      	subs	r3, #1
 80226b0:	fb00 4003 	mla	r0, r0, r3, r4
 80226b4:	1400      	asrs	r0, r0, #16
 80226b6:	f53f af67 	bmi.w	8022588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80226ba:	3901      	subs	r1, #1
 80226bc:	4288      	cmp	r0, r1
 80226be:	f6bf af63 	bge.w	8022588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80226c2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80226c4:	fb01 6303 	mla	r3, r1, r3, r6
 80226c8:	141b      	asrs	r3, r3, #16
 80226ca:	f53f af5d 	bmi.w	8022588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80226ce:	3a01      	subs	r2, #1
 80226d0:	4293      	cmp	r3, r2
 80226d2:	f6bf af59 	bge.w	8022588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80226d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80226da:	46ca      	mov	sl, r9
 80226dc:	f1b8 0f00 	cmp.w	r8, #0
 80226e0:	dc67      	bgt.n	80227b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80226e2:	9b06      	ldr	r3, [sp, #24]
 80226e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80226e8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80226ec:	9b08      	ldr	r3, [sp, #32]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	f340 80d7 	ble.w	80228a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80226f4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80226f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80226fa:	ee79 9aab 	vadd.f32	s19, s19, s23
 80226fe:	eef0 6a48 	vmov.f32	s13, s16
 8022702:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022706:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802270a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802270e:	ee16 4a90 	vmov	r4, s13
 8022712:	eef0 6a68 	vmov.f32	s13, s17
 8022716:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802271a:	ee16 6a90 	vmov	r6, s13
 802271e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022722:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022726:	ee37 8a48 	vsub.f32	s16, s14, s16
 802272a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802272e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022732:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022736:	ee18 2a10 	vmov	r2, s16
 802273a:	eeb0 8a47 	vmov.f32	s16, s14
 802273e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022742:	ee18 2a90 	vmov	r2, s17
 8022746:	9329      	str	r3, [sp, #164]	; 0xa4
 8022748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802274a:	eef0 8a67 	vmov.f32	s17, s15
 802274e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022752:	932a      	str	r3, [sp, #168]	; 0xa8
 8022754:	9b08      	ldr	r3, [sp, #32]
 8022756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022758:	3b01      	subs	r3, #1
 802275a:	9308      	str	r3, [sp, #32]
 802275c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802275e:	bf08      	it	eq
 8022760:	4613      	moveq	r3, r2
 8022762:	9306      	str	r3, [sp, #24]
 8022764:	e6e4      	b.n	8022530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022766:	2900      	cmp	r1, #0
 8022768:	f43f af4e 	beq.w	8022608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802276c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022770:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022774:	9309      	str	r3, [sp, #36]	; 0x24
 8022776:	e747      	b.n	8022608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8022778:	f112 0a01 	adds.w	sl, r2, #1
 802277c:	d481      	bmi.n	8022682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802277e:	4553      	cmp	r3, sl
 8022780:	f6ff af7f 	blt.w	8022682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022784:	f11c 0a01 	adds.w	sl, ip, #1
 8022788:	f53f af7b 	bmi.w	8022682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802278c:	45d6      	cmp	lr, sl
 802278e:	f6ff af78 	blt.w	8022682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022792:	b21b      	sxth	r3, r3
 8022794:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022798:	fa0f f28e 	sxth.w	r2, lr
 802279c:	9300      	str	r3, [sp, #0]
 802279e:	463b      	mov	r3, r7
 80227a0:	9201      	str	r2, [sp, #4]
 80227a2:	9a07      	ldr	r2, [sp, #28]
 80227a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80227a8:	4641      	mov	r1, r8
 80227aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80227ac:	f7ff fdfe 	bl	80223ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80227b0:	e767      	b.n	8022682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80227b4:	1422      	asrs	r2, r4, #16
 80227b6:	1431      	asrs	r1, r6, #16
 80227b8:	9d07      	ldr	r5, [sp, #28]
 80227ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80227be:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80227c2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80227c6:	fb03 2101 	mla	r1, r3, r1, r2
 80227ca:	9a07      	ldr	r2, [sp, #28]
 80227cc:	440a      	add	r2, r1
 80227ce:	5c69      	ldrb	r1, [r5, r1]
 80227d0:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80227d4:	f1be 0f00 	cmp.w	lr, #0
 80227d8:	d05c      	beq.n	8022894 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80227da:	f892 c001 	ldrb.w	ip, [r2, #1]
 80227de:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80227e2:	950d      	str	r5, [sp, #52]	; 0x34
 80227e4:	b150      	cbz	r0, 80227fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80227e6:	eb02 0c03 	add.w	ip, r2, r3
 80227ea:	5cd3      	ldrb	r3, [r2, r3]
 80227ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80227f0:	930a      	str	r3, [sp, #40]	; 0x28
 80227f2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80227f6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80227fa:	930e      	str	r3, [sp, #56]	; 0x38
 80227fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227fe:	fb1e f200 	smulbb	r2, lr, r0
 8022802:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022804:	f108 38ff 	add.w	r8, r8, #4294967295
 8022808:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802280c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022810:	10d2      	asrs	r2, r2, #3
 8022812:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022816:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802281a:	ea4c 0c03 	orr.w	ip, ip, r3
 802281e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022822:	9311      	str	r3, [sp, #68]	; 0x44
 8022824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022826:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022828:	041b      	lsls	r3, r3, #16
 802282a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802282e:	ea43 030b 	orr.w	r3, r3, fp
 8022832:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022836:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802283a:	4353      	muls	r3, r2
 802283c:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022840:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022844:	ea43 0b01 	orr.w	fp, r3, r1
 8022848:	f1c0 0110 	rsb	r1, r0, #16
 802284c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802284e:	eba1 0e0e 	sub.w	lr, r1, lr
 8022852:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022856:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802285a:	fb0e cc0b 	mla	ip, lr, fp, ip
 802285e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022862:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022866:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802286a:	ea4b 0e0e 	orr.w	lr, fp, lr
 802286e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022872:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022876:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802287a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802287e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022882:	ea43 0c0c 	orr.w	ip, r3, ip
 8022886:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022888:	441c      	add	r4, r3
 802288a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802288c:	f82a cb02 	strh.w	ip, [sl], #2
 8022890:	441e      	add	r6, r3
 8022892:	e723      	b.n	80226dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022894:	2800      	cmp	r0, #0
 8022896:	d0b1      	beq.n	80227fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022898:	5cd3      	ldrb	r3, [r2, r3]
 802289a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802289e:	930a      	str	r3, [sp, #40]	; 0x28
 80228a0:	e7ac      	b.n	80227fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80228a2:	b013      	add	sp, #76	; 0x4c
 80228a4:	ecbd 8b0a 	vpop	{d8-d12}
 80228a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080228ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80228ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228b0:	468b      	mov	fp, r1
 80228b2:	8809      	ldrh	r1, [r1, #0]
 80228b4:	b089      	sub	sp, #36	; 0x24
 80228b6:	10cd      	asrs	r5, r1, #3
 80228b8:	ea4f 2921 	mov.w	r9, r1, asr #8
 80228bc:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80228c0:	00c9      	lsls	r1, r1, #3
 80228c2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80228c6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80228ca:	9202      	str	r2, [sp, #8]
 80228cc:	b2c9      	uxtb	r1, r1
 80228ce:	9500      	str	r5, [sp, #0]
 80228d0:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80228d4:	9101      	str	r1, [sp, #4]
 80228d6:	9900      	ldr	r1, [sp, #0]
 80228d8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80228dc:	0209      	lsls	r1, r1, #8
 80228de:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80228e2:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80228e6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80228ea:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80228ee:	fb04 650e 	mla	r5, r4, lr, r6
 80228f2:	2c00      	cmp	r4, #0
 80228f4:	eb02 0805 	add.w	r8, r2, r5
 80228f8:	9a01      	ldr	r2, [sp, #4]
 80228fa:	ea41 0102 	orr.w	r1, r1, r2
 80228fe:	9107      	str	r1, [sp, #28]
 8022900:	db43      	blt.n	802298a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8022902:	45a2      	cmp	sl, r4
 8022904:	dd41      	ble.n	802298a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8022906:	2e00      	cmp	r6, #0
 8022908:	db3d      	blt.n	8022986 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802290a:	45b6      	cmp	lr, r6
 802290c:	dd3b      	ble.n	8022986 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802290e:	9a02      	ldr	r2, [sp, #8]
 8022910:	5d55      	ldrb	r5, [r2, r5]
 8022912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022916:	441d      	add	r5, r3
 8022918:	1c72      	adds	r2, r6, #1
 802291a:	d439      	bmi.n	8022990 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802291c:	4596      	cmp	lr, r2
 802291e:	dd37      	ble.n	8022990 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8022920:	2f00      	cmp	r7, #0
 8022922:	d035      	beq.n	8022990 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8022924:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022928:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802292c:	4419      	add	r1, r3
 802292e:	3401      	adds	r4, #1
 8022930:	d432      	bmi.n	8022998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022932:	45a2      	cmp	sl, r4
 8022934:	dd30      	ble.n	8022998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022936:	b378      	cbz	r0, 8022998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022938:	2e00      	cmp	r6, #0
 802293a:	db2b      	blt.n	8022994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802293c:	45b6      	cmp	lr, r6
 802293e:	dd29      	ble.n	8022994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8022940:	f818 400e 	ldrb.w	r4, [r8, lr]
 8022944:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022948:	441c      	add	r4, r3
 802294a:	3601      	adds	r6, #1
 802294c:	d427      	bmi.n	802299e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802294e:	45b6      	cmp	lr, r6
 8022950:	dd25      	ble.n	802299e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8022952:	b327      	cbz	r7, 802299e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8022954:	44c6      	add	lr, r8
 8022956:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802295a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802295e:	4413      	add	r3, r2
 8022960:	782a      	ldrb	r2, [r5, #0]
 8022962:	2f0f      	cmp	r7, #15
 8022964:	9202      	str	r2, [sp, #8]
 8022966:	780a      	ldrb	r2, [r1, #0]
 8022968:	9203      	str	r2, [sp, #12]
 802296a:	7822      	ldrb	r2, [r4, #0]
 802296c:	9204      	str	r2, [sp, #16]
 802296e:	781a      	ldrb	r2, [r3, #0]
 8022970:	9205      	str	r2, [sp, #20]
 8022972:	d801      	bhi.n	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8022974:	280f      	cmp	r0, #15
 8022976:	d914      	bls.n	80229a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8022978:	4b3f      	ldr	r3, [pc, #252]	; (8022a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 802297a:	f240 210d 	movw	r1, #525	; 0x20d
 802297e:	4a3f      	ldr	r2, [pc, #252]	; (8022a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8022980:	483f      	ldr	r0, [pc, #252]	; (8022a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8022982:	f007 ff07 	bl	802a794 <__assert_func>
 8022986:	ad07      	add	r5, sp, #28
 8022988:	e7c6      	b.n	8022918 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 802298a:	a907      	add	r1, sp, #28
 802298c:	460d      	mov	r5, r1
 802298e:	e7ce      	b.n	802292e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8022990:	a907      	add	r1, sp, #28
 8022992:	e7cc      	b.n	802292e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8022994:	ac07      	add	r4, sp, #28
 8022996:	e7d8      	b.n	802294a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8022998:	ab07      	add	r3, sp, #28
 802299a:	461c      	mov	r4, r3
 802299c:	e7e0      	b.n	8022960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802299e:	ab07      	add	r3, sp, #28
 80229a0:	e7de      	b.n	8022960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80229a2:	b2ba      	uxth	r2, r7
 80229a4:	f891 8002 	ldrb.w	r8, [r1, #2]
 80229a8:	b280      	uxth	r0, r0
 80229aa:	7849      	ldrb	r1, [r1, #1]
 80229ac:	78ae      	ldrb	r6, [r5, #2]
 80229ae:	fa1f f78c 	uxth.w	r7, ip
 80229b2:	fb02 fa00 	mul.w	sl, r2, r0
 80229b6:	0112      	lsls	r2, r2, #4
 80229b8:	786d      	ldrb	r5, [r5, #1]
 80229ba:	ea6f 0c0c 	mvn.w	ip, ip
 80229be:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80229c2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80229c6:	eba2 020a 	sub.w	r2, r2, sl
 80229ca:	fa5f fc8c 	uxtb.w	ip, ip
 80229ce:	b280      	uxth	r0, r0
 80229d0:	fb19 f90c 	smulbb	r9, r9, ip
 80229d4:	b292      	uxth	r2, r2
 80229d6:	ebae 0e00 	sub.w	lr, lr, r0
 80229da:	4351      	muls	r1, r2
 80229dc:	fa1f fe8e 	uxth.w	lr, lr
 80229e0:	fb02 f808 	mul.w	r8, r2, r8
 80229e4:	fb0e 1505 	mla	r5, lr, r5, r1
 80229e8:	7861      	ldrb	r1, [r4, #1]
 80229ea:	fb0e 8806 	mla	r8, lr, r6, r8
 80229ee:	78a6      	ldrb	r6, [r4, #2]
 80229f0:	fb00 5501 	mla	r5, r0, r1, r5
 80229f4:	7859      	ldrb	r1, [r3, #1]
 80229f6:	fb00 8806 	mla	r8, r0, r6, r8
 80229fa:	789e      	ldrb	r6, [r3, #2]
 80229fc:	9b00      	ldr	r3, [sp, #0]
 80229fe:	fb0a 5101 	mla	r1, sl, r1, r5
 8022a02:	fb0a 8606 	mla	r6, sl, r6, r8
 8022a06:	fb13 f50c 	smulbb	r5, r3, ip
 8022a0a:	9b03      	ldr	r3, [sp, #12]
 8022a0c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022a10:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022a14:	435a      	muls	r2, r3
 8022a16:	9b02      	ldr	r3, [sp, #8]
 8022a18:	fb06 9607 	mla	r6, r6, r7, r9
 8022a1c:	fb0e 2203 	mla	r2, lr, r3, r2
 8022a20:	9b04      	ldr	r3, [sp, #16]
 8022a22:	fb01 5107 	mla	r1, r1, r7, r5
 8022a26:	b2b6      	uxth	r6, r6
 8022a28:	fb00 2003 	mla	r0, r0, r3, r2
 8022a2c:	9b05      	ldr	r3, [sp, #20]
 8022a2e:	b289      	uxth	r1, r1
 8022a30:	f106 0901 	add.w	r9, r6, #1
 8022a34:	fb0a 0a03 	mla	sl, sl, r3, r0
 8022a38:	9b01      	ldr	r3, [sp, #4]
 8022a3a:	1c4d      	adds	r5, r1, #1
 8022a3c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8022a40:	fb13 fc0c 	smulbb	ip, r3, ip
 8022a44:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022a48:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8022a4c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022a50:	fb0a c707 	mla	r7, sl, r7, ip
 8022a54:	0949      	lsrs	r1, r1, #5
 8022a56:	b2bf      	uxth	r7, r7
 8022a58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022a5c:	f107 0c01 	add.w	ip, r7, #1
 8022a60:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022a64:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022a68:	433e      	orrs	r6, r7
 8022a6a:	430e      	orrs	r6, r1
 8022a6c:	f8ab 6000 	strh.w	r6, [fp]
 8022a70:	b009      	add	sp, #36	; 0x24
 8022a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a76:	bf00      	nop
 8022a78:	080305ce 	.word	0x080305ce
 8022a7c:	08030b8d 	.word	0x08030b8d
 8022a80:	080306b7 	.word	0x080306b7

08022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a88:	ed2d 8b08 	vpush	{d8-d11}
 8022a8c:	b095      	sub	sp, #84	; 0x54
 8022a8e:	eeb0 aa40 	vmov.f32	s20, s0
 8022a92:	eef0 9a60 	vmov.f32	s19, s1
 8022a96:	9212      	str	r2, [sp, #72]	; 0x48
 8022a98:	eeb0 9a41 	vmov.f32	s18, s2
 8022a9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a9e:	eeb0 8a62 	vmov.f32	s16, s5
 8022aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8022aa4:	eef0 8a43 	vmov.f32	s17, s6
 8022aa8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022aac:	eef0 ba44 	vmov.f32	s23, s8
 8022ab0:	9013      	str	r0, [sp, #76]	; 0x4c
 8022ab2:	eeb0 ba64 	vmov.f32	s22, s9
 8022ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ab8:	eef0 aa45 	vmov.f32	s21, s10
 8022abc:	6850      	ldr	r0, [r2, #4]
 8022abe:	910e      	str	r1, [sp, #56]	; 0x38
 8022ac0:	6812      	ldr	r2, [r2, #0]
 8022ac2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022ac6:	fb00 1303 	mla	r3, r0, r3, r1
 8022aca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022ace:	930a      	str	r3, [sp, #40]	; 0x28
 8022ad0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022ad2:	681b      	ldr	r3, [r3, #0]
 8022ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8022ad6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022ad8:	685c      	ldr	r4, [r3, #4]
 8022ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022adc:	3404      	adds	r4, #4
 8022ade:	43db      	mvns	r3, r3
 8022ae0:	b2db      	uxtb	r3, r3
 8022ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	dc03      	bgt.n	8022af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022aea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	f340 8258 	ble.w	8022fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022af2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022af4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022af8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022afc:	1e48      	subs	r0, r1, #1
 8022afe:	1e55      	subs	r5, r2, #1
 8022b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	f340 80fc 	ble.w	8022d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022b08:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8022b0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022b0c:	1436      	asrs	r6, r6, #16
 8022b0e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022b12:	d406      	bmi.n	8022b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022b14:	4286      	cmp	r6, r0
 8022b16:	da04      	bge.n	8022b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	db02      	blt.n	8022b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022b1c:	42ab      	cmp	r3, r5
 8022b1e:	f2c0 80f0 	blt.w	8022d02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022b22:	3601      	adds	r6, #1
 8022b24:	f100 80dd 	bmi.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022b28:	42b1      	cmp	r1, r6
 8022b2a:	f2c0 80da 	blt.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022b2e:	3301      	adds	r3, #1
 8022b30:	f100 80d7 	bmi.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022b34:	429a      	cmp	r2, r3
 8022b36:	f2c0 80d4 	blt.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b3c:	9311      	str	r3, [sp, #68]	; 0x44
 8022b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b40:	930c      	str	r3, [sp, #48]	; 0x30
 8022b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	f340 80fd 	ble.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8022b4a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8022b4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022b4e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022b50:	68c6      	ldr	r6, [r0, #12]
 8022b52:	141d      	asrs	r5, r3, #16
 8022b54:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022b56:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022b5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022b5c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022b5e:	1400      	asrs	r0, r0, #16
 8022b60:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022b64:	6892      	ldr	r2, [r2, #8]
 8022b66:	f100 8141 	bmi.w	8022dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022b6a:	1e57      	subs	r7, r2, #1
 8022b6c:	42b8      	cmp	r0, r7
 8022b6e:	f280 813d 	bge.w	8022dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022b72:	2d00      	cmp	r5, #0
 8022b74:	f2c0 813a 	blt.w	8022dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022b78:	1e77      	subs	r7, r6, #1
 8022b7a:	42bd      	cmp	r5, r7
 8022b7c:	f280 8136 	bge.w	8022dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022b80:	b212      	sxth	r2, r2
 8022b82:	fb05 0002 	mla	r0, r5, r2, r0
 8022b86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022b88:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022b8c:	182e      	adds	r6, r5, r0
 8022b8e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022b92:	eb04 050a 	add.w	r5, r4, sl
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	f000 811a 	beq.w	8022dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022b9c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8022ba0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022ba4:	44a4      	add	ip, r4
 8022ba6:	2900      	cmp	r1, #0
 8022ba8:	f000 811a 	beq.w	8022de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022bac:	18b0      	adds	r0, r6, r2
 8022bae:	5cb2      	ldrb	r2, [r6, r2]
 8022bb0:	7840      	ldrb	r0, [r0, #1]
 8022bb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022bba:	4422      	add	r2, r4
 8022bbc:	4420      	add	r0, r4
 8022bbe:	b29b      	uxth	r3, r3
 8022bc0:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022bc4:	b289      	uxth	r1, r1
 8022bc6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022bca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022bcc:	fb03 f901 	mul.w	r9, r3, r1
 8022bd0:	011b      	lsls	r3, r3, #4
 8022bd2:	f8b6 e000 	ldrh.w	lr, [r6]
 8022bd6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022bda:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022bde:	eba3 0309 	sub.w	r3, r3, r9
 8022be2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022be6:	b289      	uxth	r1, r1
 8022be8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022bec:	b29b      	uxth	r3, r3
 8022bee:	eba8 0801 	sub.w	r8, r8, r1
 8022bf2:	435f      	muls	r7, r3
 8022bf4:	fa1f f888 	uxth.w	r8, r8
 8022bf8:	9310      	str	r3, [sp, #64]	; 0x40
 8022bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bfc:	fb08 770b 	mla	r7, r8, fp, r7
 8022c00:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022c04:	fb01 770b 	mla	r7, r1, fp, r7
 8022c08:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022c0c:	fb09 770b 	mla	r7, r9, fp, r7
 8022c10:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022c14:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022c18:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022c1c:	fb1b fb03 	smulbb	fp, fp, r3
 8022c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c22:	fb07 b706 	mla	r7, r7, r6, fp
 8022c26:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022c2a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022c2e:	f89c c000 	ldrb.w	ip, [ip]
 8022c32:	b2bf      	uxth	r7, r7
 8022c34:	435d      	muls	r5, r3
 8022c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c38:	fb08 550b 	mla	r5, r8, fp, r5
 8022c3c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022c40:	fb01 550b 	mla	r5, r1, fp, r5
 8022c44:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022c48:	fb09 550b 	mla	r5, r9, fp, r5
 8022c4c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8022c50:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022c54:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022c58:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022c5c:	fa5f fe8e 	uxtb.w	lr, lr
 8022c60:	fb1b fb03 	smulbb	fp, fp, r3
 8022c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c66:	fb03 f30c 	mul.w	r3, r3, ip
 8022c6a:	f892 c000 	ldrb.w	ip, [r2]
 8022c6e:	fb05 b506 	mla	r5, r5, r6, fp
 8022c72:	1c7a      	adds	r2, r7, #1
 8022c74:	fb08 330a 	mla	r3, r8, sl, r3
 8022c78:	b2ad      	uxth	r5, r5
 8022c7a:	fb01 330c 	mla	r3, r1, ip, r3
 8022c7e:	f890 c000 	ldrb.w	ip, [r0]
 8022c82:	f105 0b01 	add.w	fp, r5, #1
 8022c86:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022c8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c90:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022c94:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022c98:	fb1e fe03 	smulbb	lr, lr, r3
 8022c9c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022ca0:	096d      	lsrs	r5, r5, #5
 8022ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ca4:	fb0c ee06 	mla	lr, ip, r6, lr
 8022ca8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022cac:	fa1f fe8e 	uxth.w	lr, lr
 8022cb0:	f10e 0c01 	add.w	ip, lr, #1
 8022cb4:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8022cb8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022cbc:	ea47 070e 	orr.w	r7, r7, lr
 8022cc0:	433d      	orrs	r5, r7
 8022cc2:	801d      	strh	r5, [r3, #0]
 8022cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cc6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022cc8:	3302      	adds	r3, #2
 8022cca:	930c      	str	r3, [sp, #48]	; 0x30
 8022ccc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022cce:	4413      	add	r3, r2
 8022cd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022cd2:	9327      	str	r3, [sp, #156]	; 0x9c
 8022cd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022cd6:	4413      	add	r3, r2
 8022cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8022cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022cdc:	3b01      	subs	r3, #1
 8022cde:	9311      	str	r3, [sp, #68]	; 0x44
 8022ce0:	e72f      	b.n	8022b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022ce2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022ce4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8022ce6:	4433      	add	r3, r6
 8022ce8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8022cea:	9327      	str	r3, [sp, #156]	; 0x9c
 8022cec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022cee:	4433      	add	r3, r6
 8022cf0:	9328      	str	r3, [sp, #160]	; 0xa0
 8022cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cf4:	3b01      	subs	r3, #1
 8022cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8022cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cfa:	3302      	adds	r3, #2
 8022cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8022cfe:	e6ff      	b.n	8022b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022d00:	d027      	beq.n	8022d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8022d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d04:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022d06:	3b01      	subs	r3, #1
 8022d08:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8022d0a:	fb00 5003 	mla	r0, r0, r3, r5
 8022d0e:	1400      	asrs	r0, r0, #16
 8022d10:	f53f af13 	bmi.w	8022b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022d14:	3901      	subs	r1, #1
 8022d16:	4288      	cmp	r0, r1
 8022d18:	f6bf af0f 	bge.w	8022b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022d1c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022d1e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022d20:	fb01 0303 	mla	r3, r1, r3, r0
 8022d24:	141b      	asrs	r3, r3, #16
 8022d26:	f53f af08 	bmi.w	8022b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022d2a:	3a01      	subs	r2, #1
 8022d2c:	4293      	cmp	r3, r2
 8022d2e:	f6bf af04 	bge.w	8022b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d34:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8022d38:	9311      	str	r3, [sp, #68]	; 0x44
 8022d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8022d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	dc70      	bgt.n	8022e26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022d50:	930a      	str	r3, [sp, #40]	; 0x28
 8022d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	f340 8124 	ble.w	8022fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022d60:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022d64:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022d68:	eef0 6a48 	vmov.f32	s13, s16
 8022d6c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022d70:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022d74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d78:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8022d7c:	eef0 6a68 	vmov.f32	s13, s17
 8022d80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d84:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8022d88:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022d8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022d90:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d94:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d98:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d9c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022da0:	ee18 2a10 	vmov	r2, s16
 8022da4:	eeb0 8a47 	vmov.f32	s16, s14
 8022da8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dac:	ee18 2a90 	vmov	r2, s17
 8022db0:	9329      	str	r3, [sp, #164]	; 0xa4
 8022db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022db4:	eef0 8a67 	vmov.f32	s17, s15
 8022db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dbc:	932a      	str	r3, [sp, #168]	; 0xa8
 8022dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022dc2:	3b01      	subs	r3, #1
 8022dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8022dc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022dc8:	bf08      	it	eq
 8022dca:	4613      	moveq	r3, r2
 8022dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8022dce:	e689      	b.n	8022ae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022dd0:	b149      	cbz	r1, 8022de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022dd2:	5cb2      	ldrb	r2, [r6, r2]
 8022dd4:	4628      	mov	r0, r5
 8022dd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022dda:	4422      	add	r2, r4
 8022ddc:	46ac      	mov	ip, r5
 8022dde:	e6ee      	b.n	8022bbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022de0:	4628      	mov	r0, r5
 8022de2:	462a      	mov	r2, r5
 8022de4:	e6eb      	b.n	8022bbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022de6:	4628      	mov	r0, r5
 8022de8:	462a      	mov	r2, r5
 8022dea:	e7f7      	b.n	8022ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022dec:	1c47      	adds	r7, r0, #1
 8022dee:	f53f af69 	bmi.w	8022cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022df2:	42ba      	cmp	r2, r7
 8022df4:	f6ff af66 	blt.w	8022cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022df8:	1c6f      	adds	r7, r5, #1
 8022dfa:	f53f af63 	bmi.w	8022cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022dfe:	42be      	cmp	r6, r7
 8022e00:	f6ff af60 	blt.w	8022cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022e04:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e06:	b236      	sxth	r6, r6
 8022e08:	b212      	sxth	r2, r2
 8022e0a:	9002      	str	r0, [sp, #8]
 8022e0c:	9601      	str	r6, [sp, #4]
 8022e0e:	9200      	str	r2, [sp, #0]
 8022e10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022e12:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8022e16:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8022e1a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8022e1e:	4623      	mov	r3, r4
 8022e20:	f7ff fd44 	bl	80228ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022e24:	e74e      	b.n	8022cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022e26:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022e28:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022e2a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022e2e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8022e30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022e32:	1400      	asrs	r0, r0, #16
 8022e34:	142d      	asrs	r5, r5, #16
 8022e36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022e38:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022e3c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022e40:	fb02 5000 	mla	r0, r2, r0, r5
 8022e44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022e46:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022e4a:	182e      	adds	r6, r5, r0
 8022e4c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022e50:	eb04 0509 	add.w	r5, r4, r9
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	f000 8096 	beq.w	8022f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8022e5a:	7877      	ldrb	r7, [r6, #1]
 8022e5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022e60:	4427      	add	r7, r4
 8022e62:	2900      	cmp	r1, #0
 8022e64:	f000 8097 	beq.w	8022f96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022e68:	18b0      	adds	r0, r6, r2
 8022e6a:	5cb2      	ldrb	r2, [r6, r2]
 8022e6c:	7840      	ldrb	r0, [r0, #1]
 8022e6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e76:	4422      	add	r2, r4
 8022e78:	4420      	add	r0, r4
 8022e7a:	b29b      	uxth	r3, r3
 8022e7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022e7e:	b289      	uxth	r1, r1
 8022e80:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022e84:	f8b6 c000 	ldrh.w	ip, [r6]
 8022e88:	fb03 f801 	mul.w	r8, r3, r1
 8022e8c:	011b      	lsls	r3, r3, #4
 8022e8e:	78be      	ldrb	r6, [r7, #2]
 8022e90:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022e94:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022e98:	eba3 0308 	sub.w	r3, r3, r8
 8022e9c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8022ea0:	b289      	uxth	r1, r1
 8022ea2:	b29b      	uxth	r3, r3
 8022ea4:	ebae 0e01 	sub.w	lr, lr, r1
 8022ea8:	435e      	muls	r6, r3
 8022eaa:	fa1f fe8e 	uxth.w	lr, lr
 8022eae:	9310      	str	r3, [sp, #64]	; 0x40
 8022eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022eb2:	fb0e 660b 	mla	r6, lr, fp, r6
 8022eb6:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022eba:	fb01 660b 	mla	r6, r1, fp, r6
 8022ebe:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022ec2:	fb08 660b 	mla	r6, r8, fp, r6
 8022ec6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8022eca:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022ece:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022ed2:	fb1b fb03 	smulbb	fp, fp, r3
 8022ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ed8:	fb06 b60a 	mla	r6, r6, sl, fp
 8022edc:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022ee0:	787d      	ldrb	r5, [r7, #1]
 8022ee2:	783f      	ldrb	r7, [r7, #0]
 8022ee4:	b2b6      	uxth	r6, r6
 8022ee6:	435d      	muls	r5, r3
 8022ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022eea:	fb0e 550b 	mla	r5, lr, fp, r5
 8022eee:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022ef2:	fb01 550b 	mla	r5, r1, fp, r5
 8022ef6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022efa:	fb08 550b 	mla	r5, r8, fp, r5
 8022efe:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022f02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022f06:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022f0a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022f0e:	fa5f fc8c 	uxtb.w	ip, ip
 8022f12:	fb1b fb03 	smulbb	fp, fp, r3
 8022f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f18:	437b      	muls	r3, r7
 8022f1a:	7817      	ldrb	r7, [r2, #0]
 8022f1c:	fb05 b50a 	mla	r5, r5, sl, fp
 8022f20:	fb0e 3309 	mla	r3, lr, r9, r3
 8022f24:	b2ad      	uxth	r5, r5
 8022f26:	fb01 3307 	mla	r3, r1, r7, r3
 8022f2a:	7807      	ldrb	r7, [r0, #0]
 8022f2c:	f105 0b01 	add.w	fp, r5, #1
 8022f30:	fb08 3707 	mla	r7, r8, r7, r3
 8022f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f36:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022f3a:	fb1c fc03 	smulbb	ip, ip, r3
 8022f3e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022f42:	1c73      	adds	r3, r6, #1
 8022f44:	096d      	lsrs	r5, r5, #5
 8022f46:	fb07 c70a 	mla	r7, r7, sl, ip
 8022f4a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022f4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f52:	b2bf      	uxth	r7, r7
 8022f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f56:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022f5a:	1c7a      	adds	r2, r7, #1
 8022f5c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022f60:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022f64:	4316      	orrs	r6, r2
 8022f66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022f68:	432e      	orrs	r6, r5
 8022f6a:	f823 6b02 	strh.w	r6, [r3], #2
 8022f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8022f70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022f72:	4413      	add	r3, r2
 8022f74:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022f76:	9327      	str	r3, [sp, #156]	; 0x9c
 8022f78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f7a:	4413      	add	r3, r2
 8022f7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8022f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f80:	3b01      	subs	r3, #1
 8022f82:	9311      	str	r3, [sp, #68]	; 0x44
 8022f84:	e6db      	b.n	8022d3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022f86:	b149      	cbz	r1, 8022f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8022f88:	5cb2      	ldrb	r2, [r6, r2]
 8022f8a:	4628      	mov	r0, r5
 8022f8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022f90:	4422      	add	r2, r4
 8022f92:	462f      	mov	r7, r5
 8022f94:	e771      	b.n	8022e7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022f96:	4628      	mov	r0, r5
 8022f98:	462a      	mov	r2, r5
 8022f9a:	e76e      	b.n	8022e7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022f9c:	4628      	mov	r0, r5
 8022f9e:	462a      	mov	r2, r5
 8022fa0:	e7f7      	b.n	8022f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8022fa2:	b015      	add	sp, #84	; 0x54
 8022fa4:	ecbd 8b08 	vpop	{d8-d11}
 8022fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fb0:	880e      	ldrh	r6, [r1, #0]
 8022fb2:	b085      	sub	sp, #20
 8022fb4:	4691      	mov	r9, r2
 8022fb6:	0230      	lsls	r0, r6, #8
 8022fb8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022fbc:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022fc0:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8022fc4:	0170      	lsls	r0, r6, #5
 8022fc6:	00f6      	lsls	r6, r6, #3
 8022fc8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8022fcc:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8022fd0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8022fd4:	b2f6      	uxtb	r6, r6
 8022fd6:	ea4b 0000 	orr.w	r0, fp, r0
 8022fda:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022fde:	4306      	orrs	r6, r0
 8022fe0:	fb05 7a0c 	mla	sl, r5, ip, r7
 8022fe4:	2d00      	cmp	r5, #0
 8022fe6:	9603      	str	r6, [sp, #12]
 8022fe8:	eb09 0e0a 	add.w	lr, r9, sl
 8022fec:	db42      	blt.n	8023074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8022fee:	45a8      	cmp	r8, r5
 8022ff0:	dd40      	ble.n	8023074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8022ff2:	2f00      	cmp	r7, #0
 8022ff4:	db3c      	blt.n	8023070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8022ff6:	45bc      	cmp	ip, r7
 8022ff8:	dd3a      	ble.n	8023070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8022ffa:	f819 600a 	ldrb.w	r6, [r9, sl]
 8022ffe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023002:	441e      	add	r6, r3
 8023004:	1c78      	adds	r0, r7, #1
 8023006:	d438      	bmi.n	802307a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8023008:	4584      	cmp	ip, r0
 802300a:	dd36      	ble.n	802307a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802300c:	b3aa      	cbz	r2, 802307a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802300e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023012:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023016:	4418      	add	r0, r3
 8023018:	3501      	adds	r5, #1
 802301a:	d432      	bmi.n	8023082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802301c:	45a8      	cmp	r8, r5
 802301e:	dd30      	ble.n	8023082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023020:	b37c      	cbz	r4, 8023082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023022:	2f00      	cmp	r7, #0
 8023024:	db2b      	blt.n	802307e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8023026:	45bc      	cmp	ip, r7
 8023028:	dd29      	ble.n	802307e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 802302a:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802302e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023032:	441d      	add	r5, r3
 8023034:	3701      	adds	r7, #1
 8023036:	d427      	bmi.n	8023088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8023038:	45bc      	cmp	ip, r7
 802303a:	dd25      	ble.n	8023088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802303c:	b322      	cbz	r2, 8023088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802303e:	44f4      	add	ip, lr
 8023040:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023044:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023048:	443b      	add	r3, r7
 802304a:	781f      	ldrb	r7, [r3, #0]
 802304c:	2a0f      	cmp	r2, #15
 802304e:	f896 a000 	ldrb.w	sl, [r6]
 8023052:	f890 b000 	ldrb.w	fp, [r0]
 8023056:	f895 9000 	ldrb.w	r9, [r5]
 802305a:	9700      	str	r7, [sp, #0]
 802305c:	d801      	bhi.n	8023062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 802305e:	2c0f      	cmp	r4, #15
 8023060:	d914      	bls.n	802308c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8023062:	4b2c      	ldr	r3, [pc, #176]	; (8023114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8023064:	f240 210d 	movw	r1, #525	; 0x20d
 8023068:	4a2b      	ldr	r2, [pc, #172]	; (8023118 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 802306a:	482c      	ldr	r0, [pc, #176]	; (802311c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 802306c:	f007 fb92 	bl	802a794 <__assert_func>
 8023070:	ae03      	add	r6, sp, #12
 8023072:	e7c7      	b.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8023074:	a803      	add	r0, sp, #12
 8023076:	4606      	mov	r6, r0
 8023078:	e7ce      	b.n	8023018 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802307a:	a803      	add	r0, sp, #12
 802307c:	e7cc      	b.n	8023018 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802307e:	ad03      	add	r5, sp, #12
 8023080:	e7d8      	b.n	8023034 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8023082:	ab03      	add	r3, sp, #12
 8023084:	461d      	mov	r5, r3
 8023086:	e7e0      	b.n	802304a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8023088:	ab03      	add	r3, sp, #12
 802308a:	e7de      	b.n	802304a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 802308c:	b292      	uxth	r2, r2
 802308e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023092:	b2a4      	uxth	r4, r4
 8023094:	78b7      	ldrb	r7, [r6, #2]
 8023096:	7840      	ldrb	r0, [r0, #1]
 8023098:	fb02 f804 	mul.w	r8, r2, r4
 802309c:	0112      	lsls	r2, r2, #4
 802309e:	7876      	ldrb	r6, [r6, #1]
 80230a0:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80230a4:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80230a8:	eba2 0208 	sub.w	r2, r2, r8
 80230ac:	b2a4      	uxth	r4, r4
 80230ae:	b292      	uxth	r2, r2
 80230b0:	ebac 0c04 	sub.w	ip, ip, r4
 80230b4:	fb02 fe0e 	mul.w	lr, r2, lr
 80230b8:	fa1f fc8c 	uxth.w	ip, ip
 80230bc:	fb0c ee07 	mla	lr, ip, r7, lr
 80230c0:	78af      	ldrb	r7, [r5, #2]
 80230c2:	fb04 ee07 	mla	lr, r4, r7, lr
 80230c6:	789f      	ldrb	r7, [r3, #2]
 80230c8:	785b      	ldrb	r3, [r3, #1]
 80230ca:	fb08 e707 	mla	r7, r8, r7, lr
 80230ce:	fb02 fe0b 	mul.w	lr, r2, fp
 80230d2:	4342      	muls	r2, r0
 80230d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80230d8:	7868      	ldrb	r0, [r5, #1]
 80230da:	fb0c ee0a 	mla	lr, ip, sl, lr
 80230de:	fb0c 2206 	mla	r2, ip, r6, r2
 80230e2:	9701      	str	r7, [sp, #4]
 80230e4:	fb04 ee09 	mla	lr, r4, r9, lr
 80230e8:	9f00      	ldr	r7, [sp, #0]
 80230ea:	fb04 2400 	mla	r4, r4, r0, r2
 80230ee:	fb08 ee07 	mla	lr, r8, r7, lr
 80230f2:	9f01      	ldr	r7, [sp, #4]
 80230f4:	fb08 4803 	mla	r8, r8, r3, r4
 80230f8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80230fc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023100:	ea47 070e 	orr.w	r7, r7, lr
 8023104:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023108:	ea47 0708 	orr.w	r7, r7, r8
 802310c:	800f      	strh	r7, [r1, #0]
 802310e:	b005      	add	sp, #20
 8023110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023114:	080305ce 	.word	0x080305ce
 8023118:	08030b8d 	.word	0x08030b8d
 802311c:	080306b7 	.word	0x080306b7

08023120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023124:	ed2d 8b08 	vpush	{d8-d11}
 8023128:	b08f      	sub	sp, #60	; 0x3c
 802312a:	eeb0 aa40 	vmov.f32	s20, s0
 802312e:	eef0 9a60 	vmov.f32	s19, s1
 8023132:	920c      	str	r2, [sp, #48]	; 0x30
 8023134:	eeb0 9a41 	vmov.f32	s18, s2
 8023138:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802313a:	eeb0 8a62 	vmov.f32	s16, s5
 802313e:	900d      	str	r0, [sp, #52]	; 0x34
 8023140:	eef0 8a43 	vmov.f32	s17, s6
 8023144:	6850      	ldr	r0, [r2, #4]
 8023146:	eef0 ba44 	vmov.f32	s23, s8
 802314a:	910a      	str	r1, [sp, #40]	; 0x28
 802314c:	eeb0 ba64 	vmov.f32	s22, s9
 8023150:	9306      	str	r3, [sp, #24]
 8023152:	eef0 aa45 	vmov.f32	s21, s10
 8023156:	6812      	ldr	r2, [r2, #0]
 8023158:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802315c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8023160:	fb00 1303 	mla	r3, r0, r3, r1
 8023164:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023168:	9307      	str	r3, [sp, #28]
 802316a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802316c:	681b      	ldr	r3, [r3, #0]
 802316e:	9308      	str	r3, [sp, #32]
 8023170:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023172:	685c      	ldr	r4, [r3, #4]
 8023174:	3404      	adds	r4, #4
 8023176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023178:	2b00      	cmp	r3, #0
 802317a:	dc03      	bgt.n	8023184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802317c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802317e:	2b00      	cmp	r3, #0
 8023180:	f340 81d5 	ble.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8023184:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023186:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802318a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802318e:	1e48      	subs	r0, r1, #1
 8023190:	1e56      	subs	r6, r2, #1
 8023192:	9b06      	ldr	r3, [sp, #24]
 8023194:	2b00      	cmp	r3, #0
 8023196:	f340 80b6 	ble.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802319a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802319e:	ea4f 4325 	mov.w	r3, r5, asr #16
 80231a2:	d406      	bmi.n	80231b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80231a4:	4287      	cmp	r7, r0
 80231a6:	da04      	bge.n	80231b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	db02      	blt.n	80231b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80231ac:	42b3      	cmp	r3, r6
 80231ae:	f2c0 80ab 	blt.w	8023308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80231b2:	3701      	adds	r7, #1
 80231b4:	f100 809c 	bmi.w	80232f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80231b8:	42b9      	cmp	r1, r7
 80231ba:	f2c0 8099 	blt.w	80232f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80231be:	3301      	adds	r3, #1
 80231c0:	f100 8096 	bmi.w	80232f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80231c4:	429a      	cmp	r2, r3
 80231c6:	f2c0 8093 	blt.w	80232f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80231ca:	9b06      	ldr	r3, [sp, #24]
 80231cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80231ce:	9b07      	ldr	r3, [sp, #28]
 80231d0:	9309      	str	r3, [sp, #36]	; 0x24
 80231d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	f340 80b4 	ble.w	8023342 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80231da:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80231dc:	142e      	asrs	r6, r5, #16
 80231de:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80231e0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80231e4:	68c7      	ldr	r7, [r0, #12]
 80231e6:	ea5f 402b 	movs.w	r0, fp, asr #16
 80231ea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80231ee:	6892      	ldr	r2, [r2, #8]
 80231f0:	f100 80fb 	bmi.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80231f4:	f102 3cff 	add.w	ip, r2, #4294967295
 80231f8:	4560      	cmp	r0, ip
 80231fa:	f280 80f6 	bge.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80231fe:	2e00      	cmp	r6, #0
 8023200:	f2c0 80f3 	blt.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023204:	f107 3cff 	add.w	ip, r7, #4294967295
 8023208:	4566      	cmp	r6, ip
 802320a:	f280 80ee 	bge.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802320e:	b212      	sxth	r2, r2
 8023210:	fb06 0002 	mla	r0, r6, r2, r0
 8023214:	9e08      	ldr	r6, [sp, #32]
 8023216:	1837      	adds	r7, r6, r0
 8023218:	5c30      	ldrb	r0, [r6, r0]
 802321a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802321e:	eb04 0c08 	add.w	ip, r4, r8
 8023222:	2b00      	cmp	r3, #0
 8023224:	f000 80d3 	beq.w	80233ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023228:	787e      	ldrb	r6, [r7, #1]
 802322a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802322e:	4426      	add	r6, r4
 8023230:	2900      	cmp	r1, #0
 8023232:	f000 80d4 	beq.w	80233de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8023236:	18b8      	adds	r0, r7, r2
 8023238:	5cba      	ldrb	r2, [r7, r2]
 802323a:	7840      	ldrb	r0, [r0, #1]
 802323c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023240:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023244:	4422      	add	r2, r4
 8023246:	4420      	add	r0, r4
 8023248:	b29b      	uxth	r3, r3
 802324a:	78b7      	ldrb	r7, [r6, #2]
 802324c:	b289      	uxth	r1, r1
 802324e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023252:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023256:	fb03 f901 	mul.w	r9, r3, r1
 802325a:	011b      	lsls	r3, r3, #4
 802325c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023260:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023264:	eba3 0309 	sub.w	r3, r3, r9
 8023268:	b289      	uxth	r1, r1
 802326a:	b29b      	uxth	r3, r3
 802326c:	ebae 0e01 	sub.w	lr, lr, r1
 8023270:	435f      	muls	r7, r3
 8023272:	fa1f fe8e 	uxth.w	lr, lr
 8023276:	fb0e 770a 	mla	r7, lr, sl, r7
 802327a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802327e:	fb01 770a 	mla	r7, r1, sl, r7
 8023282:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023286:	fb09 7a0a 	mla	sl, r9, sl, r7
 802328a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802328e:	f896 8000 	ldrb.w	r8, [r6]
 8023292:	7876      	ldrb	r6, [r6, #1]
 8023294:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023298:	fb03 f808 	mul.w	r8, r3, r8
 802329c:	4373      	muls	r3, r6
 802329e:	fb0e 8807 	mla	r8, lr, r7, r8
 80232a2:	7817      	ldrb	r7, [r2, #0]
 80232a4:	fb0e 330c 	mla	r3, lr, ip, r3
 80232a8:	fb01 8807 	mla	r8, r1, r7, r8
 80232ac:	7807      	ldrb	r7, [r0, #0]
 80232ae:	fb09 8707 	mla	r7, r9, r7, r8
 80232b2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80232b6:	ea4a 0707 	orr.w	r7, sl, r7
 80232ba:	f892 a001 	ldrb.w	sl, [r2, #1]
 80232be:	fb01 310a 	mla	r1, r1, sl, r3
 80232c2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80232c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232c8:	fb09 1a0a 	mla	sl, r9, sl, r1
 80232cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80232d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80232d4:	ea47 070a 	orr.w	r7, r7, sl
 80232d8:	801f      	strh	r7, [r3, #0]
 80232da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232dc:	3302      	adds	r3, #2
 80232de:	9309      	str	r3, [sp, #36]	; 0x24
 80232e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80232e2:	449b      	add	fp, r3
 80232e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232e6:	441d      	add	r5, r3
 80232e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80232ea:	3b01      	subs	r3, #1
 80232ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80232ee:	e770      	b.n	80231d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80232f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80232f2:	449b      	add	fp, r3
 80232f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232f6:	441d      	add	r5, r3
 80232f8:	9b06      	ldr	r3, [sp, #24]
 80232fa:	3b01      	subs	r3, #1
 80232fc:	9306      	str	r3, [sp, #24]
 80232fe:	9b07      	ldr	r3, [sp, #28]
 8023300:	3302      	adds	r3, #2
 8023302:	9307      	str	r3, [sp, #28]
 8023304:	e745      	b.n	8023192 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023306:	d023      	beq.n	8023350 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023308:	9b06      	ldr	r3, [sp, #24]
 802330a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802330c:	3b01      	subs	r3, #1
 802330e:	fb00 b003 	mla	r0, r0, r3, fp
 8023312:	1400      	asrs	r0, r0, #16
 8023314:	f53f af59 	bmi.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023318:	3901      	subs	r1, #1
 802331a:	4288      	cmp	r0, r1
 802331c:	f6bf af55 	bge.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023320:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023322:	fb01 5303 	mla	r3, r1, r3, r5
 8023326:	141b      	asrs	r3, r3, #16
 8023328:	f53f af4f 	bmi.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802332c:	3a01      	subs	r2, #1
 802332e:	4293      	cmp	r3, r2
 8023330:	f6bf af4b 	bge.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023334:	9b06      	ldr	r3, [sp, #24]
 8023336:	9309      	str	r3, [sp, #36]	; 0x24
 8023338:	9b07      	ldr	r3, [sp, #28]
 802333a:	930b      	str	r3, [sp, #44]	; 0x2c
 802333c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802333e:	2b00      	cmp	r3, #0
 8023340:	dc70      	bgt.n	8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8023342:	9b06      	ldr	r3, [sp, #24]
 8023344:	9a07      	ldr	r2, [sp, #28]
 8023346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802334a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802334e:	9307      	str	r3, [sp, #28]
 8023350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023352:	2b00      	cmp	r3, #0
 8023354:	f340 80eb 	ble.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8023358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802335c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802335e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023362:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023366:	eef0 6a48 	vmov.f32	s13, s16
 802336a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802336e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023376:	ee16 ba90 	vmov	fp, s13
 802337a:	eef0 6a68 	vmov.f32	s13, s17
 802337e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023382:	ee16 5a90 	vmov	r5, s13
 8023386:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802338a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802338e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023392:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023396:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802339a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802339e:	ee18 2a10 	vmov	r2, s16
 80233a2:	eeb0 8a47 	vmov.f32	s16, s14
 80233a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80233aa:	ee18 2a90 	vmov	r2, s17
 80233ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80233b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233b2:	eef0 8a67 	vmov.f32	s17, s15
 80233b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80233ba:	9324      	str	r3, [sp, #144]	; 0x90
 80233bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80233c0:	3b01      	subs	r3, #1
 80233c2:	930a      	str	r3, [sp, #40]	; 0x28
 80233c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233c6:	bf08      	it	eq
 80233c8:	4613      	moveq	r3, r2
 80233ca:	9306      	str	r3, [sp, #24]
 80233cc:	e6d3      	b.n	8023176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80233ce:	b149      	cbz	r1, 80233e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80233d0:	5cba      	ldrb	r2, [r7, r2]
 80233d2:	4660      	mov	r0, ip
 80233d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80233d8:	4422      	add	r2, r4
 80233da:	4666      	mov	r6, ip
 80233dc:	e734      	b.n	8023248 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80233de:	4660      	mov	r0, ip
 80233e0:	4662      	mov	r2, ip
 80233e2:	e731      	b.n	8023248 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80233e4:	4660      	mov	r0, ip
 80233e6:	4662      	mov	r2, ip
 80233e8:	e7f7      	b.n	80233da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80233ea:	f110 0c01 	adds.w	ip, r0, #1
 80233ee:	f53f af74 	bmi.w	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80233f2:	4562      	cmp	r2, ip
 80233f4:	f6ff af71 	blt.w	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80233f8:	f116 0c01 	adds.w	ip, r6, #1
 80233fc:	f53f af6d 	bmi.w	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023400:	4567      	cmp	r7, ip
 8023402:	f6ff af6a 	blt.w	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023406:	b23f      	sxth	r7, r7
 8023408:	b212      	sxth	r2, r2
 802340a:	9701      	str	r7, [sp, #4]
 802340c:	9200      	str	r2, [sp, #0]
 802340e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023412:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023416:	4623      	mov	r3, r4
 8023418:	980d      	ldr	r0, [sp, #52]	; 0x34
 802341a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802341e:	f7ff fdc5 	bl	8022fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023422:	e75a      	b.n	80232da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023424:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023426:	ea4f 462b 	mov.w	r6, fp, asr #16
 802342a:	1428      	asrs	r0, r5, #16
 802342c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023430:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023434:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023438:	fb02 6000 	mla	r0, r2, r0, r6
 802343c:	9e08      	ldr	r6, [sp, #32]
 802343e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023442:	1837      	adds	r7, r6, r0
 8023444:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023448:	eb04 0c08 	add.w	ip, r4, r8
 802344c:	2b00      	cmp	r3, #0
 802344e:	d060      	beq.n	8023512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023450:	787e      	ldrb	r6, [r7, #1]
 8023452:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023456:	4426      	add	r6, r4
 8023458:	2900      	cmp	r1, #0
 802345a:	d062      	beq.n	8023522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802345c:	18b8      	adds	r0, r7, r2
 802345e:	5cba      	ldrb	r2, [r7, r2]
 8023460:	7840      	ldrb	r0, [r0, #1]
 8023462:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802346a:	4422      	add	r2, r4
 802346c:	4420      	add	r0, r4
 802346e:	b29b      	uxth	r3, r3
 8023470:	78b7      	ldrb	r7, [r6, #2]
 8023472:	b289      	uxth	r1, r1
 8023474:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023478:	f89c c001 	ldrb.w	ip, [ip, #1]
 802347c:	fb03 f901 	mul.w	r9, r3, r1
 8023480:	011b      	lsls	r3, r3, #4
 8023482:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023486:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802348a:	eba3 0309 	sub.w	r3, r3, r9
 802348e:	b289      	uxth	r1, r1
 8023490:	b29b      	uxth	r3, r3
 8023492:	ebae 0e01 	sub.w	lr, lr, r1
 8023496:	435f      	muls	r7, r3
 8023498:	fa1f fe8e 	uxth.w	lr, lr
 802349c:	fb0e 770a 	mla	r7, lr, sl, r7
 80234a0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80234a4:	fb01 770a 	mla	r7, r1, sl, r7
 80234a8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80234ac:	fb09 7a0a 	mla	sl, r9, sl, r7
 80234b0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80234b4:	f896 8000 	ldrb.w	r8, [r6]
 80234b8:	7876      	ldrb	r6, [r6, #1]
 80234ba:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80234be:	fb03 f808 	mul.w	r8, r3, r8
 80234c2:	4373      	muls	r3, r6
 80234c4:	7856      	ldrb	r6, [r2, #1]
 80234c6:	fb0e 8807 	mla	r8, lr, r7, r8
 80234ca:	7817      	ldrb	r7, [r2, #0]
 80234cc:	fb0e 330c 	mla	r3, lr, ip, r3
 80234d0:	fb01 8807 	mla	r8, r1, r7, r8
 80234d4:	7807      	ldrb	r7, [r0, #0]
 80234d6:	fb01 3306 	mla	r3, r1, r6, r3
 80234da:	fb09 8707 	mla	r7, r9, r7, r8
 80234de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80234e2:	ea4a 0707 	orr.w	r7, sl, r7
 80234e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80234ea:	fb09 3a0a 	mla	sl, r9, sl, r3
 80234ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80234f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80234f8:	ea47 070a 	orr.w	r7, r7, sl
 80234fc:	f823 7b02 	strh.w	r7, [r3], #2
 8023500:	930b      	str	r3, [sp, #44]	; 0x2c
 8023502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023504:	449b      	add	fp, r3
 8023506:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023508:	441d      	add	r5, r3
 802350a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802350c:	3b01      	subs	r3, #1
 802350e:	9309      	str	r3, [sp, #36]	; 0x24
 8023510:	e714      	b.n	802333c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8023512:	b149      	cbz	r1, 8023528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8023514:	5cba      	ldrb	r2, [r7, r2]
 8023516:	4660      	mov	r0, ip
 8023518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802351c:	4422      	add	r2, r4
 802351e:	4666      	mov	r6, ip
 8023520:	e7a5      	b.n	802346e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023522:	4660      	mov	r0, ip
 8023524:	4662      	mov	r2, ip
 8023526:	e7a2      	b.n	802346e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023528:	4660      	mov	r0, ip
 802352a:	4662      	mov	r2, ip
 802352c:	e7f7      	b.n	802351e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802352e:	b00f      	add	sp, #60	; 0x3c
 8023530:	ecbd 8b08 	vpop	{d8-d11}
 8023534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802353c:	880e      	ldrh	r6, [r1, #0]
 802353e:	b085      	sub	sp, #20
 8023540:	4691      	mov	r9, r2
 8023542:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8023546:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802354a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802354e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8023552:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8023556:	00f6      	lsls	r6, r6, #3
 8023558:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802355c:	9200      	str	r2, [sp, #0]
 802355e:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8023562:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8023566:	9201      	str	r2, [sp, #4]
 8023568:	b2f2      	uxtb	r2, r6
 802356a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802356e:	9202      	str	r2, [sp, #8]
 8023570:	fb04 560c 	mla	r6, r4, ip, r5
 8023574:	2c00      	cmp	r4, #0
 8023576:	eb09 0e06 	add.w	lr, r9, r6
 802357a:	db3e      	blt.n	80235fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 802357c:	45a0      	cmp	r8, r4
 802357e:	dd3c      	ble.n	80235fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8023580:	2d00      	cmp	r5, #0
 8023582:	db38      	blt.n	80235f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8023584:	45ac      	cmp	ip, r5
 8023586:	dd36      	ble.n	80235f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8023588:	f819 2006 	ldrb.w	r2, [r9, r6]
 802358c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023590:	1c6e      	adds	r6, r5, #1
 8023592:	d435      	bmi.n	8023600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8023594:	45b4      	cmp	ip, r6
 8023596:	dd33      	ble.n	8023600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8023598:	b3a0      	cbz	r0, 8023604 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 802359a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802359e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80235a2:	3401      	adds	r4, #1
 80235a4:	d432      	bmi.n	802360c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80235a6:	45a0      	cmp	r8, r4
 80235a8:	dd30      	ble.n	802360c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80235aa:	b397      	cbz	r7, 8023612 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 80235ac:	2d00      	cmp	r5, #0
 80235ae:	db2b      	blt.n	8023608 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80235b0:	45ac      	cmp	ip, r5
 80235b2:	dd29      	ble.n	8023608 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80235b4:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80235b8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80235bc:	3501      	adds	r5, #1
 80235be:	d42b      	bmi.n	8023618 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 80235c0:	45ac      	cmp	ip, r5
 80235c2:	dd29      	ble.n	8023618 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 80235c4:	b350      	cbz	r0, 802361c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 80235c6:	44f4      	add	ip, lr
 80235c8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80235cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80235d0:	280f      	cmp	r0, #15
 80235d2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80235d6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80235da:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80235de:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80235e2:	d801      	bhi.n	80235e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 80235e4:	2f0f      	cmp	r7, #15
 80235e6:	d91b      	bls.n	8023620 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 80235e8:	4b85      	ldr	r3, [pc, #532]	; (8023800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80235ea:	f240 210d 	movw	r1, #525	; 0x20d
 80235ee:	4a85      	ldr	r2, [pc, #532]	; (8023804 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80235f0:	4885      	ldr	r0, [pc, #532]	; (8023808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 80235f2:	f007 f8cf 	bl	802a794 <__assert_func>
 80235f6:	2200      	movs	r2, #0
 80235f8:	e7ca      	b.n	8023590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 80235fa:	2600      	movs	r6, #0
 80235fc:	4632      	mov	r2, r6
 80235fe:	e7d0      	b.n	80235a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023600:	2600      	movs	r6, #0
 8023602:	e7ce      	b.n	80235a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023604:	4606      	mov	r6, r0
 8023606:	e7cc      	b.n	80235a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023608:	2400      	movs	r4, #0
 802360a:	e7d7      	b.n	80235bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 802360c:	2300      	movs	r3, #0
 802360e:	461c      	mov	r4, r3
 8023610:	e7de      	b.n	80235d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023612:	463b      	mov	r3, r7
 8023614:	463c      	mov	r4, r7
 8023616:	e7db      	b.n	80235d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023618:	2300      	movs	r3, #0
 802361a:	e7d9      	b.n	80235d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 802361c:	4603      	mov	r3, r0
 802361e:	e7d7      	b.n	80235d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023620:	b280      	uxth	r0, r0
 8023622:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023626:	b2bf      	uxth	r7, r7
 8023628:	fb00 fe07 	mul.w	lr, r0, r7
 802362c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023630:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023634:	eba0 0c0e 	sub.w	ip, r0, lr
 8023638:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802363c:	b2bf      	uxth	r7, r7
 802363e:	fa1f fc8c 	uxth.w	ip, ip
 8023642:	eba5 0507 	sub.w	r5, r5, r7
 8023646:	fb0c f00a 	mul.w	r0, ip, sl
 802364a:	b2ad      	uxth	r5, r5
 802364c:	fb05 000b 	mla	r0, r5, fp, r0
 8023650:	fb07 0009 	mla	r0, r7, r9, r0
 8023654:	fb0e 0008 	mla	r0, lr, r8, r0
 8023658:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802365c:	9003      	str	r0, [sp, #12]
 802365e:	d018      	beq.n	8023692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 8023660:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023664:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023668:	fb0b f000 	mul.w	r0, fp, r0
 802366c:	fb0b fb02 	mul.w	fp, fp, r2
 8023670:	0a02      	lsrs	r2, r0, #8
 8023672:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023676:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802367a:	4402      	add	r2, r0
 802367c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023680:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023684:	0a12      	lsrs	r2, r2, #8
 8023686:	0a00      	lsrs	r0, r0, #8
 8023688:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802368c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023690:	4302      	orrs	r2, r0
 8023692:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023696:	d019      	beq.n	80236cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8023698:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802369c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80236a0:	fb0a fb0b 	mul.w	fp, sl, fp
 80236a4:	fb0a fa06 	mul.w	sl, sl, r6
 80236a8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80236ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80236b0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80236b4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80236b8:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80236bc:	445e      	add	r6, fp
 80236be:	0a00      	lsrs	r0, r0, #8
 80236c0:	0a36      	lsrs	r6, r6, #8
 80236c2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80236c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80236ca:	4306      	orrs	r6, r0
 80236cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80236d0:	d019      	beq.n	8023706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 80236d2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80236d6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80236da:	fb09 fa0a 	mul.w	sl, r9, sl
 80236de:	fb09 f904 	mul.w	r9, r9, r4
 80236e2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80236e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80236ea:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80236ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80236f2:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80236f6:	4454      	add	r4, sl
 80236f8:	0a00      	lsrs	r0, r0, #8
 80236fa:	0a24      	lsrs	r4, r4, #8
 80236fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023700:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023704:	4304      	orrs	r4, r0
 8023706:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802370a:	d019      	beq.n	8023740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 802370c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023710:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023714:	fb08 f909 	mul.w	r9, r8, r9
 8023718:	fb08 f803 	mul.w	r8, r8, r3
 802371c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023720:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023724:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8023728:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802372c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023730:	444b      	add	r3, r9
 8023732:	0a00      	lsrs	r0, r0, #8
 8023734:	0a1b      	lsrs	r3, r3, #8
 8023736:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802373a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802373e:	4303      	orrs	r3, r0
 8023740:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023744:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023748:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802374c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023750:	fb0c f808 	mul.w	r8, ip, r8
 8023754:	fb0c f606 	mul.w	r6, ip, r6
 8023758:	fb05 8800 	mla	r8, r5, r0, r8
 802375c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8023760:	fb05 6202 	mla	r2, r5, r2, r6
 8023764:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8023768:	fb07 8800 	mla	r8, r7, r0, r8
 802376c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8023770:	b2ad      	uxth	r5, r5
 8023772:	fb0e 8000 	mla	r0, lr, r0, r8
 8023776:	0a00      	lsrs	r0, r0, #8
 8023778:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802377c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8023780:	9c00      	ldr	r4, [sp, #0]
 8023782:	fb07 2700 	mla	r7, r7, r0, r2
 8023786:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802378a:	9b03      	ldr	r3, [sp, #12]
 802378c:	fb0e 7000 	mla	r0, lr, r0, r7
 8023790:	436b      	muls	r3, r5
 8023792:	0a00      	lsrs	r0, r0, #8
 8023794:	1c5a      	adds	r2, r3, #1
 8023796:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802379a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802379e:	ea48 0000 	orr.w	r0, r8, r0
 80237a2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80237a6:	0c03      	lsrs	r3, r0, #16
 80237a8:	b2d2      	uxtb	r2, r2
 80237aa:	fb14 f602 	smulbb	r6, r4, r2
 80237ae:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80237b2:	b2c0      	uxtb	r0, r0
 80237b4:	fb03 6305 	mla	r3, r3, r5, r6
 80237b8:	b29e      	uxth	r6, r3
 80237ba:	9b01      	ldr	r3, [sp, #4]
 80237bc:	fb13 f302 	smulbb	r3, r3, r2
 80237c0:	fb04 3405 	mla	r4, r4, r5, r3
 80237c4:	9b02      	ldr	r3, [sp, #8]
 80237c6:	fb13 f202 	smulbb	r2, r3, r2
 80237ca:	b2a4      	uxth	r4, r4
 80237cc:	1c73      	adds	r3, r6, #1
 80237ce:	fb00 2005 	mla	r0, r0, r5, r2
 80237d2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80237d6:	b280      	uxth	r0, r0
 80237d8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80237dc:	1c42      	adds	r2, r0, #1
 80237de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80237e2:	1c62      	adds	r2, r4, #1
 80237e4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80237e8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80237ec:	0952      	lsrs	r2, r2, #5
 80237ee:	4303      	orrs	r3, r0
 80237f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80237f4:	4313      	orrs	r3, r2
 80237f6:	800b      	strh	r3, [r1, #0]
 80237f8:	b005      	add	sp, #20
 80237fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237fe:	bf00      	nop
 8023800:	080305ce 	.word	0x080305ce
 8023804:	08030b8d 	.word	0x08030b8d
 8023808:	080306b7 	.word	0x080306b7

0802380c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023810:	ed2d 8b08 	vpush	{d8-d11}
 8023814:	b09f      	sub	sp, #124	; 0x7c
 8023816:	eeb0 aa40 	vmov.f32	s20, s0
 802381a:	eef0 9a60 	vmov.f32	s19, s1
 802381e:	921b      	str	r2, [sp, #108]	; 0x6c
 8023820:	eeb0 9a41 	vmov.f32	s18, s2
 8023824:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8023826:	eeb0 8a62 	vmov.f32	s16, s5
 802382a:	9309      	str	r3, [sp, #36]	; 0x24
 802382c:	eef0 8a43 	vmov.f32	s17, s6
 8023830:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8023834:	eef0 ba44 	vmov.f32	s23, s8
 8023838:	901d      	str	r0, [sp, #116]	; 0x74
 802383a:	eeb0 ba64 	vmov.f32	s22, s9
 802383e:	931c      	str	r3, [sp, #112]	; 0x70
 8023840:	eef0 aa45 	vmov.f32	s21, s10
 8023844:	6850      	ldr	r0, [r2, #4]
 8023846:	9119      	str	r1, [sp, #100]	; 0x64
 8023848:	6812      	ldr	r2, [r2, #0]
 802384a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 802384c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8023850:	fb00 1303 	mla	r3, r0, r3, r1
 8023854:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023858:	930c      	str	r3, [sp, #48]	; 0x30
 802385a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	9312      	str	r3, [sp, #72]	; 0x48
 8023860:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023862:	685e      	ldr	r6, [r3, #4]
 8023864:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023868:	3604      	adds	r6, #4
 802386a:	930d      	str	r3, [sp, #52]	; 0x34
 802386c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802386e:	2b00      	cmp	r3, #0
 8023870:	dc03      	bgt.n	802387a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023874:	2b00      	cmp	r3, #0
 8023876:	f340 838d 	ble.w	8023f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 802387a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802387c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023880:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023884:	1e48      	subs	r0, r1, #1
 8023886:	1e57      	subs	r7, r2, #1
 8023888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802388a:	2b00      	cmp	r3, #0
 802388c:	f340 819a 	ble.w	8023bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023890:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023892:	142b      	asrs	r3, r5, #16
 8023894:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023898:	d406      	bmi.n	80238a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802389a:	4584      	cmp	ip, r0
 802389c:	da04      	bge.n	80238a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802389e:	2b00      	cmp	r3, #0
 80238a0:	db02      	blt.n	80238a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80238a2:	42bb      	cmp	r3, r7
 80238a4:	f2c0 818f 	blt.w	8023bc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80238a8:	f11c 0c01 	adds.w	ip, ip, #1
 80238ac:	f100 817d 	bmi.w	8023baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80238b0:	4561      	cmp	r1, ip
 80238b2:	f2c0 817a 	blt.w	8023baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80238b6:	3301      	adds	r3, #1
 80238b8:	f100 8177 	bmi.w	8023baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80238bc:	429a      	cmp	r2, r3
 80238be:	f2c0 8174 	blt.w	8023baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80238c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80238c6:	931a      	str	r3, [sp, #104]	; 0x68
 80238c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	f340 8199 	ble.w	8023c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80238d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80238d2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80238d6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80238da:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80238de:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80238e0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80238e4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80238e6:	141b      	asrs	r3, r3, #16
 80238e8:	f100 81dc 	bmi.w	8023ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80238ec:	f100 38ff 	add.w	r8, r0, #4294967295
 80238f0:	4543      	cmp	r3, r8
 80238f2:	f280 81d7 	bge.w	8023ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80238f6:	f1bc 0f00 	cmp.w	ip, #0
 80238fa:	f2c0 81d3 	blt.w	8023ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80238fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023902:	45c4      	cmp	ip, r8
 8023904:	f280 81ce 	bge.w	8023ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8023908:	b200      	sxth	r0, r0
 802390a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802390c:	fb0c 3300 	mla	r3, ip, r0, r3
 8023910:	eb04 0803 	add.w	r8, r4, r3
 8023914:	5ce3      	ldrb	r3, [r4, r3]
 8023916:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802391a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802391e:	2a00      	cmp	r2, #0
 8023920:	f000 81b5 	beq.w	8023c8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8023924:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023928:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802392c:	940e      	str	r4, [sp, #56]	; 0x38
 802392e:	0e24      	lsrs	r4, r4, #24
 8023930:	9415      	str	r4, [sp, #84]	; 0x54
 8023932:	b179      	cbz	r1, 8023954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023934:	eb08 0c00 	add.w	ip, r8, r0
 8023938:	f818 0000 	ldrb.w	r0, [r8, r0]
 802393c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023940:	900a      	str	r0, [sp, #40]	; 0x28
 8023942:	0e00      	lsrs	r0, r0, #24
 8023944:	9013      	str	r0, [sp, #76]	; 0x4c
 8023946:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802394a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802394e:	900f      	str	r0, [sp, #60]	; 0x3c
 8023950:	0e00      	lsrs	r0, r0, #24
 8023952:	9016      	str	r0, [sp, #88]	; 0x58
 8023954:	b292      	uxth	r2, r2
 8023956:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023958:	b289      	uxth	r1, r1
 802395a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802395c:	fb02 f901 	mul.w	r9, r2, r1
 8023960:	0112      	lsls	r2, r2, #4
 8023962:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023966:	eba2 0809 	sub.w	r8, r2, r9
 802396a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802396e:	b289      	uxth	r1, r1
 8023970:	fa1f f888 	uxth.w	r8, r8
 8023974:	1a52      	subs	r2, r2, r1
 8023976:	fb08 f000 	mul.w	r0, r8, r0
 802397a:	b292      	uxth	r2, r2
 802397c:	fb02 000e 	mla	r0, r2, lr, r0
 8023980:	fb01 0004 	mla	r0, r1, r4, r0
 8023984:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023986:	fb09 0004 	mla	r0, r9, r4, r0
 802398a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802398e:	2800      	cmp	r0, #0
 8023990:	f000 8100 	beq.w	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023994:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023998:	d01b      	beq.n	80239d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802399a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802399e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80239a2:	fb0e fa0a 	mul.w	sl, lr, sl
 80239a6:	fb0e fe03 	mul.w	lr, lr, r3
 80239aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80239ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80239b2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80239b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80239ba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80239be:	4453      	add	r3, sl
 80239c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239c4:	0a1b      	lsrs	r3, r3, #8
 80239c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80239ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80239ce:	ea43 030c 	orr.w	r3, r3, ip
 80239d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80239d4:	2cff      	cmp	r4, #255	; 0xff
 80239d6:	d021      	beq.n	8023a1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80239d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80239da:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80239de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80239e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80239e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80239e6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80239ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80239ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80239f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80239f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80239f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023a00:	44de      	add	lr, fp
 8023a02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a16:	ea4e 040a 	orr.w	r4, lr, sl
 8023a1a:	940e      	str	r4, [sp, #56]	; 0x38
 8023a1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a1e:	2cff      	cmp	r4, #255	; 0xff
 8023a20:	d021      	beq.n	8023a66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8023a22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a24:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023a28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a2a:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023a34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a36:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023a3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023a4a:	44de      	add	lr, fp
 8023a4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a60:	ea4e 040a 	orr.w	r4, lr, sl
 8023a64:	940a      	str	r4, [sp, #40]	; 0x28
 8023a66:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023a68:	2cff      	cmp	r4, #255	; 0xff
 8023a6a:	d021      	beq.n	8023ab0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023a6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a6e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023a72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023a74:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023a7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023a80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023a84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a88:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023a94:	44de      	add	lr, fp
 8023a96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023aa2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023aa6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023aaa:	ea4e 040a 	orr.w	r4, lr, sl
 8023aae:	940f      	str	r4, [sp, #60]	; 0x3c
 8023ab0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ab2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023aba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023abe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023ac0:	fb08 fc0c 	mul.w	ip, r8, ip
 8023ac4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023ac8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023acc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ace:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023ad2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023ad6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ad8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023adc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023ae0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ae2:	fb08 f80e 	mul.w	r8, r8, lr
 8023ae6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023aea:	f8b7 e000 	ldrh.w	lr, [r7]
 8023aee:	fb02 8303 	mla	r3, r2, r3, r8
 8023af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023af4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023af8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023afc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023afe:	fb01 330a 	mla	r3, r1, sl, r3
 8023b02:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023b08:	fb09 3901 	mla	r9, r9, r1, r3
 8023b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b12:	4343      	muls	r3, r0
 8023b14:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023b18:	1c58      	adds	r0, r3, #1
 8023b1a:	ea4c 0c09 	orr.w	ip, ip, r9
 8023b1e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023b22:	ea4f 232e 	mov.w	r3, lr, asr #8
 8023b26:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023b2a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023b2e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023b32:	fb11 f102 	smulbb	r1, r1, r2
 8023b36:	b2c0      	uxtb	r0, r0
 8023b38:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023b3c:	fb03 1300 	mla	r3, r3, r0, r1
 8023b40:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023b44:	b299      	uxth	r1, r3
 8023b46:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023b4a:	fa5f fc8c 	uxtb.w	ip, ip
 8023b4e:	fb13 f304 	smulbb	r3, r3, r4
 8023b52:	fb1c fc04 	smulbb	ip, ip, r4
 8023b56:	fb02 3200 	mla	r2, r2, r0, r3
 8023b5a:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8023b5e:	b2db      	uxtb	r3, r3
 8023b60:	b292      	uxth	r2, r2
 8023b62:	fb03 cc00 	mla	ip, r3, r0, ip
 8023b66:	1c4b      	adds	r3, r1, #1
 8023b68:	fa1f fc8c 	uxth.w	ip, ip
 8023b6c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023b70:	1c51      	adds	r1, r2, #1
 8023b72:	f10c 0001 	add.w	r0, ip, #1
 8023b76:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023b7a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023b7e:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8023b82:	0952      	lsrs	r2, r2, #5
 8023b84:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023b88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023b8c:	ea43 030c 	orr.w	r3, r3, ip
 8023b90:	4313      	orrs	r3, r2
 8023b92:	803b      	strh	r3, [r7, #0]
 8023b94:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023b96:	3702      	adds	r7, #2
 8023b98:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023b9a:	441a      	add	r2, r3
 8023b9c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023b9e:	441d      	add	r5, r3
 8023ba0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023ba2:	9231      	str	r2, [sp, #196]	; 0xc4
 8023ba4:	3b01      	subs	r3, #1
 8023ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8023ba8:	e68e      	b.n	80238c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023baa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023bac:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023bae:	441c      	add	r4, r3
 8023bb0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023bb2:	441d      	add	r5, r3
 8023bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bb6:	9431      	str	r4, [sp, #196]	; 0xc4
 8023bb8:	3b01      	subs	r3, #1
 8023bba:	9309      	str	r3, [sp, #36]	; 0x24
 8023bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bbe:	3302      	adds	r3, #2
 8023bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8023bc2:	e661      	b.n	8023888 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023bc4:	d024      	beq.n	8023c10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bc8:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8023bca:	3b01      	subs	r3, #1
 8023bcc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023bce:	fb00 4003 	mla	r0, r0, r3, r4
 8023bd2:	1400      	asrs	r0, r0, #16
 8023bd4:	f53f ae75 	bmi.w	80238c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023bd8:	3901      	subs	r1, #1
 8023bda:	4288      	cmp	r0, r1
 8023bdc:	f6bf ae71 	bge.w	80238c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023be0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8023be2:	fb01 5303 	mla	r3, r1, r3, r5
 8023be6:	141b      	asrs	r3, r3, #16
 8023be8:	f53f ae6b 	bmi.w	80238c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023bec:	3a01      	subs	r2, #1
 8023bee:	4293      	cmp	r3, r2
 8023bf0:	f6bf ae67 	bge.w	80238c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023bf4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023bf8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8023bfc:	f1bb 0f00 	cmp.w	fp, #0
 8023c00:	dc70      	bgt.n	8023ce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c0a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8023c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	f340 81be 	ble.w	8023f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8023c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023c1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023c22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023c26:	eef0 6a48 	vmov.f32	s13, s16
 8023c2a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023c2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c36:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8023c3a:	eef0 6a68 	vmov.f32	s13, s17
 8023c3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c42:	ee16 5a90 	vmov	r5, s13
 8023c46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023c4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023c52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023c56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023c5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023c5e:	ee18 2a10 	vmov	r2, s16
 8023c62:	eeb0 8a47 	vmov.f32	s16, s14
 8023c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c6a:	ee18 2a90 	vmov	r2, s17
 8023c6e:	9333      	str	r3, [sp, #204]	; 0xcc
 8023c70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023c72:	eef0 8a67 	vmov.f32	s17, s15
 8023c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c7a:	9334      	str	r3, [sp, #208]	; 0xd0
 8023c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023c7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023c80:	3b01      	subs	r3, #1
 8023c82:	9319      	str	r3, [sp, #100]	; 0x64
 8023c84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023c86:	bf08      	it	eq
 8023c88:	4613      	moveq	r3, r2
 8023c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8023c8c:	e5ee      	b.n	802386c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023c8e:	2900      	cmp	r1, #0
 8023c90:	f43f ae60 	beq.w	8023954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023c94:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023c98:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023c9c:	900a      	str	r0, [sp, #40]	; 0x28
 8023c9e:	0e00      	lsrs	r0, r0, #24
 8023ca0:	9013      	str	r0, [sp, #76]	; 0x4c
 8023ca2:	e657      	b.n	8023954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023ca4:	f113 0801 	adds.w	r8, r3, #1
 8023ca8:	f53f af74 	bmi.w	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023cac:	4540      	cmp	r0, r8
 8023cae:	f6ff af71 	blt.w	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023cb2:	f11c 0801 	adds.w	r8, ip, #1
 8023cb6:	f53f af6d 	bmi.w	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023cba:	45c6      	cmp	lr, r8
 8023cbc:	f6ff af6a 	blt.w	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023cc0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023cc2:	b200      	sxth	r0, r0
 8023cc4:	9302      	str	r3, [sp, #8]
 8023cc6:	fa0f f38e 	sxth.w	r3, lr
 8023cca:	9000      	str	r0, [sp, #0]
 8023ccc:	9301      	str	r3, [sp, #4]
 8023cce:	4633      	mov	r3, r6
 8023cd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023cd2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023cd6:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023cda:	4639      	mov	r1, r7
 8023cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cde:	f7ff fc2b 	bl	8023538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023ce2:	e757      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023ce4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023ce6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023cea:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023cec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023cf0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023cf2:	1427      	asrs	r7, r4, #16
 8023cf4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023cf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cfa:	142b      	asrs	r3, r5, #16
 8023cfc:	fb01 7303 	mla	r3, r1, r3, r7
 8023d00:	18e7      	adds	r7, r4, r3
 8023d02:	5ce3      	ldrb	r3, [r4, r3]
 8023d04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d08:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023d0c:	2a00      	cmp	r2, #0
 8023d0e:	f000 8137 	beq.w	8023f80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8023d12:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023d16:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023d1a:	9410      	str	r4, [sp, #64]	; 0x40
 8023d1c:	0e24      	lsrs	r4, r4, #24
 8023d1e:	9417      	str	r4, [sp, #92]	; 0x5c
 8023d20:	b170      	cbz	r0, 8023d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023d22:	eb07 0e01 	add.w	lr, r7, r1
 8023d26:	5c79      	ldrb	r1, [r7, r1]
 8023d28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023d2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d2e:	0e09      	lsrs	r1, r1, #24
 8023d30:	9114      	str	r1, [sp, #80]	; 0x50
 8023d32:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023d36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023d3a:	9111      	str	r1, [sp, #68]	; 0x44
 8023d3c:	0e09      	lsrs	r1, r1, #24
 8023d3e:	9118      	str	r1, [sp, #96]	; 0x60
 8023d40:	b292      	uxth	r2, r2
 8023d42:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023d44:	b280      	uxth	r0, r0
 8023d46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d48:	fb02 f800 	mul.w	r8, r2, r0
 8023d4c:	0112      	lsls	r2, r2, #4
 8023d4e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023d52:	eba2 0e08 	sub.w	lr, r2, r8
 8023d56:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023d5a:	b280      	uxth	r0, r0
 8023d5c:	fa1f fe8e 	uxth.w	lr, lr
 8023d60:	1a12      	subs	r2, r2, r0
 8023d62:	fb0e f101 	mul.w	r1, lr, r1
 8023d66:	b292      	uxth	r2, r2
 8023d68:	fb02 110c 	mla	r1, r2, ip, r1
 8023d6c:	fb00 1104 	mla	r1, r0, r4, r1
 8023d70:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023d72:	fb08 1104 	mla	r1, r8, r4, r1
 8023d76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023d7a:	2900      	cmp	r1, #0
 8023d7c:	f000 80f5 	beq.w	8023f6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8023d80:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023d84:	d019      	beq.n	8023dba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8023d86:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d8e:	fb0c fa0a 	mul.w	sl, ip, sl
 8023d92:	fb0c fc03 	mul.w	ip, ip, r3
 8023d96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023d9a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023d9e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023da2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023da6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023daa:	4453      	add	r3, sl
 8023dac:	0a3f      	lsrs	r7, r7, #8
 8023dae:	0a1b      	lsrs	r3, r3, #8
 8023db0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023db4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023db8:	433b      	orrs	r3, r7
 8023dba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023dbc:	2cff      	cmp	r4, #255	; 0xff
 8023dbe:	d020      	beq.n	8023e02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023dc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023dc2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023dc6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023dc8:	4367      	muls	r7, r4
 8023dca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023dcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023dd0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023dd4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023dd6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023dda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023dde:	fb04 fa0a 	mul.w	sl, r4, sl
 8023de2:	44bc      	add	ip, r7
 8023de4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023df0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023df4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023df8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023dfc:	ea4c 040a 	orr.w	r4, ip, sl
 8023e00:	9410      	str	r4, [sp, #64]	; 0x40
 8023e02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e04:	2cff      	cmp	r4, #255	; 0xff
 8023e06:	d020      	beq.n	8023e4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 8023e08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023e0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e10:	4367      	muls	r7, r4
 8023e12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023e18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023e22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e26:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e2a:	44bc      	add	ip, r7
 8023e2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e44:	ea4c 040a 	orr.w	r4, ip, sl
 8023e48:	940b      	str	r4, [sp, #44]	; 0x2c
 8023e4a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e4c:	2cff      	cmp	r4, #255	; 0xff
 8023e4e:	d020      	beq.n	8023e92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 8023e50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023e56:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e58:	4367      	muls	r7, r4
 8023e5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023e60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e64:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023e6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e72:	44bc      	add	ip, r7
 8023e74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e8c:	ea4c 040a 	orr.w	r4, ip, sl
 8023e90:	9411      	str	r4, [sp, #68]	; 0x44
 8023e92:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e94:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023e98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e9c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ea0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ea2:	fb0e f707 	mul.w	r7, lr, r7
 8023ea6:	fb02 770c 	mla	r7, r2, ip, r7
 8023eaa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023eae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023eb0:	fb00 770c 	mla	r7, r0, ip, r7
 8023eb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023eb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023eba:	fb08 770c 	mla	r7, r8, ip, r7
 8023ebe:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023ec2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ec4:	fb0e fe0c 	mul.w	lr, lr, ip
 8023ec8:	0a3f      	lsrs	r7, r7, #8
 8023eca:	fb02 e303 	mla	r3, r2, r3, lr
 8023ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023ed0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023ed4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023eda:	fb00 330a 	mla	r3, r0, sl, r3
 8023ede:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023ee2:	f8b9 0000 	ldrh.w	r0, [r9]
 8023ee6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023eec:	1202      	asrs	r2, r0, #8
 8023eee:	434b      	muls	r3, r1
 8023ef0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ef4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023ef8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023efc:	1c59      	adds	r1, r3, #1
 8023efe:	ea47 070c 	orr.w	r7, r7, ip
 8023f02:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f06:	0c3b      	lsrs	r3, r7, #16
 8023f08:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023f0c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023f10:	b2ff      	uxtb	r7, r7
 8023f12:	fb13 f304 	smulbb	r3, r3, r4
 8023f16:	b2c9      	uxtb	r1, r1
 8023f18:	fb1c fc04 	smulbb	ip, ip, r4
 8023f1c:	fb02 3201 	mla	r2, r2, r1, r3
 8023f20:	10c3      	asrs	r3, r0, #3
 8023f22:	fb17 f704 	smulbb	r7, r7, r4
 8023f26:	00c0      	lsls	r0, r0, #3
 8023f28:	b292      	uxth	r2, r2
 8023f2a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023f2e:	b2c0      	uxtb	r0, r0
 8023f30:	fb03 c301 	mla	r3, r3, r1, ip
 8023f34:	f102 0c01 	add.w	ip, r2, #1
 8023f38:	fb00 7001 	mla	r0, r0, r1, r7
 8023f3c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023f40:	b280      	uxth	r0, r0
 8023f42:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8023f46:	b29b      	uxth	r3, r3
 8023f48:	1c42      	adds	r2, r0, #1
 8023f4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023f4e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8023f52:	ea4c 0200 	orr.w	r2, ip, r0
 8023f56:	f103 0c01 	add.w	ip, r3, #1
 8023f5a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023f5e:	095b      	lsrs	r3, r3, #5
 8023f60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f64:	431a      	orrs	r2, r3
 8023f66:	f8a9 2000 	strh.w	r2, [r9]
 8023f6a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023f6c:	f109 0902 	add.w	r9, r9, #2
 8023f70:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f76:	441a      	add	r2, r3
 8023f78:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f7a:	9231      	str	r2, [sp, #196]	; 0xc4
 8023f7c:	441d      	add	r5, r3
 8023f7e:	e63d      	b.n	8023bfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023f80:	2800      	cmp	r0, #0
 8023f82:	f43f aedd 	beq.w	8023d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023f86:	5c79      	ldrb	r1, [r7, r1]
 8023f88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f8e:	0e09      	lsrs	r1, r1, #24
 8023f90:	9114      	str	r1, [sp, #80]	; 0x50
 8023f92:	e6d5      	b.n	8023d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023f94:	b01f      	add	sp, #124	; 0x7c
 8023f96:	ecbd 8b08 	vpop	{d8-d11}
 8023f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023fa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa4:	880e      	ldrh	r6, [r1, #0]
 8023fa6:	b085      	sub	sp, #20
 8023fa8:	4691      	mov	r9, r2
 8023faa:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8023fae:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023fb2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023fb6:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8023fba:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8023fbe:	00f6      	lsls	r6, r6, #3
 8023fc0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023fc4:	9200      	str	r2, [sp, #0]
 8023fc6:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8023fca:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8023fce:	9201      	str	r2, [sp, #4]
 8023fd0:	b2f2      	uxtb	r2, r6
 8023fd2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8023fd6:	9202      	str	r2, [sp, #8]
 8023fd8:	fb04 560c 	mla	r6, r4, ip, r5
 8023fdc:	2c00      	cmp	r4, #0
 8023fde:	eb09 0e06 	add.w	lr, r9, r6
 8023fe2:	db3e      	blt.n	8024062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8023fe4:	45a0      	cmp	r8, r4
 8023fe6:	dd3c      	ble.n	8024062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8023fe8:	2d00      	cmp	r5, #0
 8023fea:	db38      	blt.n	802405e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8023fec:	45ac      	cmp	ip, r5
 8023fee:	dd36      	ble.n	802405e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8023ff0:	f819 2006 	ldrb.w	r2, [r9, r6]
 8023ff4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023ff8:	1c6e      	adds	r6, r5, #1
 8023ffa:	d435      	bmi.n	8024068 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8023ffc:	45b4      	cmp	ip, r6
 8023ffe:	dd33      	ble.n	8024068 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8024000:	b3a0      	cbz	r0, 802406c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8024002:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024006:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802400a:	3401      	adds	r4, #1
 802400c:	d432      	bmi.n	8024074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 802400e:	45a0      	cmp	r8, r4
 8024010:	dd30      	ble.n	8024074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8024012:	b397      	cbz	r7, 802407a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8024014:	2d00      	cmp	r5, #0
 8024016:	db2b      	blt.n	8024070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8024018:	45ac      	cmp	ip, r5
 802401a:	dd29      	ble.n	8024070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 802401c:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024020:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024024:	3501      	adds	r5, #1
 8024026:	d42b      	bmi.n	8024080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8024028:	45ac      	cmp	ip, r5
 802402a:	dd29      	ble.n	8024080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 802402c:	b350      	cbz	r0, 8024084 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 802402e:	44f4      	add	ip, lr
 8024030:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024034:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024038:	280f      	cmp	r0, #15
 802403a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802403e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024042:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024046:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802404a:	d801      	bhi.n	8024050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 802404c:	2f0f      	cmp	r7, #15
 802404e:	d91b      	bls.n	8024088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 8024050:	4b7e      	ldr	r3, [pc, #504]	; (802424c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8024052:	f240 210d 	movw	r1, #525	; 0x20d
 8024056:	4a7e      	ldr	r2, [pc, #504]	; (8024250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8024058:	487e      	ldr	r0, [pc, #504]	; (8024254 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 802405a:	f006 fb9b 	bl	802a794 <__assert_func>
 802405e:	2200      	movs	r2, #0
 8024060:	e7ca      	b.n	8023ff8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8024062:	2600      	movs	r6, #0
 8024064:	4632      	mov	r2, r6
 8024066:	e7d0      	b.n	802400a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024068:	2600      	movs	r6, #0
 802406a:	e7ce      	b.n	802400a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802406c:	4606      	mov	r6, r0
 802406e:	e7cc      	b.n	802400a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024070:	2400      	movs	r4, #0
 8024072:	e7d7      	b.n	8024024 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8024074:	2300      	movs	r3, #0
 8024076:	461c      	mov	r4, r3
 8024078:	e7de      	b.n	8024038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 802407a:	463b      	mov	r3, r7
 802407c:	463c      	mov	r4, r7
 802407e:	e7db      	b.n	8024038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8024080:	2300      	movs	r3, #0
 8024082:	e7d9      	b.n	8024038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8024084:	4603      	mov	r3, r0
 8024086:	e7d7      	b.n	8024038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8024088:	b280      	uxth	r0, r0
 802408a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802408e:	b2bf      	uxth	r7, r7
 8024090:	fb00 fe07 	mul.w	lr, r0, r7
 8024094:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8024098:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802409c:	eba0 0c0e 	sub.w	ip, r0, lr
 80240a0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80240a4:	b2bf      	uxth	r7, r7
 80240a6:	fa1f fc8c 	uxth.w	ip, ip
 80240aa:	eba5 0507 	sub.w	r5, r5, r7
 80240ae:	fb0c f00a 	mul.w	r0, ip, sl
 80240b2:	b2ad      	uxth	r5, r5
 80240b4:	fb05 000b 	mla	r0, r5, fp, r0
 80240b8:	fb07 0009 	mla	r0, r7, r9, r0
 80240bc:	fb0e 0008 	mla	r0, lr, r8, r0
 80240c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80240c4:	9003      	str	r0, [sp, #12]
 80240c6:	d018      	beq.n	80240fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 80240c8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80240cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80240d0:	fb0b f000 	mul.w	r0, fp, r0
 80240d4:	fb0b fb02 	mul.w	fp, fp, r2
 80240d8:	0a02      	lsrs	r2, r0, #8
 80240da:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80240de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80240e2:	4402      	add	r2, r0
 80240e4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80240e8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80240ec:	0a12      	lsrs	r2, r2, #8
 80240ee:	0a00      	lsrs	r0, r0, #8
 80240f0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80240f4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80240f8:	4302      	orrs	r2, r0
 80240fa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80240fe:	d019      	beq.n	8024134 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 8024100:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024104:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024108:	fb0a fb0b 	mul.w	fp, sl, fp
 802410c:	fb0a fa06 	mul.w	sl, sl, r6
 8024110:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024114:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024118:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802411c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024120:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024124:	445e      	add	r6, fp
 8024126:	0a00      	lsrs	r0, r0, #8
 8024128:	0a36      	lsrs	r6, r6, #8
 802412a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802412e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024132:	4306      	orrs	r6, r0
 8024134:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024138:	d019      	beq.n	802416e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 802413a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802413e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024142:	fb09 fa0a 	mul.w	sl, r9, sl
 8024146:	fb09 f904 	mul.w	r9, r9, r4
 802414a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802414e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024152:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024156:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802415a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802415e:	4454      	add	r4, sl
 8024160:	0a00      	lsrs	r0, r0, #8
 8024162:	0a24      	lsrs	r4, r4, #8
 8024164:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024168:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802416c:	4304      	orrs	r4, r0
 802416e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024172:	d019      	beq.n	80241a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 8024174:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802417c:	fb08 f909 	mul.w	r9, r8, r9
 8024180:	fb08 f803 	mul.w	r8, r8, r3
 8024184:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024188:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802418c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8024190:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024194:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024198:	444b      	add	r3, r9
 802419a:	0a00      	lsrs	r0, r0, #8
 802419c:	0a1b      	lsrs	r3, r3, #8
 802419e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80241a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241a6:	4303      	orrs	r3, r0
 80241a8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80241ac:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80241b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80241b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80241b8:	fb0c f808 	mul.w	r8, ip, r8
 80241bc:	fb0c f606 	mul.w	r6, ip, r6
 80241c0:	fb05 8800 	mla	r8, r5, r0, r8
 80241c4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80241c8:	fb05 6202 	mla	r2, r5, r2, r6
 80241cc:	9d01      	ldr	r5, [sp, #4]
 80241ce:	fb07 8800 	mla	r8, r7, r0, r8
 80241d2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80241d6:	fb0e 8000 	mla	r0, lr, r0, r8
 80241da:	0a00      	lsrs	r0, r0, #8
 80241dc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80241e0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80241e4:	9c02      	ldr	r4, [sp, #8]
 80241e6:	fb07 2700 	mla	r7, r7, r0, r2
 80241ea:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80241ee:	9b03      	ldr	r3, [sp, #12]
 80241f0:	fb0e 7000 	mla	r0, lr, r0, r7
 80241f4:	43da      	mvns	r2, r3
 80241f6:	9b00      	ldr	r3, [sp, #0]
 80241f8:	0a00      	lsrs	r0, r0, #8
 80241fa:	b2d2      	uxtb	r2, r2
 80241fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024200:	4353      	muls	r3, r2
 8024202:	4354      	muls	r4, r2
 8024204:	ea48 0000 	orr.w	r0, r8, r0
 8024208:	4355      	muls	r5, r2
 802420a:	4622      	mov	r2, r4
 802420c:	1c5c      	adds	r4, r3, #1
 802420e:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8024212:	0c03      	lsrs	r3, r0, #16
 8024214:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024218:	4b0f      	ldr	r3, [pc, #60]	; (8024258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 802421a:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802421e:	1c54      	adds	r4, r2, #1
 8024220:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024224:	b2c2      	uxtb	r2, r0
 8024226:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802422a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802422e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8024232:	1c6a      	adds	r2, r5, #1
 8024234:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024238:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802423c:	00c0      	lsls	r0, r0, #3
 802423e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024242:	4318      	orrs	r0, r3
 8024244:	8008      	strh	r0, [r1, #0]
 8024246:	b005      	add	sp, #20
 8024248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802424c:	080305ce 	.word	0x080305ce
 8024250:	08030b8d 	.word	0x08030b8d
 8024254:	080306b7 	.word	0x080306b7
 8024258:	fffff800 	.word	0xfffff800

0802425c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024260:	ed2d 8b08 	vpush	{d8-d11}
 8024264:	b09b      	sub	sp, #108	; 0x6c
 8024266:	eeb0 aa40 	vmov.f32	s20, s0
 802426a:	eef0 9a60 	vmov.f32	s19, s1
 802426e:	9218      	str	r2, [sp, #96]	; 0x60
 8024270:	eeb0 9a41 	vmov.f32	s18, s2
 8024274:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024276:	eeb0 8a62 	vmov.f32	s16, s5
 802427a:	9019      	str	r0, [sp, #100]	; 0x64
 802427c:	eef0 8a43 	vmov.f32	s17, s6
 8024280:	6850      	ldr	r0, [r2, #4]
 8024282:	eef0 ba44 	vmov.f32	s23, s8
 8024286:	9116      	str	r1, [sp, #88]	; 0x58
 8024288:	eeb0 ba64 	vmov.f32	s22, s9
 802428c:	9307      	str	r3, [sp, #28]
 802428e:	eef0 aa45 	vmov.f32	s21, s10
 8024292:	6812      	ldr	r2, [r2, #0]
 8024294:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8024296:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802429a:	fb00 1303 	mla	r3, r0, r3, r1
 802429e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80242a2:	930a      	str	r3, [sp, #40]	; 0x28
 80242a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80242aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242ac:	685e      	ldr	r6, [r3, #4]
 80242ae:	3604      	adds	r6, #4
 80242b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80242b2:	2b00      	cmp	r3, #0
 80242b4:	dc03      	bgt.n	80242be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80242b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	f340 836f 	ble.w	802499c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 80242be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80242c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80242c8:	1e48      	subs	r0, r1, #1
 80242ca:	1e57      	subs	r7, r2, #1
 80242cc:	9b07      	ldr	r3, [sp, #28]
 80242ce:	2b00      	cmp	r3, #0
 80242d0:	f340 8188 	ble.w	80245e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80242d4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80242d6:	142b      	asrs	r3, r5, #16
 80242d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80242dc:	d406      	bmi.n	80242ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80242de:	4584      	cmp	ip, r0
 80242e0:	da04      	bge.n	80242ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	db02      	blt.n	80242ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80242e6:	42bb      	cmp	r3, r7
 80242e8:	f2c0 817d 	blt.w	80245e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80242ec:	f11c 0c01 	adds.w	ip, ip, #1
 80242f0:	f100 816b 	bmi.w	80245ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80242f4:	4561      	cmp	r1, ip
 80242f6:	f2c0 8168 	blt.w	80245ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80242fa:	3301      	adds	r3, #1
 80242fc:	f100 8165 	bmi.w	80245ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024300:	429a      	cmp	r2, r3
 8024302:	f2c0 8162 	blt.w	80245ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024306:	9b07      	ldr	r3, [sp, #28]
 8024308:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802430a:	9317      	str	r3, [sp, #92]	; 0x5c
 802430c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802430e:	2b00      	cmp	r3, #0
 8024310:	f340 8187 	ble.w	8024622 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024314:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024316:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802431a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802431e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024322:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024324:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024328:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802432a:	141b      	asrs	r3, r3, #16
 802432c:	f100 81ca 	bmi.w	80246c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024330:	f101 38ff 	add.w	r8, r1, #4294967295
 8024334:	4543      	cmp	r3, r8
 8024336:	f280 81c5 	bge.w	80246c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802433a:	f1bc 0f00 	cmp.w	ip, #0
 802433e:	f2c0 81c1 	blt.w	80246c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024342:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024346:	45c4      	cmp	ip, r8
 8024348:	f280 81bc 	bge.w	80246c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802434c:	b209      	sxth	r1, r1
 802434e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024350:	fb0c 3301 	mla	r3, ip, r1, r3
 8024354:	eb04 0803 	add.w	r8, r4, r3
 8024358:	5ce3      	ldrb	r3, [r4, r3]
 802435a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802435e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024362:	2a00      	cmp	r2, #0
 8024364:	f000 81a3 	beq.w	80246ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024368:	f898 c001 	ldrb.w	ip, [r8, #1]
 802436c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024370:	940b      	str	r4, [sp, #44]	; 0x2c
 8024372:	0e24      	lsrs	r4, r4, #24
 8024374:	9412      	str	r4, [sp, #72]	; 0x48
 8024376:	b178      	cbz	r0, 8024398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024378:	eb08 0c01 	add.w	ip, r8, r1
 802437c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024380:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024384:	9108      	str	r1, [sp, #32]
 8024386:	0e09      	lsrs	r1, r1, #24
 8024388:	9110      	str	r1, [sp, #64]	; 0x40
 802438a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802438e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024392:	910c      	str	r1, [sp, #48]	; 0x30
 8024394:	0e09      	lsrs	r1, r1, #24
 8024396:	9113      	str	r1, [sp, #76]	; 0x4c
 8024398:	b292      	uxth	r2, r2
 802439a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802439c:	b280      	uxth	r0, r0
 802439e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80243a0:	fb02 f900 	mul.w	r9, r2, r0
 80243a4:	0112      	lsls	r2, r2, #4
 80243a6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80243aa:	eba2 0809 	sub.w	r8, r2, r9
 80243ae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80243b2:	b280      	uxth	r0, r0
 80243b4:	fa1f f888 	uxth.w	r8, r8
 80243b8:	1a12      	subs	r2, r2, r0
 80243ba:	fb08 f101 	mul.w	r1, r8, r1
 80243be:	b292      	uxth	r2, r2
 80243c0:	fb02 110e 	mla	r1, r2, lr, r1
 80243c4:	fb00 1104 	mla	r1, r0, r4, r1
 80243c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80243ca:	fb09 1104 	mla	r1, r9, r4, r1
 80243ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80243d2:	2900      	cmp	r1, #0
 80243d4:	f000 80ee 	beq.w	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80243d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80243dc:	d01b      	beq.n	8024416 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80243de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80243e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243e6:	fb0e fa0a 	mul.w	sl, lr, sl
 80243ea:	fb0e fe03 	mul.w	lr, lr, r3
 80243ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80243f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80243f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80243fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80243fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024402:	4453      	add	r3, sl
 8024404:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024408:	0a1b      	lsrs	r3, r3, #8
 802440a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802440e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024412:	ea43 030c 	orr.w	r3, r3, ip
 8024416:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024418:	2cff      	cmp	r4, #255	; 0xff
 802441a:	d021      	beq.n	8024460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802441c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802441e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024422:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024424:	fb04 fb0b 	mul.w	fp, r4, fp
 8024428:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802442a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802442e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024430:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024434:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024438:	fb04 fa0a 	mul.w	sl, r4, sl
 802443c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024440:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024444:	44de      	add	lr, fp
 8024446:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802444a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802444e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024452:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024456:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802445a:	ea4e 040a 	orr.w	r4, lr, sl
 802445e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024460:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024462:	2cff      	cmp	r4, #255	; 0xff
 8024464:	d021      	beq.n	80244aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8024466:	9c08      	ldr	r4, [sp, #32]
 8024468:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802446c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802446e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024472:	9c08      	ldr	r4, [sp, #32]
 8024474:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024478:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802447a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802447e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024482:	fb04 fa0a 	mul.w	sl, r4, sl
 8024486:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802448a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802448e:	44de      	add	lr, fp
 8024490:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024494:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024498:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802449c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244a4:	ea4e 040a 	orr.w	r4, lr, sl
 80244a8:	9408      	str	r4, [sp, #32]
 80244aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244ac:	2cff      	cmp	r4, #255	; 0xff
 80244ae:	d021      	beq.n	80244f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80244b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80244b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80244b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80244bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80244be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80244c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80244c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80244cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80244d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80244d8:	44de      	add	lr, fp
 80244da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80244de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244ee:	ea4e 040a 	orr.w	r4, lr, sl
 80244f2:	940c      	str	r4, [sp, #48]	; 0x30
 80244f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80244f6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80244fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80244fe:	43c9      	mvns	r1, r1
 8024500:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024504:	9c08      	ldr	r4, [sp, #32]
 8024506:	b2c9      	uxtb	r1, r1
 8024508:	fb08 fc0c 	mul.w	ip, r8, ip
 802450c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024510:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024514:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024516:	fb00 cc0e 	mla	ip, r0, lr, ip
 802451a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802451e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024520:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024524:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024528:	fb08 f80e 	mul.w	r8, r8, lr
 802452c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024530:	fb02 8303 	mla	r3, r2, r3, r8
 8024534:	9a08      	ldr	r2, [sp, #32]
 8024536:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802453a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802453e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024540:	fb00 330a 	mla	r3, r0, sl, r3
 8024544:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024548:	fb09 3900 	mla	r9, r9, r0, r3
 802454c:	883b      	ldrh	r3, [r7, #0]
 802454e:	1218      	asrs	r0, r3, #8
 8024550:	10da      	asrs	r2, r3, #3
 8024552:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024556:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802455a:	00db      	lsls	r3, r3, #3
 802455c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024560:	4348      	muls	r0, r1
 8024562:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024566:	b2db      	uxtb	r3, r3
 8024568:	434a      	muls	r2, r1
 802456a:	ea4c 0c09 	orr.w	ip, ip, r9
 802456e:	434b      	muls	r3, r1
 8024570:	1c41      	adds	r1, r0, #1
 8024572:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024576:	ea4f 401c 	mov.w	r0, ip, lsr #16
 802457a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 802457e:	4960      	ldr	r1, [pc, #384]	; (8024700 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024580:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8024584:	1c59      	adds	r1, r3, #1
 8024586:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802458a:	fa5f f38c 	uxtb.w	r3, ip
 802458e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024592:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024596:	1c51      	adds	r1, r2, #1
 8024598:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802459c:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 80245a0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80245a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80245a8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80245ac:	ea43 0c0c 	orr.w	ip, r3, ip
 80245b0:	f8a7 c000 	strh.w	ip, [r7]
 80245b4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80245b6:	3702      	adds	r7, #2
 80245b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80245ba:	441a      	add	r2, r3
 80245bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80245be:	441d      	add	r5, r3
 80245c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80245c2:	922d      	str	r2, [sp, #180]	; 0xb4
 80245c4:	3b01      	subs	r3, #1
 80245c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80245c8:	e6a0      	b.n	802430c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80245ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80245cc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80245ce:	441c      	add	r4, r3
 80245d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80245d2:	441d      	add	r5, r3
 80245d4:	9b07      	ldr	r3, [sp, #28]
 80245d6:	942d      	str	r4, [sp, #180]	; 0xb4
 80245d8:	3b01      	subs	r3, #1
 80245da:	9307      	str	r3, [sp, #28]
 80245dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245de:	3302      	adds	r3, #2
 80245e0:	930a      	str	r3, [sp, #40]	; 0x28
 80245e2:	e673      	b.n	80242cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80245e4:	d024      	beq.n	8024630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80245e6:	9b07      	ldr	r3, [sp, #28]
 80245e8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80245ea:	3b01      	subs	r3, #1
 80245ec:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80245ee:	fb00 4003 	mla	r0, r0, r3, r4
 80245f2:	1400      	asrs	r0, r0, #16
 80245f4:	f53f ae87 	bmi.w	8024306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80245f8:	3901      	subs	r1, #1
 80245fa:	4288      	cmp	r0, r1
 80245fc:	f6bf ae83 	bge.w	8024306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024600:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024602:	fb01 5303 	mla	r3, r1, r3, r5
 8024606:	141b      	asrs	r3, r3, #16
 8024608:	f53f ae7d 	bmi.w	8024306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802460c:	3a01      	subs	r2, #1
 802460e:	4293      	cmp	r3, r2
 8024610:	f6bf ae79 	bge.w	8024306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024614:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024618:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802461c:	f1bb 0f00 	cmp.w	fp, #0
 8024620:	dc70      	bgt.n	8024704 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024622:	9b07      	ldr	r3, [sp, #28]
 8024624:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802462a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802462e:	930a      	str	r3, [sp, #40]	; 0x28
 8024630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024632:	2b00      	cmp	r3, #0
 8024634:	f340 81b2 	ble.w	802499c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8024638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802463c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802463e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024642:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024646:	eef0 6a48 	vmov.f32	s13, s16
 802464a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802464e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024656:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802465a:	eef0 6a68 	vmov.f32	s13, s17
 802465e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024662:	ee16 5a90 	vmov	r5, s13
 8024666:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802466a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802466e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024672:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024676:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802467a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802467e:	ee18 2a10 	vmov	r2, s16
 8024682:	eeb0 8a47 	vmov.f32	s16, s14
 8024686:	fb92 f3f3 	sdiv	r3, r2, r3
 802468a:	ee18 2a90 	vmov	r2, s17
 802468e:	932f      	str	r3, [sp, #188]	; 0xbc
 8024690:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024692:	eef0 8a67 	vmov.f32	s17, s15
 8024696:	fb92 f3f3 	sdiv	r3, r2, r3
 802469a:	9330      	str	r3, [sp, #192]	; 0xc0
 802469c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802469e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80246a0:	3b01      	subs	r3, #1
 80246a2:	9316      	str	r3, [sp, #88]	; 0x58
 80246a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246a6:	bf08      	it	eq
 80246a8:	4613      	moveq	r3, r2
 80246aa:	9307      	str	r3, [sp, #28]
 80246ac:	e600      	b.n	80242b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80246ae:	2800      	cmp	r0, #0
 80246b0:	f43f ae72 	beq.w	8024398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80246b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80246b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80246bc:	9108      	str	r1, [sp, #32]
 80246be:	0e09      	lsrs	r1, r1, #24
 80246c0:	9110      	str	r1, [sp, #64]	; 0x40
 80246c2:	e669      	b.n	8024398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80246c4:	f113 0801 	adds.w	r8, r3, #1
 80246c8:	f53f af74 	bmi.w	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80246cc:	4541      	cmp	r1, r8
 80246ce:	f6ff af71 	blt.w	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80246d2:	f11c 0801 	adds.w	r8, ip, #1
 80246d6:	f53f af6d 	bmi.w	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80246da:	45c6      	cmp	lr, r8
 80246dc:	f6ff af6a 	blt.w	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80246e0:	b209      	sxth	r1, r1
 80246e2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80246e6:	fa0f f38e 	sxth.w	r3, lr
 80246ea:	9100      	str	r1, [sp, #0]
 80246ec:	4639      	mov	r1, r7
 80246ee:	9301      	str	r3, [sp, #4]
 80246f0:	4633      	mov	r3, r6
 80246f2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80246f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80246f8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80246fa:	f7ff fc51 	bl	8023fa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80246fe:	e759      	b.n	80245b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024700:	fffff800 	.word	0xfffff800
 8024704:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024706:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802470a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802470c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024710:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024712:	1427      	asrs	r7, r4, #16
 8024714:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024716:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802471a:	142b      	asrs	r3, r5, #16
 802471c:	fb01 7303 	mla	r3, r1, r3, r7
 8024720:	18e7      	adds	r7, r4, r3
 8024722:	5ce3      	ldrb	r3, [r4, r3]
 8024724:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024728:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802472c:	2a00      	cmp	r2, #0
 802472e:	f000 812b 	beq.w	8024988 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8024732:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024736:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802473a:	940d      	str	r4, [sp, #52]	; 0x34
 802473c:	0e24      	lsrs	r4, r4, #24
 802473e:	9414      	str	r4, [sp, #80]	; 0x50
 8024740:	b170      	cbz	r0, 8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024742:	eb07 0e01 	add.w	lr, r7, r1
 8024746:	5c79      	ldrb	r1, [r7, r1]
 8024748:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802474c:	9109      	str	r1, [sp, #36]	; 0x24
 802474e:	0e09      	lsrs	r1, r1, #24
 8024750:	9111      	str	r1, [sp, #68]	; 0x44
 8024752:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024756:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802475a:	910e      	str	r1, [sp, #56]	; 0x38
 802475c:	0e09      	lsrs	r1, r1, #24
 802475e:	9115      	str	r1, [sp, #84]	; 0x54
 8024760:	b292      	uxth	r2, r2
 8024762:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024764:	b280      	uxth	r0, r0
 8024766:	fb02 f800 	mul.w	r8, r2, r0
 802476a:	0112      	lsls	r2, r2, #4
 802476c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024770:	eba2 0e08 	sub.w	lr, r2, r8
 8024774:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024778:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802477a:	b280      	uxth	r0, r0
 802477c:	fa1f fe8e 	uxth.w	lr, lr
 8024780:	1a09      	subs	r1, r1, r0
 8024782:	fb0e f202 	mul.w	r2, lr, r2
 8024786:	b289      	uxth	r1, r1
 8024788:	fb01 220c 	mla	r2, r1, ip, r2
 802478c:	fb00 2204 	mla	r2, r0, r4, r2
 8024790:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024792:	fb08 2204 	mla	r2, r8, r4, r2
 8024796:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802479a:	2a00      	cmp	r2, #0
 802479c:	f000 80e9 	beq.w	8024972 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80247a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80247a4:	d019      	beq.n	80247da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80247a6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80247aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80247ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80247b2:	fb0c fc03 	mul.w	ip, ip, r3
 80247b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80247ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80247be:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80247c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247c6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80247ca:	4453      	add	r3, sl
 80247cc:	0a3f      	lsrs	r7, r7, #8
 80247ce:	0a1b      	lsrs	r3, r3, #8
 80247d0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80247d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247d8:	433b      	orrs	r3, r7
 80247da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80247dc:	2cff      	cmp	r4, #255	; 0xff
 80247de:	d020      	beq.n	8024822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80247e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80247e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80247e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80247e8:	4367      	muls	r7, r4
 80247ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80247ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80247f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80247f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80247f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80247fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8024802:	44bc      	add	ip, r7
 8024804:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802480c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024810:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024814:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024818:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802481c:	ea4c 040a 	orr.w	r4, ip, sl
 8024820:	940d      	str	r4, [sp, #52]	; 0x34
 8024822:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024824:	2cff      	cmp	r4, #255	; 0xff
 8024826:	d020      	beq.n	802486a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024828:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802482a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802482e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024830:	4367      	muls	r7, r4
 8024832:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024834:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024838:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802483c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802483e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024842:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024846:	fb04 fa0a 	mul.w	sl, r4, sl
 802484a:	44bc      	add	ip, r7
 802484c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024850:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024854:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024858:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802485c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024860:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024864:	ea4c 040a 	orr.w	r4, ip, sl
 8024868:	9409      	str	r4, [sp, #36]	; 0x24
 802486a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802486c:	2cff      	cmp	r4, #255	; 0xff
 802486e:	d020      	beq.n	80248b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8024870:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024872:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024876:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024878:	4367      	muls	r7, r4
 802487a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802487c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024880:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024884:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024886:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802488a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802488e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024892:	44bc      	add	ip, r7
 8024894:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024898:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802489c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80248a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248ac:	ea4c 040a 	orr.w	r4, ip, sl
 80248b0:	940e      	str	r4, [sp, #56]	; 0x38
 80248b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80248b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248bc:	43d2      	mvns	r2, r2
 80248be:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80248c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80248c4:	b2d2      	uxtb	r2, r2
 80248c6:	fb0e f707 	mul.w	r7, lr, r7
 80248ca:	fb01 770c 	mla	r7, r1, ip, r7
 80248ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80248d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80248d4:	fb00 770c 	mla	r7, r0, ip, r7
 80248d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80248dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248de:	fb08 770c 	mla	r7, r8, ip, r7
 80248e2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80248e6:	fb0e fe0c 	mul.w	lr, lr, ip
 80248ea:	0a3f      	lsrs	r7, r7, #8
 80248ec:	fb01 e303 	mla	r3, r1, r3, lr
 80248f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80248f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80248f6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80248fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80248fc:	fb00 330a 	mla	r3, r0, sl, r3
 8024900:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024904:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024908:	f8b9 3000 	ldrh.w	r3, [r9]
 802490c:	1218      	asrs	r0, r3, #8
 802490e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024912:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024916:	10d9      	asrs	r1, r3, #3
 8024918:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802491c:	00db      	lsls	r3, r3, #3
 802491e:	4350      	muls	r0, r2
 8024920:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024924:	ea47 070c 	orr.w	r7, r7, ip
 8024928:	b2db      	uxtb	r3, r3
 802492a:	f100 0c01 	add.w	ip, r0, #1
 802492e:	4351      	muls	r1, r2
 8024930:	4353      	muls	r3, r2
 8024932:	4a1d      	ldr	r2, [pc, #116]	; (80249a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024934:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024938:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802493c:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024940:	f103 0c01 	add.w	ip, r3, #1
 8024944:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024948:	fa5f fc87 	uxtb.w	ip, r7
 802494c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024950:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024954:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024958:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802495c:	1c4b      	adds	r3, r1, #1
 802495e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024962:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8024966:	00ff      	lsls	r7, r7, #3
 8024968:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802496c:	4338      	orrs	r0, r7
 802496e:	f8a9 0000 	strh.w	r0, [r9]
 8024972:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024974:	f109 0902 	add.w	r9, r9, #2
 8024978:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802497a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802497e:	441a      	add	r2, r3
 8024980:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024982:	922d      	str	r2, [sp, #180]	; 0xb4
 8024984:	441d      	add	r5, r3
 8024986:	e649      	b.n	802461c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024988:	2800      	cmp	r0, #0
 802498a:	f43f aee9 	beq.w	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802498e:	5c79      	ldrb	r1, [r7, r1]
 8024990:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024994:	9109      	str	r1, [sp, #36]	; 0x24
 8024996:	0e09      	lsrs	r1, r1, #24
 8024998:	9111      	str	r1, [sp, #68]	; 0x44
 802499a:	e6e1      	b.n	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802499c:	b01b      	add	sp, #108	; 0x6c
 802499e:	ecbd 8b08 	vpop	{d8-d11}
 80249a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249a6:	bf00      	nop
 80249a8:	fffff800 	.word	0xfffff800

080249ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80249ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249b0:	b085      	sub	sp, #20
 80249b2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80249b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80249ba:	9103      	str	r1, [sp, #12]
 80249bc:	2d00      	cmp	r5, #0
 80249be:	fb05 7106 	mla	r1, r5, r6, r7
 80249c2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80249c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80249ca:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80249ce:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80249d2:	eb03 0901 	add.w	r9, r3, r1
 80249d6:	9401      	str	r4, [sp, #4]
 80249d8:	f2c0 80c0 	blt.w	8024b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80249dc:	45a8      	cmp	r8, r5
 80249de:	f340 80bd 	ble.w	8024b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80249e2:	2f00      	cmp	r7, #0
 80249e4:	f2c0 80b6 	blt.w	8024b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80249e8:	42be      	cmp	r6, r7
 80249ea:	f340 80b3 	ble.w	8024b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80249ee:	f813 c001 	ldrb.w	ip, [r3, r1]
 80249f2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80249f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80249fa:	d019      	beq.n	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80249fc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8024a00:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024a04:	435a      	muls	r2, r3
 8024a06:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8024a0a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8024a0e:	fb0c f403 	mul.w	r4, ip, r3
 8024a12:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8024a16:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024a1a:	441a      	add	r2, r3
 8024a1c:	f104 0320 	add.w	r3, r4, #32
 8024a20:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024a24:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024a28:	0a1b      	lsrs	r3, r3, #8
 8024a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a2e:	4319      	orrs	r1, r3
 8024a30:	b289      	uxth	r1, r1
 8024a32:	1c7b      	adds	r3, r7, #1
 8024a34:	f100 8097 	bmi.w	8024b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024a38:	429e      	cmp	r6, r3
 8024a3a:	f340 8094 	ble.w	8024b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024a3e:	2800      	cmp	r0, #0
 8024a40:	f000 8094 	beq.w	8024b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8024a44:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024a48:	9b01      	ldr	r3, [sp, #4]
 8024a4a:	2cff      	cmp	r4, #255	; 0xff
 8024a4c:	885b      	ldrh	r3, [r3, #2]
 8024a4e:	d01b      	beq.n	8024a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8024a50:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024a54:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024a58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a5c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024a60:	fb0a f202 	mul.w	r2, sl, r2
 8024a64:	fb04 fa03 	mul.w	sl, r4, r3
 8024a68:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024a6c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024a70:	441a      	add	r2, r3
 8024a72:	f10a 0320 	add.w	r3, sl, #32
 8024a76:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024a7a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8024a7e:	0a1b      	lsrs	r3, r3, #8
 8024a80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a84:	ea4b 0303 	orr.w	r3, fp, r3
 8024a88:	b29b      	uxth	r3, r3
 8024a8a:	3501      	adds	r5, #1
 8024a8c:	d474      	bmi.n	8024b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8024a8e:	45a8      	cmp	r8, r5
 8024a90:	dd72      	ble.n	8024b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8024a92:	f1be 0f00 	cmp.w	lr, #0
 8024a96:	f000 8120 	beq.w	8024cda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8024a9a:	2f00      	cmp	r7, #0
 8024a9c:	db69      	blt.n	8024b72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8024a9e:	42be      	cmp	r6, r7
 8024aa0:	dd67      	ble.n	8024b72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8024aa2:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024aa6:	9a01      	ldr	r2, [sp, #4]
 8024aa8:	2dff      	cmp	r5, #255	; 0xff
 8024aaa:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8024aae:	d01c      	beq.n	8024aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8024ab0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8024ab4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8024ab8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024abc:	fb08 f802 	mul.w	r8, r8, r2
 8024ac0:	fb05 fa0b 	mul.w	sl, r5, fp
 8024ac4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024ac8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8024acc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024ad0:	4490      	add	r8, r2
 8024ad2:	f10a 0220 	add.w	r2, sl, #32
 8024ad6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8024ada:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8024ade:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ae2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024ae6:	ea4b 0b0a 	orr.w	fp, fp, sl
 8024aea:	fa1f fb8b 	uxth.w	fp, fp
 8024aee:	3701      	adds	r7, #1
 8024af0:	d447      	bmi.n	8024b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8024af2:	42be      	cmp	r6, r7
 8024af4:	dd45      	ble.n	8024b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8024af6:	2800      	cmp	r0, #0
 8024af8:	d046      	beq.n	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8024afa:	3601      	adds	r6, #1
 8024afc:	9a01      	ldr	r2, [sp, #4]
 8024afe:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024b02:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8024b06:	2fff      	cmp	r7, #255	; 0xff
 8024b08:	d01a      	beq.n	8024b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8024b0a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024b0e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8024b12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b16:	fb08 f806 	mul.w	r8, r8, r6
 8024b1a:	fb07 f902 	mul.w	r9, r7, r2
 8024b1e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024b22:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024b26:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024b2a:	44b0      	add	r8, r6
 8024b2c:	f109 0620 	add.w	r6, r9, #32
 8024b30:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024b34:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024b38:	0a36      	lsrs	r6, r6, #8
 8024b3a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024b3e:	4332      	orrs	r2, r6
 8024b40:	b292      	uxth	r2, r2
 8024b42:	280f      	cmp	r0, #15
 8024b44:	d922      	bls.n	8024b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8024b46:	4b69      	ldr	r3, [pc, #420]	; (8024cec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8024b48:	f240 210d 	movw	r1, #525	; 0x20d
 8024b4c:	4a68      	ldr	r2, [pc, #416]	; (8024cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8024b4e:	4869      	ldr	r0, [pc, #420]	; (8024cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8024b50:	f005 fe20 	bl	802a794 <__assert_func>
 8024b54:	f04f 0c00 	mov.w	ip, #0
 8024b58:	4661      	mov	r1, ip
 8024b5a:	e76a      	b.n	8024a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8024b5c:	2400      	movs	r4, #0
 8024b5e:	46a4      	mov	ip, r4
 8024b60:	4623      	mov	r3, r4
 8024b62:	4621      	mov	r1, r4
 8024b64:	e791      	b.n	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024b66:	2400      	movs	r4, #0
 8024b68:	4623      	mov	r3, r4
 8024b6a:	e78e      	b.n	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024b6c:	4604      	mov	r4, r0
 8024b6e:	4603      	mov	r3, r0
 8024b70:	e78b      	b.n	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024b72:	2500      	movs	r5, #0
 8024b74:	46ab      	mov	fp, r5
 8024b76:	e7ba      	b.n	8024aee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8024b78:	2700      	movs	r7, #0
 8024b7a:	463d      	mov	r5, r7
 8024b7c:	463a      	mov	r2, r7
 8024b7e:	46bb      	mov	fp, r7
 8024b80:	e7df      	b.n	8024b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024b82:	2700      	movs	r7, #0
 8024b84:	463a      	mov	r2, r7
 8024b86:	e7dc      	b.n	8024b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024b88:	4607      	mov	r7, r0
 8024b8a:	4602      	mov	r2, r0
 8024b8c:	f1be 0f0f 	cmp.w	lr, #15
 8024b90:	d8d9      	bhi.n	8024b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8024b92:	b286      	uxth	r6, r0
 8024b94:	fa1f f98e 	uxth.w	r9, lr
 8024b98:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024b9c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024ba0:	fb06 f809 	mul.w	r8, r6, r9
 8024ba4:	0136      	lsls	r6, r6, #4
 8024ba6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024baa:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024bae:	9601      	str	r6, [sp, #4]
 8024bb0:	ea4a 0101 	orr.w	r1, sl, r1
 8024bb4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8024bb8:	fa1f f689 	uxth.w	r6, r9
 8024bbc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024bc0:	fb10 f90e 	smulbb	r9, r0, lr
 8024bc4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024bc8:	9602      	str	r6, [sp, #8]
 8024bca:	460e      	mov	r6, r1
 8024bcc:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8024bd0:	f1ce 0110 	rsb	r1, lr, #16
 8024bd4:	ea4a 0303 	orr.w	r3, sl, r3
 8024bd8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024bdc:	1a09      	subs	r1, r1, r0
 8024bde:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8024be2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024be6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024bea:	4343      	muls	r3, r0
 8024bec:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8024bf0:	9801      	ldr	r0, [sp, #4]
 8024bf2:	ea4a 0202 	orr.w	r2, sl, r2
 8024bf6:	fb01 3106 	mla	r1, r1, r6, r3
 8024bfa:	9e02      	ldr	r6, [sp, #8]
 8024bfc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024c00:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8024c04:	fb09 1302 	mla	r3, r9, r2, r1
 8024c08:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024c0c:	1b80      	subs	r0, r0, r6
 8024c0e:	9e01      	ldr	r6, [sp, #4]
 8024c10:	9a03      	ldr	r2, [sp, #12]
 8024c12:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024c16:	eba6 0608 	sub.w	r6, r6, r8
 8024c1a:	b280      	uxth	r0, r0
 8024c1c:	8811      	ldrh	r1, [r2, #0]
 8024c1e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8024c22:	b2b6      	uxth	r6, r6
 8024c24:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024c28:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024c2c:	4374      	muls	r4, r6
 8024c2e:	b292      	uxth	r2, r2
 8024c30:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024c34:	fb0c 4400 	mla	r4, ip, r0, r4
 8024c38:	9802      	ldr	r0, [sp, #8]
 8024c3a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8024c3e:	fb00 4505 	mla	r5, r0, r5, r4
 8024c42:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024c46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c4a:	1208      	asrs	r0, r1, #8
 8024c4c:	fb08 5707 	mla	r7, r8, r7, r5
 8024c50:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024c54:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024c58:	10cd      	asrs	r5, r1, #3
 8024c5a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024c5e:	ea43 0e0e 	orr.w	lr, r3, lr
 8024c62:	00c9      	lsls	r1, r1, #3
 8024c64:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024c68:	4357      	muls	r7, r2
 8024c6a:	fa1f f38e 	uxth.w	r3, lr
 8024c6e:	b2c9      	uxtb	r1, r1
 8024c70:	f107 0801 	add.w	r8, r7, #1
 8024c74:	121c      	asrs	r4, r3, #8
 8024c76:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8024c7a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024c7e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024c82:	b2ff      	uxtb	r7, r7
 8024c84:	fb10 f007 	smulbb	r0, r0, r7
 8024c88:	fb11 f107 	smulbb	r1, r1, r7
 8024c8c:	fb04 0402 	mla	r4, r4, r2, r0
 8024c90:	10d8      	asrs	r0, r3, #3
 8024c92:	fb15 f507 	smulbb	r5, r5, r7
 8024c96:	00db      	lsls	r3, r3, #3
 8024c98:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024c9c:	b2a4      	uxth	r4, r4
 8024c9e:	b2db      	uxtb	r3, r3
 8024ca0:	fb00 5002 	mla	r0, r0, r2, r5
 8024ca4:	fb03 1202 	mla	r2, r3, r2, r1
 8024ca8:	1c63      	adds	r3, r4, #1
 8024caa:	b280      	uxth	r0, r0
 8024cac:	b292      	uxth	r2, r2
 8024cae:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024cb2:	1c51      	adds	r1, r2, #1
 8024cb4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024cb8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024cbc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024cc0:	4313      	orrs	r3, r2
 8024cc2:	1c42      	adds	r2, r0, #1
 8024cc4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024cc8:	9a03      	ldr	r2, [sp, #12]
 8024cca:	0940      	lsrs	r0, r0, #5
 8024ccc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024cd0:	4303      	orrs	r3, r0
 8024cd2:	8013      	strh	r3, [r2, #0]
 8024cd4:	b005      	add	sp, #20
 8024cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cda:	280f      	cmp	r0, #15
 8024cdc:	f63f af33 	bhi.w	8024b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8024ce0:	4677      	mov	r7, lr
 8024ce2:	4675      	mov	r5, lr
 8024ce4:	4672      	mov	r2, lr
 8024ce6:	46f3      	mov	fp, lr
 8024ce8:	e753      	b.n	8024b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8024cea:	bf00      	nop
 8024cec:	080305ce 	.word	0x080305ce
 8024cf0:	08030b8d 	.word	0x08030b8d
 8024cf4:	080306b7 	.word	0x080306b7

08024cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cfc:	ed2d 8b08 	vpush	{d8-d11}
 8024d00:	b097      	sub	sp, #92	; 0x5c
 8024d02:	eeb0 aa40 	vmov.f32	s20, s0
 8024d06:	eef0 9a60 	vmov.f32	s19, s1
 8024d0a:	9214      	str	r2, [sp, #80]	; 0x50
 8024d0c:	eeb0 9a41 	vmov.f32	s18, s2
 8024d10:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024d12:	eeb0 8a62 	vmov.f32	s16, s5
 8024d16:	9308      	str	r3, [sp, #32]
 8024d18:	eef0 8a43 	vmov.f32	s17, s6
 8024d1c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024d20:	eef0 ba44 	vmov.f32	s23, s8
 8024d24:	9015      	str	r0, [sp, #84]	; 0x54
 8024d26:	eeb0 ba64 	vmov.f32	s22, s9
 8024d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8024d2c:	eef0 aa45 	vmov.f32	s21, s10
 8024d30:	6850      	ldr	r0, [r2, #4]
 8024d32:	9111      	str	r1, [sp, #68]	; 0x44
 8024d34:	6812      	ldr	r2, [r2, #0]
 8024d36:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024d3a:	fb00 1303 	mla	r3, r0, r3, r1
 8024d3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024d42:	9309      	str	r3, [sp, #36]	; 0x24
 8024d44:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d46:	681b      	ldr	r3, [r3, #0]
 8024d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d4c:	685b      	ldr	r3, [r3, #4]
 8024d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8024d50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024d54:	930a      	str	r3, [sp, #40]	; 0x28
 8024d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024d58:	2b00      	cmp	r3, #0
 8024d5a:	dc03      	bgt.n	8024d64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024d5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	f340 83cd 	ble.w	80254fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8024d64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d6e:	1e48      	subs	r0, r1, #1
 8024d70:	1e55      	subs	r5, r2, #1
 8024d72:	9b08      	ldr	r3, [sp, #32]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	f340 81a5 	ble.w	80250c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024d7a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024d7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d7e:	1436      	asrs	r6, r6, #16
 8024d80:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024d84:	d406      	bmi.n	8024d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d86:	4286      	cmp	r6, r0
 8024d88:	da04      	bge.n	8024d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	db02      	blt.n	8024d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d8e:	42ab      	cmp	r3, r5
 8024d90:	f2c0 8199 	blt.w	80250c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8024d94:	3601      	adds	r6, #1
 8024d96:	f100 8186 	bmi.w	80250a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d9a:	42b1      	cmp	r1, r6
 8024d9c:	f2c0 8183 	blt.w	80250a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024da0:	3301      	adds	r3, #1
 8024da2:	f100 8180 	bmi.w	80250a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024da6:	429a      	cmp	r2, r3
 8024da8:	f2c0 817d 	blt.w	80250a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024dac:	9b08      	ldr	r3, [sp, #32]
 8024dae:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024db4:	9313      	str	r3, [sp, #76]	; 0x4c
 8024db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	f340 81a6 	ble.w	802510a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024dbe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024dc0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8024dc2:	1418      	asrs	r0, r3, #16
 8024dc4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024dc6:	142d      	asrs	r5, r5, #16
 8024dc8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024dcc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024dce:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024dd2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024dd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024dd8:	f100 81fa 	bmi.w	80251d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024ddc:	f102 3eff 	add.w	lr, r2, #4294967295
 8024de0:	4575      	cmp	r5, lr
 8024de2:	f280 81f5 	bge.w	80251d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024de6:	2800      	cmp	r0, #0
 8024de8:	f2c0 81f2 	blt.w	80251d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024dec:	f103 3eff 	add.w	lr, r3, #4294967295
 8024df0:	4570      	cmp	r0, lr
 8024df2:	f280 81ed 	bge.w	80251d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024df6:	b212      	sxth	r2, r2
 8024df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024dfa:	fa1f fe81 	uxth.w	lr, r1
 8024dfe:	fb00 5002 	mla	r0, r0, r2, r5
 8024e02:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024e06:	eb03 0a00 	add.w	sl, r3, r0
 8024e0a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024e0e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024e12:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024e16:	b29b      	uxth	r3, r3
 8024e18:	f1bc 0f00 	cmp.w	ip, #0
 8024e1c:	f000 81bb 	beq.w	8025196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024e20:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024e24:	eb0a 0b02 	add.w	fp, sl, r2
 8024e28:	fa1f fa8c 	uxth.w	sl, ip
 8024e2c:	940d      	str	r4, [sp, #52]	; 0x34
 8024e2e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024e32:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024e36:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024e3a:	eba5 050e 	sub.w	r5, r5, lr
 8024e3e:	940e      	str	r4, [sp, #56]	; 0x38
 8024e40:	fa1f fa8a 	uxth.w	sl, sl
 8024e44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024e46:	b2ad      	uxth	r5, r5
 8024e48:	eba3 030a 	sub.w	r3, r3, sl
 8024e4c:	fb08 f505 	mul.w	r5, r8, r5
 8024e50:	b29b      	uxth	r3, r3
 8024e52:	fb09 5303 	mla	r3, r9, r3, r5
 8024e56:	fb0a 3304 	mla	r3, sl, r4, r3
 8024e5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024e5c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024e60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e64:	2b00      	cmp	r3, #0
 8024e66:	f000 8111 	beq.w	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024e6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024e70:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024e74:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024e78:	f000 8192 	beq.w	80251a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024e7c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024e80:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024e84:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024e88:	fb0a fe0e 	mul.w	lr, sl, lr
 8024e8c:	fb09 f000 	mul.w	r0, r9, r0
 8024e90:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024e94:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024e98:	f100 0b20 	add.w	fp, r0, #32
 8024e9c:	44ce      	add	lr, r9
 8024e9e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024ea2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024ea6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024eaa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024eae:	ea4e 0909 	orr.w	r9, lr, r9
 8024eb2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024eb6:	8868      	ldrh	r0, [r5, #2]
 8024eb8:	d019      	beq.n	8024eee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8024eba:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024ebe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024ec2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024ec6:	fb0a fe0e 	mul.w	lr, sl, lr
 8024eca:	fb08 f800 	mul.w	r8, r8, r0
 8024ece:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024ed2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024ed6:	f108 0b20 	add.w	fp, r8, #32
 8024eda:	4486      	add	lr, r0
 8024edc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024ee0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024ee4:	0a00      	lsrs	r0, r0, #8
 8024ee6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024eea:	ea4e 0000 	orr.w	r0, lr, r0
 8024eee:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024ef2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024ef6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024efa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024efe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024f02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024f06:	ea4e 0909 	orr.w	r9, lr, r9
 8024f0a:	ea4a 0000 	orr.w	r0, sl, r0
 8024f0e:	f1bc 0f00 	cmp.w	ip, #0
 8024f12:	f000 8147 	beq.w	80251a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8024f16:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024f1a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f1c:	3a01      	subs	r2, #1
 8024f1e:	2cff      	cmp	r4, #255	; 0xff
 8024f20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024f24:	f102 0202 	add.w	r2, r2, #2
 8024f28:	eb05 0e02 	add.w	lr, r5, r2
 8024f2c:	5aaa      	ldrh	r2, [r5, r2]
 8024f2e:	d018      	beq.n	8024f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024f30:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024f34:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024f38:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024f3c:	fb04 fa02 	mul.w	sl, r4, r2
 8024f40:	fb08 f805 	mul.w	r8, r8, r5
 8024f44:	f10a 0520 	add.w	r5, sl, #32
 8024f48:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024f4c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024f50:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024f54:	4442      	add	r2, r8
 8024f56:	0a2d      	lsrs	r5, r5, #8
 8024f58:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024f5c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024f60:	432a      	orrs	r2, r5
 8024f62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f64:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024f68:	2cff      	cmp	r4, #255	; 0xff
 8024f6a:	d01a      	beq.n	8024fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8024f6c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8024f70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024f74:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024f78:	fb04 fa05 	mul.w	sl, r4, r5
 8024f7c:	fb08 f80e 	mul.w	r8, r8, lr
 8024f80:	f10a 0e20 	add.w	lr, sl, #32
 8024f84:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024f88:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024f8c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024f90:	4445      	add	r5, r8
 8024f92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f96:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024f9a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024f9e:	ea45 050e 	orr.w	r5, r5, lr
 8024fa2:	fb1c fe01 	smulbb	lr, ip, r1
 8024fa6:	f1cc 0810 	rsb	r8, ip, #16
 8024faa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024fae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024fb2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024fb6:	eba8 0801 	sub.w	r8, r8, r1
 8024fba:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024fbe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024fc2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024fc6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024fca:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024fce:	ea4a 0202 	orr.w	r2, sl, r2
 8024fd2:	4341      	muls	r1, r0
 8024fd4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024fd8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024fdc:	fb09 1108 	mla	r1, r9, r8, r1
 8024fe0:	ea4b 0505 	orr.w	r5, fp, r5
 8024fe4:	fb0c 1102 	mla	r1, ip, r2, r1
 8024fe8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8024fec:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024ff0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024ff4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ff8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024ffc:	ea42 0e0e 	orr.w	lr, r2, lr
 8025000:	fa1f f28e 	uxth.w	r2, lr
 8025004:	2bff      	cmp	r3, #255	; 0xff
 8025006:	d103      	bne.n	8025010 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025008:	9912      	ldr	r1, [sp, #72]	; 0x48
 802500a:	29ff      	cmp	r1, #255	; 0xff
 802500c:	f000 80de 	beq.w	80251cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025010:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025012:	8838      	ldrh	r0, [r7, #0]
 8025014:	434b      	muls	r3, r1
 8025016:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025018:	1205      	asrs	r5, r0, #8
 802501a:	f103 0c01 	add.w	ip, r3, #1
 802501e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025022:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025026:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 802502a:	1213      	asrs	r3, r2, #8
 802502c:	fa5f fc8c 	uxtb.w	ip, ip
 8025030:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025034:	fb15 f50c 	smulbb	r5, r5, ip
 8025038:	fb03 5301 	mla	r3, r3, r1, r5
 802503c:	10d1      	asrs	r1, r2, #3
 802503e:	00d2      	lsls	r2, r2, #3
 8025040:	b29d      	uxth	r5, r3
 8025042:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025046:	10c3      	asrs	r3, r0, #3
 8025048:	00c0      	lsls	r0, r0, #3
 802504a:	b2d2      	uxtb	r2, r2
 802504c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025050:	b2c0      	uxtb	r0, r0
 8025052:	fb13 f30c 	smulbb	r3, r3, ip
 8025056:	fb10 f00c 	smulbb	r0, r0, ip
 802505a:	fb01 3104 	mla	r1, r1, r4, r3
 802505e:	1c6b      	adds	r3, r5, #1
 8025060:	fb02 0204 	mla	r2, r2, r4, r0
 8025064:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8025068:	b292      	uxth	r2, r2
 802506a:	b289      	uxth	r1, r1
 802506c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025070:	1c50      	adds	r0, r2, #1
 8025072:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025076:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802507a:	4313      	orrs	r3, r2
 802507c:	1c4a      	adds	r2, r1, #1
 802507e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025082:	0949      	lsrs	r1, r1, #5
 8025084:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025088:	430b      	orrs	r3, r1
 802508a:	803b      	strh	r3, [r7, #0]
 802508c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802508e:	3702      	adds	r7, #2
 8025090:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025092:	4413      	add	r3, r2
 8025094:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025096:	9329      	str	r3, [sp, #164]	; 0xa4
 8025098:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802509a:	441a      	add	r2, r3
 802509c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802509e:	3b01      	subs	r3, #1
 80250a0:	922a      	str	r2, [sp, #168]	; 0xa8
 80250a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80250a4:	e687      	b.n	8024db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80250a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80250a8:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80250aa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80250ac:	4433      	add	r3, r6
 80250ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80250b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250b2:	441c      	add	r4, r3
 80250b4:	9b08      	ldr	r3, [sp, #32]
 80250b6:	3b01      	subs	r3, #1
 80250b8:	942a      	str	r4, [sp, #168]	; 0xa8
 80250ba:	9308      	str	r3, [sp, #32]
 80250bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250be:	3302      	adds	r3, #2
 80250c0:	9309      	str	r3, [sp, #36]	; 0x24
 80250c2:	e656      	b.n	8024d72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80250c4:	d028      	beq.n	8025118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80250c6:	9b08      	ldr	r3, [sp, #32]
 80250c8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80250ca:	3b01      	subs	r3, #1
 80250cc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80250ce:	fb00 5003 	mla	r0, r0, r3, r5
 80250d2:	1400      	asrs	r0, r0, #16
 80250d4:	f53f ae6a 	bmi.w	8024dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80250d8:	3901      	subs	r1, #1
 80250da:	4288      	cmp	r0, r1
 80250dc:	f6bf ae66 	bge.w	8024dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80250e0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80250e2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80250e4:	fb01 0303 	mla	r3, r1, r3, r0
 80250e8:	141b      	asrs	r3, r3, #16
 80250ea:	f53f ae5f 	bmi.w	8024dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80250ee:	3a01      	subs	r2, #1
 80250f0:	4293      	cmp	r3, r2
 80250f2:	f6bf ae5b 	bge.w	8024dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80250f6:	9b08      	ldr	r3, [sp, #32]
 80250f8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80250fc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025100:	9313      	str	r3, [sp, #76]	; 0x4c
 8025102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025104:	2b00      	cmp	r3, #0
 8025106:	f300 8082 	bgt.w	802520e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802510a:	9b08      	ldr	r3, [sp, #32]
 802510c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025112:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025116:	9309      	str	r3, [sp, #36]	; 0x24
 8025118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802511a:	2b00      	cmp	r3, #0
 802511c:	f340 81ef 	ble.w	80254fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025124:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025126:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802512a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802512e:	eef0 6a48 	vmov.f32	s13, s16
 8025132:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025136:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802513a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802513e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025142:	eef0 6a68 	vmov.f32	s13, s17
 8025146:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802514a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802514e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025152:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025156:	ee37 8a48 	vsub.f32	s16, s14, s16
 802515a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802515e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025162:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025166:	ee18 2a10 	vmov	r2, s16
 802516a:	eeb0 8a47 	vmov.f32	s16, s14
 802516e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025172:	ee18 2a90 	vmov	r2, s17
 8025176:	932b      	str	r3, [sp, #172]	; 0xac
 8025178:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802517a:	eef0 8a67 	vmov.f32	s17, s15
 802517e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025182:	932c      	str	r3, [sp, #176]	; 0xb0
 8025184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025188:	3b01      	subs	r3, #1
 802518a:	9311      	str	r3, [sp, #68]	; 0x44
 802518c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802518e:	bf08      	it	eq
 8025190:	4613      	moveq	r3, r2
 8025192:	9308      	str	r3, [sp, #32]
 8025194:	e5df      	b.n	8024d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025196:	fb08 f505 	mul.w	r5, r8, r5
 802519a:	fb09 5303 	mla	r3, r9, r3, r5
 802519e:	e65f      	b.n	8024e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80251a0:	4681      	mov	r9, r0
 80251a2:	e686      	b.n	8024eb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80251a4:	f1c1 0210 	rsb	r2, r1, #16
 80251a8:	4341      	muls	r1, r0
 80251aa:	fb09 1902 	mla	r9, r9, r2, r1
 80251ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80251b2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80251b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80251ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80251be:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80251c2:	ea42 0909 	orr.w	r9, r2, r9
 80251c6:	fa1f f289 	uxth.w	r2, r9
 80251ca:	e71b      	b.n	8025004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80251cc:	803a      	strh	r2, [r7, #0]
 80251ce:	e75d      	b.n	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80251d0:	f115 0e01 	adds.w	lr, r5, #1
 80251d4:	f53f af5a 	bmi.w	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80251d8:	4572      	cmp	r2, lr
 80251da:	f6ff af57 	blt.w	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80251de:	f110 0e01 	adds.w	lr, r0, #1
 80251e2:	f53f af53 	bmi.w	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80251e6:	4573      	cmp	r3, lr
 80251e8:	f6ff af50 	blt.w	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80251ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80251ee:	b21b      	sxth	r3, r3
 80251f0:	b212      	sxth	r2, r2
 80251f2:	9502      	str	r5, [sp, #8]
 80251f4:	9301      	str	r3, [sp, #4]
 80251f6:	9200      	str	r2, [sp, #0]
 80251f8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80251fc:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025200:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025204:	4639      	mov	r1, r7
 8025206:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025208:	f7ff fbd0 	bl	80249ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802520c:	e73e      	b.n	802508c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802520e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025210:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025214:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025216:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802521a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802521c:	fa1f fc82 	uxth.w	ip, r2
 8025220:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025226:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802522a:	141f      	asrs	r7, r3, #16
 802522c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802522e:	141b      	asrs	r3, r3, #16
 8025230:	fb01 3707 	mla	r7, r1, r7, r3
 8025234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025236:	eb03 0a07 	add.w	sl, r3, r7
 802523a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802523e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025242:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025246:	b29b      	uxth	r3, r3
 8025248:	2d00      	cmp	r5, #0
 802524a:	f000 813d 	beq.w	80254c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802524e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025252:	eb0a 0b01 	add.w	fp, sl, r1
 8025256:	fa1f fa85 	uxth.w	sl, r5
 802525a:	940f      	str	r4, [sp, #60]	; 0x3c
 802525c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025260:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025264:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025268:	eba0 000c 	sub.w	r0, r0, ip
 802526c:	9410      	str	r4, [sp, #64]	; 0x40
 802526e:	fa1f fa8a 	uxth.w	sl, sl
 8025272:	b280      	uxth	r0, r0
 8025274:	eba3 030a 	sub.w	r3, r3, sl
 8025278:	fb08 f000 	mul.w	r0, r8, r0
 802527c:	b29b      	uxth	r3, r3
 802527e:	fb09 0303 	mla	r3, r9, r3, r0
 8025282:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025284:	fb0a 3300 	mla	r3, sl, r0, r3
 8025288:	fb0c 3304 	mla	r3, ip, r4, r3
 802528c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025290:	2b00      	cmp	r3, #0
 8025292:	f000 810b 	beq.w	80254ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8025296:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025298:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802529c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802529e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80252a2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80252a6:	f000 8114 	beq.w	80254d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80252aa:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80252ae:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80252b2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80252b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80252ba:	fb09 f707 	mul.w	r7, r9, r7
 80252be:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80252c2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80252c6:	f107 0b20 	add.w	fp, r7, #32
 80252ca:	44cc      	add	ip, r9
 80252cc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80252d0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80252d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80252d8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80252dc:	ea4c 0909 	orr.w	r9, ip, r9
 80252e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80252e4:	8847      	ldrh	r7, [r0, #2]
 80252e6:	d019      	beq.n	802531c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80252e8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80252ec:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80252f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80252f4:	fb0a fc0c 	mul.w	ip, sl, ip
 80252f8:	fb08 f807 	mul.w	r8, r8, r7
 80252fc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025300:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025304:	f108 0b20 	add.w	fp, r8, #32
 8025308:	44bc      	add	ip, r7
 802530a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802530e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025312:	0a3f      	lsrs	r7, r7, #8
 8025314:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025318:	ea4c 0707 	orr.w	r7, ip, r7
 802531c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025320:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025324:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025328:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802532c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025330:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025334:	ea4c 0909 	orr.w	r9, ip, r9
 8025338:	ea4a 0707 	orr.w	r7, sl, r7
 802533c:	2d00      	cmp	r5, #0
 802533e:	f000 80ca 	beq.w	80254d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025342:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025346:	3901      	subs	r1, #1
 8025348:	0049      	lsls	r1, r1, #1
 802534a:	3102      	adds	r1, #2
 802534c:	eb00 0c01 	add.w	ip, r0, r1
 8025350:	5a41      	ldrh	r1, [r0, r1]
 8025352:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025354:	28ff      	cmp	r0, #255	; 0xff
 8025356:	d019      	beq.n	802538c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8025358:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802535c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802535e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025362:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025366:	fb04 fa01 	mul.w	sl, r4, r1
 802536a:	fb08 f800 	mul.w	r8, r8, r0
 802536e:	f10a 0020 	add.w	r0, sl, #32
 8025372:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025376:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802537a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802537e:	4441      	add	r1, r8
 8025380:	0a00      	lsrs	r0, r0, #8
 8025382:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025386:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802538a:	4301      	orrs	r1, r0
 802538c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802538e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025392:	2cff      	cmp	r4, #255	; 0xff
 8025394:	d01a      	beq.n	80253cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8025396:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802539a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802539e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80253a2:	fb04 fa00 	mul.w	sl, r4, r0
 80253a6:	fb08 f80c 	mul.w	r8, r8, ip
 80253aa:	f10a 0c20 	add.w	ip, sl, #32
 80253ae:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80253b2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80253b6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80253ba:	4440      	add	r0, r8
 80253bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253c0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80253c4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80253c8:	ea40 000c 	orr.w	r0, r0, ip
 80253cc:	fb15 fc02 	smulbb	ip, r5, r2
 80253d0:	f1c5 0810 	rsb	r8, r5, #16
 80253d4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80253d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80253dc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80253e0:	eba8 0802 	sub.w	r8, r8, r2
 80253e4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80253e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80253ec:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80253f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80253f4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80253f8:	ea4a 0101 	orr.w	r1, sl, r1
 80253fc:	437a      	muls	r2, r7
 80253fe:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025402:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025406:	fb09 2208 	mla	r2, r9, r8, r2
 802540a:	ea4b 0000 	orr.w	r0, fp, r0
 802540e:	fb05 2201 	mla	r2, r5, r1, r2
 8025412:	fb0c 2200 	mla	r2, ip, r0, r2
 8025416:	0d57      	lsrs	r7, r2, #21
 8025418:	0952      	lsrs	r2, r2, #5
 802541a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802541e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025422:	433a      	orrs	r2, r7
 8025424:	2bff      	cmp	r3, #255	; 0xff
 8025426:	b292      	uxth	r2, r2
 8025428:	d102      	bne.n	8025430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802542a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802542c:	29ff      	cmp	r1, #255	; 0xff
 802542e:	d063      	beq.n	80254f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8025430:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025432:	1215      	asrs	r5, r2, #8
 8025434:	f8be 1000 	ldrh.w	r1, [lr]
 8025438:	4343      	muls	r3, r0
 802543a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802543c:	10cf      	asrs	r7, r1, #3
 802543e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025442:	1c58      	adds	r0, r3, #1
 8025444:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025448:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802544c:	1208      	asrs	r0, r1, #8
 802544e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025452:	00c9      	lsls	r1, r1, #3
 8025454:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025458:	b2db      	uxtb	r3, r3
 802545a:	b2c9      	uxtb	r1, r1
 802545c:	fb10 f003 	smulbb	r0, r0, r3
 8025460:	fb11 f103 	smulbb	r1, r1, r3
 8025464:	fb05 0504 	mla	r5, r5, r4, r0
 8025468:	10d0      	asrs	r0, r2, #3
 802546a:	fb17 f703 	smulbb	r7, r7, r3
 802546e:	00d2      	lsls	r2, r2, #3
 8025470:	b2ad      	uxth	r5, r5
 8025472:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025476:	b2d2      	uxtb	r2, r2
 8025478:	fb00 7004 	mla	r0, r0, r4, r7
 802547c:	1c6b      	adds	r3, r5, #1
 802547e:	fb02 1204 	mla	r2, r2, r4, r1
 8025482:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025486:	b292      	uxth	r2, r2
 8025488:	b280      	uxth	r0, r0
 802548a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802548e:	1c57      	adds	r7, r2, #1
 8025490:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025494:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025498:	433d      	orrs	r5, r7
 802549a:	1c47      	adds	r7, r0, #1
 802549c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80254a0:	097f      	lsrs	r7, r7, #5
 80254a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254a6:	433d      	orrs	r5, r7
 80254a8:	f8ae 5000 	strh.w	r5, [lr]
 80254ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80254ae:	f10e 0e02 	add.w	lr, lr, #2
 80254b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80254b4:	4413      	add	r3, r2
 80254b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80254b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80254ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254bc:	441a      	add	r2, r3
 80254be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80254c0:	3b01      	subs	r3, #1
 80254c2:	922a      	str	r2, [sp, #168]	; 0xa8
 80254c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80254c6:	e61c      	b.n	8025102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80254c8:	fb08 f000 	mul.w	r0, r8, r0
 80254cc:	fb09 0303 	mla	r3, r9, r3, r0
 80254d0:	e6dc      	b.n	802528c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80254d2:	46b9      	mov	r9, r7
 80254d4:	e704      	b.n	80252e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80254d6:	f1c2 0110 	rsb	r1, r2, #16
 80254da:	437a      	muls	r2, r7
 80254dc:	fb09 2901 	mla	r9, r9, r1, r2
 80254e0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80254e4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80254e8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80254ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80254f0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80254f4:	4302      	orrs	r2, r0
 80254f6:	e795      	b.n	8025424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80254f8:	f8ae 2000 	strh.w	r2, [lr]
 80254fc:	e7d6      	b.n	80254ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80254fe:	b017      	add	sp, #92	; 0x5c
 8025500:	ecbd 8b08 	vpop	{d8-d11}
 8025504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025508 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802550c:	b085      	sub	sp, #20
 802550e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025512:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025516:	9103      	str	r1, [sp, #12]
 8025518:	2d00      	cmp	r5, #0
 802551a:	fb05 7106 	mla	r1, r5, r6, r7
 802551e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025522:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025526:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802552a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802552e:	eb02 0901 	add.w	r9, r2, r1
 8025532:	9401      	str	r4, [sp, #4]
 8025534:	f2c0 80c0 	blt.w	80256b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8025538:	45a8      	cmp	r8, r5
 802553a:	f340 80bd 	ble.w	80256b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802553e:	2f00      	cmp	r7, #0
 8025540:	f2c0 80b6 	blt.w	80256b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8025544:	42be      	cmp	r6, r7
 8025546:	f340 80b3 	ble.w	80256b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802554a:	f812 c001 	ldrb.w	ip, [r2, r1]
 802554e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8025552:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025556:	d019      	beq.n	802558c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8025558:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802555c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025560:	435a      	muls	r2, r3
 8025562:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025566:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802556a:	fb0c f403 	mul.w	r4, ip, r3
 802556e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025572:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025576:	441a      	add	r2, r3
 8025578:	f104 0320 	add.w	r3, r4, #32
 802557c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025580:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025584:	0a1b      	lsrs	r3, r3, #8
 8025586:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802558a:	4319      	orrs	r1, r3
 802558c:	b289      	uxth	r1, r1
 802558e:	1c7b      	adds	r3, r7, #1
 8025590:	f100 8097 	bmi.w	80256c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8025594:	429e      	cmp	r6, r3
 8025596:	f340 8094 	ble.w	80256c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802559a:	2800      	cmp	r0, #0
 802559c:	f000 8094 	beq.w	80256c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80255a0:	f899 4001 	ldrb.w	r4, [r9, #1]
 80255a4:	9b01      	ldr	r3, [sp, #4]
 80255a6:	2cff      	cmp	r4, #255	; 0xff
 80255a8:	885b      	ldrh	r3, [r3, #2]
 80255aa:	d01b      	beq.n	80255e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80255ac:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80255b0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80255b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80255b8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80255bc:	fb0a f202 	mul.w	r2, sl, r2
 80255c0:	fb04 fa03 	mul.w	sl, r4, r3
 80255c4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80255c8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80255cc:	441a      	add	r2, r3
 80255ce:	f10a 0320 	add.w	r3, sl, #32
 80255d2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80255d6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80255da:	0a1b      	lsrs	r3, r3, #8
 80255dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80255e0:	ea4b 0303 	orr.w	r3, fp, r3
 80255e4:	b29b      	uxth	r3, r3
 80255e6:	3501      	adds	r5, #1
 80255e8:	d474      	bmi.n	80256d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80255ea:	45a8      	cmp	r8, r5
 80255ec:	dd72      	ble.n	80256d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80255ee:	f1be 0f00 	cmp.w	lr, #0
 80255f2:	f000 8111 	beq.w	8025818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 80255f6:	2f00      	cmp	r7, #0
 80255f8:	db69      	blt.n	80256ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80255fa:	42be      	cmp	r6, r7
 80255fc:	dd67      	ble.n	80256ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80255fe:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025602:	9a01      	ldr	r2, [sp, #4]
 8025604:	2dff      	cmp	r5, #255	; 0xff
 8025606:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802560a:	d01c      	beq.n	8025646 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 802560c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025610:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025614:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025618:	fb08 f802 	mul.w	r8, r8, r2
 802561c:	fb05 fa0b 	mul.w	sl, r5, fp
 8025620:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025624:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025628:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802562c:	4490      	add	r8, r2
 802562e:	f10a 0220 	add.w	r2, sl, #32
 8025632:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025636:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802563a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802563e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025642:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025646:	fa1f fb8b 	uxth.w	fp, fp
 802564a:	3701      	adds	r7, #1
 802564c:	d447      	bmi.n	80256de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802564e:	42be      	cmp	r6, r7
 8025650:	dd45      	ble.n	80256de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8025652:	2800      	cmp	r0, #0
 8025654:	d046      	beq.n	80256e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8025656:	3601      	adds	r6, #1
 8025658:	9a01      	ldr	r2, [sp, #4]
 802565a:	f819 7006 	ldrb.w	r7, [r9, r6]
 802565e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025662:	2fff      	cmp	r7, #255	; 0xff
 8025664:	d01a      	beq.n	802569c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8025666:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802566a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802566e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025672:	fb08 f806 	mul.w	r8, r8, r6
 8025676:	fb07 f902 	mul.w	r9, r7, r2
 802567a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802567e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025682:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025686:	44b0      	add	r8, r6
 8025688:	f109 0620 	add.w	r6, r9, #32
 802568c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025690:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025694:	0a36      	lsrs	r6, r6, #8
 8025696:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802569a:	4332      	orrs	r2, r6
 802569c:	b292      	uxth	r2, r2
 802569e:	280f      	cmp	r0, #15
 80256a0:	d922      	bls.n	80256e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80256a2:	4b61      	ldr	r3, [pc, #388]	; (8025828 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80256a4:	f240 210d 	movw	r1, #525	; 0x20d
 80256a8:	4a60      	ldr	r2, [pc, #384]	; (802582c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80256aa:	4861      	ldr	r0, [pc, #388]	; (8025830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80256ac:	f005 f872 	bl	802a794 <__assert_func>
 80256b0:	f04f 0c00 	mov.w	ip, #0
 80256b4:	4661      	mov	r1, ip
 80256b6:	e76a      	b.n	802558e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80256b8:	2400      	movs	r4, #0
 80256ba:	46a4      	mov	ip, r4
 80256bc:	4623      	mov	r3, r4
 80256be:	4621      	mov	r1, r4
 80256c0:	e791      	b.n	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80256c2:	2400      	movs	r4, #0
 80256c4:	4623      	mov	r3, r4
 80256c6:	e78e      	b.n	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80256c8:	4604      	mov	r4, r0
 80256ca:	4603      	mov	r3, r0
 80256cc:	e78b      	b.n	80255e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80256ce:	2500      	movs	r5, #0
 80256d0:	46ab      	mov	fp, r5
 80256d2:	e7ba      	b.n	802564a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80256d4:	2700      	movs	r7, #0
 80256d6:	463d      	mov	r5, r7
 80256d8:	463a      	mov	r2, r7
 80256da:	46bb      	mov	fp, r7
 80256dc:	e7df      	b.n	802569e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80256de:	2700      	movs	r7, #0
 80256e0:	463a      	mov	r2, r7
 80256e2:	e7dc      	b.n	802569e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80256e4:	4607      	mov	r7, r0
 80256e6:	4602      	mov	r2, r0
 80256e8:	f1be 0f0f 	cmp.w	lr, #15
 80256ec:	d8d9      	bhi.n	80256a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80256ee:	b286      	uxth	r6, r0
 80256f0:	fa1f f98e 	uxth.w	r9, lr
 80256f4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80256f8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80256fc:	fb06 f809 	mul.w	r8, r6, r9
 8025700:	0136      	lsls	r6, r6, #4
 8025702:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025706:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802570a:	9601      	str	r6, [sp, #4]
 802570c:	ea4a 0101 	orr.w	r1, sl, r1
 8025710:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025714:	fa1f f689 	uxth.w	r6, r9
 8025718:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802571c:	fb10 f90e 	smulbb	r9, r0, lr
 8025720:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025724:	9602      	str	r6, [sp, #8]
 8025726:	460e      	mov	r6, r1
 8025728:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802572c:	f1ce 0110 	rsb	r1, lr, #16
 8025730:	ea4a 0303 	orr.w	r3, sl, r3
 8025734:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025738:	1a09      	subs	r1, r1, r0
 802573a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802573e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025742:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025746:	4343      	muls	r3, r0
 8025748:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802574c:	ea4a 0202 	orr.w	r2, sl, r2
 8025750:	9802      	ldr	r0, [sp, #8]
 8025752:	fb01 3106 	mla	r1, r1, r6, r3
 8025756:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802575a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802575e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025762:	fb09 1302 	mla	r3, r9, r2, r1
 8025766:	9901      	ldr	r1, [sp, #4]
 8025768:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802576c:	9a03      	ldr	r2, [sp, #12]
 802576e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025772:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025776:	8812      	ldrh	r2, [r2, #0]
 8025778:	1a09      	subs	r1, r1, r0
 802577a:	9801      	ldr	r0, [sp, #4]
 802577c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025780:	eba0 0608 	sub.w	r6, r0, r8
 8025784:	b289      	uxth	r1, r1
 8025786:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802578a:	b2b6      	uxth	r6, r6
 802578c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025790:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025794:	4374      	muls	r4, r6
 8025796:	10d0      	asrs	r0, r2, #3
 8025798:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802579c:	fb0c 4401 	mla	r4, ip, r1, r4
 80257a0:	9902      	ldr	r1, [sp, #8]
 80257a2:	ea43 0e0e 	orr.w	lr, r3, lr
 80257a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80257aa:	fb01 4505 	mla	r5, r1, r5, r4
 80257ae:	1211      	asrs	r1, r2, #8
 80257b0:	00d2      	lsls	r2, r2, #3
 80257b2:	fb08 5707 	mla	r7, r8, r7, r5
 80257b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80257ba:	b2d2      	uxtb	r2, r2
 80257bc:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80257c0:	fa1f f38e 	uxth.w	r3, lr
 80257c4:	b2ff      	uxtb	r7, r7
 80257c6:	4379      	muls	r1, r7
 80257c8:	4378      	muls	r0, r7
 80257ca:	4357      	muls	r7, r2
 80257cc:	1c4a      	adds	r2, r1, #1
 80257ce:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80257d2:	1219      	asrs	r1, r3, #8
 80257d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80257d8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80257dc:	4a15      	ldr	r2, [pc, #84]	; (8025834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 80257de:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80257e2:	1c42      	adds	r2, r0, #1
 80257e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80257e8:	10da      	asrs	r2, r3, #3
 80257ea:	00db      	lsls	r3, r3, #3
 80257ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80257f0:	b2db      	uxtb	r3, r3
 80257f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80257f6:	00d2      	lsls	r2, r2, #3
 80257f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257fc:	430a      	orrs	r2, r1
 80257fe:	1c79      	adds	r1, r7, #1
 8025800:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025804:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025808:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802580c:	4313      	orrs	r3, r2
 802580e:	9a03      	ldr	r2, [sp, #12]
 8025810:	8013      	strh	r3, [r2, #0]
 8025812:	b005      	add	sp, #20
 8025814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025818:	280f      	cmp	r0, #15
 802581a:	f63f af42 	bhi.w	80256a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802581e:	4677      	mov	r7, lr
 8025820:	4675      	mov	r5, lr
 8025822:	4672      	mov	r2, lr
 8025824:	46f3      	mov	fp, lr
 8025826:	e762      	b.n	80256ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8025828:	080305ce 	.word	0x080305ce
 802582c:	08030b8d 	.word	0x08030b8d
 8025830:	080306b7 	.word	0x080306b7
 8025834:	fffff800 	.word	0xfffff800

08025838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802583c:	ed2d 8b08 	vpush	{d8-d11}
 8025840:	b093      	sub	sp, #76	; 0x4c
 8025842:	eeb0 aa40 	vmov.f32	s20, s0
 8025846:	eef0 9a60 	vmov.f32	s19, s1
 802584a:	9210      	str	r2, [sp, #64]	; 0x40
 802584c:	eeb0 9a41 	vmov.f32	s18, s2
 8025850:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025852:	eeb0 8a62 	vmov.f32	s16, s5
 8025856:	9011      	str	r0, [sp, #68]	; 0x44
 8025858:	eef0 8a43 	vmov.f32	s17, s6
 802585c:	6850      	ldr	r0, [r2, #4]
 802585e:	eef0 ba44 	vmov.f32	s23, s8
 8025862:	910e      	str	r1, [sp, #56]	; 0x38
 8025864:	eeb0 ba64 	vmov.f32	s22, s9
 8025868:	9306      	str	r3, [sp, #24]
 802586a:	eef0 aa45 	vmov.f32	s21, s10
 802586e:	6812      	ldr	r2, [r2, #0]
 8025870:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025874:	fb00 1303 	mla	r3, r0, r3, r1
 8025878:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802587c:	9307      	str	r3, [sp, #28]
 802587e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025880:	681b      	ldr	r3, [r3, #0]
 8025882:	9308      	str	r3, [sp, #32]
 8025884:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025886:	685b      	ldr	r3, [r3, #4]
 8025888:	9309      	str	r3, [sp, #36]	; 0x24
 802588a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802588c:	2b00      	cmp	r3, #0
 802588e:	dc03      	bgt.n	8025898 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025892:	2b00      	cmp	r3, #0
 8025894:	f340 83b8 	ble.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8025898:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802589a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802589e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258a2:	1e48      	subs	r0, r1, #1
 80258a4:	1e55      	subs	r5, r2, #1
 80258a6:	9b06      	ldr	r3, [sp, #24]
 80258a8:	2b00      	cmp	r3, #0
 80258aa:	f340 819b 	ble.w	8025be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80258ae:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80258b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80258b2:	1436      	asrs	r6, r6, #16
 80258b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80258b8:	d406      	bmi.n	80258c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80258ba:	4286      	cmp	r6, r0
 80258bc:	da04      	bge.n	80258c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80258be:	2b00      	cmp	r3, #0
 80258c0:	db02      	blt.n	80258c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80258c2:	42ab      	cmp	r3, r5
 80258c4:	f2c0 818f 	blt.w	8025be6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80258c8:	3601      	adds	r6, #1
 80258ca:	f100 817c 	bmi.w	8025bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80258ce:	42b1      	cmp	r1, r6
 80258d0:	f2c0 8179 	blt.w	8025bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80258d4:	3301      	adds	r3, #1
 80258d6:	f100 8176 	bmi.w	8025bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80258da:	429a      	cmp	r2, r3
 80258dc:	f2c0 8173 	blt.w	8025bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80258e0:	9b06      	ldr	r3, [sp, #24]
 80258e2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80258e6:	9f07      	ldr	r7, [sp, #28]
 80258e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80258ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	f340 819c 	ble.w	8025c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80258f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80258f4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80258f6:	1418      	asrs	r0, r3, #16
 80258f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80258fa:	142d      	asrs	r5, r5, #16
 80258fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025902:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025906:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025908:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802590c:	f100 81f0 	bmi.w	8025cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025910:	f102 3eff 	add.w	lr, r2, #4294967295
 8025914:	4575      	cmp	r5, lr
 8025916:	f280 81eb 	bge.w	8025cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802591a:	2800      	cmp	r0, #0
 802591c:	f2c0 81e8 	blt.w	8025cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025920:	f103 3eff 	add.w	lr, r3, #4294967295
 8025924:	4570      	cmp	r0, lr
 8025926:	f280 81e3 	bge.w	8025cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802592a:	b212      	sxth	r2, r2
 802592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802592e:	fa1f fe81 	uxth.w	lr, r1
 8025932:	fb00 5002 	mla	r0, r0, r2, r5
 8025936:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802593a:	eb03 0a00 	add.w	sl, r3, r0
 802593e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025942:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025946:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802594a:	b29b      	uxth	r3, r3
 802594c:	f1bc 0f00 	cmp.w	ip, #0
 8025950:	f000 81b1 	beq.w	8025cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 8025954:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025958:	eb0a 0b02 	add.w	fp, sl, r2
 802595c:	fa1f fa8c 	uxth.w	sl, ip
 8025960:	940a      	str	r4, [sp, #40]	; 0x28
 8025962:	fb0a fe0e 	mul.w	lr, sl, lr
 8025966:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802596a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802596e:	eba5 050e 	sub.w	r5, r5, lr
 8025972:	940b      	str	r4, [sp, #44]	; 0x2c
 8025974:	fa1f fa8a 	uxth.w	sl, sl
 8025978:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802597a:	b2ad      	uxth	r5, r5
 802597c:	eba3 030a 	sub.w	r3, r3, sl
 8025980:	fb08 f505 	mul.w	r5, r8, r5
 8025984:	b29b      	uxth	r3, r3
 8025986:	fb09 5303 	mla	r3, r9, r3, r5
 802598a:	fb0a 3304 	mla	r3, sl, r4, r3
 802598e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025990:	fb0e 3304 	mla	r3, lr, r4, r3
 8025994:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025998:	2b00      	cmp	r3, #0
 802599a:	f000 8107 	beq.w	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802599e:	9c08      	ldr	r4, [sp, #32]
 80259a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80259a4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80259a8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80259ac:	f000 8188 	beq.w	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80259b0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80259b4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80259b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80259bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80259c0:	fb09 f000 	mul.w	r0, r9, r0
 80259c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80259c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80259cc:	f100 0b20 	add.w	fp, r0, #32
 80259d0:	44ce      	add	lr, r9
 80259d2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80259d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80259da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80259de:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80259e2:	ea4e 0909 	orr.w	r9, lr, r9
 80259e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80259ea:	8868      	ldrh	r0, [r5, #2]
 80259ec:	d019      	beq.n	8025a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80259ee:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80259f2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80259f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80259fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80259fe:	fb08 f800 	mul.w	r8, r8, r0
 8025a02:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025a06:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025a0a:	f108 0b20 	add.w	fp, r8, #32
 8025a0e:	4486      	add	lr, r0
 8025a10:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025a14:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025a18:	0a00      	lsrs	r0, r0, #8
 8025a1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a1e:	ea4e 0000 	orr.w	r0, lr, r0
 8025a22:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025a26:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025a2a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025a2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025a32:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025a36:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a3a:	ea4e 0909 	orr.w	r9, lr, r9
 8025a3e:	ea4a 0000 	orr.w	r0, sl, r0
 8025a42:	f1bc 0f00 	cmp.w	ip, #0
 8025a46:	f000 813d 	beq.w	8025cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025a4a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a50:	3a01      	subs	r2, #1
 8025a52:	2cff      	cmp	r4, #255	; 0xff
 8025a54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025a58:	f102 0202 	add.w	r2, r2, #2
 8025a5c:	eb05 0e02 	add.w	lr, r5, r2
 8025a60:	5aaa      	ldrh	r2, [r5, r2]
 8025a62:	d018      	beq.n	8025a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8025a64:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025a68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a6c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025a70:	fb04 fa02 	mul.w	sl, r4, r2
 8025a74:	fb08 f805 	mul.w	r8, r8, r5
 8025a78:	f10a 0520 	add.w	r5, sl, #32
 8025a7c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025a80:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025a84:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025a88:	4442      	add	r2, r8
 8025a8a:	0a2d      	lsrs	r5, r5, #8
 8025a8c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025a90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025a94:	432a      	orrs	r2, r5
 8025a96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025a98:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025a9c:	2cff      	cmp	r4, #255	; 0xff
 8025a9e:	d01a      	beq.n	8025ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8025aa0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025aa4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025aa8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025aac:	fb04 fa05 	mul.w	sl, r4, r5
 8025ab0:	fb08 f80e 	mul.w	r8, r8, lr
 8025ab4:	f10a 0e20 	add.w	lr, sl, #32
 8025ab8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025abc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ac0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025ac4:	4445      	add	r5, r8
 8025ac6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025aca:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025ace:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025ad2:	ea45 050e 	orr.w	r5, r5, lr
 8025ad6:	fb1c fe01 	smulbb	lr, ip, r1
 8025ada:	f1cc 0810 	rsb	r8, ip, #16
 8025ade:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025ae2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025ae6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025aea:	eba8 0801 	sub.w	r8, r8, r1
 8025aee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025af2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025af6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025afa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025afe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025b02:	ea4a 0202 	orr.w	r2, sl, r2
 8025b06:	4341      	muls	r1, r0
 8025b08:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025b0c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b10:	fb09 1108 	mla	r1, r9, r8, r1
 8025b14:	ea4b 0505 	orr.w	r5, fp, r5
 8025b18:	fb0c 1102 	mla	r1, ip, r2, r1
 8025b1c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025b20:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025b24:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025b28:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b2c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025b30:	ea42 0e0e 	orr.w	lr, r2, lr
 8025b34:	fa1f f28e 	uxth.w	r2, lr
 8025b38:	2bff      	cmp	r3, #255	; 0xff
 8025b3a:	f000 80d7 	beq.w	8025cec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b3e:	f8b7 c000 	ldrh.w	ip, [r7]
 8025b42:	43db      	mvns	r3, r3
 8025b44:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025b48:	fa5f fe83 	uxtb.w	lr, r3
 8025b4c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025b50:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025b54:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025b58:	fb00 f00e 	mul.w	r0, r0, lr
 8025b5c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025b60:	b2db      	uxtb	r3, r3
 8025b62:	1c41      	adds	r1, r0, #1
 8025b64:	fb05 f50e 	mul.w	r5, r5, lr
 8025b68:	fb03 f30e 	mul.w	r3, r3, lr
 8025b6c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025b70:	1210      	asrs	r0, r2, #8
 8025b72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025b76:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8025b7a:	496c      	ldr	r1, [pc, #432]	; (8025d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 8025b7c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8025b80:	1c69      	adds	r1, r5, #1
 8025b82:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025b86:	10d1      	asrs	r1, r2, #3
 8025b88:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025b8c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025b90:	00c9      	lsls	r1, r1, #3
 8025b92:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025b96:	4301      	orrs	r1, r0
 8025b98:	1c58      	adds	r0, r3, #1
 8025b9a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025b9e:	00d3      	lsls	r3, r2, #3
 8025ba0:	b2db      	uxtb	r3, r3
 8025ba2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025ba6:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8025baa:	803b      	strh	r3, [r7, #0]
 8025bac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025bae:	3702      	adds	r7, #2
 8025bb0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025bb2:	4413      	add	r3, r2
 8025bb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025bb6:	9325      	str	r3, [sp, #148]	; 0x94
 8025bb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025bba:	441a      	add	r2, r3
 8025bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025bbe:	3b01      	subs	r3, #1
 8025bc0:	9226      	str	r2, [sp, #152]	; 0x98
 8025bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8025bc4:	e691      	b.n	80258ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025bc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025bc8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025bca:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8025bcc:	4433      	add	r3, r6
 8025bce:	9325      	str	r3, [sp, #148]	; 0x94
 8025bd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025bd2:	441c      	add	r4, r3
 8025bd4:	9b06      	ldr	r3, [sp, #24]
 8025bd6:	3b01      	subs	r3, #1
 8025bd8:	9426      	str	r4, [sp, #152]	; 0x98
 8025bda:	9306      	str	r3, [sp, #24]
 8025bdc:	9b07      	ldr	r3, [sp, #28]
 8025bde:	3302      	adds	r3, #2
 8025be0:	9307      	str	r3, [sp, #28]
 8025be2:	e660      	b.n	80258a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025be4:	d028      	beq.n	8025c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025be6:	9b06      	ldr	r3, [sp, #24]
 8025be8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025bea:	3b01      	subs	r3, #1
 8025bec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8025bee:	fb00 5003 	mla	r0, r0, r3, r5
 8025bf2:	1400      	asrs	r0, r0, #16
 8025bf4:	f53f ae74 	bmi.w	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025bf8:	3901      	subs	r1, #1
 8025bfa:	4288      	cmp	r0, r1
 8025bfc:	f6bf ae70 	bge.w	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025c00:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025c02:	9826      	ldr	r0, [sp, #152]	; 0x98
 8025c04:	fb01 0303 	mla	r3, r1, r3, r0
 8025c08:	141b      	asrs	r3, r3, #16
 8025c0a:	f53f ae69 	bmi.w	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025c0e:	3a01      	subs	r2, #1
 8025c10:	4293      	cmp	r3, r2
 8025c12:	f6bf ae65 	bge.w	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025c16:	9b06      	ldr	r3, [sp, #24]
 8025c18:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025c24:	2b00      	cmp	r3, #0
 8025c26:	f300 8083 	bgt.w	8025d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8025c2a:	9b06      	ldr	r3, [sp, #24]
 8025c2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c30:	9b07      	ldr	r3, [sp, #28]
 8025c32:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025c36:	9307      	str	r3, [sp, #28]
 8025c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	f340 81e4 	ble.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8025c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025c44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c46:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025c4a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025c4e:	eef0 6a48 	vmov.f32	s13, s16
 8025c52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025c56:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025c5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c5e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025c62:	eef0 6a68 	vmov.f32	s13, s17
 8025c66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c6a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8025c6e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025c72:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025c76:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025c7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025c7e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025c82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025c86:	ee18 2a10 	vmov	r2, s16
 8025c8a:	eeb0 8a47 	vmov.f32	s16, s14
 8025c8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c92:	ee18 2a90 	vmov	r2, s17
 8025c96:	9327      	str	r3, [sp, #156]	; 0x9c
 8025c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c9a:	eef0 8a67 	vmov.f32	s17, s15
 8025c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ca2:	9328      	str	r3, [sp, #160]	; 0xa0
 8025ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025ca8:	3b01      	subs	r3, #1
 8025caa:	930e      	str	r3, [sp, #56]	; 0x38
 8025cac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cae:	bf08      	it	eq
 8025cb0:	4613      	moveq	r3, r2
 8025cb2:	9306      	str	r3, [sp, #24]
 8025cb4:	e5e9      	b.n	802588a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025cb6:	fb08 f505 	mul.w	r5, r8, r5
 8025cba:	fb09 5303 	mla	r3, r9, r3, r5
 8025cbe:	e669      	b.n	8025994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8025cc0:	4681      	mov	r9, r0
 8025cc2:	e690      	b.n	80259e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025cc4:	f1c1 0210 	rsb	r2, r1, #16
 8025cc8:	4341      	muls	r1, r0
 8025cca:	fb09 1902 	mla	r9, r9, r2, r1
 8025cce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025cd2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025cd6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025cda:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025cde:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025ce2:	ea42 0909 	orr.w	r9, r2, r9
 8025ce6:	fa1f f289 	uxth.w	r2, r9
 8025cea:	e725      	b.n	8025b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025cec:	803a      	strh	r2, [r7, #0]
 8025cee:	e75d      	b.n	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025cf0:	f115 0e01 	adds.w	lr, r5, #1
 8025cf4:	f53f af5a 	bmi.w	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025cf8:	4572      	cmp	r2, lr
 8025cfa:	f6ff af57 	blt.w	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025cfe:	f110 0e01 	adds.w	lr, r0, #1
 8025d02:	f53f af53 	bmi.w	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025d06:	4573      	cmp	r3, lr
 8025d08:	f6ff af50 	blt.w	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025d0c:	b21b      	sxth	r3, r3
 8025d0e:	b212      	sxth	r2, r2
 8025d10:	9301      	str	r3, [sp, #4]
 8025d12:	9200      	str	r2, [sp, #0]
 8025d14:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025d18:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025d1c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025d20:	4639      	mov	r1, r7
 8025d22:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025d24:	f7ff fbf0 	bl	8025508 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025d28:	e740      	b.n	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025d2a:	bf00      	nop
 8025d2c:	fffff800 	.word	0xfffff800
 8025d30:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025d32:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025d38:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025d3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d3e:	fa1f fc82 	uxth.w	ip, r2
 8025d42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025d48:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025d4c:	141f      	asrs	r7, r3, #16
 8025d4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025d50:	141b      	asrs	r3, r3, #16
 8025d52:	fb01 3707 	mla	r7, r1, r7, r3
 8025d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d58:	eb03 0a07 	add.w	sl, r3, r7
 8025d5c:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025d60:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025d64:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025d68:	b29b      	uxth	r3, r3
 8025d6a:	2d00      	cmp	r5, #0
 8025d6c:	f000 8131 	beq.w	8025fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8025d70:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025d74:	eb0a 0b01 	add.w	fp, sl, r1
 8025d78:	fa1f fa85 	uxth.w	sl, r5
 8025d7c:	940c      	str	r4, [sp, #48]	; 0x30
 8025d7e:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d82:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025d86:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025d8a:	eba0 000c 	sub.w	r0, r0, ip
 8025d8e:	940d      	str	r4, [sp, #52]	; 0x34
 8025d90:	fa1f fa8a 	uxth.w	sl, sl
 8025d94:	b280      	uxth	r0, r0
 8025d96:	eba3 030a 	sub.w	r3, r3, sl
 8025d9a:	fb08 f000 	mul.w	r0, r8, r0
 8025d9e:	b29b      	uxth	r3, r3
 8025da0:	fb09 0303 	mla	r3, r9, r3, r0
 8025da4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025da6:	fb0a 3300 	mla	r3, sl, r0, r3
 8025daa:	fb0c 3304 	mla	r3, ip, r4, r3
 8025dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	f000 80ff 	beq.w	8025fb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8025db8:	9808      	ldr	r0, [sp, #32]
 8025dba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025dbe:	9c08      	ldr	r4, [sp, #32]
 8025dc0:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025dc4:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025dc8:	f000 8108 	beq.w	8025fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8025dcc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025dd0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025dd4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025dd8:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ddc:	fb09 f707 	mul.w	r7, r9, r7
 8025de0:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025de4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025de8:	f107 0b20 	add.w	fp, r7, #32
 8025dec:	44cc      	add	ip, r9
 8025dee:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025df2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025df6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025dfa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025dfe:	ea4c 0909 	orr.w	r9, ip, r9
 8025e02:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025e06:	8847      	ldrh	r7, [r0, #2]
 8025e08:	d019      	beq.n	8025e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 8025e0a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025e0e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025e12:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e16:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e1a:	fb08 f807 	mul.w	r8, r8, r7
 8025e1e:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025e22:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025e26:	f108 0b20 	add.w	fp, r8, #32
 8025e2a:	44bc      	add	ip, r7
 8025e2c:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025e30:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025e34:	0a3f      	lsrs	r7, r7, #8
 8025e36:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e3a:	ea4c 0707 	orr.w	r7, ip, r7
 8025e3e:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025e42:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025e46:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025e4a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025e4e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025e52:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e56:	ea4c 0909 	orr.w	r9, ip, r9
 8025e5a:	ea4a 0707 	orr.w	r7, sl, r7
 8025e5e:	2d00      	cmp	r5, #0
 8025e60:	f000 80be 	beq.w	8025fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025e64:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025e68:	3901      	subs	r1, #1
 8025e6a:	0049      	lsls	r1, r1, #1
 8025e6c:	3102      	adds	r1, #2
 8025e6e:	eb00 0c01 	add.w	ip, r0, r1
 8025e72:	5a41      	ldrh	r1, [r0, r1]
 8025e74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025e76:	28ff      	cmp	r0, #255	; 0xff
 8025e78:	d019      	beq.n	8025eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8025e7a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025e80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025e84:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025e88:	fb04 fa01 	mul.w	sl, r4, r1
 8025e8c:	fb08 f800 	mul.w	r8, r8, r0
 8025e90:	f10a 0020 	add.w	r0, sl, #32
 8025e94:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025e98:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025e9c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025ea0:	4441      	add	r1, r8
 8025ea2:	0a00      	lsrs	r0, r0, #8
 8025ea4:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025ea8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025eac:	4301      	orrs	r1, r0
 8025eae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025eb0:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025eb4:	2cff      	cmp	r4, #255	; 0xff
 8025eb6:	d01a      	beq.n	8025eee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8025eb8:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025ebc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ec0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ec4:	fb04 fa00 	mul.w	sl, r4, r0
 8025ec8:	fb08 f80c 	mul.w	r8, r8, ip
 8025ecc:	f10a 0c20 	add.w	ip, sl, #32
 8025ed0:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025ed4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ed8:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025edc:	4440      	add	r0, r8
 8025ede:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ee2:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025ee6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025eea:	ea40 000c 	orr.w	r0, r0, ip
 8025eee:	fb15 fc02 	smulbb	ip, r5, r2
 8025ef2:	f1c5 0810 	rsb	r8, r5, #16
 8025ef6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025efa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025efe:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025f02:	eba8 0802 	sub.w	r8, r8, r2
 8025f06:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025f0a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f0e:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025f12:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025f16:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025f1a:	ea4a 0101 	orr.w	r1, sl, r1
 8025f1e:	437a      	muls	r2, r7
 8025f20:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025f24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f28:	fb09 2208 	mla	r2, r9, r8, r2
 8025f2c:	ea4b 0000 	orr.w	r0, fp, r0
 8025f30:	fb05 2201 	mla	r2, r5, r1, r2
 8025f34:	fb0c 2200 	mla	r2, ip, r0, r2
 8025f38:	0d57      	lsrs	r7, r2, #21
 8025f3a:	0952      	lsrs	r2, r2, #5
 8025f3c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f40:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f44:	433a      	orrs	r2, r7
 8025f46:	2bff      	cmp	r3, #255	; 0xff
 8025f48:	b292      	uxth	r2, r2
 8025f4a:	d05a      	beq.n	8026002 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8025f4c:	f8be 7000 	ldrh.w	r7, [lr]
 8025f50:	43db      	mvns	r3, r3
 8025f52:	4c30      	ldr	r4, [pc, #192]	; (8026014 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 8025f54:	1238      	asrs	r0, r7, #8
 8025f56:	fa5f fc83 	uxtb.w	ip, r3
 8025f5a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025f5e:	10fd      	asrs	r5, r7, #3
 8025f60:	00fb      	lsls	r3, r7, #3
 8025f62:	fb00 f00c 	mul.w	r0, r0, ip
 8025f66:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025f6a:	b2db      	uxtb	r3, r3
 8025f6c:	fb05 f10c 	mul.w	r1, r5, ip
 8025f70:	1c45      	adds	r5, r0, #1
 8025f72:	fb03 f30c 	mul.w	r3, r3, ip
 8025f76:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025f7a:	1215      	asrs	r5, r2, #8
 8025f7c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025f80:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025f84:	1c4d      	adds	r5, r1, #1
 8025f86:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025f8a:	10d1      	asrs	r1, r2, #3
 8025f8c:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8025f90:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025f94:	00d2      	lsls	r2, r2, #3
 8025f96:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025f9a:	00c9      	lsls	r1, r1, #3
 8025f9c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025fa0:	4308      	orrs	r0, r1
 8025fa2:	1c59      	adds	r1, r3, #1
 8025fa4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025fa8:	b2d1      	uxtb	r1, r2
 8025faa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025fae:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8025fb2:	f8ae 0000 	strh.w	r0, [lr]
 8025fb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025fb8:	f10e 0e02 	add.w	lr, lr, #2
 8025fbc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025fbe:	4413      	add	r3, r2
 8025fc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025fc2:	9325      	str	r3, [sp, #148]	; 0x94
 8025fc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025fc6:	441a      	add	r2, r3
 8025fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025fca:	3b01      	subs	r3, #1
 8025fcc:	9226      	str	r2, [sp, #152]	; 0x98
 8025fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8025fd0:	e627      	b.n	8025c22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025fd2:	fb08 f000 	mul.w	r0, r8, r0
 8025fd6:	fb09 0303 	mla	r3, r9, r3, r0
 8025fda:	e6e8      	b.n	8025dae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 8025fdc:	46b9      	mov	r9, r7
 8025fde:	e710      	b.n	8025e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8025fe0:	f1c2 0110 	rsb	r1, r2, #16
 8025fe4:	437a      	muls	r2, r7
 8025fe6:	fb09 2901 	mla	r9, r9, r1, r2
 8025fea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025fee:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025ff2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025ff6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ffa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025ffe:	4302      	orrs	r2, r0
 8026000:	e7a1      	b.n	8025f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8026002:	f8ae 2000 	strh.w	r2, [lr]
 8026006:	e7d6      	b.n	8025fb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8026008:	b013      	add	sp, #76	; 0x4c
 802600a:	ecbd 8b08 	vpop	{d8-d11}
 802600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026012:	bf00      	nop
 8026014:	fffff800 	.word	0xfffff800

08026018 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802601c:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8026020:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026024:	fb0c 4e03 	mla	lr, ip, r3, r4
 8026028:	f1bc 0f00 	cmp.w	ip, #0
 802602c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8026030:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8026034:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8026038:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802603c:	8808      	ldrh	r0, [r1, #0]
 802603e:	db2f      	blt.n	80260a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026040:	45e2      	cmp	sl, ip
 8026042:	dd2d      	ble.n	80260a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026044:	2c00      	cmp	r4, #0
 8026046:	db29      	blt.n	802609c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026048:	42a3      	cmp	r3, r4
 802604a:	dd27      	ble.n	802609c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 802604c:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8026050:	1c62      	adds	r2, r4, #1
 8026052:	d428      	bmi.n	80260a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026054:	4293      	cmp	r3, r2
 8026056:	dd26      	ble.n	80260a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026058:	b32f      	cbz	r7, 80260a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802605a:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802605e:	f11c 0c01 	adds.w	ip, ip, #1
 8026062:	d424      	bmi.n	80260ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026064:	45e2      	cmp	sl, ip
 8026066:	dd22      	ble.n	80260ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026068:	2e00      	cmp	r6, #0
 802606a:	f000 809c 	beq.w	80261a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 802606e:	2c00      	cmp	r4, #0
 8026070:	db1b      	blt.n	80260aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026072:	42a3      	cmp	r3, r4
 8026074:	dd19      	ble.n	80260aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026076:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802607a:	3401      	adds	r4, #1
 802607c:	d41a      	bmi.n	80260b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802607e:	42a3      	cmp	r3, r4
 8026080:	dd18      	ble.n	80260b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8026082:	b1cf      	cbz	r7, 80260b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8026084:	3301      	adds	r3, #1
 8026086:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802608a:	2f0f      	cmp	r7, #15
 802608c:	d915      	bls.n	80260ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802608e:	4b49      	ldr	r3, [pc, #292]	; (80261b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8026090:	f240 11ef 	movw	r1, #495	; 0x1ef
 8026094:	4a48      	ldr	r2, [pc, #288]	; (80261b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8026096:	4849      	ldr	r0, [pc, #292]	; (80261bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8026098:	f004 fb7c 	bl	802a794 <__assert_func>
 802609c:	4681      	mov	r9, r0
 802609e:	e7d7      	b.n	8026050 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 80260a0:	4686      	mov	lr, r0
 80260a2:	4681      	mov	r9, r0
 80260a4:	e7db      	b.n	802605e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80260a6:	4686      	mov	lr, r0
 80260a8:	e7d9      	b.n	802605e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80260aa:	4684      	mov	ip, r0
 80260ac:	e7e5      	b.n	802607a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 80260ae:	4603      	mov	r3, r0
 80260b0:	4684      	mov	ip, r0
 80260b2:	e7ea      	b.n	802608a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80260b4:	4603      	mov	r3, r0
 80260b6:	e7e8      	b.n	802608a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80260b8:	4603      	mov	r3, r0
 80260ba:	2e0f      	cmp	r6, #15
 80260bc:	d8e7      	bhi.n	802608e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80260be:	fb17 f806 	smulbb	r8, r7, r6
 80260c2:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80260c6:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80260ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80260ce:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80260d2:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80260d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80260da:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80260de:	ea44 0909 	orr.w	r9, r4, r9
 80260e2:	f1c6 0410 	rsb	r4, r6, #16
 80260e6:	041a      	lsls	r2, r3, #16
 80260e8:	ea4a 0e0e 	orr.w	lr, sl, lr
 80260ec:	1be4      	subs	r4, r4, r7
 80260ee:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80260f2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80260f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80260fa:	fb07 fe0e 	mul.w	lr, r7, lr
 80260fe:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026102:	4313      	orrs	r3, r2
 8026104:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8026108:	fb04 e409 	mla	r4, r4, r9, lr
 802610c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026110:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026114:	b2af      	uxth	r7, r5
 8026116:	fb08 4303 	mla	r3, r8, r3, r4
 802611a:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802611e:	43ed      	mvns	r5, r5
 8026120:	4322      	orrs	r2, r4
 8026122:	b2ed      	uxtb	r5, r5
 8026124:	fb06 3202 	mla	r2, r6, r2, r3
 8026128:	10c6      	asrs	r6, r0, #3
 802612a:	0d53      	lsrs	r3, r2, #21
 802612c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026130:	0952      	lsrs	r2, r2, #5
 8026132:	fb16 f605 	smulbb	r6, r6, r5
 8026136:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802613a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802613e:	431a      	orrs	r2, r3
 8026140:	b293      	uxth	r3, r2
 8026142:	1202      	asrs	r2, r0, #8
 8026144:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026148:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802614c:	00dc      	lsls	r4, r3, #3
 802614e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026152:	fb12 f205 	smulbb	r2, r2, r5
 8026156:	b2e4      	uxtb	r4, r4
 8026158:	fb0c 2c07 	mla	ip, ip, r7, r2
 802615c:	10da      	asrs	r2, r3, #3
 802615e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026162:	fa1f fc8c 	uxth.w	ip, ip
 8026166:	fb02 6207 	mla	r2, r2, r7, r6
 802616a:	f10c 0301 	add.w	r3, ip, #1
 802616e:	b296      	uxth	r6, r2
 8026170:	00c2      	lsls	r2, r0, #3
 8026172:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026176:	b2d2      	uxtb	r2, r2
 8026178:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802617c:	fb12 f205 	smulbb	r2, r2, r5
 8026180:	fb04 2207 	mla	r2, r4, r7, r2
 8026184:	b292      	uxth	r2, r2
 8026186:	1c50      	adds	r0, r2, #1
 8026188:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802618c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026190:	4313      	orrs	r3, r2
 8026192:	1c72      	adds	r2, r6, #1
 8026194:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8026198:	0952      	lsrs	r2, r2, #5
 802619a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802619e:	4313      	orrs	r3, r2
 80261a0:	800b      	strh	r3, [r1, #0]
 80261a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80261a6:	2f0f      	cmp	r7, #15
 80261a8:	f63f af71 	bhi.w	802608e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80261ac:	4603      	mov	r3, r0
 80261ae:	4684      	mov	ip, r0
 80261b0:	e785      	b.n	80260be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80261b2:	bf00      	nop
 80261b4:	080305ce 	.word	0x080305ce
 80261b8:	08030c36 	.word	0x08030c36
 80261bc:	080306b7 	.word	0x080306b7

080261c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261c4:	ed2d 8b08 	vpush	{d8-d11}
 80261c8:	b093      	sub	sp, #76	; 0x4c
 80261ca:	461d      	mov	r5, r3
 80261cc:	eeb0 aa40 	vmov.f32	s20, s0
 80261d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80261d2:	eef0 9a60 	vmov.f32	s19, s1
 80261d6:	9210      	str	r2, [sp, #64]	; 0x40
 80261d8:	eeb0 9a41 	vmov.f32	s18, s2
 80261dc:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80261e0:	eeb0 8a62 	vmov.f32	s16, s5
 80261e4:	910a      	str	r1, [sp, #40]	; 0x28
 80261e6:	eef0 8a43 	vmov.f32	s17, s6
 80261ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80261ec:	eef0 ba44 	vmov.f32	s23, s8
 80261f0:	6859      	ldr	r1, [r3, #4]
 80261f2:	eeb0 ba64 	vmov.f32	s22, s9
 80261f6:	681b      	ldr	r3, [r3, #0]
 80261f8:	eef0 aa45 	vmov.f32	s21, s10
 80261fc:	9011      	str	r0, [sp, #68]	; 0x44
 80261fe:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8026202:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026206:	fb01 2707 	mla	r7, r1, r7, r2
 802620a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802620e:	9307      	str	r3, [sp, #28]
 8026210:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026212:	681b      	ldr	r3, [r3, #0]
 8026214:	9309      	str	r3, [sp, #36]	; 0x24
 8026216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026218:	43db      	mvns	r3, r3
 802621a:	b2db      	uxtb	r3, r3
 802621c:	9308      	str	r3, [sp, #32]
 802621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026220:	2b00      	cmp	r3, #0
 8026222:	dc03      	bgt.n	802622c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026226:	2b00      	cmp	r3, #0
 8026228:	f340 8205 	ble.w	8026636 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802622c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802622e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026232:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026236:	1e48      	subs	r0, r1, #1
 8026238:	f102 3cff 	add.w	ip, r2, #4294967295
 802623c:	2d00      	cmp	r5, #0
 802623e:	f340 80da 	ble.w	80263f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026242:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026246:	ea4f 4326 	mov.w	r3, r6, asr #16
 802624a:	d406      	bmi.n	802625a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802624c:	4586      	cmp	lr, r0
 802624e:	da04      	bge.n	802625a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026250:	2b00      	cmp	r3, #0
 8026252:	db02      	blt.n	802625a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026254:	4563      	cmp	r3, ip
 8026256:	f2c0 80cf 	blt.w	80263f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802625a:	f11e 0e01 	adds.w	lr, lr, #1
 802625e:	f100 80c1 	bmi.w	80263e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026262:	4571      	cmp	r1, lr
 8026264:	f2c0 80be 	blt.w	80263e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026268:	3301      	adds	r3, #1
 802626a:	f100 80bb 	bmi.w	80263e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802626e:	429a      	cmp	r2, r3
 8026270:	f2c0 80b8 	blt.w	80263e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026274:	46a9      	mov	r9, r5
 8026276:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802627a:	f1b9 0f00 	cmp.w	r9, #0
 802627e:	f340 80d8 	ble.w	8026432 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026282:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026284:	1421      	asrs	r1, r4, #16
 8026286:	ea4f 4026 	mov.w	r0, r6, asr #16
 802628a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802628e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026292:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026296:	f100 8112 	bmi.w	80264be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802629a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802629e:	4551      	cmp	r1, sl
 80262a0:	f280 810d 	bge.w	80264be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80262a4:	2800      	cmp	r0, #0
 80262a6:	f2c0 810a 	blt.w	80264be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80262aa:	f103 3aff 	add.w	sl, r3, #4294967295
 80262ae:	4550      	cmp	r0, sl
 80262b0:	f280 8105 	bge.w	80264be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80262b4:	fa0f f38e 	sxth.w	r3, lr
 80262b8:	fb00 1103 	mla	r1, r0, r3, r1
 80262bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80262be:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80262c2:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80262c6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80262ca:	f1bc 0f00 	cmp.w	ip, #0
 80262ce:	d007      	beq.n	80262e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80262d0:	005b      	lsls	r3, r3, #1
 80262d2:	eb0a 0003 	add.w	r0, sl, r3
 80262d6:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80262da:	930c      	str	r3, [sp, #48]	; 0x30
 80262dc:	8843      	ldrh	r3, [r0, #2]
 80262de:	930d      	str	r3, [sp, #52]	; 0x34
 80262e0:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80262e4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80262e8:	fb12 f30c 	smulbb	r3, r2, ip
 80262ec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80262f0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80262f4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80262f8:	10db      	asrs	r3, r3, #3
 80262fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262fe:	ea40 000e 	orr.w	r0, r0, lr
 8026302:	f1cc 0e10 	rsb	lr, ip, #16
 8026306:	ea4a 0101 	orr.w	r1, sl, r1
 802630a:	9f08      	ldr	r7, [sp, #32]
 802630c:	ebae 0e02 	sub.w	lr, lr, r2
 8026310:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026314:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026318:	4351      	muls	r1, r2
 802631a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802631c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026320:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026322:	0410      	lsls	r0, r2, #16
 8026324:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026328:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802632c:	4310      	orrs	r0, r2
 802632e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026330:	0412      	lsls	r2, r2, #16
 8026332:	fb03 e000 	mla	r0, r3, r0, lr
 8026336:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802633a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802633e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026342:	f8b8 c000 	ldrh.w	ip, [r8]
 8026346:	ea42 020e 	orr.w	r2, r2, lr
 802634a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802634e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8026352:	fb03 0302 	mla	r3, r3, r2, r0
 8026356:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802635a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802635e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026362:	fb11 f107 	smulbb	r1, r1, r7
 8026366:	0d5a      	lsrs	r2, r3, #21
 8026368:	095b      	lsrs	r3, r3, #5
 802636a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802636e:	fa5f fc8c 	uxtb.w	ip, ip
 8026372:	fb1e fe07 	smulbb	lr, lr, r7
 8026376:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802637a:	fb1c fc07 	smulbb	ip, ip, r7
 802637e:	4313      	orrs	r3, r2
 8026380:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026384:	b29b      	uxth	r3, r3
 8026386:	1218      	asrs	r0, r3, #8
 8026388:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802638c:	fb00 1002 	mla	r0, r0, r2, r1
 8026390:	10d9      	asrs	r1, r3, #3
 8026392:	00db      	lsls	r3, r3, #3
 8026394:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026398:	b280      	uxth	r0, r0
 802639a:	b2db      	uxtb	r3, r3
 802639c:	fb01 e102 	mla	r1, r1, r2, lr
 80263a0:	fb03 c202 	mla	r2, r3, r2, ip
 80263a4:	1c43      	adds	r3, r0, #1
 80263a6:	b289      	uxth	r1, r1
 80263a8:	b292      	uxth	r2, r2
 80263aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80263ae:	f102 0c01 	add.w	ip, r2, #1
 80263b2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80263b6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80263ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80263be:	4313      	orrs	r3, r2
 80263c0:	1c4a      	adds	r2, r1, #1
 80263c2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80263c6:	0949      	lsrs	r1, r1, #5
 80263c8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80263cc:	430b      	orrs	r3, r1
 80263ce:	f8a8 3000 	strh.w	r3, [r8]
 80263d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80263d4:	f108 0802 	add.w	r8, r8, #2
 80263d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80263dc:	441c      	add	r4, r3
 80263de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80263e0:	441e      	add	r6, r3
 80263e2:	e74a      	b.n	802627a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80263e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80263e6:	3d01      	subs	r5, #1
 80263e8:	441c      	add	r4, r3
 80263ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80263ec:	441e      	add	r6, r3
 80263ee:	9b07      	ldr	r3, [sp, #28]
 80263f0:	3302      	adds	r3, #2
 80263f2:	9307      	str	r3, [sp, #28]
 80263f4:	e722      	b.n	802623c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80263f6:	d022      	beq.n	802643e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80263f8:	1e6b      	subs	r3, r5, #1
 80263fa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80263fc:	fb00 4003 	mla	r0, r0, r3, r4
 8026400:	1400      	asrs	r0, r0, #16
 8026402:	f53f af37 	bmi.w	8026274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026406:	3901      	subs	r1, #1
 8026408:	4288      	cmp	r0, r1
 802640a:	f6bf af33 	bge.w	8026274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802640e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026410:	fb01 6303 	mla	r3, r1, r3, r6
 8026414:	141b      	asrs	r3, r3, #16
 8026416:	f53f af2d 	bmi.w	8026274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802641a:	3a01      	subs	r2, #1
 802641c:	4293      	cmp	r3, r2
 802641e:	f6bf af29 	bge.w	8026274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026422:	46a8      	mov	r8, r5
 8026424:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026428:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802642c:	f1b8 0f00 	cmp.w	r8, #0
 8026430:	dc60      	bgt.n	80264f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8026432:	9b07      	ldr	r3, [sp, #28]
 8026434:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026438:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802643c:	9307      	str	r3, [sp, #28]
 802643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026440:	2b00      	cmp	r3, #0
 8026442:	f340 80f8 	ble.w	8026636 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802644a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802644c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026450:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026454:	eef0 6a48 	vmov.f32	s13, s16
 8026458:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802645c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026464:	ee16 4a90 	vmov	r4, s13
 8026468:	eef0 6a68 	vmov.f32	s13, s17
 802646c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026470:	ee16 6a90 	vmov	r6, s13
 8026474:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026478:	ee69 7a27 	vmul.f32	s15, s18, s15
 802647c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026480:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026484:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026488:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802648c:	ee18 2a10 	vmov	r2, s16
 8026490:	eeb0 8a47 	vmov.f32	s16, s14
 8026494:	fb92 f3f3 	sdiv	r3, r2, r3
 8026498:	ee18 2a90 	vmov	r2, s17
 802649c:	9327      	str	r3, [sp, #156]	; 0x9c
 802649e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80264a0:	eef0 8a67 	vmov.f32	s17, s15
 80264a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80264a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80264aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80264ae:	3b01      	subs	r3, #1
 80264b0:	930a      	str	r3, [sp, #40]	; 0x28
 80264b2:	bf08      	it	eq
 80264b4:	4615      	moveq	r5, r2
 80264b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80264b8:	bf18      	it	ne
 80264ba:	461d      	movne	r5, r3
 80264bc:	e6af      	b.n	802621e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80264be:	f111 0a01 	adds.w	sl, r1, #1
 80264c2:	d486      	bmi.n	80263d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80264c4:	45d6      	cmp	lr, sl
 80264c6:	db84      	blt.n	80263d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80264c8:	f110 0a01 	adds.w	sl, r0, #1
 80264cc:	d481      	bmi.n	80263d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80264ce:	4553      	cmp	r3, sl
 80264d0:	f6ff af7f 	blt.w	80263d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80264d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80264d6:	b21b      	sxth	r3, r3
 80264d8:	9101      	str	r1, [sp, #4]
 80264da:	4641      	mov	r1, r8
 80264dc:	9300      	str	r3, [sp, #0]
 80264de:	fa0f f38e 	sxth.w	r3, lr
 80264e2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80264e6:	e9cd c704 	strd	ip, r7, [sp, #16]
 80264ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80264ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80264ee:	f7ff fd93 	bl	8026018 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80264f2:	e76e      	b.n	80263d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80264f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264f6:	1430      	asrs	r0, r6, #16
 80264f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80264fa:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80264fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026502:	1423      	asrs	r3, r4, #16
 8026504:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026508:	fb01 3000 	mla	r0, r1, r0, r3
 802650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802650e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026512:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026516:	8858      	ldrh	r0, [r3, #2]
 8026518:	f1be 0f00 	cmp.w	lr, #0
 802651c:	d00b      	beq.n	8026536 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802651e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026522:	3901      	subs	r1, #1
 8026524:	0049      	lsls	r1, r1, #1
 8026526:	3102      	adds	r1, #2
 8026528:	eb03 0b01 	add.w	fp, r3, r1
 802652c:	5a5b      	ldrh	r3, [r3, r1]
 802652e:	930e      	str	r3, [sp, #56]	; 0x38
 8026530:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026534:	930f      	str	r3, [sp, #60]	; 0x3c
 8026536:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802653a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802653e:	fb12 f30e 	smulbb	r3, r2, lr
 8026542:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026546:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802654a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802654e:	10db      	asrs	r3, r3, #3
 8026550:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026554:	ea41 010c 	orr.w	r1, r1, ip
 8026558:	f1ce 0c10 	rsb	ip, lr, #16
 802655c:	ea4b 0000 	orr.w	r0, fp, r0
 8026560:	9f08      	ldr	r7, [sp, #32]
 8026562:	ebac 0c02 	sub.w	ip, ip, r2
 8026566:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802656a:	f108 38ff 	add.w	r8, r8, #4294967295
 802656e:	4350      	muls	r0, r2
 8026570:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026576:	fb0c 0c01 	mla	ip, ip, r1, r0
 802657a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802657c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026580:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8026584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026586:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802658a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802658e:	0412      	lsls	r2, r2, #16
 8026590:	ea4b 0101 	orr.w	r1, fp, r1
 8026594:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026598:	fb03 c101 	mla	r1, r3, r1, ip
 802659c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80265a0:	4302      	orrs	r2, r0
 80265a2:	fb03 1202 	mla	r2, r3, r2, r1
 80265a6:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80265aa:	0952      	lsrs	r2, r2, #5
 80265ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80265b0:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80265b4:	f8b9 2000 	ldrh.w	r2, [r9]
 80265b8:	ea4b 0303 	orr.w	r3, fp, r3
 80265bc:	1211      	asrs	r1, r2, #8
 80265be:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80265c2:	b29b      	uxth	r3, r3
 80265c4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80265c8:	00d2      	lsls	r2, r2, #3
 80265ca:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80265ce:	fb11 f107 	smulbb	r1, r1, r7
 80265d2:	1218      	asrs	r0, r3, #8
 80265d4:	fb1c fc07 	smulbb	ip, ip, r7
 80265d8:	b2d2      	uxtb	r2, r2
 80265da:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265de:	fb12 f207 	smulbb	r2, r2, r7
 80265e2:	fb00 100a 	mla	r0, r0, sl, r1
 80265e6:	10d9      	asrs	r1, r3, #3
 80265e8:	00db      	lsls	r3, r3, #3
 80265ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80265ee:	b280      	uxth	r0, r0
 80265f0:	b2db      	uxtb	r3, r3
 80265f2:	fb01 c10a 	mla	r1, r1, sl, ip
 80265f6:	fb03 230a 	mla	r3, r3, sl, r2
 80265fa:	1c42      	adds	r2, r0, #1
 80265fc:	b289      	uxth	r1, r1
 80265fe:	b29b      	uxth	r3, r3
 8026600:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026604:	f101 0c01 	add.w	ip, r1, #1
 8026608:	1c5a      	adds	r2, r3, #1
 802660a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802660e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026612:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026616:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026618:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802661c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026620:	441c      	add	r4, r3
 8026622:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026626:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026628:	4310      	orrs	r0, r2
 802662a:	441e      	add	r6, r3
 802662c:	ea40 000c 	orr.w	r0, r0, ip
 8026630:	f829 0b02 	strh.w	r0, [r9], #2
 8026634:	e6fa      	b.n	802642c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026636:	b013      	add	sp, #76	; 0x4c
 8026638:	ecbd 8b08 	vpop	{d8-d11}
 802663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026640 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8026640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026644:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8026648:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802664c:	fb06 5c03 	mla	ip, r6, r3, r5
 8026650:	2e00      	cmp	r6, #0
 8026652:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8026656:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802665a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802665e:	8808      	ldrh	r0, [r1, #0]
 8026660:	db2e      	blt.n	80266c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8026662:	45b0      	cmp	r8, r6
 8026664:	dd2c      	ble.n	80266c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8026666:	2d00      	cmp	r5, #0
 8026668:	db28      	blt.n	80266bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802666a:	42ab      	cmp	r3, r5
 802666c:	dd26      	ble.n	80266bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802666e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8026672:	1c6a      	adds	r2, r5, #1
 8026674:	d427      	bmi.n	80266c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8026676:	4293      	cmp	r3, r2
 8026678:	dd25      	ble.n	80266c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802667a:	b324      	cbz	r4, 80266c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802667c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026680:	3601      	adds	r6, #1
 8026682:	d424      	bmi.n	80266ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8026684:	45b0      	cmp	r8, r6
 8026686:	dd22      	ble.n	80266ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8026688:	b31f      	cbz	r7, 80266d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802668a:	2d00      	cmp	r5, #0
 802668c:	db1d      	blt.n	80266ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802668e:	42ab      	cmp	r3, r5
 8026690:	dd1b      	ble.n	80266ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8026692:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8026696:	3501      	adds	r5, #1
 8026698:	d405      	bmi.n	80266a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802669a:	42ab      	cmp	r3, r5
 802669c:	dd03      	ble.n	80266a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802669e:	b124      	cbz	r4, 80266aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80266a0:	3301      	adds	r3, #1
 80266a2:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80266a6:	2c0f      	cmp	r4, #15
 80266a8:	d801      	bhi.n	80266ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80266aa:	2f0f      	cmp	r7, #15
 80266ac:	d914      	bls.n	80266d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80266ae:	4b27      	ldr	r3, [pc, #156]	; (802674c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80266b0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80266b4:	4a26      	ldr	r2, [pc, #152]	; (8026750 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80266b6:	4827      	ldr	r0, [pc, #156]	; (8026754 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80266b8:	f004 f86c 	bl	802a794 <__assert_func>
 80266bc:	4684      	mov	ip, r0
 80266be:	e7d8      	b.n	8026672 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80266c0:	4602      	mov	r2, r0
 80266c2:	4684      	mov	ip, r0
 80266c4:	e7dc      	b.n	8026680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80266c6:	4602      	mov	r2, r0
 80266c8:	e7da      	b.n	8026680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80266ca:	4606      	mov	r6, r0
 80266cc:	e7e3      	b.n	8026696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80266ce:	4606      	mov	r6, r0
 80266d0:	e7e9      	b.n	80266a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80266d2:	2c0f      	cmp	r4, #15
 80266d4:	d8eb      	bhi.n	80266ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80266d6:	4606      	mov	r6, r0
 80266d8:	fb14 f307 	smulbb	r3, r4, r7
 80266dc:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80266e0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80266e4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80266e8:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80266ec:	10db      	asrs	r3, r3, #3
 80266ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80266f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80266f6:	ea45 0c0c 	orr.w	ip, r5, ip
 80266fa:	f1c7 0510 	rsb	r5, r7, #16
 80266fe:	ea4e 0202 	orr.w	r2, lr, r2
 8026702:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8026706:	1b2d      	subs	r5, r5, r4
 8026708:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802670c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8026710:	4354      	muls	r4, r2
 8026712:	fb05 450c 	mla	r5, r5, ip, r4
 8026716:	0404      	lsls	r4, r0, #16
 8026718:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802671c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026720:	4320      	orrs	r0, r4
 8026722:	fb03 5400 	mla	r4, r3, r0, r5
 8026726:	0430      	lsls	r0, r6, #16
 8026728:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802672c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026730:	4330      	orrs	r0, r6
 8026732:	fb07 4000 	mla	r0, r7, r0, r4
 8026736:	0d43      	lsrs	r3, r0, #21
 8026738:	0940      	lsrs	r0, r0, #5
 802673a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802673e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026742:	4318      	orrs	r0, r3
 8026744:	8008      	strh	r0, [r1, #0]
 8026746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802674a:	bf00      	nop
 802674c:	080305ce 	.word	0x080305ce
 8026750:	08030c36 	.word	0x08030c36
 8026754:	080306b7 	.word	0x080306b7

08026758 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802675c:	ed2d 8b08 	vpush	{d8-d11}
 8026760:	b08f      	sub	sp, #60	; 0x3c
 8026762:	461d      	mov	r5, r3
 8026764:	eeb0 aa40 	vmov.f32	s20, s0
 8026768:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802676a:	eef0 9a60 	vmov.f32	s19, s1
 802676e:	9107      	str	r1, [sp, #28]
 8026770:	eeb0 9a41 	vmov.f32	s18, s2
 8026774:	6859      	ldr	r1, [r3, #4]
 8026776:	eeb0 8a62 	vmov.f32	s16, s5
 802677a:	920c      	str	r2, [sp, #48]	; 0x30
 802677c:	eef0 8a43 	vmov.f32	s17, s6
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	eef0 ba44 	vmov.f32	s23, s8
 8026786:	eeb0 ba64 	vmov.f32	s22, s9
 802678a:	900d      	str	r0, [sp, #52]	; 0x34
 802678c:	eef0 aa45 	vmov.f32	s21, s10
 8026790:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8026794:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8026798:	fb01 2707 	mla	r7, r1, r7, r2
 802679c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80267a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80267a2:	f8d3 8000 	ldr.w	r8, [r3]
 80267a6:	9b07      	ldr	r3, [sp, #28]
 80267a8:	2b00      	cmp	r3, #0
 80267aa:	dc03      	bgt.n	80267b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80267ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80267ae:	2b00      	cmp	r3, #0
 80267b0:	f340 8182 	ble.w	8026ab8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80267b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80267b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80267ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80267be:	1e48      	subs	r0, r1, #1
 80267c0:	f102 3cff 	add.w	ip, r2, #4294967295
 80267c4:	2d00      	cmp	r5, #0
 80267c6:	f340 809b 	ble.w	8026900 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80267ca:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80267ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 80267d2:	d406      	bmi.n	80267e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80267d4:	4586      	cmp	lr, r0
 80267d6:	da04      	bge.n	80267e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80267d8:	2b00      	cmp	r3, #0
 80267da:	db02      	blt.n	80267e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80267dc:	4563      	cmp	r3, ip
 80267de:	f2c0 8090 	blt.w	8026902 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80267e2:	f11e 0e01 	adds.w	lr, lr, #1
 80267e6:	f100 8084 	bmi.w	80268f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80267ea:	4571      	cmp	r1, lr
 80267ec:	f2c0 8081 	blt.w	80268f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80267f0:	3301      	adds	r3, #1
 80267f2:	d47e      	bmi.n	80268f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80267f4:	429a      	cmp	r2, r3
 80267f6:	db7c      	blt.n	80268f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80267f8:	46aa      	mov	sl, r5
 80267fa:	46b9      	mov	r9, r7
 80267fc:	f1ba 0f00 	cmp.w	sl, #0
 8026800:	f340 8099 	ble.w	8026936 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026804:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026806:	1421      	asrs	r1, r4, #16
 8026808:	ea4f 4026 	mov.w	r0, r6, asr #16
 802680c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026810:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026814:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026818:	f100 80d1 	bmi.w	80269be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802681c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026820:	4559      	cmp	r1, fp
 8026822:	f280 80cc 	bge.w	80269be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026826:	2800      	cmp	r0, #0
 8026828:	f2c0 80c9 	blt.w	80269be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802682c:	f103 3bff 	add.w	fp, r3, #4294967295
 8026830:	4558      	cmp	r0, fp
 8026832:	f280 80c4 	bge.w	80269be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026836:	fa0f fe8e 	sxth.w	lr, lr
 802683a:	fb00 110e 	mla	r1, r0, lr, r1
 802683e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026842:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026846:	8841      	ldrh	r1, [r0, #2]
 8026848:	f1bc 0f00 	cmp.w	ip, #0
 802684c:	d00b      	beq.n	8026866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802684e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8026852:	3b01      	subs	r3, #1
 8026854:	005b      	lsls	r3, r3, #1
 8026856:	3302      	adds	r3, #2
 8026858:	eb00 0e03 	add.w	lr, r0, r3
 802685c:	5ac3      	ldrh	r3, [r0, r3]
 802685e:	9308      	str	r3, [sp, #32]
 8026860:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026864:	9309      	str	r3, [sp, #36]	; 0x24
 8026866:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802686a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802686e:	fb12 f30c 	smulbb	r3, r2, ip
 8026872:	f1cc 0e10 	rsb	lr, ip, #16
 8026876:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802687a:	10db      	asrs	r3, r3, #3
 802687c:	ebae 0e02 	sub.w	lr, lr, r2
 8026880:	ea40 000b 	orr.w	r0, r0, fp
 8026884:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026888:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802688c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026890:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026894:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026898:	ea4b 0101 	orr.w	r1, fp, r1
 802689c:	4351      	muls	r1, r2
 802689e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80268a0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80268a4:	0410      	lsls	r0, r2, #16
 80268a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80268aa:	9908      	ldr	r1, [sp, #32]
 80268ac:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80268b0:	4310      	orrs	r0, r2
 80268b2:	9a08      	ldr	r2, [sp, #32]
 80268b4:	0412      	lsls	r2, r2, #16
 80268b6:	fb03 e000 	mla	r0, r3, r0, lr
 80268ba:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80268be:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80268c2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80268c6:	ea42 020e 	orr.w	r2, r2, lr
 80268ca:	fb03 0302 	mla	r3, r3, r2, r0
 80268ce:	0d5a      	lsrs	r2, r3, #21
 80268d0:	095b      	lsrs	r3, r3, #5
 80268d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80268d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80268da:	4313      	orrs	r3, r2
 80268dc:	f8a9 3000 	strh.w	r3, [r9]
 80268e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80268e2:	f109 0902 	add.w	r9, r9, #2
 80268e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80268ea:	441c      	add	r4, r3
 80268ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80268ee:	441e      	add	r6, r3
 80268f0:	e784      	b.n	80267fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80268f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80268f4:	3d01      	subs	r5, #1
 80268f6:	3702      	adds	r7, #2
 80268f8:	441c      	add	r4, r3
 80268fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80268fc:	441e      	add	r6, r3
 80268fe:	e761      	b.n	80267c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026900:	d01d      	beq.n	802693e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026902:	1e6b      	subs	r3, r5, #1
 8026904:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026906:	fb00 4003 	mla	r0, r0, r3, r4
 802690a:	1400      	asrs	r0, r0, #16
 802690c:	f53f af74 	bmi.w	80267f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026910:	3901      	subs	r1, #1
 8026912:	4288      	cmp	r0, r1
 8026914:	f6bf af70 	bge.w	80267f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026918:	9924      	ldr	r1, [sp, #144]	; 0x90
 802691a:	fb01 6303 	mla	r3, r1, r3, r6
 802691e:	141b      	asrs	r3, r3, #16
 8026920:	f53f af6a 	bmi.w	80267f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026924:	3a01      	subs	r2, #1
 8026926:	4293      	cmp	r3, r2
 8026928:	f6bf af66 	bge.w	80267f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802692c:	46a9      	mov	r9, r5
 802692e:	46ba      	mov	sl, r7
 8026930:	f1b9 0f00 	cmp.w	r9, #0
 8026934:	dc5b      	bgt.n	80269ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026936:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802693a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802693e:	9b07      	ldr	r3, [sp, #28]
 8026940:	2b00      	cmp	r3, #0
 8026942:	f340 80b9 	ble.w	8026ab8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802694a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802694c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026950:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026954:	eef0 6a48 	vmov.f32	s13, s16
 8026958:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802695c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026960:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026964:	ee16 4a90 	vmov	r4, s13
 8026968:	eef0 6a68 	vmov.f32	s13, s17
 802696c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026970:	ee16 6a90 	vmov	r6, s13
 8026974:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026978:	ee69 7a27 	vmul.f32	s15, s18, s15
 802697c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026980:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026984:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026988:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802698c:	ee18 2a10 	vmov	r2, s16
 8026990:	eeb0 8a47 	vmov.f32	s16, s14
 8026994:	fb92 f3f3 	sdiv	r3, r2, r3
 8026998:	ee18 2a90 	vmov	r2, s17
 802699c:	9323      	str	r3, [sp, #140]	; 0x8c
 802699e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80269a0:	eef0 8a67 	vmov.f32	s17, s15
 80269a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80269a8:	9324      	str	r3, [sp, #144]	; 0x90
 80269aa:	9b07      	ldr	r3, [sp, #28]
 80269ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80269ae:	3b01      	subs	r3, #1
 80269b0:	9307      	str	r3, [sp, #28]
 80269b2:	bf08      	it	eq
 80269b4:	4615      	moveq	r5, r2
 80269b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80269b8:	bf18      	it	ne
 80269ba:	461d      	movne	r5, r3
 80269bc:	e6f3      	b.n	80267a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80269be:	f111 0b01 	adds.w	fp, r1, #1
 80269c2:	d48d      	bmi.n	80268e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80269c4:	45de      	cmp	lr, fp
 80269c6:	db8b      	blt.n	80268e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80269c8:	f110 0b01 	adds.w	fp, r0, #1
 80269cc:	d488      	bmi.n	80268e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80269ce:	455b      	cmp	r3, fp
 80269d0:	db86      	blt.n	80268e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80269d2:	b21b      	sxth	r3, r3
 80269d4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80269d8:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80269dc:	9300      	str	r3, [sp, #0]
 80269de:	4642      	mov	r2, r8
 80269e0:	fa0f f38e 	sxth.w	r3, lr
 80269e4:	4649      	mov	r1, r9
 80269e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80269e8:	f7ff fe2a 	bl	8026640 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80269ec:	e778      	b.n	80268e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80269ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80269f0:	1420      	asrs	r0, r4, #16
 80269f2:	1431      	asrs	r1, r6, #16
 80269f4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80269f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80269fc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026a00:	fb03 0101 	mla	r1, r3, r1, r0
 8026a04:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026a08:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026a0c:	8841      	ldrh	r1, [r0, #2]
 8026a0e:	f1be 0f00 	cmp.w	lr, #0
 8026a12:	d00b      	beq.n	8026a2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8026a14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026a18:	3b01      	subs	r3, #1
 8026a1a:	005b      	lsls	r3, r3, #1
 8026a1c:	3302      	adds	r3, #2
 8026a1e:	eb00 0b03 	add.w	fp, r0, r3
 8026a22:	5ac3      	ldrh	r3, [r0, r3]
 8026a24:	930a      	str	r3, [sp, #40]	; 0x28
 8026a26:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8026a2c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026a30:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026a34:	fb12 f30e 	smulbb	r3, r2, lr
 8026a38:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026a3c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026a40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026a44:	10db      	asrs	r3, r3, #3
 8026a46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a4a:	ea40 000c 	orr.w	r0, r0, ip
 8026a4e:	f1ce 0c10 	rsb	ip, lr, #16
 8026a52:	ea4b 0101 	orr.w	r1, fp, r1
 8026a56:	f109 39ff 	add.w	r9, r9, #4294967295
 8026a5a:	ebac 0c02 	sub.w	ip, ip, r2
 8026a5e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026a62:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026a66:	4351      	muls	r1, r2
 8026a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026a6a:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026a70:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026a74:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a7a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a7e:	0412      	lsls	r2, r2, #16
 8026a80:	ea4b 0000 	orr.w	r0, fp, r0
 8026a84:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026a88:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026a8c:	fb03 c000 	mla	r0, r3, r0, ip
 8026a90:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026a94:	ea42 0b0b 	orr.w	fp, r2, fp
 8026a98:	fb03 000b 	mla	r0, r3, fp, r0
 8026a9c:	0d43      	lsrs	r3, r0, #21
 8026a9e:	0940      	lsrs	r0, r0, #5
 8026aa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026aa4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026aa8:	4318      	orrs	r0, r3
 8026aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026aac:	441c      	add	r4, r3
 8026aae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ab0:	f82a 0b02 	strh.w	r0, [sl], #2
 8026ab4:	441e      	add	r6, r3
 8026ab6:	e73b      	b.n	8026930 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ab8:	b00f      	add	sp, #60	; 0x3c
 8026aba:	ecbd 8b08 	vpop	{d8-d11}
 8026abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ac8:	880e      	ldrh	r6, [r1, #0]
 8026aca:	b085      	sub	sp, #20
 8026acc:	4690      	mov	r8, r2
 8026ace:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8026ad2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026ad6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026ada:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8026ade:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8026ae2:	00f6      	lsls	r6, r6, #3
 8026ae4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8026ae8:	9200      	str	r2, [sp, #0]
 8026aea:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8026aee:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8026af2:	9201      	str	r2, [sp, #4]
 8026af4:	b2f2      	uxtb	r2, r6
 8026af6:	2c00      	cmp	r4, #0
 8026af8:	fb04 5603 	mla	r6, r4, r3, r5
 8026afc:	9202      	str	r2, [sp, #8]
 8026afe:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8026b02:	db36      	blt.n	8026b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8026b04:	45a6      	cmp	lr, r4
 8026b06:	dd34      	ble.n	8026b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8026b08:	2d00      	cmp	r5, #0
 8026b0a:	db30      	blt.n	8026b6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8026b0c:	42ab      	cmp	r3, r5
 8026b0e:	dd2e      	ble.n	8026b6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8026b10:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8026b14:	1c6e      	adds	r6, r5, #1
 8026b16:	d42f      	bmi.n	8026b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026b18:	42b3      	cmp	r3, r6
 8026b1a:	dd2d      	ble.n	8026b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026b1c:	b370      	cbz	r0, 8026b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8026b1e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8026b22:	3401      	adds	r4, #1
 8026b24:	d42e      	bmi.n	8026b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026b26:	45a6      	cmp	lr, r4
 8026b28:	dd2c      	ble.n	8026b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026b2a:	b377      	cbz	r7, 8026b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8026b2c:	2d00      	cmp	r5, #0
 8026b2e:	db27      	blt.n	8026b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026b30:	42ab      	cmp	r3, r5
 8026b32:	dd25      	ble.n	8026b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026b34:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026b38:	3501      	adds	r5, #1
 8026b3a:	d429      	bmi.n	8026b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026b3c:	42ab      	cmp	r3, r5
 8026b3e:	dd27      	ble.n	8026b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026b40:	b340      	cbz	r0, 8026b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8026b42:	3301      	adds	r3, #1
 8026b44:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026b48:	280f      	cmp	r0, #15
 8026b4a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026b4e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026b52:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026b56:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026b5a:	d801      	bhi.n	8026b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8026b5c:	2f0f      	cmp	r7, #15
 8026b5e:	d91b      	bls.n	8026b98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8026b60:	4b85      	ldr	r3, [pc, #532]	; (8026d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8026b62:	f240 210d 	movw	r1, #525	; 0x20d
 8026b66:	4a85      	ldr	r2, [pc, #532]	; (8026d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8026b68:	4885      	ldr	r0, [pc, #532]	; (8026d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8026b6a:	f003 fe13 	bl	802a794 <__assert_func>
 8026b6e:	2200      	movs	r2, #0
 8026b70:	e7d0      	b.n	8026b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8026b72:	2600      	movs	r6, #0
 8026b74:	4632      	mov	r2, r6
 8026b76:	e7d4      	b.n	8026b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026b78:	2600      	movs	r6, #0
 8026b7a:	e7d2      	b.n	8026b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026b7c:	4606      	mov	r6, r0
 8026b7e:	e7d0      	b.n	8026b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026b80:	2400      	movs	r4, #0
 8026b82:	e7d9      	b.n	8026b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026b84:	2300      	movs	r3, #0
 8026b86:	461c      	mov	r4, r3
 8026b88:	e7de      	b.n	8026b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026b8a:	463b      	mov	r3, r7
 8026b8c:	463c      	mov	r4, r7
 8026b8e:	e7db      	b.n	8026b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026b90:	2300      	movs	r3, #0
 8026b92:	e7d9      	b.n	8026b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026b94:	4603      	mov	r3, r0
 8026b96:	e7d7      	b.n	8026b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026b98:	b280      	uxth	r0, r0
 8026b9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026b9e:	b2bf      	uxth	r7, r7
 8026ba0:	fb00 fe07 	mul.w	lr, r0, r7
 8026ba4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026ba8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026bac:	eba0 0c0e 	sub.w	ip, r0, lr
 8026bb0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026bb4:	b2bf      	uxth	r7, r7
 8026bb6:	fa1f fc8c 	uxth.w	ip, ip
 8026bba:	eba5 0507 	sub.w	r5, r5, r7
 8026bbe:	fb0c f00a 	mul.w	r0, ip, sl
 8026bc2:	b2ad      	uxth	r5, r5
 8026bc4:	fb05 000b 	mla	r0, r5, fp, r0
 8026bc8:	fb07 0009 	mla	r0, r7, r9, r0
 8026bcc:	fb0e 0008 	mla	r0, lr, r8, r0
 8026bd0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026bd4:	9003      	str	r0, [sp, #12]
 8026bd6:	d018      	beq.n	8026c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 8026bd8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026bdc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026be0:	fb0b f000 	mul.w	r0, fp, r0
 8026be4:	fb0b fb02 	mul.w	fp, fp, r2
 8026be8:	0a02      	lsrs	r2, r0, #8
 8026bea:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026bee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026bf2:	4402      	add	r2, r0
 8026bf4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026bf8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026bfc:	0a12      	lsrs	r2, r2, #8
 8026bfe:	0a00      	lsrs	r0, r0, #8
 8026c00:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026c08:	4302      	orrs	r2, r0
 8026c0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026c0e:	d019      	beq.n	8026c44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 8026c10:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026c14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026c18:	fb0a fb0b 	mul.w	fp, sl, fp
 8026c1c:	fb0a fa06 	mul.w	sl, sl, r6
 8026c20:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026c24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026c28:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026c2c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026c30:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026c34:	445e      	add	r6, fp
 8026c36:	0a00      	lsrs	r0, r0, #8
 8026c38:	0a36      	lsrs	r6, r6, #8
 8026c3a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026c3e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026c42:	4306      	orrs	r6, r0
 8026c44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026c48:	d019      	beq.n	8026c7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8026c4a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026c4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026c52:	fb09 fa0a 	mul.w	sl, r9, sl
 8026c56:	fb09 f904 	mul.w	r9, r9, r4
 8026c5a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026c5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026c62:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026c66:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026c6a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026c6e:	4454      	add	r4, sl
 8026c70:	0a00      	lsrs	r0, r0, #8
 8026c72:	0a24      	lsrs	r4, r4, #8
 8026c74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026c78:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026c7c:	4304      	orrs	r4, r0
 8026c7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026c82:	d019      	beq.n	8026cb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 8026c84:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026c88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026c8c:	fb08 f909 	mul.w	r9, r8, r9
 8026c90:	fb08 f803 	mul.w	r8, r8, r3
 8026c94:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026c98:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026c9c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026ca0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026ca4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026ca8:	444b      	add	r3, r9
 8026caa:	0a00      	lsrs	r0, r0, #8
 8026cac:	0a1b      	lsrs	r3, r3, #8
 8026cae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026cb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026cb6:	4303      	orrs	r3, r0
 8026cb8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026cbc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026cc0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026cc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026cc8:	fb0c f808 	mul.w	r8, ip, r8
 8026ccc:	fb0c f606 	mul.w	r6, ip, r6
 8026cd0:	fb05 8800 	mla	r8, r5, r0, r8
 8026cd4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026cd8:	fb05 6202 	mla	r2, r5, r2, r6
 8026cdc:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8026ce0:	fb07 8800 	mla	r8, r7, r0, r8
 8026ce4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026ce8:	b2ad      	uxth	r5, r5
 8026cea:	fb0e 8000 	mla	r0, lr, r0, r8
 8026cee:	0a00      	lsrs	r0, r0, #8
 8026cf0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026cf4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026cf8:	9c00      	ldr	r4, [sp, #0]
 8026cfa:	fb07 2700 	mla	r7, r7, r0, r2
 8026cfe:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026d02:	9b03      	ldr	r3, [sp, #12]
 8026d04:	fb0e 7000 	mla	r0, lr, r0, r7
 8026d08:	436b      	muls	r3, r5
 8026d0a:	0a00      	lsrs	r0, r0, #8
 8026d0c:	1c5a      	adds	r2, r3, #1
 8026d0e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d12:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026d16:	ea48 0000 	orr.w	r0, r8, r0
 8026d1a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026d1e:	0c03      	lsrs	r3, r0, #16
 8026d20:	b2d2      	uxtb	r2, r2
 8026d22:	fb14 f602 	smulbb	r6, r4, r2
 8026d26:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8026d2a:	b2c0      	uxtb	r0, r0
 8026d2c:	fb03 6305 	mla	r3, r3, r5, r6
 8026d30:	b29e      	uxth	r6, r3
 8026d32:	9b01      	ldr	r3, [sp, #4]
 8026d34:	fb13 f302 	smulbb	r3, r3, r2
 8026d38:	fb04 3405 	mla	r4, r4, r5, r3
 8026d3c:	9b02      	ldr	r3, [sp, #8]
 8026d3e:	fb13 f202 	smulbb	r2, r3, r2
 8026d42:	b2a4      	uxth	r4, r4
 8026d44:	1c73      	adds	r3, r6, #1
 8026d46:	fb00 2005 	mla	r0, r0, r5, r2
 8026d4a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026d4e:	b280      	uxth	r0, r0
 8026d50:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026d54:	1c42      	adds	r2, r0, #1
 8026d56:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026d5a:	1c62      	adds	r2, r4, #1
 8026d5c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026d60:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026d64:	0952      	lsrs	r2, r2, #5
 8026d66:	4303      	orrs	r3, r0
 8026d68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d6c:	4313      	orrs	r3, r2
 8026d6e:	800b      	strh	r3, [r1, #0]
 8026d70:	b005      	add	sp, #20
 8026d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d76:	bf00      	nop
 8026d78:	080305ce 	.word	0x080305ce
 8026d7c:	08030b8d 	.word	0x08030b8d
 8026d80:	080306b7 	.word	0x080306b7

08026d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d88:	ed2d 8b08 	vpush	{d8-d11}
 8026d8c:	b09d      	sub	sp, #116	; 0x74
 8026d8e:	eeb0 aa40 	vmov.f32	s20, s0
 8026d92:	eef0 9a60 	vmov.f32	s19, s1
 8026d96:	9219      	str	r2, [sp, #100]	; 0x64
 8026d98:	eeb0 9a41 	vmov.f32	s18, s2
 8026d9c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8026d9e:	eeb0 8a62 	vmov.f32	s16, s5
 8026da2:	9307      	str	r3, [sp, #28]
 8026da4:	eef0 8a43 	vmov.f32	s17, s6
 8026da8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026dac:	eef0 ba44 	vmov.f32	s23, s8
 8026db0:	901b      	str	r0, [sp, #108]	; 0x6c
 8026db2:	eeb0 ba64 	vmov.f32	s22, s9
 8026db6:	931a      	str	r3, [sp, #104]	; 0x68
 8026db8:	eef0 aa45 	vmov.f32	s21, s10
 8026dbc:	6850      	ldr	r0, [r2, #4]
 8026dbe:	9117      	str	r1, [sp, #92]	; 0x5c
 8026dc0:	6812      	ldr	r2, [r2, #0]
 8026dc2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8026dc6:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8026dca:	fb00 1303 	mla	r3, r0, r3, r1
 8026dce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8026dd4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	9310      	str	r3, [sp, #64]	; 0x40
 8026dda:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8026de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	dc03      	bgt.n	8026dee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026de6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	f340 837b 	ble.w	80274e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8026dee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026df0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026df4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026df8:	1e48      	subs	r0, r1, #1
 8026dfa:	1e57      	subs	r7, r2, #1
 8026dfc:	9b07      	ldr	r3, [sp, #28]
 8026dfe:	2b00      	cmp	r3, #0
 8026e00:	f340 8194 	ble.w	802712c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8026e04:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026e08:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026e0c:	d406      	bmi.n	8026e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026e0e:	4584      	cmp	ip, r0
 8026e10:	da04      	bge.n	8026e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026e12:	2b00      	cmp	r3, #0
 8026e14:	db02      	blt.n	8026e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026e16:	42bb      	cmp	r3, r7
 8026e18:	f2c0 8189 	blt.w	802712e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026e1c:	f11c 0c01 	adds.w	ip, ip, #1
 8026e20:	f100 8179 	bmi.w	8027116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026e24:	4561      	cmp	r1, ip
 8026e26:	f2c0 8176 	blt.w	8027116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026e2a:	3301      	adds	r3, #1
 8026e2c:	f100 8173 	bmi.w	8027116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026e30:	429a      	cmp	r2, r3
 8026e32:	f2c0 8170 	blt.w	8027116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026e36:	9b07      	ldr	r3, [sp, #28]
 8026e38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026e3a:	9318      	str	r3, [sp, #96]	; 0x60
 8026e3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	f340 8192 	ble.w	8027168 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026e44:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026e46:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026e4a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026e4c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026e50:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026e54:	1422      	asrs	r2, r4, #16
 8026e56:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026e5a:	689b      	ldr	r3, [r3, #8]
 8026e5c:	f100 81d3 	bmi.w	8027206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026e60:	f103 38ff 	add.w	r8, r3, #4294967295
 8026e64:	4542      	cmp	r2, r8
 8026e66:	f280 81ce 	bge.w	8027206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026e6a:	f1bc 0f00 	cmp.w	ip, #0
 8026e6e:	f2c0 81ca 	blt.w	8027206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026e72:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026e76:	45c4      	cmp	ip, r8
 8026e78:	f280 81c5 	bge.w	8027206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026e7c:	b21b      	sxth	r3, r3
 8026e7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e80:	fb0c 2203 	mla	r2, ip, r3, r2
 8026e84:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026e88:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026e8c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026e90:	2800      	cmp	r0, #0
 8026e92:	f000 81af 	beq.w	80271f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8026e96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026e9a:	950c      	str	r5, [sp, #48]	; 0x30
 8026e9c:	0e2d      	lsrs	r5, r5, #24
 8026e9e:	9513      	str	r5, [sp, #76]	; 0x4c
 8026ea0:	b181      	cbz	r1, 8026ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8026ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026ea6:	3b01      	subs	r3, #1
 8026ea8:	009b      	lsls	r3, r3, #2
 8026eaa:	3304      	adds	r3, #4
 8026eac:	eb08 0c03 	add.w	ip, r8, r3
 8026eb0:	f858 3003 	ldr.w	r3, [r8, r3]
 8026eb4:	9308      	str	r3, [sp, #32]
 8026eb6:	0e1b      	lsrs	r3, r3, #24
 8026eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8026eba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8026ec0:	0e1b      	lsrs	r3, r3, #24
 8026ec2:	9314      	str	r3, [sp, #80]	; 0x50
 8026ec4:	b280      	uxth	r0, r0
 8026ec6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ec8:	b289      	uxth	r1, r1
 8026eca:	fb00 f901 	mul.w	r9, r0, r1
 8026ece:	0100      	lsls	r0, r0, #4
 8026ed0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026ed4:	eba0 0809 	sub.w	r8, r0, r9
 8026ed8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026edc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026ede:	b289      	uxth	r1, r1
 8026ee0:	fa1f f888 	uxth.w	r8, r8
 8026ee4:	1a5b      	subs	r3, r3, r1
 8026ee6:	fb08 f000 	mul.w	r0, r8, r0
 8026eea:	b29b      	uxth	r3, r3
 8026eec:	fb03 000e 	mla	r0, r3, lr, r0
 8026ef0:	fb01 0005 	mla	r0, r1, r5, r0
 8026ef4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026ef6:	fb09 0005 	mla	r0, r9, r5, r0
 8026efa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026efe:	2800      	cmp	r0, #0
 8026f00:	f000 8100 	beq.w	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8026f04:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026f08:	d01b      	beq.n	8026f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026f0a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026f0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026f12:	fb0e fa0a 	mul.w	sl, lr, sl
 8026f16:	fb0e fe02 	mul.w	lr, lr, r2
 8026f1a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026f1e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026f22:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026f26:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026f2a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026f2e:	4452      	add	r2, sl
 8026f30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f34:	0a12      	lsrs	r2, r2, #8
 8026f36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026f3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026f3e:	ea42 020c 	orr.w	r2, r2, ip
 8026f42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f44:	2dff      	cmp	r5, #255	; 0xff
 8026f46:	d021      	beq.n	8026f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8026f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f4a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f50:	fb05 fb0b 	mul.w	fp, r5, fp
 8026f54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f56:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026f5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f5c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026f64:	fb05 fa0a 	mul.w	sl, r5, sl
 8026f68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f6c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026f70:	44de      	add	lr, fp
 8026f72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026f86:	ea4e 050a 	orr.w	r5, lr, sl
 8026f8a:	950c      	str	r5, [sp, #48]	; 0x30
 8026f8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f8e:	2dff      	cmp	r5, #255	; 0xff
 8026f90:	d021      	beq.n	8026fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8026f92:	9d08      	ldr	r5, [sp, #32]
 8026f94:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f9a:	fb05 fb0b 	mul.w	fp, r5, fp
 8026f9e:	9d08      	ldr	r5, [sp, #32]
 8026fa0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026fa4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026fa6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026faa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026fae:	fb05 fa0a 	mul.w	sl, r5, sl
 8026fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026fb6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026fba:	44de      	add	lr, fp
 8026fbc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026fc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026fcc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026fd0:	ea4e 050a 	orr.w	r5, lr, sl
 8026fd4:	9508      	str	r5, [sp, #32]
 8026fd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026fd8:	2dff      	cmp	r5, #255	; 0xff
 8026fda:	d021      	beq.n	8027020 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8026fdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026fde:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026fe2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026fe4:	fb05 fb0b 	mul.w	fp, r5, fp
 8026fe8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026fea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026fee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026ff0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ff4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ff8:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027000:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027004:	44de      	add	lr, fp
 8027006:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802700a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802700e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027012:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027016:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802701a:	ea4e 050a 	orr.w	r5, lr, sl
 802701e:	950d      	str	r5, [sp, #52]	; 0x34
 8027020:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027022:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027026:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802702a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802702e:	9d08      	ldr	r5, [sp, #32]
 8027030:	fb08 fc0c 	mul.w	ip, r8, ip
 8027034:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027038:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802703c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802703e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027042:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027048:	fb09 cc0e 	mla	ip, r9, lr, ip
 802704c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027052:	fb08 f80e 	mul.w	r8, r8, lr
 8027056:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802705a:	f8b7 e000 	ldrh.w	lr, [r7]
 802705e:	fb03 8202 	mla	r2, r3, r2, r8
 8027062:	9b08      	ldr	r3, [sp, #32]
 8027064:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027068:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802706c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802706e:	fb01 220a 	mla	r2, r1, sl, r2
 8027072:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027078:	fb09 2901 	mla	r9, r9, r1, r2
 802707c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802707e:	4343      	muls	r3, r0
 8027080:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027084:	1c58      	adds	r0, r3, #1
 8027086:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802708a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802708e:	ea4c 0c09 	orr.w	ip, ip, r9
 8027092:	ea4f 232e 	mov.w	r3, lr, asr #8
 8027096:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802709a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802709e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80270a2:	b2c0      	uxtb	r0, r0
 80270a4:	fb11 f102 	smulbb	r1, r1, r2
 80270a8:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80270ac:	fb03 1300 	mla	r3, r3, r0, r1
 80270b0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80270b4:	b299      	uxth	r1, r3
 80270b6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80270ba:	fa5f fc8c 	uxtb.w	ip, ip
 80270be:	fb13 f305 	smulbb	r3, r3, r5
 80270c2:	fb1c fc05 	smulbb	ip, ip, r5
 80270c6:	fb02 3200 	mla	r2, r2, r0, r3
 80270ca:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80270ce:	b2db      	uxtb	r3, r3
 80270d0:	b292      	uxth	r2, r2
 80270d2:	fb03 cc00 	mla	ip, r3, r0, ip
 80270d6:	1c4b      	adds	r3, r1, #1
 80270d8:	fa1f fc8c 	uxth.w	ip, ip
 80270dc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80270e0:	1c51      	adds	r1, r2, #1
 80270e2:	f10c 0001 	add.w	r0, ip, #1
 80270e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80270ea:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80270ee:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80270f2:	0952      	lsrs	r2, r2, #5
 80270f4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80270f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80270fc:	ea43 030c 	orr.w	r3, r3, ip
 8027100:	4313      	orrs	r3, r2
 8027102:	803b      	strh	r3, [r7, #0]
 8027104:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027106:	3702      	adds	r7, #2
 8027108:	441c      	add	r4, r3
 802710a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802710c:	441e      	add	r6, r3
 802710e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027110:	3b01      	subs	r3, #1
 8027112:	9318      	str	r3, [sp, #96]	; 0x60
 8027114:	e692      	b.n	8026e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8027116:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027118:	441c      	add	r4, r3
 802711a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802711c:	441e      	add	r6, r3
 802711e:	9b07      	ldr	r3, [sp, #28]
 8027120:	3b01      	subs	r3, #1
 8027122:	9307      	str	r3, [sp, #28]
 8027124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027126:	3302      	adds	r3, #2
 8027128:	930a      	str	r3, [sp, #40]	; 0x28
 802712a:	e667      	b.n	8026dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802712c:	d023      	beq.n	8027176 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802712e:	9b07      	ldr	r3, [sp, #28]
 8027130:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8027132:	3b01      	subs	r3, #1
 8027134:	fb00 4003 	mla	r0, r0, r3, r4
 8027138:	1400      	asrs	r0, r0, #16
 802713a:	f53f ae7c 	bmi.w	8026e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802713e:	3901      	subs	r1, #1
 8027140:	4288      	cmp	r0, r1
 8027142:	f6bf ae78 	bge.w	8026e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027146:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027148:	fb01 6303 	mla	r3, r1, r3, r6
 802714c:	141b      	asrs	r3, r3, #16
 802714e:	f53f ae72 	bmi.w	8026e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027152:	3a01      	subs	r2, #1
 8027154:	4293      	cmp	r3, r2
 8027156:	f6bf ae6e 	bge.w	8026e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802715a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802715e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027162:	f1bb 0f00 	cmp.w	fp, #0
 8027166:	dc6c      	bgt.n	8027242 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8027168:	9b07      	ldr	r3, [sp, #28]
 802716a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802716e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027170:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027174:	930a      	str	r3, [sp, #40]	; 0x28
 8027176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027178:	2b00      	cmp	r3, #0
 802717a:	f340 81b3 	ble.w	80274e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802717e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027182:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027184:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027188:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802718c:	eef0 6a48 	vmov.f32	s13, s16
 8027190:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027194:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802719c:	ee16 4a90 	vmov	r4, s13
 80271a0:	eef0 6a68 	vmov.f32	s13, s17
 80271a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271a8:	ee16 6a90 	vmov	r6, s13
 80271ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80271b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80271b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80271b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80271bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80271c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80271c4:	ee18 2a10 	vmov	r2, s16
 80271c8:	eeb0 8a47 	vmov.f32	s16, s14
 80271cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80271d0:	ee18 2a90 	vmov	r2, s17
 80271d4:	9331      	str	r3, [sp, #196]	; 0xc4
 80271d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80271d8:	eef0 8a67 	vmov.f32	s17, s15
 80271dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80271e0:	9332      	str	r3, [sp, #200]	; 0xc8
 80271e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80271e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80271e6:	3b01      	subs	r3, #1
 80271e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80271ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80271ec:	bf08      	it	eq
 80271ee:	4613      	moveq	r3, r2
 80271f0:	9307      	str	r3, [sp, #28]
 80271f2:	e5f5      	b.n	8026de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80271f4:	2900      	cmp	r1, #0
 80271f6:	f43f ae65 	beq.w	8026ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80271fa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80271fe:	9308      	str	r3, [sp, #32]
 8027200:	0e1b      	lsrs	r3, r3, #24
 8027202:	9311      	str	r3, [sp, #68]	; 0x44
 8027204:	e65e      	b.n	8026ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027206:	f112 0801 	adds.w	r8, r2, #1
 802720a:	f53f af7b 	bmi.w	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802720e:	4543      	cmp	r3, r8
 8027210:	f6ff af78 	blt.w	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027214:	f11c 0801 	adds.w	r8, ip, #1
 8027218:	f53f af74 	bmi.w	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802721c:	45c6      	cmp	lr, r8
 802721e:	f6ff af71 	blt.w	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027222:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027224:	b21b      	sxth	r3, r3
 8027226:	9201      	str	r2, [sp, #4]
 8027228:	fa0f f28e 	sxth.w	r2, lr
 802722c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027230:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027234:	9200      	str	r2, [sp, #0]
 8027236:	4639      	mov	r1, r7
 8027238:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802723a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802723c:	f7ff fc42 	bl	8026ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027240:	e760      	b.n	8027104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027242:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027244:	1427      	asrs	r7, r4, #16
 8027246:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027248:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802724c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027250:	1433      	asrs	r3, r6, #16
 8027252:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027256:	fb01 7303 	mla	r3, r1, r3, r7
 802725a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802725e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027262:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027266:	2a00      	cmp	r2, #0
 8027268:	f000 8133 	beq.w	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 802726c:	687d      	ldr	r5, [r7, #4]
 802726e:	950e      	str	r5, [sp, #56]	; 0x38
 8027270:	0e2d      	lsrs	r5, r5, #24
 8027272:	9515      	str	r5, [sp, #84]	; 0x54
 8027274:	b178      	cbz	r0, 8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027276:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802727a:	3901      	subs	r1, #1
 802727c:	0089      	lsls	r1, r1, #2
 802727e:	3104      	adds	r1, #4
 8027280:	eb07 0e01 	add.w	lr, r7, r1
 8027284:	5879      	ldr	r1, [r7, r1]
 8027286:	9109      	str	r1, [sp, #36]	; 0x24
 8027288:	0e09      	lsrs	r1, r1, #24
 802728a:	9112      	str	r1, [sp, #72]	; 0x48
 802728c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027290:	910f      	str	r1, [sp, #60]	; 0x3c
 8027292:	0e09      	lsrs	r1, r1, #24
 8027294:	9116      	str	r1, [sp, #88]	; 0x58
 8027296:	b292      	uxth	r2, r2
 8027298:	9915      	ldr	r1, [sp, #84]	; 0x54
 802729a:	b280      	uxth	r0, r0
 802729c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802729e:	fb02 f800 	mul.w	r8, r2, r0
 80272a2:	0112      	lsls	r2, r2, #4
 80272a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80272a8:	eba2 0e08 	sub.w	lr, r2, r8
 80272ac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80272b0:	b280      	uxth	r0, r0
 80272b2:	fa1f fe8e 	uxth.w	lr, lr
 80272b6:	1a12      	subs	r2, r2, r0
 80272b8:	fb0e f101 	mul.w	r1, lr, r1
 80272bc:	b292      	uxth	r2, r2
 80272be:	fb02 110c 	mla	r1, r2, ip, r1
 80272c2:	fb00 1105 	mla	r1, r0, r5, r1
 80272c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80272c8:	fb08 1105 	mla	r1, r8, r5, r1
 80272cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80272d0:	2900      	cmp	r1, #0
 80272d2:	f000 80f5 	beq.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80272d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80272da:	d019      	beq.n	8027310 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80272dc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80272e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272e4:	fb0c fa0a 	mul.w	sl, ip, sl
 80272e8:	fb0c fc03 	mul.w	ip, ip, r3
 80272ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80272f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80272f4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80272f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80272fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027300:	4453      	add	r3, sl
 8027302:	0a3f      	lsrs	r7, r7, #8
 8027304:	0a1b      	lsrs	r3, r3, #8
 8027306:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802730a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802730e:	433b      	orrs	r3, r7
 8027310:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027312:	2dff      	cmp	r5, #255	; 0xff
 8027314:	d020      	beq.n	8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027316:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027318:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802731c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802731e:	436f      	muls	r7, r5
 8027320:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027322:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027326:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802732a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802732c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027330:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027334:	fb05 fa0a 	mul.w	sl, r5, sl
 8027338:	44bc      	add	ip, r7
 802733a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802733e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027342:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027346:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802734a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802734e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027352:	ea4c 050a 	orr.w	r5, ip, sl
 8027356:	950e      	str	r5, [sp, #56]	; 0x38
 8027358:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802735a:	2dff      	cmp	r5, #255	; 0xff
 802735c:	d020      	beq.n	80273a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802735e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027360:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027364:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027366:	436f      	muls	r7, r5
 8027368:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802736a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802736e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027372:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027374:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027378:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802737c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027380:	44bc      	add	ip, r7
 8027382:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802738a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802738e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027392:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027396:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802739a:	ea4c 050a 	orr.w	r5, ip, sl
 802739e:	9509      	str	r5, [sp, #36]	; 0x24
 80273a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80273a2:	2dff      	cmp	r5, #255	; 0xff
 80273a4:	d020      	beq.n	80273e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80273a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80273a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80273ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80273ae:	436f      	muls	r7, r5
 80273b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80273b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80273b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80273ba:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80273bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80273c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80273c8:	44bc      	add	ip, r7
 80273ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80273ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80273e2:	ea4c 050a 	orr.w	r5, ip, sl
 80273e6:	950f      	str	r5, [sp, #60]	; 0x3c
 80273e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80273ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80273ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80273f2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80273f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80273f8:	fb0e f707 	mul.w	r7, lr, r7
 80273fc:	fb02 770c 	mla	r7, r2, ip, r7
 8027400:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027404:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027406:	fb00 770c 	mla	r7, r0, ip, r7
 802740a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802740e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027410:	fb08 770c 	mla	r7, r8, ip, r7
 8027414:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027418:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802741a:	fb0e fe0c 	mul.w	lr, lr, ip
 802741e:	0a3f      	lsrs	r7, r7, #8
 8027420:	fb02 e303 	mla	r3, r2, r3, lr
 8027424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027426:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802742a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802742e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027430:	fb00 330a 	mla	r3, r0, sl, r3
 8027434:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027438:	f8b9 0000 	ldrh.w	r0, [r9]
 802743c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027442:	1202      	asrs	r2, r0, #8
 8027444:	4359      	muls	r1, r3
 8027446:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802744a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802744e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027452:	1c4b      	adds	r3, r1, #1
 8027454:	ea47 070c 	orr.w	r7, r7, ip
 8027458:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802745c:	0c3b      	lsrs	r3, r7, #16
 802745e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027462:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027466:	b2ff      	uxtb	r7, r7
 8027468:	fb13 f305 	smulbb	r3, r3, r5
 802746c:	b2c9      	uxtb	r1, r1
 802746e:	fb17 f705 	smulbb	r7, r7, r5
 8027472:	fb02 3201 	mla	r2, r2, r1, r3
 8027476:	10c3      	asrs	r3, r0, #3
 8027478:	fb1c fc05 	smulbb	ip, ip, r5
 802747c:	00c0      	lsls	r0, r0, #3
 802747e:	b292      	uxth	r2, r2
 8027480:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027484:	b2c0      	uxtb	r0, r0
 8027486:	fb03 c301 	mla	r3, r3, r1, ip
 802748a:	fb00 7001 	mla	r0, r0, r1, r7
 802748e:	1c51      	adds	r1, r2, #1
 8027490:	b29b      	uxth	r3, r3
 8027492:	b280      	uxth	r0, r0
 8027494:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027498:	f100 0c01 	add.w	ip, r0, #1
 802749c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80274a0:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80274a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80274a8:	ea42 020c 	orr.w	r2, r2, ip
 80274ac:	f103 0c01 	add.w	ip, r3, #1
 80274b0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80274b4:	095b      	lsrs	r3, r3, #5
 80274b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80274ba:	431a      	orrs	r2, r3
 80274bc:	f8a9 2000 	strh.w	r2, [r9]
 80274c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80274c2:	f109 0902 	add.w	r9, r9, #2
 80274c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80274ca:	441c      	add	r4, r3
 80274cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80274ce:	441e      	add	r6, r3
 80274d0:	e647      	b.n	8027162 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80274d2:	2800      	cmp	r0, #0
 80274d4:	f43f aedf 	beq.w	8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80274d8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80274dc:	9109      	str	r1, [sp, #36]	; 0x24
 80274de:	0e09      	lsrs	r1, r1, #24
 80274e0:	9112      	str	r1, [sp, #72]	; 0x48
 80274e2:	e6d8      	b.n	8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80274e4:	b01d      	add	sp, #116	; 0x74
 80274e6:	ecbd 8b08 	vpop	{d8-d11}
 80274ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080274f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80274f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f4:	880e      	ldrh	r6, [r1, #0]
 80274f6:	b085      	sub	sp, #20
 80274f8:	4690      	mov	r8, r2
 80274fa:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80274fe:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027502:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027506:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 802750a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802750e:	00f6      	lsls	r6, r6, #3
 8027510:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027514:	9200      	str	r2, [sp, #0]
 8027516:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 802751a:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 802751e:	9201      	str	r2, [sp, #4]
 8027520:	b2f2      	uxtb	r2, r6
 8027522:	2c00      	cmp	r4, #0
 8027524:	fb04 5603 	mla	r6, r4, r3, r5
 8027528:	9202      	str	r2, [sp, #8]
 802752a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 802752e:	db36      	blt.n	802759e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8027530:	45a6      	cmp	lr, r4
 8027532:	dd34      	ble.n	802759e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8027534:	2d00      	cmp	r5, #0
 8027536:	db30      	blt.n	802759a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8027538:	42ab      	cmp	r3, r5
 802753a:	dd2e      	ble.n	802759a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 802753c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8027540:	1c6e      	adds	r6, r5, #1
 8027542:	d42f      	bmi.n	80275a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027544:	42b3      	cmp	r3, r6
 8027546:	dd2d      	ble.n	80275a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027548:	b370      	cbz	r0, 80275a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 802754a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802754e:	3401      	adds	r4, #1
 8027550:	d42e      	bmi.n	80275b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8027552:	45a6      	cmp	lr, r4
 8027554:	dd2c      	ble.n	80275b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8027556:	b377      	cbz	r7, 80275b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8027558:	2d00      	cmp	r5, #0
 802755a:	db27      	blt.n	80275ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 802755c:	42ab      	cmp	r3, r5
 802755e:	dd25      	ble.n	80275ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8027560:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027564:	3501      	adds	r5, #1
 8027566:	d429      	bmi.n	80275bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8027568:	42ab      	cmp	r3, r5
 802756a:	dd27      	ble.n	80275bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802756c:	b340      	cbz	r0, 80275c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802756e:	3301      	adds	r3, #1
 8027570:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027574:	280f      	cmp	r0, #15
 8027576:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802757a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802757e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027582:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027586:	d801      	bhi.n	802758c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8027588:	2f0f      	cmp	r7, #15
 802758a:	d91b      	bls.n	80275c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 802758c:	4b7e      	ldr	r3, [pc, #504]	; (8027788 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 802758e:	f240 210d 	movw	r1, #525	; 0x20d
 8027592:	4a7e      	ldr	r2, [pc, #504]	; (802778c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8027594:	487e      	ldr	r0, [pc, #504]	; (8027790 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8027596:	f003 f8fd 	bl	802a794 <__assert_func>
 802759a:	2200      	movs	r2, #0
 802759c:	e7d0      	b.n	8027540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 802759e:	2600      	movs	r6, #0
 80275a0:	4632      	mov	r2, r6
 80275a2:	e7d4      	b.n	802754e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80275a4:	2600      	movs	r6, #0
 80275a6:	e7d2      	b.n	802754e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80275a8:	4606      	mov	r6, r0
 80275aa:	e7d0      	b.n	802754e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80275ac:	2400      	movs	r4, #0
 80275ae:	e7d9      	b.n	8027564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 80275b0:	2300      	movs	r3, #0
 80275b2:	461c      	mov	r4, r3
 80275b4:	e7de      	b.n	8027574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80275b6:	463b      	mov	r3, r7
 80275b8:	463c      	mov	r4, r7
 80275ba:	e7db      	b.n	8027574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80275bc:	2300      	movs	r3, #0
 80275be:	e7d9      	b.n	8027574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80275c0:	4603      	mov	r3, r0
 80275c2:	e7d7      	b.n	8027574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 80275c4:	b280      	uxth	r0, r0
 80275c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80275ca:	b2bf      	uxth	r7, r7
 80275cc:	fb00 fe07 	mul.w	lr, r0, r7
 80275d0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80275d4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80275d8:	eba0 0c0e 	sub.w	ip, r0, lr
 80275dc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80275e0:	b2bf      	uxth	r7, r7
 80275e2:	fa1f fc8c 	uxth.w	ip, ip
 80275e6:	eba5 0507 	sub.w	r5, r5, r7
 80275ea:	fb0c f00a 	mul.w	r0, ip, sl
 80275ee:	b2ad      	uxth	r5, r5
 80275f0:	fb05 000b 	mla	r0, r5, fp, r0
 80275f4:	fb07 0009 	mla	r0, r7, r9, r0
 80275f8:	fb0e 0008 	mla	r0, lr, r8, r0
 80275fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027600:	9003      	str	r0, [sp, #12]
 8027602:	d018      	beq.n	8027636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8027604:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027608:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802760c:	fb0b f000 	mul.w	r0, fp, r0
 8027610:	fb0b fb02 	mul.w	fp, fp, r2
 8027614:	0a02      	lsrs	r2, r0, #8
 8027616:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802761a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802761e:	4402      	add	r2, r0
 8027620:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027624:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027628:	0a12      	lsrs	r2, r2, #8
 802762a:	0a00      	lsrs	r0, r0, #8
 802762c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027630:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027634:	4302      	orrs	r2, r0
 8027636:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802763a:	d019      	beq.n	8027670 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 802763c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027640:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027644:	fb0a fb0b 	mul.w	fp, sl, fp
 8027648:	fb0a fa06 	mul.w	sl, sl, r6
 802764c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027650:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027654:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027658:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802765c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027660:	445e      	add	r6, fp
 8027662:	0a00      	lsrs	r0, r0, #8
 8027664:	0a36      	lsrs	r6, r6, #8
 8027666:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802766a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802766e:	4306      	orrs	r6, r0
 8027670:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027674:	d019      	beq.n	80276aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 8027676:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802767a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802767e:	fb09 fa0a 	mul.w	sl, r9, sl
 8027682:	fb09 f904 	mul.w	r9, r9, r4
 8027686:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802768a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802768e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8027692:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027696:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802769a:	4454      	add	r4, sl
 802769c:	0a00      	lsrs	r0, r0, #8
 802769e:	0a24      	lsrs	r4, r4, #8
 80276a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80276a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80276a8:	4304      	orrs	r4, r0
 80276aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80276ae:	d019      	beq.n	80276e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 80276b0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80276b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276b8:	fb08 f909 	mul.w	r9, r8, r9
 80276bc:	fb08 f803 	mul.w	r8, r8, r3
 80276c0:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80276c4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80276c8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80276cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80276d0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80276d4:	444b      	add	r3, r9
 80276d6:	0a00      	lsrs	r0, r0, #8
 80276d8:	0a1b      	lsrs	r3, r3, #8
 80276da:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80276de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80276e2:	4303      	orrs	r3, r0
 80276e4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80276e8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80276ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80276f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80276f4:	fb0c f808 	mul.w	r8, ip, r8
 80276f8:	fb0c f606 	mul.w	r6, ip, r6
 80276fc:	fb05 8800 	mla	r8, r5, r0, r8
 8027700:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027704:	fb05 6202 	mla	r2, r5, r2, r6
 8027708:	9d01      	ldr	r5, [sp, #4]
 802770a:	fb07 8800 	mla	r8, r7, r0, r8
 802770e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027712:	fb0e 8000 	mla	r0, lr, r0, r8
 8027716:	0a00      	lsrs	r0, r0, #8
 8027718:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802771c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027720:	9c02      	ldr	r4, [sp, #8]
 8027722:	fb07 2700 	mla	r7, r7, r0, r2
 8027726:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802772a:	9b03      	ldr	r3, [sp, #12]
 802772c:	fb0e 7000 	mla	r0, lr, r0, r7
 8027730:	43da      	mvns	r2, r3
 8027732:	9b00      	ldr	r3, [sp, #0]
 8027734:	0a00      	lsrs	r0, r0, #8
 8027736:	b2d2      	uxtb	r2, r2
 8027738:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802773c:	4353      	muls	r3, r2
 802773e:	4354      	muls	r4, r2
 8027740:	ea48 0000 	orr.w	r0, r8, r0
 8027744:	4355      	muls	r5, r2
 8027746:	4622      	mov	r2, r4
 8027748:	1c5c      	adds	r4, r3, #1
 802774a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802774e:	0c03      	lsrs	r3, r0, #16
 8027750:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027754:	4b0f      	ldr	r3, [pc, #60]	; (8027794 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8027756:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802775a:	1c54      	adds	r4, r2, #1
 802775c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8027760:	b2c2      	uxtb	r2, r0
 8027762:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027766:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802776a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802776e:	1c6a      	adds	r2, r5, #1
 8027770:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8027774:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027778:	00c0      	lsls	r0, r0, #3
 802777a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802777e:	4318      	orrs	r0, r3
 8027780:	8008      	strh	r0, [r1, #0]
 8027782:	b005      	add	sp, #20
 8027784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027788:	080305ce 	.word	0x080305ce
 802778c:	08030b8d 	.word	0x08030b8d
 8027790:	080306b7 	.word	0x080306b7
 8027794:	fffff800 	.word	0xfffff800

08027798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802779c:	ed2d 8b08 	vpush	{d8-d11}
 80277a0:	b09b      	sub	sp, #108	; 0x6c
 80277a2:	eeb0 aa40 	vmov.f32	s20, s0
 80277a6:	eef0 9a60 	vmov.f32	s19, s1
 80277aa:	9218      	str	r2, [sp, #96]	; 0x60
 80277ac:	eeb0 9a41 	vmov.f32	s18, s2
 80277b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80277b2:	eeb0 8a62 	vmov.f32	s16, s5
 80277b6:	9019      	str	r0, [sp, #100]	; 0x64
 80277b8:	eef0 8a43 	vmov.f32	s17, s6
 80277bc:	6850      	ldr	r0, [r2, #4]
 80277be:	eef0 ba44 	vmov.f32	s23, s8
 80277c2:	9116      	str	r1, [sp, #88]	; 0x58
 80277c4:	eeb0 ba64 	vmov.f32	s22, s9
 80277c8:	9307      	str	r3, [sp, #28]
 80277ca:	eef0 aa45 	vmov.f32	s21, s10
 80277ce:	6812      	ldr	r2, [r2, #0]
 80277d0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80277d4:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80277d8:	fb00 1303 	mla	r3, r0, r3, r1
 80277dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80277e0:	930a      	str	r3, [sp, #40]	; 0x28
 80277e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80277e4:	681b      	ldr	r3, [r3, #0]
 80277e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80277e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	dc03      	bgt.n	80277f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80277ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	f340 838b 	ble.w	8027f0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 80277f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80277f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027800:	1e48      	subs	r0, r1, #1
 8027802:	1e57      	subs	r7, r2, #1
 8027804:	9b07      	ldr	r3, [sp, #28]
 8027806:	2b00      	cmp	r3, #0
 8027808:	f340 818b 	ble.w	8027b22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802780c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027810:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027814:	d406      	bmi.n	8027824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027816:	4584      	cmp	ip, r0
 8027818:	da04      	bge.n	8027824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802781a:	2b00      	cmp	r3, #0
 802781c:	db02      	blt.n	8027824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802781e:	42bb      	cmp	r3, r7
 8027820:	f2c0 8180 	blt.w	8027b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8027824:	f11c 0c01 	adds.w	ip, ip, #1
 8027828:	f100 8170 	bmi.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802782c:	4561      	cmp	r1, ip
 802782e:	f2c0 816d 	blt.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027832:	3301      	adds	r3, #1
 8027834:	f100 816a 	bmi.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027838:	429a      	cmp	r2, r3
 802783a:	f2c0 8167 	blt.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802783e:	9b07      	ldr	r3, [sp, #28]
 8027840:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027842:	9317      	str	r3, [sp, #92]	; 0x5c
 8027844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027846:	2b00      	cmp	r3, #0
 8027848:	f340 8189 	ble.w	8027b5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802784c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802784e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027852:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027854:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027858:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802785c:	1422      	asrs	r2, r4, #16
 802785e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027862:	689b      	ldr	r3, [r3, #8]
 8027864:	f100 81d8 	bmi.w	8027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027868:	f103 38ff 	add.w	r8, r3, #4294967295
 802786c:	4542      	cmp	r2, r8
 802786e:	f280 81d3 	bge.w	8027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027872:	f1bc 0f00 	cmp.w	ip, #0
 8027876:	f2c0 81cf 	blt.w	8027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802787a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802787e:	45c4      	cmp	ip, r8
 8027880:	f280 81ca 	bge.w	8027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027884:	b21b      	sxth	r3, r3
 8027886:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027888:	fb0c 2203 	mla	r2, ip, r3, r2
 802788c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027890:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027894:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027898:	2900      	cmp	r1, #0
 802789a:	f000 81a6 	beq.w	8027bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802789e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80278a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80278a4:	0e2d      	lsrs	r5, r5, #24
 80278a6:	9512      	str	r5, [sp, #72]	; 0x48
 80278a8:	b180      	cbz	r0, 80278cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80278aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80278ae:	3b01      	subs	r3, #1
 80278b0:	009b      	lsls	r3, r3, #2
 80278b2:	3304      	adds	r3, #4
 80278b4:	eb08 0c03 	add.w	ip, r8, r3
 80278b8:	f858 3003 	ldr.w	r3, [r8, r3]
 80278bc:	9308      	str	r3, [sp, #32]
 80278be:	0e1b      	lsrs	r3, r3, #24
 80278c0:	9310      	str	r3, [sp, #64]	; 0x40
 80278c2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80278c6:	930c      	str	r3, [sp, #48]	; 0x30
 80278c8:	0e1b      	lsrs	r3, r3, #24
 80278ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80278cc:	b289      	uxth	r1, r1
 80278ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80278d0:	b280      	uxth	r0, r0
 80278d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80278d4:	fb01 f900 	mul.w	r9, r1, r0
 80278d8:	0109      	lsls	r1, r1, #4
 80278da:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80278de:	eba1 0809 	sub.w	r8, r1, r9
 80278e2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80278e6:	b280      	uxth	r0, r0
 80278e8:	fa1f f888 	uxth.w	r8, r8
 80278ec:	1a09      	subs	r1, r1, r0
 80278ee:	fb08 f303 	mul.w	r3, r8, r3
 80278f2:	b289      	uxth	r1, r1
 80278f4:	fb01 330e 	mla	r3, r1, lr, r3
 80278f8:	fb00 3305 	mla	r3, r0, r5, r3
 80278fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80278fe:	fb09 3305 	mla	r3, r9, r5, r3
 8027902:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027906:	2b00      	cmp	r3, #0
 8027908:	f000 80f7 	beq.w	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802790c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027910:	d01b      	beq.n	802794a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8027912:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027916:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802791a:	fb0e fa0a 	mul.w	sl, lr, sl
 802791e:	fb0e fe02 	mul.w	lr, lr, r2
 8027922:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027926:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802792a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802792e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027932:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027936:	4452      	add	r2, sl
 8027938:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802793c:	0a12      	lsrs	r2, r2, #8
 802793e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027942:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027946:	ea42 020c 	orr.w	r2, r2, ip
 802794a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802794c:	2dff      	cmp	r5, #255	; 0xff
 802794e:	d021      	beq.n	8027994 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8027950:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027952:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027956:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027958:	fb05 fb0b 	mul.w	fp, r5, fp
 802795c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802795e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027962:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027964:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027968:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802796c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027970:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027978:	44de      	add	lr, fp
 802797a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802797e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802798a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802798e:	ea4e 050a 	orr.w	r5, lr, sl
 8027992:	950b      	str	r5, [sp, #44]	; 0x2c
 8027994:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027996:	2dff      	cmp	r5, #255	; 0xff
 8027998:	d021      	beq.n	80279de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802799a:	9d08      	ldr	r5, [sp, #32]
 802799c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80279a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80279a2:	fb05 fb0b 	mul.w	fp, r5, fp
 80279a6:	9d08      	ldr	r5, [sp, #32]
 80279a8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80279ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80279ae:	fb05 fa0e 	mul.w	sl, r5, lr
 80279b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80279b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80279ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80279c2:	44de      	add	lr, fp
 80279c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279d8:	ea4e 050a 	orr.w	r5, lr, sl
 80279dc:	9508      	str	r5, [sp, #32]
 80279de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80279e0:	2dff      	cmp	r5, #255	; 0xff
 80279e2:	d021      	beq.n	8027a28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80279e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80279e6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80279ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80279ec:	fb05 fb0b 	mul.w	fp, r5, fp
 80279f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80279f2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80279f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80279f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80279fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027a00:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027a0c:	44de      	add	lr, fp
 8027a0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a22:	ea4e 050a 	orr.w	r5, lr, sl
 8027a26:	950c      	str	r5, [sp, #48]	; 0x30
 8027a28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a2a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027a2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a32:	2bff      	cmp	r3, #255	; 0xff
 8027a34:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027a38:	9d08      	ldr	r5, [sp, #32]
 8027a3a:	fb08 fc0c 	mul.w	ip, r8, ip
 8027a3e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027a42:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a48:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027a4c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a52:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027a56:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027a5a:	fb08 f80e 	mul.w	r8, r8, lr
 8027a5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a62:	fb01 8202 	mla	r2, r1, r2, r8
 8027a66:	9908      	ldr	r1, [sp, #32]
 8027a68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a6c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027a70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027a72:	fb00 220a 	mla	r2, r0, sl, r2
 8027a76:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027a7a:	fb09 2900 	mla	r9, r9, r0, r2
 8027a7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a82:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027a86:	ea4c 0c09 	orr.w	ip, ip, r9
 8027a8a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027a8e:	f000 80b5 	beq.w	8027bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8027a92:	8839      	ldrh	r1, [r7, #0]
 8027a94:	43db      	mvns	r3, r3
 8027a96:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027a9a:	fa5f f883 	uxtb.w	r8, r3
 8027a9e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8027aa2:	10c8      	asrs	r0, r1, #3
 8027aa4:	00cb      	lsls	r3, r1, #3
 8027aa6:	fb0e fe08 	mul.w	lr, lr, r8
 8027aaa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027aae:	b2db      	uxtb	r3, r3
 8027ab0:	f10e 0101 	add.w	r1, lr, #1
 8027ab4:	fb00 f008 	mul.w	r0, r0, r8
 8027ab8:	fb03 f308 	mul.w	r3, r3, r8
 8027abc:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027ac0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8027ac4:	fa5f fc8c 	uxtb.w	ip, ip
 8027ac8:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 8027acc:	4960      	ldr	r1, [pc, #384]	; (8027c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8027ace:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 8027ad2:	1c59      	adds	r1, r3, #1
 8027ad4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027ad8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027adc:	1c43      	adds	r3, r0, #1
 8027ade:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027ae2:	b2d3      	uxtb	r3, r2
 8027ae4:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8027ae8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027aec:	00db      	lsls	r3, r3, #3
 8027aee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027af2:	ea4c 0c03 	orr.w	ip, ip, r3
 8027af6:	f8a7 c000 	strh.w	ip, [r7]
 8027afa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027afc:	3702      	adds	r7, #2
 8027afe:	441c      	add	r4, r3
 8027b00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b02:	441e      	add	r6, r3
 8027b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027b06:	3b01      	subs	r3, #1
 8027b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8027b0a:	e69b      	b.n	8027844 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8027b0c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027b0e:	441c      	add	r4, r3
 8027b10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b12:	441e      	add	r6, r3
 8027b14:	9b07      	ldr	r3, [sp, #28]
 8027b16:	3b01      	subs	r3, #1
 8027b18:	9307      	str	r3, [sp, #28]
 8027b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b1c:	3302      	adds	r3, #2
 8027b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8027b20:	e670      	b.n	8027804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027b22:	d023      	beq.n	8027b6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8027b24:	9b07      	ldr	r3, [sp, #28]
 8027b26:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8027b28:	3b01      	subs	r3, #1
 8027b2a:	fb00 4003 	mla	r0, r0, r3, r4
 8027b2e:	1400      	asrs	r0, r0, #16
 8027b30:	f53f ae85 	bmi.w	802783e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027b34:	3901      	subs	r1, #1
 8027b36:	4288      	cmp	r0, r1
 8027b38:	f6bf ae81 	bge.w	802783e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027b3c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8027b3e:	fb01 6303 	mla	r3, r1, r3, r6
 8027b42:	141b      	asrs	r3, r3, #16
 8027b44:	f53f ae7b 	bmi.w	802783e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027b48:	3a01      	subs	r2, #1
 8027b4a:	4293      	cmp	r3, r2
 8027b4c:	f6bf ae77 	bge.w	802783e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027b50:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027b54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027b58:	f1bb 0f00 	cmp.w	fp, #0
 8027b5c:	dc7a      	bgt.n	8027c54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027b5e:	9b07      	ldr	r3, [sp, #28]
 8027b60:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b66:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8027b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027b6e:	2b00      	cmp	r3, #0
 8027b70:	f340 81cc 	ble.w	8027f0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8027b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027b7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027b7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027b82:	eef0 6a48 	vmov.f32	s13, s16
 8027b86:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027b8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027b8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b92:	ee16 4a90 	vmov	r4, s13
 8027b96:	eef0 6a68 	vmov.f32	s13, s17
 8027b9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b9e:	ee16 6a90 	vmov	r6, s13
 8027ba2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027ba6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027baa:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027bae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027bb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027bb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027bba:	ee18 2a10 	vmov	r2, s16
 8027bbe:	eeb0 8a47 	vmov.f32	s16, s14
 8027bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027bc6:	ee18 2a90 	vmov	r2, s17
 8027bca:	932f      	str	r3, [sp, #188]	; 0xbc
 8027bcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027bce:	eef0 8a67 	vmov.f32	s17, s15
 8027bd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027bd6:	9330      	str	r3, [sp, #192]	; 0xc0
 8027bd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027bda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027bdc:	3b01      	subs	r3, #1
 8027bde:	9316      	str	r3, [sp, #88]	; 0x58
 8027be0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027be2:	bf08      	it	eq
 8027be4:	4613      	moveq	r3, r2
 8027be6:	9307      	str	r3, [sp, #28]
 8027be8:	e5fe      	b.n	80277e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8027bea:	2800      	cmp	r0, #0
 8027bec:	f43f ae6e 	beq.w	80278cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027bf0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027bf4:	9308      	str	r3, [sp, #32]
 8027bf6:	0e1b      	lsrs	r3, r3, #24
 8027bf8:	9310      	str	r3, [sp, #64]	; 0x40
 8027bfa:	e667      	b.n	80278cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027bfc:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8027c00:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8027c04:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027c08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027c0c:	f022 0207 	bic.w	r2, r2, #7
 8027c10:	431a      	orrs	r2, r3
 8027c12:	ea42 0c0c 	orr.w	ip, r2, ip
 8027c16:	e76e      	b.n	8027af6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027c18:	f112 0801 	adds.w	r8, r2, #1
 8027c1c:	f53f af6d 	bmi.w	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027c20:	4543      	cmp	r3, r8
 8027c22:	f6ff af6a 	blt.w	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027c26:	f11c 0801 	adds.w	r8, ip, #1
 8027c2a:	f53f af66 	bmi.w	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027c2e:	45c6      	cmp	lr, r8
 8027c30:	f6ff af63 	blt.w	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027c34:	b21b      	sxth	r3, r3
 8027c36:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027c3a:	fa0f f28e 	sxth.w	r2, lr
 8027c3e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027c42:	9200      	str	r2, [sp, #0]
 8027c44:	4639      	mov	r1, r7
 8027c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027c48:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027c4a:	f7ff fc51 	bl	80274f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027c4e:	e754      	b.n	8027afa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027c50:	fffff800 	.word	0xfffff800
 8027c54:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027c56:	1421      	asrs	r1, r4, #16
 8027c58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027c5a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027c5e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027c62:	1433      	asrs	r3, r6, #16
 8027c64:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027c68:	fb07 1303 	mla	r3, r7, r3, r1
 8027c6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027c6e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027c72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027c76:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027c7a:	2a00      	cmp	r2, #0
 8027c7c:	f000 812f 	beq.w	8027ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8027c80:	684d      	ldr	r5, [r1, #4]
 8027c82:	950d      	str	r5, [sp, #52]	; 0x34
 8027c84:	0e2d      	lsrs	r5, r5, #24
 8027c86:	9514      	str	r5, [sp, #80]	; 0x50
 8027c88:	b178      	cbz	r0, 8027caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027c8a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8027c8e:	3f01      	subs	r7, #1
 8027c90:	00bf      	lsls	r7, r7, #2
 8027c92:	3704      	adds	r7, #4
 8027c94:	eb01 0e07 	add.w	lr, r1, r7
 8027c98:	59c9      	ldr	r1, [r1, r7]
 8027c9a:	9109      	str	r1, [sp, #36]	; 0x24
 8027c9c:	0e09      	lsrs	r1, r1, #24
 8027c9e:	9111      	str	r1, [sp, #68]	; 0x44
 8027ca0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027ca4:	910e      	str	r1, [sp, #56]	; 0x38
 8027ca6:	0e09      	lsrs	r1, r1, #24
 8027ca8:	9115      	str	r1, [sp, #84]	; 0x54
 8027caa:	b292      	uxth	r2, r2
 8027cac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027cae:	b280      	uxth	r0, r0
 8027cb0:	fb02 f900 	mul.w	r9, r2, r0
 8027cb4:	0112      	lsls	r2, r2, #4
 8027cb6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027cba:	eba2 0e09 	sub.w	lr, r2, r9
 8027cbe:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027cc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027cc4:	b280      	uxth	r0, r0
 8027cc6:	fa1f fe8e 	uxth.w	lr, lr
 8027cca:	1a09      	subs	r1, r1, r0
 8027ccc:	fb0e f202 	mul.w	r2, lr, r2
 8027cd0:	b289      	uxth	r1, r1
 8027cd2:	fb01 220c 	mla	r2, r1, ip, r2
 8027cd6:	fb00 2205 	mla	r2, r0, r5, r2
 8027cda:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027cdc:	fb09 2205 	mla	r2, r9, r5, r2
 8027ce0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027ce4:	2a00      	cmp	r2, #0
 8027ce6:	f000 80f1 	beq.w	8027ecc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027cea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027cee:	d019      	beq.n	8027d24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8027cf0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027cf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027cf8:	fb0c fa0a 	mul.w	sl, ip, sl
 8027cfc:	fb0c fc03 	mul.w	ip, ip, r3
 8027d00:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027d04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027d08:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027d0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d10:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027d14:	4453      	add	r3, sl
 8027d16:	0a3f      	lsrs	r7, r7, #8
 8027d18:	0a1b      	lsrs	r3, r3, #8
 8027d1a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027d1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d22:	433b      	orrs	r3, r7
 8027d24:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027d26:	2dff      	cmp	r5, #255	; 0xff
 8027d28:	d020      	beq.n	8027d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027d2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027d2c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d30:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027d32:	436f      	muls	r7, r5
 8027d34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027d36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027d3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027d40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d48:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d4c:	44bc      	add	ip, r7
 8027d4e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027d5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d66:	ea4c 050a 	orr.w	r5, ip, sl
 8027d6a:	950d      	str	r5, [sp, #52]	; 0x34
 8027d6c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027d6e:	2dff      	cmp	r5, #255	; 0xff
 8027d70:	d020      	beq.n	8027db4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027d72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d74:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d78:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027d7a:	436f      	muls	r7, r5
 8027d7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d7e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027d82:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027d84:	fb05 fa0c 	mul.w	sl, r5, ip
 8027d88:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d8c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d94:	44bc      	add	ip, r7
 8027d96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027d9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027da2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027da6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027daa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027dae:	ea4c 050a 	orr.w	r5, ip, sl
 8027db2:	9509      	str	r5, [sp, #36]	; 0x24
 8027db4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027db6:	2dff      	cmp	r5, #255	; 0xff
 8027db8:	d020      	beq.n	8027dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8027dba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027dbc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027dc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027dc2:	436f      	muls	r7, r5
 8027dc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027dc6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027dca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027dce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027dd0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027dd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027dd8:	fb05 fa0a 	mul.w	sl, r5, sl
 8027ddc:	44bc      	add	ip, r7
 8027dde:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027de2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027de6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027dea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027dee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027df2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027df6:	ea4c 050a 	orr.w	r5, ip, sl
 8027dfa:	950e      	str	r5, [sp, #56]	; 0x38
 8027dfc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027dfe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027e02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e06:	2aff      	cmp	r2, #255	; 0xff
 8027e08:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027e0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027e0e:	fb0e f707 	mul.w	r7, lr, r7
 8027e12:	fb01 770c 	mla	r7, r1, ip, r7
 8027e16:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027e1c:	fb00 770c 	mla	r7, r0, ip, r7
 8027e20:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027e26:	fb09 770c 	mla	r7, r9, ip, r7
 8027e2a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027e2e:	fb0e fe0c 	mul.w	lr, lr, ip
 8027e32:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027e36:	fb01 e303 	mla	r3, r1, r3, lr
 8027e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027e3c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027e40:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027e44:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027e46:	fb00 330a 	mla	r3, r0, sl, r3
 8027e4a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027e4e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027e52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e5a:	ea47 070c 	orr.w	r7, r7, ip
 8027e5e:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027e62:	d045      	beq.n	8027ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8027e64:	f8b8 1000 	ldrh.w	r1, [r8]
 8027e68:	43d2      	mvns	r2, r2
 8027e6a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8027e6e:	fa5f fe82 	uxtb.w	lr, r2
 8027e72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027e76:	10c8      	asrs	r0, r1, #3
 8027e78:	00ca      	lsls	r2, r1, #3
 8027e7a:	fb0c fc0e 	mul.w	ip, ip, lr
 8027e7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027e82:	b2d2      	uxtb	r2, r2
 8027e84:	f10c 0101 	add.w	r1, ip, #1
 8027e88:	fb00 f00e 	mul.w	r0, r0, lr
 8027e8c:	fb02 f20e 	mul.w	r2, r2, lr
 8027e90:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027e94:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027e98:	b2ff      	uxtb	r7, r7
 8027e9a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027e9e:	491e      	ldr	r1, [pc, #120]	; (8027f18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 8027ea0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027ea4:	1c51      	adds	r1, r2, #1
 8027ea6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027eaa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027eae:	1c42      	adds	r2, r0, #1
 8027eb0:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8027eb4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027eb8:	b2df      	uxtb	r7, r3
 8027eba:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027ebe:	00ff      	lsls	r7, r7, #3
 8027ec0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027ec4:	ea4c 0c07 	orr.w	ip, ip, r7
 8027ec8:	f8a8 c000 	strh.w	ip, [r8]
 8027ecc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027ece:	f108 0802 	add.w	r8, r8, #2
 8027ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027ed6:	441c      	add	r4, r3
 8027ed8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027eda:	441e      	add	r6, r3
 8027edc:	e63c      	b.n	8027b58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027ede:	2800      	cmp	r0, #0
 8027ee0:	f43f aee3 	beq.w	8027caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027ee4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8027eea:	0e09      	lsrs	r1, r1, #24
 8027eec:	9111      	str	r1, [sp, #68]	; 0x44
 8027eee:	e6dc      	b.n	8027caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027ef0:	097a      	lsrs	r2, r7, #5
 8027ef2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027ef6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027efa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027efe:	f023 0307 	bic.w	r3, r3, #7
 8027f02:	4313      	orrs	r3, r2
 8027f04:	431f      	orrs	r7, r3
 8027f06:	f8a8 7000 	strh.w	r7, [r8]
 8027f0a:	e7df      	b.n	8027ecc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027f0c:	b01b      	add	sp, #108	; 0x6c
 8027f0e:	ecbd 8b08 	vpop	{d8-d11}
 8027f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f16:	bf00      	nop
 8027f18:	fffff800 	.word	0xfffff800

08027f1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f20:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8027f24:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027f28:	2c00      	cmp	r4, #0
 8027f2a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027f2e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8027f32:	fb04 ce03 	mla	lr, r4, r3, ip
 8027f36:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027f3a:	db60      	blt.n	8027ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8027f3c:	45a1      	cmp	r9, r4
 8027f3e:	dd5e      	ble.n	8027ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8027f40:	f1bc 0f00 	cmp.w	ip, #0
 8027f44:	db59      	blt.n	8027ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027f46:	45e0      	cmp	r8, ip
 8027f48:	dd57      	ble.n	8027ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027f4a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8027f4e:	f01e 0f01 	tst.w	lr, #1
 8027f52:	5c16      	ldrb	r6, [r2, r0]
 8027f54:	bf0c      	ite	eq
 8027f56:	f006 060f 	andeq.w	r6, r6, #15
 8027f5a:	1136      	asrne	r6, r6, #4
 8027f5c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027f60:	b2f6      	uxtb	r6, r6
 8027f62:	f11c 0001 	adds.w	r0, ip, #1
 8027f66:	d44d      	bmi.n	8028004 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027f68:	4580      	cmp	r8, r0
 8027f6a:	dd4b      	ble.n	8028004 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027f6c:	2d00      	cmp	r5, #0
 8027f6e:	d04b      	beq.n	8028008 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8027f70:	f10e 0a01 	add.w	sl, lr, #1
 8027f74:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027f78:	f01a 0f01 	tst.w	sl, #1
 8027f7c:	5c10      	ldrb	r0, [r2, r0]
 8027f7e:	bf0c      	ite	eq
 8027f80:	f000 000f 	andeq.w	r0, r0, #15
 8027f84:	1100      	asrne	r0, r0, #4
 8027f86:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027f8a:	b2c0      	uxtb	r0, r0
 8027f8c:	3401      	adds	r4, #1
 8027f8e:	d43f      	bmi.n	8028010 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8027f90:	45a1      	cmp	r9, r4
 8027f92:	dd3d      	ble.n	8028010 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8027f94:	2f00      	cmp	r7, #0
 8027f96:	f000 809e 	beq.w	80280d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8027f9a:	f1bc 0f00 	cmp.w	ip, #0
 8027f9e:	db35      	blt.n	802800c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8027fa0:	45e0      	cmp	r8, ip
 8027fa2:	dd33      	ble.n	802800c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8027fa4:	eb03 090e 	add.w	r9, r3, lr
 8027fa8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8027fac:	f019 0f01 	tst.w	r9, #1
 8027fb0:	5d14      	ldrb	r4, [r2, r4]
 8027fb2:	bf0c      	ite	eq
 8027fb4:	f004 040f 	andeq.w	r4, r4, #15
 8027fb8:	1124      	asrne	r4, r4, #4
 8027fba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027fbe:	b2e4      	uxtb	r4, r4
 8027fc0:	f11c 0c01 	adds.w	ip, ip, #1
 8027fc4:	d427      	bmi.n	8028016 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8027fc6:	45e0      	cmp	r8, ip
 8027fc8:	dd25      	ble.n	8028016 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8027fca:	b335      	cbz	r5, 802801a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8027fcc:	3301      	adds	r3, #1
 8027fce:	449e      	add	lr, r3
 8027fd0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027fd4:	f01e 0f01 	tst.w	lr, #1
 8027fd8:	5cd2      	ldrb	r2, [r2, r3]
 8027fda:	bf0c      	ite	eq
 8027fdc:	f002 020f 	andeq.w	r2, r2, #15
 8027fe0:	1112      	asrne	r2, r2, #4
 8027fe2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027fe6:	b2d3      	uxtb	r3, r2
 8027fe8:	2d0f      	cmp	r5, #15
 8027fea:	d917      	bls.n	802801c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8027fec:	4b3c      	ldr	r3, [pc, #240]	; (80280e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8027fee:	f240 210d 	movw	r1, #525	; 0x20d
 8027ff2:	4a3c      	ldr	r2, [pc, #240]	; (80280e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8027ff4:	483c      	ldr	r0, [pc, #240]	; (80280e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8027ff6:	f002 fbcd 	bl	802a794 <__assert_func>
 8027ffa:	2600      	movs	r6, #0
 8027ffc:	e7b1      	b.n	8027f62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8027ffe:	2000      	movs	r0, #0
 8028000:	4606      	mov	r6, r0
 8028002:	e7c3      	b.n	8027f8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028004:	2000      	movs	r0, #0
 8028006:	e7c1      	b.n	8027f8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028008:	4628      	mov	r0, r5
 802800a:	e7bf      	b.n	8027f8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802800c:	2400      	movs	r4, #0
 802800e:	e7d7      	b.n	8027fc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028010:	2300      	movs	r3, #0
 8028012:	461c      	mov	r4, r3
 8028014:	e7e8      	b.n	8027fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028016:	2300      	movs	r3, #0
 8028018:	e7e6      	b.n	8027fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802801a:	462b      	mov	r3, r5
 802801c:	2f0f      	cmp	r7, #15
 802801e:	d8e5      	bhi.n	8027fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028020:	b2ad      	uxth	r5, r5
 8028022:	b2bf      	uxth	r7, r7
 8028024:	fb05 fc07 	mul.w	ip, r5, r7
 8028028:	012d      	lsls	r5, r5, #4
 802802a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802802e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028032:	eba5 050c 	sub.w	r5, r5, ip
 8028036:	b2bf      	uxth	r7, r7
 8028038:	b2ad      	uxth	r5, r5
 802803a:	1bd2      	subs	r2, r2, r7
 802803c:	4368      	muls	r0, r5
 802803e:	b292      	uxth	r2, r2
 8028040:	fb06 0002 	mla	r0, r6, r2, r0
 8028044:	fb07 0404 	mla	r4, r7, r4, r0
 8028048:	fb0c 4303 	mla	r3, ip, r3, r4
 802804c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028050:	2b00      	cmp	r3, #0
 8028052:	d03e      	beq.n	80280d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8028054:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8028058:	4a24      	ldr	r2, [pc, #144]	; (80280ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 802805a:	4343      	muls	r3, r0
 802805c:	6816      	ldr	r6, [r2, #0]
 802805e:	1c58      	adds	r0, r3, #1
 8028060:	880a      	ldrh	r2, [r1, #0]
 8028062:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028066:	1215      	asrs	r5, r2, #8
 8028068:	1200      	asrs	r0, r0, #8
 802806a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802806e:	10d7      	asrs	r7, r2, #3
 8028070:	b284      	uxth	r4, r0
 8028072:	43c0      	mvns	r0, r0
 8028074:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028078:	00d2      	lsls	r2, r2, #3
 802807a:	b2c3      	uxtb	r3, r0
 802807c:	0a30      	lsrs	r0, r6, #8
 802807e:	fb15 f503 	smulbb	r5, r5, r3
 8028082:	b2d2      	uxtb	r2, r2
 8028084:	fb17 f703 	smulbb	r7, r7, r3
 8028088:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802808c:	fb12 f303 	smulbb	r3, r2, r3
 8028090:	fb00 5004 	mla	r0, r0, r4, r5
 8028094:	08f5      	lsrs	r5, r6, #3
 8028096:	00f6      	lsls	r6, r6, #3
 8028098:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802809c:	b280      	uxth	r0, r0
 802809e:	b2f6      	uxtb	r6, r6
 80280a0:	fb05 7504 	mla	r5, r5, r4, r7
 80280a4:	fb06 3304 	mla	r3, r6, r4, r3
 80280a8:	1c44      	adds	r4, r0, #1
 80280aa:	b2ad      	uxth	r5, r5
 80280ac:	b29a      	uxth	r2, r3
 80280ae:	1c6b      	adds	r3, r5, #1
 80280b0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80280b4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80280b8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80280bc:	095b      	lsrs	r3, r3, #5
 80280be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280c2:	4303      	orrs	r3, r0
 80280c4:	1c50      	adds	r0, r2, #1
 80280c6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80280ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80280ce:	4313      	orrs	r3, r2
 80280d0:	800b      	strh	r3, [r1, #0]
 80280d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280d6:	2d0f      	cmp	r5, #15
 80280d8:	d888      	bhi.n	8027fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80280da:	463b      	mov	r3, r7
 80280dc:	463c      	mov	r4, r7
 80280de:	e79f      	b.n	8028020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80280e0:	080305ce 	.word	0x080305ce
 80280e4:	08030b8d 	.word	0x08030b8d
 80280e8:	080306b7 	.word	0x080306b7
 80280ec:	20014b5c 	.word	0x20014b5c

080280f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80280f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280f4:	ed2d 8b08 	vpush	{d8-d11}
 80280f8:	b097      	sub	sp, #92	; 0x5c
 80280fa:	eeb0 aa40 	vmov.f32	s20, s0
 80280fe:	eef0 9a60 	vmov.f32	s19, s1
 8028102:	9214      	str	r2, [sp, #80]	; 0x50
 8028104:	eeb0 9a41 	vmov.f32	s18, s2
 8028108:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802810a:	eeb0 8a62 	vmov.f32	s16, s5
 802810e:	9309      	str	r3, [sp, #36]	; 0x24
 8028110:	eef0 8a43 	vmov.f32	s17, s6
 8028114:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028118:	eef0 ba44 	vmov.f32	s23, s8
 802811c:	9015      	str	r0, [sp, #84]	; 0x54
 802811e:	eeb0 ba64 	vmov.f32	s22, s9
 8028122:	6850      	ldr	r0, [r2, #4]
 8028124:	eef0 aa45 	vmov.f32	s21, s10
 8028128:	910d      	str	r1, [sp, #52]	; 0x34
 802812a:	930e      	str	r3, [sp, #56]	; 0x38
 802812c:	6812      	ldr	r2, [r2, #0]
 802812e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028132:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8028136:	fb00 1303 	mla	r3, r0, r3, r1
 802813a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802813e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028140:	689b      	ldr	r3, [r3, #8]
 8028142:	3301      	adds	r3, #1
 8028144:	f023 0301 	bic.w	r3, r3, #1
 8028148:	930a      	str	r3, [sp, #40]	; 0x28
 802814a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802814c:	681f      	ldr	r7, [r3, #0]
 802814e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028150:	2b00      	cmp	r3, #0
 8028152:	dc03      	bgt.n	802815c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028154:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028156:	2b00      	cmp	r3, #0
 8028158:	f340 826b 	ble.w	8028632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 802815c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802815e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028162:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028166:	1e48      	subs	r0, r1, #1
 8028168:	f102 3cff 	add.w	ip, r2, #4294967295
 802816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802816e:	2b00      	cmp	r3, #0
 8028170:	f340 80f4 	ble.w	802835c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028174:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028178:	ea4f 4326 	mov.w	r3, r6, asr #16
 802817c:	d406      	bmi.n	802818c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802817e:	4586      	cmp	lr, r0
 8028180:	da04      	bge.n	802818c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028182:	2b00      	cmp	r3, #0
 8028184:	db02      	blt.n	802818c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028186:	4563      	cmp	r3, ip
 8028188:	f2c0 80e9 	blt.w	802835e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802818c:	f11e 0e01 	adds.w	lr, lr, #1
 8028190:	f100 80da 	bmi.w	8028348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8028194:	4571      	cmp	r1, lr
 8028196:	f2c0 80d7 	blt.w	8028348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802819a:	3301      	adds	r3, #1
 802819c:	f100 80d4 	bmi.w	8028348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80281a0:	429a      	cmp	r2, r3
 80281a2:	f2c0 80d1 	blt.w	8028348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80281a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80281aa:	46d0      	mov	r8, sl
 80281ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80281b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80281b2:	f1b9 0f00 	cmp.w	r9, #0
 80281b6:	f340 80f1 	ble.w	802839c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80281ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80281bc:	1430      	asrs	r0, r6, #16
 80281be:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80281c2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80281c6:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80281ca:	1423      	asrs	r3, r4, #16
 80281cc:	f100 813b 	bmi.w	8028446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80281d0:	f10c 3bff 	add.w	fp, ip, #4294967295
 80281d4:	455b      	cmp	r3, fp
 80281d6:	f280 8136 	bge.w	8028446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80281da:	2800      	cmp	r0, #0
 80281dc:	f2c0 8133 	blt.w	8028446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80281e0:	f10e 3bff 	add.w	fp, lr, #4294967295
 80281e4:	4558      	cmp	r0, fp
 80281e6:	f280 812e 	bge.w	8028446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80281ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80281ec:	fb00 3305 	mla	r3, r0, r5, r3
 80281f0:	0858      	lsrs	r0, r3, #1
 80281f2:	07dd      	lsls	r5, r3, #31
 80281f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80281f8:	bf54      	ite	pl
 80281fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80281fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028202:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028206:	fa5f fc8c 	uxtb.w	ip, ip
 802820a:	2a00      	cmp	r2, #0
 802820c:	f000 810a 	beq.w	8028424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8028210:	1c58      	adds	r0, r3, #1
 8028212:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028216:	07c0      	lsls	r0, r0, #31
 8028218:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802821c:	bf54      	ite	pl
 802821e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028222:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028226:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802822a:	fa5f f08e 	uxtb.w	r0, lr
 802822e:	9010      	str	r0, [sp, #64]	; 0x40
 8028230:	b1e1      	cbz	r1, 802826c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8028232:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028234:	4403      	add	r3, r0
 8028236:	0858      	lsrs	r0, r3, #1
 8028238:	07dd      	lsls	r5, r3, #31
 802823a:	f103 0301 	add.w	r3, r3, #1
 802823e:	5c38      	ldrb	r0, [r7, r0]
 8028240:	bf54      	ite	pl
 8028242:	f000 000f 	andpl.w	r0, r0, #15
 8028246:	1100      	asrmi	r0, r0, #4
 8028248:	07dd      	lsls	r5, r3, #31
 802824a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802824e:	b2c0      	uxtb	r0, r0
 8028250:	900b      	str	r0, [sp, #44]	; 0x2c
 8028252:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028256:	f817 e000 	ldrb.w	lr, [r7, r0]
 802825a:	bf54      	ite	pl
 802825c:	f00e 030f 	andpl.w	r3, lr, #15
 8028260:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028264:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028268:	b2db      	uxtb	r3, r3
 802826a:	9311      	str	r3, [sp, #68]	; 0x44
 802826c:	b292      	uxth	r2, r2
 802826e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028270:	b289      	uxth	r1, r1
 8028272:	fb02 f301 	mul.w	r3, r2, r1
 8028276:	0112      	lsls	r2, r2, #4
 8028278:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802827c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028280:	1ad2      	subs	r2, r2, r3
 8028282:	b289      	uxth	r1, r1
 8028284:	b292      	uxth	r2, r2
 8028286:	1a40      	subs	r0, r0, r1
 8028288:	436a      	muls	r2, r5
 802828a:	b280      	uxth	r0, r0
 802828c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028292:	fb01 c102 	mla	r1, r1, r2, ip
 8028296:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028298:	fb03 1302 	mla	r3, r3, r2, r1
 802829c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282a0:	2b00      	cmp	r3, #0
 80282a2:	d048      	beq.n	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80282a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80282a6:	4a78      	ldr	r2, [pc, #480]	; (8028488 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 80282a8:	434b      	muls	r3, r1
 80282aa:	f8d2 e000 	ldr.w	lr, [r2]
 80282ae:	1c59      	adds	r1, r3, #1
 80282b0:	f8b8 2000 	ldrh.w	r2, [r8]
 80282b4:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80282b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80282bc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80282c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80282c4:	121b      	asrs	r3, r3, #8
 80282c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80282ca:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80282ce:	b299      	uxth	r1, r3
 80282d0:	43db      	mvns	r3, r3
 80282d2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80282d6:	00d2      	lsls	r2, r2, #3
 80282d8:	b2db      	uxtb	r3, r3
 80282da:	b2d2      	uxtb	r2, r2
 80282dc:	fb1c fc03 	smulbb	ip, ip, r3
 80282e0:	fb1b fb03 	smulbb	fp, fp, r3
 80282e4:	fb00 c001 	mla	r0, r0, r1, ip
 80282e8:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80282ec:	fb12 f303 	smulbb	r3, r2, r3
 80282f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80282f4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80282f8:	b280      	uxth	r0, r0
 80282fa:	fa5f fe8e 	uxtb.w	lr, lr
 80282fe:	fb0c bc01 	mla	ip, ip, r1, fp
 8028302:	fb0e 3101 	mla	r1, lr, r1, r3
 8028306:	1c43      	adds	r3, r0, #1
 8028308:	fa1f fc8c 	uxth.w	ip, ip
 802830c:	b289      	uxth	r1, r1
 802830e:	f10c 0201 	add.w	r2, ip, #1
 8028312:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028316:	1c4b      	adds	r3, r1, #1
 8028318:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802831c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028320:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028324:	0952      	lsrs	r2, r2, #5
 8028326:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802832a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802832e:	4310      	orrs	r0, r2
 8028330:	4308      	orrs	r0, r1
 8028332:	f8a8 0000 	strh.w	r0, [r8]
 8028336:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028338:	f108 0802 	add.w	r8, r8, #2
 802833c:	f109 39ff 	add.w	r9, r9, #4294967295
 8028340:	441c      	add	r4, r3
 8028342:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028344:	441e      	add	r6, r3
 8028346:	e734      	b.n	80281b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028348:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802834a:	f10a 0a02 	add.w	sl, sl, #2
 802834e:	441c      	add	r4, r3
 8028350:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028352:	441e      	add	r6, r3
 8028354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028356:	3b01      	subs	r3, #1
 8028358:	9309      	str	r3, [sp, #36]	; 0x24
 802835a:	e707      	b.n	802816c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802835c:	d023      	beq.n	80283a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028360:	982b      	ldr	r0, [sp, #172]	; 0xac
 8028362:	3b01      	subs	r3, #1
 8028364:	fb00 4003 	mla	r0, r0, r3, r4
 8028368:	1400      	asrs	r0, r0, #16
 802836a:	f53f af1c 	bmi.w	80281a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802836e:	3901      	subs	r1, #1
 8028370:	4288      	cmp	r0, r1
 8028372:	f6bf af18 	bge.w	80281a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028376:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8028378:	fb01 6303 	mla	r3, r1, r3, r6
 802837c:	141b      	asrs	r3, r3, #16
 802837e:	f53f af12 	bmi.w	80281a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028382:	3a01      	subs	r2, #1
 8028384:	4293      	cmp	r3, r2
 8028386:	f6bf af0e 	bge.w	80281a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802838a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802838e:	46d1      	mov	r9, sl
 8028390:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028394:	930f      	str	r3, [sp, #60]	; 0x3c
 8028396:	f1bb 0f00 	cmp.w	fp, #0
 802839a:	dc77      	bgt.n	802848c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802839e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80283a2:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 80283a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80283a8:	2b00      	cmp	r3, #0
 80283aa:	f340 8142 	ble.w	8028632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 80283ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80283b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80283b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80283b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80283bc:	eef0 6a48 	vmov.f32	s13, s16
 80283c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80283c4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80283c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283cc:	ee16 4a90 	vmov	r4, s13
 80283d0:	eef0 6a68 	vmov.f32	s13, s17
 80283d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283d8:	ee16 6a90 	vmov	r6, s13
 80283dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80283e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80283e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80283e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80283ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80283f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80283f4:	ee18 2a10 	vmov	r2, s16
 80283f8:	eeb0 8a47 	vmov.f32	s16, s14
 80283fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028400:	ee18 2a90 	vmov	r2, s17
 8028404:	932b      	str	r3, [sp, #172]	; 0xac
 8028406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028408:	eef0 8a67 	vmov.f32	s17, s15
 802840c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028410:	932c      	str	r3, [sp, #176]	; 0xb0
 8028412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028416:	3b01      	subs	r3, #1
 8028418:	930d      	str	r3, [sp, #52]	; 0x34
 802841a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802841c:	bf08      	it	eq
 802841e:	4613      	moveq	r3, r2
 8028420:	9309      	str	r3, [sp, #36]	; 0x24
 8028422:	e694      	b.n	802814e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028424:	2900      	cmp	r1, #0
 8028426:	f43f af21 	beq.w	802826c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802842a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802842c:	4418      	add	r0, r3
 802842e:	0843      	lsrs	r3, r0, #1
 8028430:	07c0      	lsls	r0, r0, #31
 8028432:	5cfb      	ldrb	r3, [r7, r3]
 8028434:	bf54      	ite	pl
 8028436:	f003 030f 	andpl.w	r3, r3, #15
 802843a:	111b      	asrmi	r3, r3, #4
 802843c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028440:	b2db      	uxtb	r3, r3
 8028442:	930b      	str	r3, [sp, #44]	; 0x2c
 8028444:	e712      	b.n	802826c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8028446:	f113 0b01 	adds.w	fp, r3, #1
 802844a:	f53f af74 	bmi.w	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802844e:	45dc      	cmp	ip, fp
 8028450:	f6ff af71 	blt.w	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028454:	f110 0b01 	adds.w	fp, r0, #1
 8028458:	f53f af6d 	bmi.w	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802845c:	45de      	cmp	lr, fp
 802845e:	f6ff af6a 	blt.w	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028462:	9302      	str	r3, [sp, #8]
 8028464:	fa0f f38e 	sxth.w	r3, lr
 8028468:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802846a:	9301      	str	r3, [sp, #4]
 802846c:	fa0f f38c 	sxth.w	r3, ip
 8028470:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028474:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028478:	9300      	str	r3, [sp, #0]
 802847a:	463a      	mov	r2, r7
 802847c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802847e:	4641      	mov	r1, r8
 8028480:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028482:	f7ff fd4b 	bl	8027f1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028486:	e756      	b.n	8028336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028488:	20014b5c 	.word	0x20014b5c
 802848c:	1422      	asrs	r2, r4, #16
 802848e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028490:	1433      	asrs	r3, r6, #16
 8028492:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028496:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802849a:	fb05 2303 	mla	r3, r5, r3, r2
 802849e:	085a      	lsrs	r2, r3, #1
 80284a0:	07dd      	lsls	r5, r3, #31
 80284a2:	5cba      	ldrb	r2, [r7, r2]
 80284a4:	bf54      	ite	pl
 80284a6:	f002 020f 	andpl.w	r2, r2, #15
 80284aa:	1112      	asrmi	r2, r2, #4
 80284ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80284b0:	b2d2      	uxtb	r2, r2
 80284b2:	2900      	cmp	r1, #0
 80284b4:	f000 80a9 	beq.w	802860a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 80284b8:	f103 0e01 	add.w	lr, r3, #1
 80284bc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80284c0:	f01e 0f01 	tst.w	lr, #1
 80284c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80284c8:	bf0c      	ite	eq
 80284ca:	f00c 0c0f 	andeq.w	ip, ip, #15
 80284ce:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80284d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80284d6:	fa5f f58c 	uxtb.w	r5, ip
 80284da:	9512      	str	r5, [sp, #72]	; 0x48
 80284dc:	b308      	cbz	r0, 8028522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80284de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80284e0:	442b      	add	r3, r5
 80284e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80284e6:	07dd      	lsls	r5, r3, #31
 80284e8:	f103 0301 	add.w	r3, r3, #1
 80284ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80284f0:	bf54      	ite	pl
 80284f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80284f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80284fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80284fe:	fa5f f58c 	uxtb.w	r5, ip
 8028502:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028506:	950c      	str	r5, [sp, #48]	; 0x30
 8028508:	07dd      	lsls	r5, r3, #31
 802850a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802850e:	bf54      	ite	pl
 8028510:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028514:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028518:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802851c:	fa5f f38c 	uxtb.w	r3, ip
 8028520:	9313      	str	r3, [sp, #76]	; 0x4c
 8028522:	b289      	uxth	r1, r1
 8028524:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028526:	b280      	uxth	r0, r0
 8028528:	fb01 f300 	mul.w	r3, r1, r0
 802852c:	0109      	lsls	r1, r1, #4
 802852e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028532:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028536:	1ac9      	subs	r1, r1, r3
 8028538:	b280      	uxth	r0, r0
 802853a:	b289      	uxth	r1, r1
 802853c:	ebac 0c00 	sub.w	ip, ip, r0
 8028540:	4369      	muls	r1, r5
 8028542:	fa1f fc8c 	uxth.w	ip, ip
 8028546:	fb02 120c 	mla	r2, r2, ip, r1
 802854a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802854c:	fb00 2001 	mla	r0, r0, r1, r2
 8028550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028552:	fb03 0302 	mla	r3, r3, r2, r0
 8028556:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802855a:	2b00      	cmp	r3, #0
 802855c:	d04c      	beq.n	80285f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802855e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028560:	4a36      	ldr	r2, [pc, #216]	; (802863c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8028562:	434b      	muls	r3, r1
 8028564:	f8d2 e000 	ldr.w	lr, [r2]
 8028568:	1c59      	adds	r1, r3, #1
 802856a:	f8b9 2000 	ldrh.w	r2, [r9]
 802856e:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8028572:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028576:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802857a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802857e:	121b      	asrs	r3, r3, #8
 8028580:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028584:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8028588:	b299      	uxth	r1, r3
 802858a:	43db      	mvns	r3, r3
 802858c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8028590:	00d2      	lsls	r2, r2, #3
 8028592:	b2db      	uxtb	r3, r3
 8028594:	b2d2      	uxtb	r2, r2
 8028596:	fb1c fc03 	smulbb	ip, ip, r3
 802859a:	fb18 f803 	smulbb	r8, r8, r3
 802859e:	fb00 c001 	mla	r0, r0, r1, ip
 80285a2:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80285a6:	fb12 f203 	smulbb	r2, r2, r3
 80285aa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80285ae:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80285b2:	b280      	uxth	r0, r0
 80285b4:	fa5f fe8e 	uxtb.w	lr, lr
 80285b8:	fb0c 8c01 	mla	ip, ip, r1, r8
 80285bc:	fb0e 2201 	mla	r2, lr, r1, r2
 80285c0:	fa1f fc8c 	uxth.w	ip, ip
 80285c4:	b292      	uxth	r2, r2
 80285c6:	f10c 0801 	add.w	r8, ip, #1
 80285ca:	1c51      	adds	r1, r2, #1
 80285cc:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 80285d0:	f100 0801 	add.w	r8, r0, #1
 80285d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80285d8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80285dc:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 80285e0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80285e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80285e8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80285ec:	ea4c 0c00 	orr.w	ip, ip, r0
 80285f0:	ea4c 0c02 	orr.w	ip, ip, r2
 80285f4:	f8a9 c000 	strh.w	ip, [r9]
 80285f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80285fa:	f109 0902 	add.w	r9, r9, #2
 80285fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028602:	441c      	add	r4, r3
 8028604:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028606:	441e      	add	r6, r3
 8028608:	e6c5      	b.n	8028396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802860a:	2800      	cmp	r0, #0
 802860c:	d089      	beq.n	8028522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802860e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028610:	442b      	add	r3, r5
 8028612:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028616:	07db      	lsls	r3, r3, #31
 8028618:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802861c:	bf54      	ite	pl
 802861e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028622:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028626:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802862a:	fa5f f38c 	uxtb.w	r3, ip
 802862e:	930c      	str	r3, [sp, #48]	; 0x30
 8028630:	e777      	b.n	8028522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8028632:	b017      	add	sp, #92	; 0x5c
 8028634:	ecbd 8b08 	vpop	{d8-d11}
 8028638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802863c:	20014b5c 	.word	0x20014b5c

08028640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028644:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028648:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802864c:	2c00      	cmp	r4, #0
 802864e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028652:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028656:	fb04 ce03 	mla	lr, r4, r3, ip
 802865a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802865e:	db60      	blt.n	8028722 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8028660:	45a1      	cmp	r9, r4
 8028662:	dd5e      	ble.n	8028722 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8028664:	f1bc 0f00 	cmp.w	ip, #0
 8028668:	db59      	blt.n	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802866a:	45e0      	cmp	r8, ip
 802866c:	dd57      	ble.n	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802866e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028672:	f01e 0f01 	tst.w	lr, #1
 8028676:	5c16      	ldrb	r6, [r2, r0]
 8028678:	bf0c      	ite	eq
 802867a:	f006 060f 	andeq.w	r6, r6, #15
 802867e:	1136      	asrne	r6, r6, #4
 8028680:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028684:	b2f6      	uxtb	r6, r6
 8028686:	f11c 0001 	adds.w	r0, ip, #1
 802868a:	d44d      	bmi.n	8028728 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802868c:	4580      	cmp	r8, r0
 802868e:	dd4b      	ble.n	8028728 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8028690:	2d00      	cmp	r5, #0
 8028692:	d04b      	beq.n	802872c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8028694:	f10e 0a01 	add.w	sl, lr, #1
 8028698:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802869c:	f01a 0f01 	tst.w	sl, #1
 80286a0:	5c10      	ldrb	r0, [r2, r0]
 80286a2:	bf0c      	ite	eq
 80286a4:	f000 000f 	andeq.w	r0, r0, #15
 80286a8:	1100      	asrne	r0, r0, #4
 80286aa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80286ae:	b2c0      	uxtb	r0, r0
 80286b0:	3401      	adds	r4, #1
 80286b2:	d43f      	bmi.n	8028734 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80286b4:	45a1      	cmp	r9, r4
 80286b6:	dd3d      	ble.n	8028734 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80286b8:	2f00      	cmp	r7, #0
 80286ba:	f000 8097 	beq.w	80287ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 80286be:	f1bc 0f00 	cmp.w	ip, #0
 80286c2:	db35      	blt.n	8028730 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80286c4:	45e0      	cmp	r8, ip
 80286c6:	dd33      	ble.n	8028730 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80286c8:	eb03 090e 	add.w	r9, r3, lr
 80286cc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80286d0:	f019 0f01 	tst.w	r9, #1
 80286d4:	5d14      	ldrb	r4, [r2, r4]
 80286d6:	bf0c      	ite	eq
 80286d8:	f004 040f 	andeq.w	r4, r4, #15
 80286dc:	1124      	asrne	r4, r4, #4
 80286de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80286e2:	b2e4      	uxtb	r4, r4
 80286e4:	f11c 0c01 	adds.w	ip, ip, #1
 80286e8:	d427      	bmi.n	802873a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80286ea:	45e0      	cmp	r8, ip
 80286ec:	dd25      	ble.n	802873a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80286ee:	b335      	cbz	r5, 802873e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 80286f0:	3301      	adds	r3, #1
 80286f2:	449e      	add	lr, r3
 80286f4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80286f8:	f01e 0f01 	tst.w	lr, #1
 80286fc:	5cd2      	ldrb	r2, [r2, r3]
 80286fe:	bf0c      	ite	eq
 8028700:	f002 020f 	andeq.w	r2, r2, #15
 8028704:	1112      	asrne	r2, r2, #4
 8028706:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802870a:	b2d3      	uxtb	r3, r2
 802870c:	2d0f      	cmp	r5, #15
 802870e:	d917      	bls.n	8028740 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8028710:	4b39      	ldr	r3, [pc, #228]	; (80287f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8028712:	f240 210d 	movw	r1, #525	; 0x20d
 8028716:	4a39      	ldr	r2, [pc, #228]	; (80287fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8028718:	4839      	ldr	r0, [pc, #228]	; (8028800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 802871a:	f002 f83b 	bl	802a794 <__assert_func>
 802871e:	2600      	movs	r6, #0
 8028720:	e7b1      	b.n	8028686 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8028722:	2000      	movs	r0, #0
 8028724:	4606      	mov	r6, r0
 8028726:	e7c3      	b.n	80286b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028728:	2000      	movs	r0, #0
 802872a:	e7c1      	b.n	80286b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802872c:	4628      	mov	r0, r5
 802872e:	e7bf      	b.n	80286b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028730:	2400      	movs	r4, #0
 8028732:	e7d7      	b.n	80286e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8028734:	2300      	movs	r3, #0
 8028736:	461c      	mov	r4, r3
 8028738:	e7e8      	b.n	802870c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802873a:	2300      	movs	r3, #0
 802873c:	e7e6      	b.n	802870c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802873e:	462b      	mov	r3, r5
 8028740:	2f0f      	cmp	r7, #15
 8028742:	d8e5      	bhi.n	8028710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8028744:	b2ad      	uxth	r5, r5
 8028746:	b2bf      	uxth	r7, r7
 8028748:	fb05 fc07 	mul.w	ip, r5, r7
 802874c:	012d      	lsls	r5, r5, #4
 802874e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028752:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028756:	eba5 050c 	sub.w	r5, r5, ip
 802875a:	b2bf      	uxth	r7, r7
 802875c:	b2ad      	uxth	r5, r5
 802875e:	1bd2      	subs	r2, r2, r7
 8028760:	4368      	muls	r0, r5
 8028762:	b292      	uxth	r2, r2
 8028764:	fb06 0002 	mla	r0, r6, r2, r0
 8028768:	fb07 0404 	mla	r4, r7, r4, r0
 802876c:	fb0c 4303 	mla	r3, ip, r3, r4
 8028770:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028774:	2b00      	cmp	r3, #0
 8028776:	d037      	beq.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8028778:	4a22      	ldr	r2, [pc, #136]	; (8028804 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 802877a:	b298      	uxth	r0, r3
 802877c:	43db      	mvns	r3, r3
 802877e:	6816      	ldr	r6, [r2, #0]
 8028780:	880a      	ldrh	r2, [r1, #0]
 8028782:	b2db      	uxtb	r3, r3
 8028784:	0a34      	lsrs	r4, r6, #8
 8028786:	1215      	asrs	r5, r2, #8
 8028788:	10d7      	asrs	r7, r2, #3
 802878a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802878e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028792:	00d2      	lsls	r2, r2, #3
 8028794:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028798:	fb15 f503 	smulbb	r5, r5, r3
 802879c:	b2d2      	uxtb	r2, r2
 802879e:	fb17 f703 	smulbb	r7, r7, r3
 80287a2:	fb04 5400 	mla	r4, r4, r0, r5
 80287a6:	08f5      	lsrs	r5, r6, #3
 80287a8:	fb12 f303 	smulbb	r3, r2, r3
 80287ac:	00f6      	lsls	r6, r6, #3
 80287ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80287b2:	b2a4      	uxth	r4, r4
 80287b4:	b2f6      	uxtb	r6, r6
 80287b6:	fb05 7500 	mla	r5, r5, r0, r7
 80287ba:	1c62      	adds	r2, r4, #1
 80287bc:	fb06 3000 	mla	r0, r6, r0, r3
 80287c0:	b2ad      	uxth	r5, r5
 80287c2:	b280      	uxth	r0, r0
 80287c4:	1c6b      	adds	r3, r5, #1
 80287c6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80287ca:	1c42      	adds	r2, r0, #1
 80287cc:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80287d0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80287d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80287d8:	095b      	lsrs	r3, r3, #5
 80287da:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80287de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80287e2:	4323      	orrs	r3, r4
 80287e4:	4303      	orrs	r3, r0
 80287e6:	800b      	strh	r3, [r1, #0]
 80287e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80287ec:	2d0f      	cmp	r5, #15
 80287ee:	d88f      	bhi.n	8028710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80287f0:	463b      	mov	r3, r7
 80287f2:	463c      	mov	r4, r7
 80287f4:	e7a6      	b.n	8028744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 80287f6:	bf00      	nop
 80287f8:	080305ce 	.word	0x080305ce
 80287fc:	08030b8d 	.word	0x08030b8d
 8028800:	080306b7 	.word	0x080306b7
 8028804:	20014b5c 	.word	0x20014b5c

08028808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802880c:	ed2d 8b08 	vpush	{d8-d11}
 8028810:	b093      	sub	sp, #76	; 0x4c
 8028812:	461d      	mov	r5, r3
 8028814:	eeb0 aa40 	vmov.f32	s20, s0
 8028818:	920c      	str	r2, [sp, #48]	; 0x30
 802881a:	eef0 9a60 	vmov.f32	s19, s1
 802881e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028820:	eeb0 9a41 	vmov.f32	s18, s2
 8028824:	9011      	str	r0, [sp, #68]	; 0x44
 8028826:	eeb0 8a62 	vmov.f32	s16, s5
 802882a:	6850      	ldr	r0, [r2, #4]
 802882c:	eef0 8a43 	vmov.f32	s17, s6
 8028830:	9107      	str	r1, [sp, #28]
 8028832:	eef0 ba44 	vmov.f32	s23, s8
 8028836:	6812      	ldr	r2, [r2, #0]
 8028838:	eeb0 ba64 	vmov.f32	s22, s9
 802883c:	eef0 aa45 	vmov.f32	s21, s10
 8028840:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028844:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028848:	fb00 1303 	mla	r3, r0, r3, r1
 802884c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028850:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028852:	689b      	ldr	r3, [r3, #8]
 8028854:	3301      	adds	r3, #1
 8028856:	f023 0301 	bic.w	r3, r3, #1
 802885a:	9306      	str	r3, [sp, #24]
 802885c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802885e:	681f      	ldr	r7, [r3, #0]
 8028860:	9b07      	ldr	r3, [sp, #28]
 8028862:	2b00      	cmp	r3, #0
 8028864:	dc03      	bgt.n	802886e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028868:	2b00      	cmp	r3, #0
 802886a:	f340 8262 	ble.w	8028d32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802886e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028870:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028874:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028878:	1e48      	subs	r0, r1, #1
 802887a:	f102 3cff 	add.w	ip, r2, #4294967295
 802887e:	2d00      	cmp	r5, #0
 8028880:	f340 80ee 	ble.w	8028a60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8028884:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028888:	ea4f 4326 	mov.w	r3, r6, asr #16
 802888c:	d406      	bmi.n	802889c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802888e:	4586      	cmp	lr, r0
 8028890:	da04      	bge.n	802889c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028892:	2b00      	cmp	r3, #0
 8028894:	db02      	blt.n	802889c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028896:	4563      	cmp	r3, ip
 8028898:	f2c0 80e3 	blt.w	8028a62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802889c:	f11e 0e01 	adds.w	lr, lr, #1
 80288a0:	f100 80d6 	bmi.w	8028a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80288a4:	4571      	cmp	r1, lr
 80288a6:	f2c0 80d3 	blt.w	8028a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80288aa:	3301      	adds	r3, #1
 80288ac:	f100 80d0 	bmi.w	8028a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80288b0:	429a      	cmp	r2, r3
 80288b2:	f2c0 80cd 	blt.w	8028a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80288b6:	46c8      	mov	r8, r9
 80288b8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80288bc:	9509      	str	r5, [sp, #36]	; 0x24
 80288be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80288c0:	2b00      	cmp	r3, #0
 80288c2:	f340 80eb 	ble.w	8028a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80288c6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80288ca:	1430      	asrs	r0, r6, #16
 80288cc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80288d0:	9308      	str	r3, [sp, #32]
 80288d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80288d4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80288d8:	1423      	asrs	r3, r4, #16
 80288da:	f100 813c 	bmi.w	8028b56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80288de:	f10c 3bff 	add.w	fp, ip, #4294967295
 80288e2:	455b      	cmp	r3, fp
 80288e4:	f280 8137 	bge.w	8028b56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80288e8:	2800      	cmp	r0, #0
 80288ea:	f2c0 8134 	blt.w	8028b56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80288ee:	f10e 3bff 	add.w	fp, lr, #4294967295
 80288f2:	4558      	cmp	r0, fp
 80288f4:	f280 812f 	bge.w	8028b56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80288f8:	9a06      	ldr	r2, [sp, #24]
 80288fa:	fb00 3302 	mla	r3, r0, r2, r3
 80288fe:	0858      	lsrs	r0, r3, #1
 8028900:	07da      	lsls	r2, r3, #31
 8028902:	9a08      	ldr	r2, [sp, #32]
 8028904:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028908:	bf54      	ite	pl
 802890a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802890e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028912:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028916:	fa5f fc8c 	uxtb.w	ip, ip
 802891a:	2a00      	cmp	r2, #0
 802891c:	f000 8102 	beq.w	8028b24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028920:	1c58      	adds	r0, r3, #1
 8028922:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028926:	07c0      	lsls	r0, r0, #31
 8028928:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802892c:	bf54      	ite	pl
 802892e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028932:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028936:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802893a:	fa5f fe8e 	uxtb.w	lr, lr
 802893e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8028942:	b1b9      	cbz	r1, 8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028944:	4453      	add	r3, sl
 8028946:	0858      	lsrs	r0, r3, #1
 8028948:	07da      	lsls	r2, r3, #31
 802894a:	5c38      	ldrb	r0, [r7, r0]
 802894c:	bf54      	ite	pl
 802894e:	f000 000f 	andpl.w	r0, r0, #15
 8028952:	1100      	asrmi	r0, r0, #4
 8028954:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028958:	b2c0      	uxtb	r0, r0
 802895a:	900a      	str	r0, [sp, #40]	; 0x28
 802895c:	1c58      	adds	r0, r3, #1
 802895e:	0843      	lsrs	r3, r0, #1
 8028960:	07c2      	lsls	r2, r0, #31
 8028962:	5cfb      	ldrb	r3, [r7, r3]
 8028964:	bf54      	ite	pl
 8028966:	f003 030f 	andpl.w	r3, r3, #15
 802896a:	111b      	asrmi	r3, r3, #4
 802896c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028970:	b2db      	uxtb	r3, r3
 8028972:	930e      	str	r3, [sp, #56]	; 0x38
 8028974:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028978:	b289      	uxth	r1, r1
 802897a:	fb02 f301 	mul.w	r3, r2, r1
 802897e:	0112      	lsls	r2, r2, #4
 8028980:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028984:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028988:	1ad2      	subs	r2, r2, r3
 802898a:	b289      	uxth	r1, r1
 802898c:	b292      	uxth	r2, r2
 802898e:	1a40      	subs	r0, r0, r1
 8028990:	fa1f fe80 	uxth.w	lr, r0
 8028994:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028996:	4342      	muls	r2, r0
 8028998:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802899c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802899e:	fb01 c102 	mla	r1, r1, r2, ip
 80289a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80289a4:	fb03 1302 	mla	r3, r3, r2, r1
 80289a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289ac:	2b00      	cmp	r3, #0
 80289ae:	d045      	beq.n	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80289b0:	4a79      	ldr	r2, [pc, #484]	; (8028b98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 80289b2:	2bff      	cmp	r3, #255	; 0xff
 80289b4:	6811      	ldr	r1, [r2, #0]
 80289b6:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80289ba:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 80289be:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80289c2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80289c6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80289ca:	b2c9      	uxtb	r1, r1
 80289cc:	f000 80bb 	beq.w	8028b46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80289d0:	f8b8 c000 	ldrh.w	ip, [r8]
 80289d4:	fa1f fb83 	uxth.w	fp, r3
 80289d8:	43db      	mvns	r3, r3
 80289da:	fb1e fe0b 	smulbb	lr, lr, fp
 80289de:	ea4f 202c 	mov.w	r0, ip, asr #8
 80289e2:	fb12 f20b 	smulbb	r2, r2, fp
 80289e6:	b2db      	uxtb	r3, r3
 80289e8:	fb11 f10b 	smulbb	r1, r1, fp
 80289ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80289f0:	fb00 e003 	mla	r0, r0, r3, lr
 80289f4:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80289f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80289fc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028a00:	b280      	uxth	r0, r0
 8028a02:	fa5f fc8c 	uxtb.w	ip, ip
 8028a06:	fb0e 2203 	mla	r2, lr, r3, r2
 8028a0a:	fb0c 1303 	mla	r3, ip, r3, r1
 8028a0e:	1c41      	adds	r1, r0, #1
 8028a10:	b292      	uxth	r2, r2
 8028a12:	b29b      	uxth	r3, r3
 8028a14:	f102 0e01 	add.w	lr, r2, #1
 8028a18:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028a1c:	1c59      	adds	r1, r3, #1
 8028a1e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8028a22:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028a26:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028a2a:	0952      	lsrs	r2, r2, #5
 8028a2c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028a30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a34:	4310      	orrs	r0, r2
 8028a36:	4318      	orrs	r0, r3
 8028a38:	f8a8 0000 	strh.w	r0, [r8]
 8028a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028a3e:	f108 0802 	add.w	r8, r8, #2
 8028a42:	441c      	add	r4, r3
 8028a44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028a46:	441e      	add	r6, r3
 8028a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a4a:	3b01      	subs	r3, #1
 8028a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8028a4e:	e736      	b.n	80288be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028a52:	3d01      	subs	r5, #1
 8028a54:	f109 0902 	add.w	r9, r9, #2
 8028a58:	441c      	add	r4, r3
 8028a5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028a5c:	441e      	add	r6, r3
 8028a5e:	e70e      	b.n	802887e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028a60:	d020      	beq.n	8028aa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028a62:	1e6b      	subs	r3, r5, #1
 8028a64:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028a66:	fb00 4003 	mla	r0, r0, r3, r4
 8028a6a:	1400      	asrs	r0, r0, #16
 8028a6c:	f53f af23 	bmi.w	80288b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028a70:	3901      	subs	r1, #1
 8028a72:	4288      	cmp	r0, r1
 8028a74:	f6bf af1f 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028a78:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028a7a:	fb01 6303 	mla	r3, r1, r3, r6
 8028a7e:	141b      	asrs	r3, r3, #16
 8028a80:	f53f af19 	bmi.w	80288b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028a84:	3a01      	subs	r2, #1
 8028a86:	4293      	cmp	r3, r2
 8028a88:	f6bf af15 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028a8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8028a90:	46aa      	mov	sl, r5
 8028a92:	46c8      	mov	r8, r9
 8028a94:	9308      	str	r3, [sp, #32]
 8028a96:	f1ba 0f00 	cmp.w	sl, #0
 8028a9a:	dc7f      	bgt.n	8028b9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028a9c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028aa0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028aa4:	9b07      	ldr	r3, [sp, #28]
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	f340 8143 	ble.w	8028d32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8028aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028ab2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028ab6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028aba:	eef0 6a48 	vmov.f32	s13, s16
 8028abe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028ac2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028ac6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028aca:	ee16 4a90 	vmov	r4, s13
 8028ace:	eef0 6a68 	vmov.f32	s13, s17
 8028ad2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028ad6:	ee16 6a90 	vmov	r6, s13
 8028ada:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028ade:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028ae2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028ae6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028aea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028aee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028af2:	ee18 2a10 	vmov	r2, s16
 8028af6:	eeb0 8a47 	vmov.f32	s16, s14
 8028afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8028afe:	ee18 2a90 	vmov	r2, s17
 8028b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8028b04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b06:	eef0 8a67 	vmov.f32	s17, s15
 8028b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b0e:	9328      	str	r3, [sp, #160]	; 0xa0
 8028b10:	9b07      	ldr	r3, [sp, #28]
 8028b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028b14:	3b01      	subs	r3, #1
 8028b16:	9307      	str	r3, [sp, #28]
 8028b18:	bf08      	it	eq
 8028b1a:	4615      	moveq	r5, r2
 8028b1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b1e:	bf18      	it	ne
 8028b20:	461d      	movne	r5, r3
 8028b22:	e69d      	b.n	8028860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028b24:	2900      	cmp	r1, #0
 8028b26:	f43f af25 	beq.w	8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028b2a:	eb0a 0003 	add.w	r0, sl, r3
 8028b2e:	0843      	lsrs	r3, r0, #1
 8028b30:	07c0      	lsls	r0, r0, #31
 8028b32:	5cfb      	ldrb	r3, [r7, r3]
 8028b34:	bf54      	ite	pl
 8028b36:	f003 030f 	andpl.w	r3, r3, #15
 8028b3a:	111b      	asrmi	r3, r3, #4
 8028b3c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028b40:	b2db      	uxtb	r3, r3
 8028b42:	930a      	str	r3, [sp, #40]	; 0x28
 8028b44:	e716      	b.n	8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028b46:	00d2      	lsls	r2, r2, #3
 8028b48:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028b4c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028b50:	f8a8 1000 	strh.w	r1, [r8]
 8028b54:	e772      	b.n	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b56:	f113 0b01 	adds.w	fp, r3, #1
 8028b5a:	f53f af6f 	bmi.w	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b5e:	45dc      	cmp	ip, fp
 8028b60:	f6ff af6c 	blt.w	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b64:	f110 0b01 	adds.w	fp, r0, #1
 8028b68:	f53f af68 	bmi.w	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b6c:	45de      	cmp	lr, fp
 8028b6e:	f6ff af65 	blt.w	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b72:	9302      	str	r3, [sp, #8]
 8028b74:	fa0f f38e 	sxth.w	r3, lr
 8028b78:	9a08      	ldr	r2, [sp, #32]
 8028b7a:	9301      	str	r3, [sp, #4]
 8028b7c:	fa0f f38c 	sxth.w	r3, ip
 8028b80:	9105      	str	r1, [sp, #20]
 8028b82:	4641      	mov	r1, r8
 8028b84:	9300      	str	r3, [sp, #0]
 8028b86:	4653      	mov	r3, sl
 8028b88:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028b8c:	463a      	mov	r2, r7
 8028b8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028b90:	f7ff fd56 	bl	8028640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028b94:	e752      	b.n	8028a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b96:	bf00      	nop
 8028b98:	20014b5c 	.word	0x20014b5c
 8028b9c:	1422      	asrs	r2, r4, #16
 8028b9e:	9906      	ldr	r1, [sp, #24]
 8028ba0:	1433      	asrs	r3, r6, #16
 8028ba2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028ba6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028baa:	fb01 2303 	mla	r3, r1, r3, r2
 8028bae:	085a      	lsrs	r2, r3, #1
 8028bb0:	07d9      	lsls	r1, r3, #31
 8028bb2:	5cba      	ldrb	r2, [r7, r2]
 8028bb4:	bf54      	ite	pl
 8028bb6:	f002 020f 	andpl.w	r2, r2, #15
 8028bba:	1112      	asrmi	r2, r2, #4
 8028bbc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028bc0:	b2d2      	uxtb	r2, r2
 8028bc2:	2800      	cmp	r0, #0
 8028bc4:	f000 809c 	beq.w	8028d00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8028bc8:	f103 0e01 	add.w	lr, r3, #1
 8028bcc:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8028bd0:	f01e 0f01 	tst.w	lr, #1
 8028bd4:	5c79      	ldrb	r1, [r7, r1]
 8028bd6:	bf0c      	ite	eq
 8028bd8:	f001 010f 	andeq.w	r1, r1, #15
 8028bdc:	1109      	asrne	r1, r1, #4
 8028bde:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028be2:	b2c9      	uxtb	r1, r1
 8028be4:	910f      	str	r1, [sp, #60]	; 0x3c
 8028be6:	f1bc 0f00 	cmp.w	ip, #0
 8028bea:	d01a      	beq.n	8028c22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8028bec:	9908      	ldr	r1, [sp, #32]
 8028bee:	440b      	add	r3, r1
 8028bf0:	0859      	lsrs	r1, r3, #1
 8028bf2:	f013 0f01 	tst.w	r3, #1
 8028bf6:	f103 0301 	add.w	r3, r3, #1
 8028bfa:	5c79      	ldrb	r1, [r7, r1]
 8028bfc:	bf0c      	ite	eq
 8028bfe:	f001 010f 	andeq.w	r1, r1, #15
 8028c02:	1109      	asrne	r1, r1, #4
 8028c04:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028c08:	b2c9      	uxtb	r1, r1
 8028c0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8028c0c:	0859      	lsrs	r1, r3, #1
 8028c0e:	07db      	lsls	r3, r3, #31
 8028c10:	5c79      	ldrb	r1, [r7, r1]
 8028c12:	bf54      	ite	pl
 8028c14:	f001 010f 	andpl.w	r1, r1, #15
 8028c18:	1109      	asrmi	r1, r1, #4
 8028c1a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028c1e:	b2c9      	uxtb	r1, r1
 8028c20:	9110      	str	r1, [sp, #64]	; 0x40
 8028c22:	b280      	uxth	r0, r0
 8028c24:	fa1f fc8c 	uxth.w	ip, ip
 8028c28:	fb00 f30c 	mul.w	r3, r0, ip
 8028c2c:	0100      	lsls	r0, r0, #4
 8028c2e:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028c32:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028c36:	1ac0      	subs	r0, r0, r3
 8028c38:	fa1f fc8c 	uxth.w	ip, ip
 8028c3c:	b280      	uxth	r0, r0
 8028c3e:	eba1 010c 	sub.w	r1, r1, ip
 8028c42:	fa1f fe81 	uxth.w	lr, r1
 8028c46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028c48:	4348      	muls	r0, r1
 8028c4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028c4c:	fb02 020e 	mla	r2, r2, lr, r0
 8028c50:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028c56:	fb03 c302 	mla	r3, r3, r2, ip
 8028c5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c5e:	2b00      	cmp	r3, #0
 8028c60:	d045      	beq.n	8028cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8028c62:	4a36      	ldr	r2, [pc, #216]	; (8028d3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8028c64:	2bff      	cmp	r3, #255	; 0xff
 8028c66:	6811      	ldr	r1, [r2, #0]
 8028c68:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028c6c:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8028c70:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8028c74:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028c78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c7c:	b2c9      	uxtb	r1, r1
 8028c7e:	d050      	beq.n	8028d22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8028c80:	f8b8 c000 	ldrh.w	ip, [r8]
 8028c84:	fa1f fb83 	uxth.w	fp, r3
 8028c88:	43db      	mvns	r3, r3
 8028c8a:	fb1e fe0b 	smulbb	lr, lr, fp
 8028c8e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028c92:	fb12 f20b 	smulbb	r2, r2, fp
 8028c96:	b2db      	uxtb	r3, r3
 8028c98:	fb11 f10b 	smulbb	r1, r1, fp
 8028c9c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028ca0:	fb00 e003 	mla	r0, r0, r3, lr
 8028ca4:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8028ca8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028cac:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028cb0:	b280      	uxth	r0, r0
 8028cb2:	fa5f fc8c 	uxtb.w	ip, ip
 8028cb6:	fb0e 2203 	mla	r2, lr, r3, r2
 8028cba:	fb0c 1103 	mla	r1, ip, r3, r1
 8028cbe:	b292      	uxth	r2, r2
 8028cc0:	b289      	uxth	r1, r1
 8028cc2:	f102 0e01 	add.w	lr, r2, #1
 8028cc6:	1c4b      	adds	r3, r1, #1
 8028cc8:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8028ccc:	f100 0e01 	add.w	lr, r0, #1
 8028cd0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028cd4:	0952      	lsrs	r2, r2, #5
 8028cd6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028cda:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028cde:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028ce2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028ce6:	4302      	orrs	r2, r0
 8028ce8:	430a      	orrs	r2, r1
 8028cea:	f8a8 2000 	strh.w	r2, [r8]
 8028cee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028cf0:	f108 0802 	add.w	r8, r8, #2
 8028cf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028cf8:	441c      	add	r4, r3
 8028cfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028cfc:	441e      	add	r6, r3
 8028cfe:	e6ca      	b.n	8028a96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8028d00:	f1bc 0f00 	cmp.w	ip, #0
 8028d04:	d08d      	beq.n	8028c22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8028d06:	9908      	ldr	r1, [sp, #32]
 8028d08:	440b      	add	r3, r1
 8028d0a:	0859      	lsrs	r1, r3, #1
 8028d0c:	07db      	lsls	r3, r3, #31
 8028d0e:	5c79      	ldrb	r1, [r7, r1]
 8028d10:	bf54      	ite	pl
 8028d12:	f001 010f 	andpl.w	r1, r1, #15
 8028d16:	1109      	asrmi	r1, r1, #4
 8028d18:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028d1c:	b2c9      	uxtb	r1, r1
 8028d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8028d20:	e77f      	b.n	8028c22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8028d22:	00d2      	lsls	r2, r2, #3
 8028d24:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028d28:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028d2c:	f8a8 1000 	strh.w	r1, [r8]
 8028d30:	e7dd      	b.n	8028cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8028d32:	b013      	add	sp, #76	; 0x4c
 8028d34:	ecbd 8b08 	vpop	{d8-d11}
 8028d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d3c:	20014b5c 	.word	0x20014b5c

08028d40 <CRC_Lock>:
 8028d40:	4a1d      	ldr	r2, [pc, #116]	; (8028db8 <CRC_Lock+0x78>)
 8028d42:	b530      	push	{r4, r5, lr}
 8028d44:	6813      	ldr	r3, [r2, #0]
 8028d46:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028d4a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028d4e:	f023 0301 	bic.w	r3, r3, #1
 8028d52:	6013      	str	r3, [r2, #0]
 8028d54:	4b19      	ldr	r3, [pc, #100]	; (8028dbc <CRC_Lock+0x7c>)
 8028d56:	681a      	ldr	r2, [r3, #0]
 8028d58:	4022      	ands	r2, r4
 8028d5a:	42aa      	cmp	r2, r5
 8028d5c:	d005      	beq.n	8028d6a <CRC_Lock+0x2a>
 8028d5e:	681b      	ldr	r3, [r3, #0]
 8028d60:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028d64:	4023      	ands	r3, r4
 8028d66:	4293      	cmp	r3, r2
 8028d68:	d11d      	bne.n	8028da6 <CRC_Lock+0x66>
 8028d6a:	4b15      	ldr	r3, [pc, #84]	; (8028dc0 <CRC_Lock+0x80>)
 8028d6c:	681b      	ldr	r3, [r3, #0]
 8028d6e:	b9d3      	cbnz	r3, 8028da6 <CRC_Lock+0x66>
 8028d70:	4a14      	ldr	r2, [pc, #80]	; (8028dc4 <CRC_Lock+0x84>)
 8028d72:	6813      	ldr	r3, [r2, #0]
 8028d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d78:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8028d7c:	d006      	beq.n	8028d8c <CRC_Lock+0x4c>
 8028d7e:	6813      	ldr	r3, [r2, #0]
 8028d80:	f240 4283 	movw	r2, #1155	; 0x483
 8028d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d88:	4293      	cmp	r3, r2
 8028d8a:	d10c      	bne.n	8028da6 <CRC_Lock+0x66>
 8028d8c:	4b0e      	ldr	r3, [pc, #56]	; (8028dc8 <CRC_Lock+0x88>)
 8028d8e:	2201      	movs	r2, #1
 8028d90:	601a      	str	r2, [r3, #0]
 8028d92:	681a      	ldr	r2, [r3, #0]
 8028d94:	2a00      	cmp	r2, #0
 8028d96:	d1fc      	bne.n	8028d92 <CRC_Lock+0x52>
 8028d98:	4b0c      	ldr	r3, [pc, #48]	; (8028dcc <CRC_Lock+0x8c>)
 8028d9a:	6018      	str	r0, [r3, #0]
 8028d9c:	6818      	ldr	r0, [r3, #0]
 8028d9e:	1a43      	subs	r3, r0, r1
 8028da0:	4258      	negs	r0, r3
 8028da2:	4158      	adcs	r0, r3
 8028da4:	bd30      	pop	{r4, r5, pc}
 8028da6:	4b0a      	ldr	r3, [pc, #40]	; (8028dd0 <CRC_Lock+0x90>)
 8028da8:	2201      	movs	r2, #1
 8028daa:	601a      	str	r2, [r3, #0]
 8028dac:	681a      	ldr	r2, [r3, #0]
 8028dae:	2a00      	cmp	r2, #0
 8028db0:	d1fc      	bne.n	8028dac <CRC_Lock+0x6c>
 8028db2:	4b08      	ldr	r3, [pc, #32]	; (8028dd4 <CRC_Lock+0x94>)
 8028db4:	e7f1      	b.n	8028d9a <CRC_Lock+0x5a>
 8028db6:	bf00      	nop
 8028db8:	e0002000 	.word	0xe0002000
 8028dbc:	e000ed00 	.word	0xe000ed00
 8028dc0:	e0042000 	.word	0xe0042000
 8028dc4:	5c001000 	.word	0x5c001000
 8028dc8:	58024c08 	.word	0x58024c08
 8028dcc:	58024c00 	.word	0x58024c00
 8028dd0:	40023008 	.word	0x40023008
 8028dd4:	40023000 	.word	0x40023000

08028dd8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028dd8:	6101      	str	r1, [r0, #16]
 8028dda:	4770      	bx	lr

08028ddc <_ZN8touchgfx8Gestures4tickEv>:
 8028ddc:	7b83      	ldrb	r3, [r0, #14]
 8028dde:	b14b      	cbz	r3, 8028df4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028de0:	8903      	ldrh	r3, [r0, #8]
 8028de2:	3301      	adds	r3, #1
 8028de4:	b29b      	uxth	r3, r3
 8028de6:	2b07      	cmp	r3, #7
 8028de8:	8103      	strh	r3, [r0, #8]
 8028dea:	bf81      	itttt	hi
 8028dec:	2300      	movhi	r3, #0
 8028dee:	8143      	strhhi	r3, [r0, #10]
 8028df0:	8183      	strhhi	r3, [r0, #12]
 8028df2:	7383      	strbhi	r3, [r0, #14]
 8028df4:	4770      	bx	lr
	...

08028df8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028df8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028dfc:	4604      	mov	r4, r0
 8028dfe:	4698      	mov	r8, r3
 8028e00:	8880      	ldrh	r0, [r0, #4]
 8028e02:	4617      	mov	r7, r2
 8028e04:	4b1d      	ldr	r3, [pc, #116]	; (8028e7c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8028e06:	460e      	mov	r6, r1
 8028e08:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028e0c:	eba8 0000 	sub.w	r0, r8, r0
 8028e10:	9300      	str	r3, [sp, #0]
 8028e12:	2300      	movs	r3, #0
 8028e14:	b280      	uxth	r0, r0
 8028e16:	8aa2      	ldrh	r2, [r4, #20]
 8028e18:	f88d 3004 	strb.w	r3, [sp, #4]
 8028e1c:	b203      	sxth	r3, r0
 8028e1e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028e22:	88e1      	ldrh	r1, [r4, #6]
 8028e24:	2b00      	cmp	r3, #0
 8028e26:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028e2a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028e2e:	bfb8      	it	lt
 8028e30:	4240      	neglt	r0, r0
 8028e32:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028e36:	bfb8      	it	lt
 8028e38:	b203      	sxthlt	r3, r0
 8028e3a:	4293      	cmp	r3, r2
 8028e3c:	dc08      	bgt.n	8028e50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8028e3e:	1a69      	subs	r1, r5, r1
 8028e40:	b289      	uxth	r1, r1
 8028e42:	b20b      	sxth	r3, r1
 8028e44:	2b00      	cmp	r3, #0
 8028e46:	bfbc      	itt	lt
 8028e48:	4249      	neglt	r1, r1
 8028e4a:	b20b      	sxthlt	r3, r1
 8028e4c:	429a      	cmp	r2, r3
 8028e4e:	da13      	bge.n	8028e78 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8028e50:	6920      	ldr	r0, [r4, #16]
 8028e52:	4669      	mov	r1, sp
 8028e54:	eba8 0606 	sub.w	r6, r8, r6
 8028e58:	1bef      	subs	r7, r5, r7
 8028e5a:	6803      	ldr	r3, [r0, #0]
 8028e5c:	685b      	ldr	r3, [r3, #4]
 8028e5e:	4798      	blx	r3
 8028e60:	2300      	movs	r3, #0
 8028e62:	2001      	movs	r0, #1
 8028e64:	8166      	strh	r6, [r4, #10]
 8028e66:	8123      	strh	r3, [r4, #8]
 8028e68:	81a7      	strh	r7, [r4, #12]
 8028e6a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028e6e:	80e5      	strh	r5, [r4, #6]
 8028e70:	73a0      	strb	r0, [r4, #14]
 8028e72:	b004      	add	sp, #16
 8028e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e78:	2000      	movs	r0, #0
 8028e7a:	e7fa      	b.n	8028e72 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8028e7c:	0802fa10 	.word	0x0802fa10

08028e80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e82:	461e      	mov	r6, r3
 8028e84:	1e4b      	subs	r3, r1, #1
 8028e86:	b085      	sub	sp, #20
 8028e88:	4604      	mov	r4, r0
 8028e8a:	2b01      	cmp	r3, #1
 8028e8c:	460d      	mov	r5, r1
 8028e8e:	4617      	mov	r7, r2
 8028e90:	d84b      	bhi.n	8028f2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028e92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028e96:	1cd3      	adds	r3, r2, #3
 8028e98:	b29b      	uxth	r3, r3
 8028e9a:	2b06      	cmp	r3, #6
 8028e9c:	d916      	bls.n	8028ecc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028e9e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028ea2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028ea6:	f8cd c004 	str.w	ip, [sp, #4]
 8028eaa:	f04f 0c00 	mov.w	ip, #0
 8028eae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028eb2:	6900      	ldr	r0, [r0, #16]
 8028eb4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028eb8:	a901      	add	r1, sp, #4
 8028eba:	f88d c008 	strb.w	ip, [sp, #8]
 8028ebe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028ec2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ec6:	6803      	ldr	r3, [r0, #0]
 8028ec8:	689b      	ldr	r3, [r3, #8]
 8028eca:	4798      	blx	r3
 8028ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ed0:	1cd3      	adds	r3, r2, #3
 8028ed2:	b29b      	uxth	r3, r3
 8028ed4:	2b06      	cmp	r3, #6
 8028ed6:	d916      	bls.n	8028f06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028ed8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028edc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028ee0:	f8cd c004 	str.w	ip, [sp, #4]
 8028ee4:	f04f 0c01 	mov.w	ip, #1
 8028ee8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028eec:	6920      	ldr	r0, [r4, #16]
 8028eee:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028ef2:	a901      	add	r1, sp, #4
 8028ef4:	f88d c008 	strb.w	ip, [sp, #8]
 8028ef8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028efc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f00:	6803      	ldr	r3, [r0, #0]
 8028f02:	689b      	ldr	r3, [r3, #8]
 8028f04:	4798      	blx	r3
 8028f06:	4b0d      	ldr	r3, [pc, #52]	; (8028f3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028f08:	a901      	add	r1, sp, #4
 8028f0a:	6920      	ldr	r0, [r4, #16]
 8028f0c:	9301      	str	r3, [sp, #4]
 8028f0e:	2300      	movs	r3, #0
 8028f10:	f88d 5008 	strb.w	r5, [sp, #8]
 8028f14:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028f18:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028f1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f20:	6803      	ldr	r3, [r0, #0]
 8028f22:	681b      	ldr	r3, [r3, #0]
 8028f24:	4798      	blx	r3
 8028f26:	b005      	add	sp, #20
 8028f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f2a:	2900      	cmp	r1, #0
 8028f2c:	d1eb      	bne.n	8028f06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f2e:	80a2      	strh	r2, [r4, #4]
 8028f30:	80c6      	strh	r6, [r0, #6]
 8028f32:	60a1      	str	r1, [r4, #8]
 8028f34:	81a1      	strh	r1, [r4, #12]
 8028f36:	73a1      	strb	r1, [r4, #14]
 8028f38:	e7e5      	b.n	8028f06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f3a:	bf00      	nop
 8028f3c:	0802f9fc 	.word	0x0802f9fc
 8028f40:	0802fa24 	.word	0x0802fa24

08028f44 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8028f44:	10c9      	asrs	r1, r1, #3
 8028f46:	2900      	cmp	r1, #0
 8028f48:	bfb8      	it	lt
 8028f4a:	4249      	neglt	r1, r1
 8028f4c:	2801      	cmp	r0, #1
 8028f4e:	d108      	bne.n	8028f62 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8028f50:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028f54:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8028f58:	4601      	mov	r1, r0
 8028f5a:	dd02      	ble.n	8028f62 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8028f5c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8028f60:	4770      	bx	lr
 8028f62:	29ff      	cmp	r1, #255	; 0xff
 8028f64:	bfa8      	it	ge
 8028f66:	21ff      	movge	r1, #255	; 0xff
 8028f68:	4608      	mov	r0, r1
 8028f6a:	4770      	bx	lr

08028f6c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8028f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f70:	688c      	ldr	r4, [r1, #8]
 8028f72:	b087      	sub	sp, #28
 8028f74:	4607      	mov	r7, r0
 8028f76:	2c00      	cmp	r4, #0
 8028f78:	db2b      	blt.n	8028fd2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8028f7a:	6803      	ldr	r3, [r0, #0]
 8028f7c:	691a      	ldr	r2, [r3, #16]
 8028f7e:	42a2      	cmp	r2, r4
 8028f80:	dd27      	ble.n	8028fd2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8028f82:	685a      	ldr	r2, [r3, #4]
 8028f84:	695e      	ldr	r6, [r3, #20]
 8028f86:	68cd      	ldr	r5, [r1, #12]
 8028f88:	fb06 2604 	mla	r6, r6, r4, r2
 8028f8c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8028f90:	698a      	ldr	r2, [r1, #24]
 8028f92:	f893 a008 	ldrb.w	sl, [r3, #8]
 8028f96:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8028f9a:	9205      	str	r2, [sp, #20]
 8028f9c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8028fa0:	9b05      	ldr	r3, [sp, #20]
 8028fa2:	6839      	ldr	r1, [r7, #0]
 8028fa4:	eb03 0c02 	add.w	ip, r3, r2
 8028fa8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8028fac:	68c9      	ldr	r1, [r1, #12]
 8028fae:	1898      	adds	r0, r3, r2
 8028fb0:	4288      	cmp	r0, r1
 8028fb2:	db02      	blt.n	8028fba <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8028fb4:	1a8b      	subs	r3, r1, r2
 8028fb6:	2b00      	cmp	r3, #0
 8028fb8:	dd09      	ble.n	8028fce <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8028fba:	6878      	ldr	r0, [r7, #4]
 8028fbc:	6801      	ldr	r1, [r0, #0]
 8028fbe:	9400      	str	r4, [sp, #0]
 8028fc0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8028fc4:	4653      	mov	r3, sl
 8028fc6:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8028fca:	4631      	mov	r1, r6
 8028fcc:	47d8      	blx	fp
 8028fce:	3d01      	subs	r5, #1
 8028fd0:	d1e4      	bne.n	8028f9c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8028fd2:	b007      	add	sp, #28
 8028fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028fd8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028fd8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8028fdc:	b90b      	cbnz	r3, 8028fe2 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8028fde:	f001 b972 	b.w	802a2c6 <_ZN8touchgfx7Outline6lineToEii>
 8028fe2:	4770      	bx	lr

08028fe4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8028fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028fe8:	4604      	mov	r4, r0
 8028fea:	2600      	movs	r6, #0
 8028fec:	4b8e      	ldr	r3, [pc, #568]	; (8029228 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8028fee:	f100 0518 	add.w	r5, r0, #24
 8028ff2:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8028ff6:	b086      	sub	sp, #24
 8028ff8:	4690      	mov	r8, r2
 8028ffa:	e9c0 3100 	strd	r3, r1, [r0]
 8028ffe:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8029002:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8029006:	4628      	mov	r0, r5
 8029008:	f001 fb7c 	bl	802a704 <_ZN8touchgfx15RenderingBufferC1Ev>
 802900c:	4638      	mov	r0, r7
 802900e:	f000 fb43 	bl	8029698 <_ZN8touchgfx7OutlineC1Ev>
 8029012:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8029016:	f001 fb21 	bl	802a65c <_ZN8touchgfx8ScanlineC1Ev>
 802901a:	2301      	movs	r3, #1
 802901c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8029020:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8029024:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8029028:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802902c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8029030:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8029034:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8029038:	f7ef fce8 	bl	8018a0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802903c:	b928      	cbnz	r0, 802904a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802903e:	4b7b      	ldr	r3, [pc, #492]	; (802922c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8029040:	2118      	movs	r1, #24
 8029042:	4a7b      	ldr	r2, [pc, #492]	; (8029230 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029044:	487b      	ldr	r0, [pc, #492]	; (8029234 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029046:	f001 fba5 	bl	802a794 <__assert_func>
 802904a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802904e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029052:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029056:	4410      	add	r0, r2
 8029058:	9602      	str	r6, [sp, #8]
 802905a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802905e:	b280      	uxth	r0, r0
 8029060:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029064:	fa0f fa80 	sxth.w	sl, r0
 8029068:	f1ba 0f00 	cmp.w	sl, #0
 802906c:	dd70      	ble.n	8029150 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802906e:	4591      	cmp	r9, r2
 8029070:	dd6e      	ble.n	8029150 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029072:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029076:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802907a:	440b      	add	r3, r1
 802907c:	b29b      	uxth	r3, r3
 802907e:	b21e      	sxth	r6, r3
 8029080:	2e00      	cmp	r6, #0
 8029082:	dd65      	ble.n	8029150 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029084:	458e      	cmp	lr, r1
 8029086:	dd63      	ble.n	8029150 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029088:	45d1      	cmp	r9, sl
 802908a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802908e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029092:	bfb8      	it	lt
 8029094:	fa1f f089 	uxthlt.w	r0, r9
 8029098:	45b6      	cmp	lr, r6
 802909a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802909e:	bfb8      	it	lt
 80290a0:	fa1f f38e 	uxthlt.w	r3, lr
 80290a4:	1a80      	subs	r0, r0, r2
 80290a6:	f8ad 100a 	strh.w	r1, [sp, #10]
 80290aa:	1a5b      	subs	r3, r3, r1
 80290ac:	f8ad 000c 	strh.w	r0, [sp, #12]
 80290b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80290b4:	f10d 0808 	add.w	r8, sp, #8
 80290b8:	ae04      	add	r6, sp, #16
 80290ba:	e898 0003 	ldmia.w	r8, {r0, r1}
 80290be:	e886 0003 	stmia.w	r6, {r0, r1}
 80290c2:	f8dc 3000 	ldr.w	r3, [ip]
 80290c6:	4660      	mov	r0, ip
 80290c8:	4631      	mov	r1, r6
 80290ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290cc:	4798      	blx	r3
 80290ce:	6861      	ldr	r1, [r4, #4]
 80290d0:	4640      	mov	r0, r8
 80290d2:	3104      	adds	r1, #4
 80290d4:	f7f0 ff30 	bl	8019f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80290d8:	4630      	mov	r0, r6
 80290da:	f7f0 ff45 	bl	8019f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80290de:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80290e2:	f7ef fc23 	bl	801892c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80290e6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80290ea:	4638      	mov	r0, r7
 80290ec:	f000 fab0 	bl	8029650 <_ZN8touchgfx7Outline5resetEv>
 80290f0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80290f4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80290f8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80290fc:	015b      	lsls	r3, r3, #5
 80290fe:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8029102:	0152      	lsls	r2, r2, #5
 8029104:	60e3      	str	r3, [r4, #12]
 8029106:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802910a:	60a2      	str	r2, [r4, #8]
 802910c:	015b      	lsls	r3, r3, #5
 802910e:	6123      	str	r3, [r4, #16]
 8029110:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8029114:	015b      	lsls	r3, r3, #5
 8029116:	6163      	str	r3, [r4, #20]
 8029118:	4b47      	ldr	r3, [pc, #284]	; (8029238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802911a:	6818      	ldr	r0, [r3, #0]
 802911c:	6803      	ldr	r3, [r0, #0]
 802911e:	6a1b      	ldr	r3, [r3, #32]
 8029120:	4798      	blx	r3
 8029122:	4606      	mov	r6, r0
 8029124:	f7e0 fc5e 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8029128:	6803      	ldr	r3, [r0, #0]
 802912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802912c:	4798      	blx	r3
 802912e:	4607      	mov	r7, r0
 8029130:	f7e0 fc58 	bl	80099e4 <_ZN8touchgfx3HAL3lcdEv>
 8029134:	6803      	ldr	r3, [r0, #0]
 8029136:	6a1b      	ldr	r3, [r3, #32]
 8029138:	4798      	blx	r3
 802913a:	280d      	cmp	r0, #13
 802913c:	d854      	bhi.n	80291e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802913e:	e8df f000 	tbb	[pc, r0]
 8029142:	554b      	.short	0x554b
 8029144:	2b6e0a66 	.word	0x2b6e0a66
 8029148:	5f5f5f3b 	.word	0x5f5f5f3b
 802914c:	6e6e5f5f 	.word	0x6e6e5f5f
 8029150:	2300      	movs	r3, #0
 8029152:	9303      	str	r3, [sp, #12]
 8029154:	e7ae      	b.n	80290b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8029156:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802915a:	2108      	movs	r1, #8
 802915c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029160:	fb92 f1f1 	sdiv	r1, r2, r1
 8029164:	fb07 1303 	mla	r3, r7, r3, r1
 8029168:	441e      	add	r6, r3
 802916a:	4253      	negs	r3, r2
 802916c:	f002 0207 	and.w	r2, r2, #7
 8029170:	f003 0307 	and.w	r3, r3, #7
 8029174:	bf58      	it	pl
 8029176:	425a      	negpl	r2, r3
 8029178:	b2d2      	uxtb	r2, r2
 802917a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802917e:	4628      	mov	r0, r5
 8029180:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029184:	6721      	str	r1, [r4, #112]	; 0x70
 8029186:	e9cd 1700 	strd	r1, r7, [sp]
 802918a:	4631      	mov	r1, r6
 802918c:	f001 fac6 	bl	802a71c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8029190:	4620      	mov	r0, r4
 8029192:	b006      	add	sp, #24
 8029194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029198:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802919c:	2104      	movs	r1, #4
 802919e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291a2:	fb92 f1f1 	sdiv	r1, r2, r1
 80291a6:	fb07 1303 	mla	r3, r7, r3, r1
 80291aa:	441e      	add	r6, r3
 80291ac:	4253      	negs	r3, r2
 80291ae:	f002 0203 	and.w	r2, r2, #3
 80291b2:	f003 0303 	and.w	r3, r3, #3
 80291b6:	e7dd      	b.n	8029174 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80291b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80291bc:	2102      	movs	r1, #2
 80291be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291c2:	2a00      	cmp	r2, #0
 80291c4:	fb92 f1f1 	sdiv	r1, r2, r1
 80291c8:	f002 0201 	and.w	r2, r2, #1
 80291cc:	fb07 1303 	mla	r3, r7, r3, r1
 80291d0:	bfb8      	it	lt
 80291d2:	4252      	neglt	r2, r2
 80291d4:	441e      	add	r6, r3
 80291d6:	e7cf      	b.n	8029178 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80291d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80291e0:	437b      	muls	r3, r7
 80291e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80291e6:	441e      	add	r6, r3
 80291e8:	2200      	movs	r2, #0
 80291ea:	e7c6      	b.n	802917a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80291ec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291f0:	2103      	movs	r1, #3
 80291f2:	fb07 f203 	mul.w	r2, r7, r3
 80291f6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80291fa:	fb13 2301 	smlabb	r3, r3, r1, r2
 80291fe:	e7f2      	b.n	80291e6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029200:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029204:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029208:	fb07 2303 	mla	r3, r7, r3, r2
 802920c:	e7eb      	b.n	80291e6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802920e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029212:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029216:	437b      	muls	r3, r7
 8029218:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802921c:	e7e3      	b.n	80291e6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802921e:	4b07      	ldr	r3, [pc, #28]	; (802923c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029220:	2157      	movs	r1, #87	; 0x57
 8029222:	4a03      	ldr	r2, [pc, #12]	; (8029230 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029224:	e70e      	b.n	8029044 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8029226:	bf00      	nop
 8029228:	08030edc 	.word	0x08030edc
 802922c:	08030e27 	.word	0x08030e27
 8029230:	08030ee4 	.word	0x08030ee4
 8029234:	08030e83 	.word	0x08030e83
 8029238:	20014b34 	.word	0x20014b34
 802923c:	08030eb7 	.word	0x08030eb7

08029240 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8029240:	6812      	ldr	r2, [r2, #0]
 8029242:	2a00      	cmp	r2, #0
 8029244:	db0b      	blt.n	802925e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8029246:	9800      	ldr	r0, [sp, #0]
 8029248:	6800      	ldr	r0, [r0, #0]
 802924a:	4290      	cmp	r0, r2
 802924c:	bfd4      	ite	le
 802924e:	2002      	movle	r0, #2
 8029250:	2000      	movgt	r0, #0
 8029252:	680a      	ldr	r2, [r1, #0]
 8029254:	2a00      	cmp	r2, #0
 8029256:	da04      	bge.n	8029262 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8029258:	f040 0004 	orr.w	r0, r0, #4
 802925c:	4770      	bx	lr
 802925e:	2001      	movs	r0, #1
 8029260:	e7f7      	b.n	8029252 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8029262:	681b      	ldr	r3, [r3, #0]
 8029264:	4293      	cmp	r3, r2
 8029266:	bfd8      	it	le
 8029268:	f040 0008 	orrle.w	r0, r0, #8
 802926c:	4770      	bx	lr
	...

08029270 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029270:	4b07      	ldr	r3, [pc, #28]	; (8029290 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029272:	b510      	push	{r4, lr}
 8029274:	781b      	ldrb	r3, [r3, #0]
 8029276:	2b01      	cmp	r3, #1
 8029278:	d108      	bne.n	802928c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802927a:	6843      	ldr	r3, [r0, #4]
 802927c:	6814      	ldr	r4, [r2, #0]
 802927e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029282:	680b      	ldr	r3, [r1, #0]
 8029284:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029288:	6013      	str	r3, [r2, #0]
 802928a:	600c      	str	r4, [r1, #0]
 802928c:	bd10      	pop	{r4, pc}
 802928e:	bf00      	nop
 8029290:	20014b2c 	.word	0x20014b2c

08029294 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029296:	b085      	sub	sp, #20
 8029298:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802929c:	4604      	mov	r4, r0
 802929e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80292a2:	b33b      	cbz	r3, 80292f4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80292a4:	aa02      	add	r2, sp, #8
 80292a6:	a903      	add	r1, sp, #12
 80292a8:	f7ff ffe2 	bl	8029270 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80292ac:	68a3      	ldr	r3, [r4, #8]
 80292ae:	9e03      	ldr	r6, [sp, #12]
 80292b0:	aa02      	add	r2, sp, #8
 80292b2:	9f02      	ldr	r7, [sp, #8]
 80292b4:	a903      	add	r1, sp, #12
 80292b6:	1af6      	subs	r6, r6, r3
 80292b8:	68e3      	ldr	r3, [r4, #12]
 80292ba:	4620      	mov	r0, r4
 80292bc:	1aff      	subs	r7, r7, r3
 80292be:	f104 0314 	add.w	r3, r4, #20
 80292c2:	9603      	str	r6, [sp, #12]
 80292c4:	9300      	str	r3, [sp, #0]
 80292c6:	f104 0310 	add.w	r3, r4, #16
 80292ca:	9702      	str	r7, [sp, #8]
 80292cc:	f7ff ffb8 	bl	8029240 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80292d0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80292d4:	4605      	mov	r5, r0
 80292d6:	b97b      	cbnz	r3, 80292f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80292d8:	463a      	mov	r2, r7
 80292da:	4631      	mov	r1, r6
 80292dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80292e0:	f7ff fe7a 	bl	8028fd8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80292e4:	9b03      	ldr	r3, [sp, #12]
 80292e6:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80292ea:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80292ee:	9b02      	ldr	r3, [sp, #8]
 80292f0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80292f4:	b005      	add	sp, #20
 80292f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292f8:	b110      	cbz	r0, 8029300 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80292fa:	ea13 0200 	ands.w	r2, r3, r0
 80292fe:	d11c      	bne.n	802933a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029300:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8029304:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8029308:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802930c:	b188      	cbz	r0, 8029332 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802930e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8029312:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8029316:	b913      	cbnz	r3, 802931e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8029318:	4630      	mov	r0, r6
 802931a:	f001 f804 	bl	802a326 <_ZN8touchgfx7Outline6moveToEii>
 802931e:	2300      	movs	r3, #0
 8029320:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8029324:	2301      	movs	r3, #1
 8029326:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802932a:	4630      	mov	r0, r6
 802932c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8029330:	e7d6      	b.n	80292e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8029332:	4630      	mov	r0, r6
 8029334:	f7ff fe50 	bl	8028fd8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029338:	e7f7      	b.n	802932a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802933a:	4615      	mov	r5, r2
 802933c:	e7d2      	b.n	80292e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802933e <_ZN8touchgfx6Canvas5closeEv>:
 802933e:	b538      	push	{r3, r4, r5, lr}
 8029340:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8029344:	4604      	mov	r4, r0
 8029346:	b993      	cbnz	r3, 802936e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029348:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802934c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8029350:	4213      	tst	r3, r2
 8029352:	d10c      	bne.n	802936e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029354:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8029358:	b123      	cbz	r3, 8029364 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802935a:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802935e:	4628      	mov	r0, r5
 8029360:	f7ff fe3a 	bl	8028fd8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029364:	4628      	mov	r0, r5
 8029366:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802936a:	f7ff fe35 	bl	8028fd8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802936e:	2300      	movs	r3, #0
 8029370:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8029374:	bd38      	pop	{r3, r4, r5, pc}

08029376 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029378:	b085      	sub	sp, #20
 802937a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802937e:	4604      	mov	r4, r0
 8029380:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029384:	b353      	cbz	r3, 80293dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8029386:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802938a:	b90b      	cbnz	r3, 8029390 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802938c:	f7ff ffd7 	bl	802933e <_ZN8touchgfx6Canvas5closeEv>
 8029390:	aa02      	add	r2, sp, #8
 8029392:	a903      	add	r1, sp, #12
 8029394:	4620      	mov	r0, r4
 8029396:	f7ff ff6b 	bl	8029270 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802939a:	68a3      	ldr	r3, [r4, #8]
 802939c:	9d03      	ldr	r5, [sp, #12]
 802939e:	aa02      	add	r2, sp, #8
 80293a0:	9e02      	ldr	r6, [sp, #8]
 80293a2:	a903      	add	r1, sp, #12
 80293a4:	1aed      	subs	r5, r5, r3
 80293a6:	68e3      	ldr	r3, [r4, #12]
 80293a8:	4620      	mov	r0, r4
 80293aa:	1af6      	subs	r6, r6, r3
 80293ac:	f104 0314 	add.w	r3, r4, #20
 80293b0:	9503      	str	r5, [sp, #12]
 80293b2:	9300      	str	r3, [sp, #0]
 80293b4:	f104 0310 	add.w	r3, r4, #16
 80293b8:	9602      	str	r6, [sp, #8]
 80293ba:	f7ff ff41 	bl	8029240 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80293be:	4607      	mov	r7, r0
 80293c0:	b170      	cbz	r0, 80293e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80293c2:	2301      	movs	r3, #1
 80293c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80293c8:	9a03      	ldr	r2, [sp, #12]
 80293ca:	9b02      	ldr	r3, [sp, #8]
 80293cc:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80293d0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80293d4:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80293d8:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80293dc:	b005      	add	sp, #20
 80293de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80293e4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80293e8:	b92b      	cbnz	r3, 80293f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80293ea:	4632      	mov	r2, r6
 80293ec:	4629      	mov	r1, r5
 80293ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80293f2:	f000 ff98 	bl	802a326 <_ZN8touchgfx7Outline6moveToEii>
 80293f6:	2300      	movs	r3, #0
 80293f8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80293fc:	2301      	movs	r3, #1
 80293fe:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8029402:	e7e1      	b.n	80293c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08029404 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8029404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029408:	4604      	mov	r4, r0
 802940a:	b087      	sub	sp, #28
 802940c:	9105      	str	r1, [sp, #20]
 802940e:	f001 f8ce 	bl	802a5ae <_ZN8touchgfx7Outline8getCellsEv>
 8029412:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8029416:	4605      	mov	r5, r0
 8029418:	f1b9 0f00 	cmp.w	r9, #0
 802941c:	d103      	bne.n	8029426 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802941e:	2001      	movs	r0, #1
 8029420:	b007      	add	sp, #28
 8029422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029426:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802942a:	2e00      	cmp	r6, #0
 802942c:	d139      	bne.n	80294a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802942e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8029432:	f105 0708 	add.w	r7, r5, #8
 8029436:	4640      	mov	r0, r8
 8029438:	f001 f8fb 	bl	802a632 <_ZN8touchgfx8Scanline5resetEv>
 802943c:	f109 33ff 	add.w	r3, r9, #4294967295
 8029440:	9303      	str	r3, [sp, #12]
 8029442:	f9b5 b000 	ldrsh.w	fp, [r5]
 8029446:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802944a:	46da      	mov	sl, fp
 802944c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8029450:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8029454:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8029458:	9b03      	ldr	r3, [sp, #12]
 802945a:	4416      	add	r6, r2
 802945c:	9504      	str	r5, [sp, #16]
 802945e:	463d      	mov	r5, r7
 8029460:	3b01      	subs	r3, #1
 8029462:	9303      	str	r3, [sp, #12]
 8029464:	3301      	adds	r3, #1
 8029466:	d01e      	beq.n	80294a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8029468:	3708      	adds	r7, #8
 802946a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802946e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8029472:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8029476:	4290      	cmp	r0, r2
 8029478:	d11e      	bne.n	80294b8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802947a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802947e:	4411      	add	r1, r2
 8029480:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8029484:	e7e8      	b.n	8029458 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8029486:	1c91      	adds	r1, r2, #2
 8029488:	f04f 0301 	mov.w	r3, #1
 802948c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802948e:	8053      	strh	r3, [r2, #2]
 8029490:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8029492:	1c91      	adds	r1, r2, #2
 8029494:	65a1      	str	r1, [r4, #88]	; 0x58
 8029496:	f8a2 b002 	strh.w	fp, [r2, #2]
 802949a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802949c:	3201      	adds	r2, #1
 802949e:	6562      	str	r2, [r4, #84]	; 0x54
 80294a0:	e03a      	b.n	8029518 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80294a2:	2000      	movs	r0, #0
 80294a4:	e7bc      	b.n	8029420 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80294a6:	b951      	cbnz	r1, 80294be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80294a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80294aa:	2b00      	cmp	r3, #0
 80294ac:	d0b7      	beq.n	802941e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80294ae:	4641      	mov	r1, r8
 80294b0:	9805      	ldr	r0, [sp, #20]
 80294b2:	f7ff fd5b 	bl	8028f6c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80294b6:	e7b2      	b.n	802941e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80294b8:	2900      	cmp	r1, #0
 80294ba:	d035      	beq.n	8029528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80294bc:	9504      	str	r5, [sp, #16]
 80294be:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80294c2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80294c6:	f7ff fd3d 	bl	8028f44 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80294ca:	4605      	mov	r5, r0
 80294cc:	b330      	cbz	r0, 802951c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80294ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80294d0:	b182      	cbz	r2, 80294f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80294d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80294d4:	454a      	cmp	r2, r9
 80294d6:	d00d      	beq.n	80294f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80294d8:	4641      	mov	r1, r8
 80294da:	9805      	ldr	r0, [sp, #20]
 80294dc:	f7ff fd46 	bl	8028f6c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80294e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80294e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80294e6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80294ea:	65e2      	str	r2, [r4, #92]	; 0x5c
 80294ec:	2300      	movs	r3, #0
 80294ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80294f0:	6563      	str	r3, [r4, #84]	; 0x54
 80294f2:	65a2      	str	r2, [r4, #88]	; 0x58
 80294f4:	f1bb 0f00 	cmp.w	fp, #0
 80294f8:	db10      	blt.n	802951c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80294fa:	f7ef fa95 	bl	8018a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80294fe:	4583      	cmp	fp, r0
 8029500:	d20c      	bcs.n	802951c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8029502:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8029504:	f802 500b 	strb.w	r5, [r2, fp]
 8029508:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802950a:	3201      	adds	r2, #1
 802950c:	455a      	cmp	r2, fp
 802950e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8029510:	d1b9      	bne.n	8029486 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8029512:	8811      	ldrh	r1, [r2, #0]
 8029514:	3101      	adds	r1, #1
 8029516:	8011      	strh	r1, [r2, #0]
 8029518:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802951c:	9b03      	ldr	r3, [sp, #12]
 802951e:	3301      	adds	r3, #1
 8029520:	d0c2      	beq.n	80294a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8029522:	f10b 0a01 	add.w	sl, fp, #1
 8029526:	9d04      	ldr	r5, [sp, #16]
 8029528:	f9b5 3000 	ldrsh.w	r3, [r5]
 802952c:	4553      	cmp	r3, sl
 802952e:	dd88      	ble.n	8029442 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8029530:	01b1      	lsls	r1, r6, #6
 8029532:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8029536:	f7ff fd05 	bl	8028f44 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802953a:	4683      	mov	fp, r0
 802953c:	2800      	cmp	r0, #0
 802953e:	d080      	beq.n	8029442 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8029540:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8029542:	b183      	cbz	r3, 8029566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8029544:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8029546:	454b      	cmp	r3, r9
 8029548:	d00d      	beq.n	8029566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802954a:	4641      	mov	r1, r8
 802954c:	9805      	ldr	r0, [sp, #20]
 802954e:	f7ff fd0d 	bl	8028f6c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8029552:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8029556:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802955a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802955c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802955e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029560:	65a3      	str	r3, [r4, #88]	; 0x58
 8029562:	2300      	movs	r3, #0
 8029564:	6563      	str	r3, [r4, #84]	; 0x54
 8029566:	f9b5 3000 	ldrsh.w	r3, [r5]
 802956a:	464a      	mov	r2, r9
 802956c:	f8cd b000 	str.w	fp, [sp]
 8029570:	4651      	mov	r1, sl
 8029572:	eba3 030a 	sub.w	r3, r3, sl
 8029576:	4640      	mov	r0, r8
 8029578:	f001 f882 	bl	802a680 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802957c:	e761      	b.n	8029442 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802957e <_ZN8touchgfx6Canvas6renderEh>:
 802957e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029580:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8029584:	4604      	mov	r4, r0
 8029586:	460d      	mov	r5, r1
 8029588:	b913      	cbnz	r3, 8029590 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802958a:	2001      	movs	r0, #1
 802958c:	b003      	add	sp, #12
 802958e:	bd30      	pop	{r4, r5, pc}
 8029590:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8029594:	2b00      	cmp	r3, #0
 8029596:	d12f      	bne.n	80295f8 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8029598:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802959c:	2b00      	cmp	r3, #0
 802959e:	d0f4      	beq.n	802958a <_ZN8touchgfx6Canvas6renderEh+0xc>
 80295a0:	6840      	ldr	r0, [r0, #4]
 80295a2:	6803      	ldr	r3, [r0, #0]
 80295a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295a6:	4798      	blx	r3
 80295a8:	fb10 f105 	smulbb	r1, r0, r5
 80295ac:	b288      	uxth	r0, r1
 80295ae:	1c41      	adds	r1, r0, #1
 80295b0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80295b4:	120d      	asrs	r5, r1, #8
 80295b6:	d0e8      	beq.n	802958a <_ZN8touchgfx6Canvas6renderEh+0xc>
 80295b8:	4620      	mov	r0, r4
 80295ba:	f7ff fec0 	bl	802933e <_ZN8touchgfx6Canvas5closeEv>
 80295be:	6860      	ldr	r0, [r4, #4]
 80295c0:	6803      	ldr	r3, [r0, #0]
 80295c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80295c4:	4798      	blx	r3
 80295c6:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80295ca:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80295ce:	8082      	strh	r2, [r0, #4]
 80295d0:	80c3      	strh	r3, [r0, #6]
 80295d2:	6860      	ldr	r0, [r4, #4]
 80295d4:	6803      	ldr	r3, [r0, #0]
 80295d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80295d8:	4798      	blx	r3
 80295da:	7205      	strb	r5, [r0, #8]
 80295dc:	6860      	ldr	r0, [r4, #4]
 80295de:	6803      	ldr	r3, [r0, #0]
 80295e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80295e2:	4798      	blx	r3
 80295e4:	f104 0318 	add.w	r3, r4, #24
 80295e8:	4669      	mov	r1, sp
 80295ea:	e9cd 3000 	strd	r3, r0, [sp]
 80295ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80295f2:	f7ff ff07 	bl	8029404 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80295f6:	e7c9      	b.n	802958c <_ZN8touchgfx6Canvas6renderEh+0xe>
 80295f8:	2000      	movs	r0, #0
 80295fa:	e7c7      	b.n	802958c <_ZN8touchgfx6Canvas6renderEh+0xe>

080295fc <_ZN8touchgfx6CanvasD1Ev>:
 80295fc:	b538      	push	{r3, r4, r5, lr}
 80295fe:	4605      	mov	r5, r0
 8029600:	4b08      	ldr	r3, [pc, #32]	; (8029624 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8029602:	4604      	mov	r4, r0
 8029604:	f845 3b30 	str.w	r3, [r5], #48
 8029608:	4b07      	ldr	r3, [pc, #28]	; (8029628 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802960a:	6818      	ldr	r0, [r3, #0]
 802960c:	6803      	ldr	r3, [r0, #0]
 802960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029610:	4798      	blx	r3
 8029612:	4628      	mov	r0, r5
 8029614:	f000 f814 	bl	8029640 <_ZN8touchgfx7OutlineD1Ev>
 8029618:	f104 0018 	add.w	r0, r4, #24
 802961c:	f001 f869 	bl	802a6f2 <_ZN8touchgfx15RenderingBufferD1Ev>
 8029620:	4620      	mov	r0, r4
 8029622:	bd38      	pop	{r3, r4, r5, pc}
 8029624:	08030edc 	.word	0x08030edc
 8029628:	20014b34 	.word	0x20014b34

0802962c <_ZN8touchgfx6CanvasD0Ev>:
 802962c:	b510      	push	{r4, lr}
 802962e:	4604      	mov	r4, r0
 8029630:	f7ff ffe4 	bl	80295fc <_ZN8touchgfx6CanvasD1Ev>
 8029634:	21bc      	movs	r1, #188	; 0xbc
 8029636:	4620      	mov	r0, r4
 8029638:	f001 f87d 	bl	802a736 <_ZdlPvj>
 802963c:	4620      	mov	r0, r4
 802963e:	bd10      	pop	{r4, pc}

08029640 <_ZN8touchgfx7OutlineD1Ev>:
 8029640:	4770      	bx	lr

08029642 <_ZN8touchgfx7OutlineD0Ev>:
 8029642:	b510      	push	{r4, lr}
 8029644:	4604      	mov	r4, r0
 8029646:	2148      	movs	r1, #72	; 0x48
 8029648:	f001 f875 	bl	802a736 <_ZdlPvj>
 802964c:	4620      	mov	r0, r4
 802964e:	bd10      	pop	{r4, pc}

08029650 <_ZN8touchgfx7Outline5resetEv>:
 8029650:	b510      	push	{r4, lr}
 8029652:	4604      	mov	r4, r0
 8029654:	f7ef fa00 	bl	8018a58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8029658:	60e0      	str	r0, [r4, #12]
 802965a:	f7ef fa03 	bl	8018a64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802965e:	68e3      	ldr	r3, [r4, #12]
 8029660:	2200      	movs	r2, #0
 8029662:	08c0      	lsrs	r0, r0, #3
 8029664:	6123      	str	r3, [r4, #16]
 8029666:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802966a:	6060      	str	r0, [r4, #4]
 802966c:	82a3      	strh	r3, [r4, #20]
 802966e:	82e3      	strh	r3, [r4, #22]
 8029670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029672:	60a2      	str	r2, [r4, #8]
 8029674:	f023 0301 	bic.w	r3, r3, #1
 8029678:	8322      	strh	r2, [r4, #24]
 802967a:	8362      	strh	r2, [r4, #26]
 802967c:	f043 0302 	orr.w	r3, r3, #2
 8029680:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029684:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029686:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802968a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802968e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8029692:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8029696:	bd10      	pop	{r4, pc}

08029698 <_ZN8touchgfx7OutlineC1Ev>:
 8029698:	4b0f      	ldr	r3, [pc, #60]	; (80296d8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802969a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802969e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80296a2:	b510      	push	{r4, lr}
 80296a4:	6003      	str	r3, [r0, #0]
 80296a6:	2300      	movs	r3, #0
 80296a8:	4604      	mov	r4, r0
 80296aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80296ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80296b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80296b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80296ba:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80296be:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80296c2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80296c6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80296ca:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80296ce:	f7ff ffbf 	bl	8029650 <_ZN8touchgfx7Outline5resetEv>
 80296d2:	4620      	mov	r0, r4
 80296d4:	bd10      	pop	{r4, pc}
 80296d6:	bf00      	nop
 80296d8:	08030f3c 	.word	0x08030f3c

080296dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80296dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296e0:	b093      	sub	sp, #76	; 0x4c
 80296e2:	4604      	mov	r4, r0
 80296e4:	1156      	asrs	r6, r2, #5
 80296e6:	f002 0e1f 	and.w	lr, r2, #31
 80296ea:	981c      	ldr	r0, [sp, #112]	; 0x70
 80296ec:	9305      	str	r3, [sp, #20]
 80296ee:	1143      	asrs	r3, r0, #5
 80296f0:	1145      	asrs	r5, r0, #5
 80296f2:	930c      	str	r3, [sp, #48]	; 0x30
 80296f4:	f000 031f 	and.w	r3, r0, #31
 80296f8:	9303      	str	r3, [sp, #12]
 80296fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80296fc:	42b3      	cmp	r3, r6
 80296fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029700:	bfc8      	it	gt
 8029702:	6326      	strgt	r6, [r4, #48]	; 0x30
 8029704:	42b3      	cmp	r3, r6
 8029706:	bfdc      	itt	le
 8029708:	1c73      	addle	r3, r6, #1
 802970a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802970c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802970e:	42ab      	cmp	r3, r5
 8029710:	bfc8      	it	gt
 8029712:	462b      	movgt	r3, r5
 8029714:	ea4f 1560 	mov.w	r5, r0, asr #5
 8029718:	bfc8      	it	gt
 802971a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802971c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802971e:	42ab      	cmp	r3, r5
 8029720:	bfd8      	it	le
 8029722:	462b      	movle	r3, r5
 8029724:	ea4f 1561 	mov.w	r5, r1, asr #5
 8029728:	bfdc      	itt	le
 802972a:	3301      	addle	r3, #1
 802972c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802972e:	9b05      	ldr	r3, [sp, #20]
 8029730:	eba3 0a01 	sub.w	sl, r3, r1
 8029734:	1143      	asrs	r3, r0, #5
 8029736:	429e      	cmp	r6, r3
 8029738:	f040 8119 	bne.w	802996e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802973c:	9b05      	ldr	r3, [sp, #20]
 802973e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8029742:	9b03      	ldr	r3, [sp, #12]
 8029744:	459e      	cmp	lr, r3
 8029746:	d12c      	bne.n	80297a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8029748:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802974c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8029750:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8029754:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8029758:	4291      	cmp	r1, r2
 802975a:	d037      	beq.n	80297cc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802975c:	8b61      	ldrh	r1, [r4, #26]
 802975e:	8b22      	ldrh	r2, [r4, #24]
 8029760:	430a      	orrs	r2, r1
 8029762:	d00b      	beq.n	802977c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029764:	2b00      	cmp	r3, #0
 8029766:	db09      	blt.n	802977c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029768:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802976a:	429a      	cmp	r2, r3
 802976c:	dd06      	ble.n	802977c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802976e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8029772:	429a      	cmp	r2, r3
 8029774:	d308      	bcc.n	8029788 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8029776:	2301      	movs	r3, #1
 8029778:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802977c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8029780:	82e6      	strh	r6, [r4, #22]
 8029782:	2300      	movs	r3, #0
 8029784:	8323      	strh	r3, [r4, #24]
 8029786:	e0c6      	b.n	8029916 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029788:	f104 0314 	add.w	r3, r4, #20
 802978c:	6922      	ldr	r2, [r4, #16]
 802978e:	cb03      	ldmia	r3!, {r0, r1}
 8029790:	6010      	str	r0, [r2, #0]
 8029792:	6051      	str	r1, [r2, #4]
 8029794:	6923      	ldr	r3, [r4, #16]
 8029796:	3308      	adds	r3, #8
 8029798:	6123      	str	r3, [r4, #16]
 802979a:	68a3      	ldr	r3, [r4, #8]
 802979c:	3301      	adds	r3, #1
 802979e:	60a3      	str	r3, [r4, #8]
 80297a0:	e7ec      	b.n	802977c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80297a2:	9b05      	ldr	r3, [sp, #20]
 80297a4:	45ac      	cmp	ip, r5
 80297a6:	f001 011f 	and.w	r1, r1, #31
 80297aa:	8b20      	ldrh	r0, [r4, #24]
 80297ac:	f003 031f 	and.w	r3, r3, #31
 80297b0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80297b4:	9304      	str	r3, [sp, #16]
 80297b6:	9b03      	ldr	r3, [sp, #12]
 80297b8:	eba3 020e 	sub.w	r2, r3, lr
 80297bc:	d109      	bne.n	80297d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80297be:	9b04      	ldr	r3, [sp, #16]
 80297c0:	4410      	add	r0, r2
 80297c2:	4419      	add	r1, r3
 80297c4:	8320      	strh	r0, [r4, #24]
 80297c6:	fb02 8201 	mla	r2, r2, r1, r8
 80297ca:	8362      	strh	r2, [r4, #26]
 80297cc:	b013      	add	sp, #76	; 0x4c
 80297ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297d2:	f1ba 0f00 	cmp.w	sl, #0
 80297d6:	f2c0 80a0 	blt.w	802991a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80297da:	f1c1 0320 	rsb	r3, r1, #32
 80297de:	f04f 0b20 	mov.w	fp, #32
 80297e2:	435a      	muls	r2, r3
 80297e4:	2301      	movs	r3, #1
 80297e6:	9302      	str	r3, [sp, #8]
 80297e8:	4459      	add	r1, fp
 80297ea:	fb92 f7fa 	sdiv	r7, r2, sl
 80297ee:	fb0a 2217 	mls	r2, sl, r7, r2
 80297f2:	2a00      	cmp	r2, #0
 80297f4:	bfbc      	itt	lt
 80297f6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80297fa:	4452      	addlt	r2, sl
 80297fc:	fb07 8101 	mla	r1, r7, r1, r8
 8029800:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8029804:	4438      	add	r0, r7
 8029806:	b20b      	sxth	r3, r1
 8029808:	9902      	ldr	r1, [sp, #8]
 802980a:	b200      	sxth	r0, r0
 802980c:	9301      	str	r3, [sp, #4]
 802980e:	8363      	strh	r3, [r4, #26]
 8029810:	186b      	adds	r3, r5, r1
 8029812:	0435      	lsls	r5, r6, #16
 8029814:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029818:	8320      	strh	r0, [r4, #24]
 802981a:	eb03 0905 	add.w	r9, r3, r5
 802981e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8029822:	9300      	str	r3, [sp, #0]
 8029824:	45c1      	cmp	r9, r8
 8029826:	9505      	str	r5, [sp, #20]
 8029828:	d014      	beq.n	8029854 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802982a:	9b01      	ldr	r3, [sp, #4]
 802982c:	4303      	orrs	r3, r0
 802982e:	d00b      	beq.n	8029848 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029830:	2900      	cmp	r1, #0
 8029832:	db09      	blt.n	8029848 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029836:	428b      	cmp	r3, r1
 8029838:	dd06      	ble.n	8029848 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802983a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802983e:	4299      	cmp	r1, r3
 8029840:	d374      	bcc.n	802992c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8029842:	2301      	movs	r3, #1
 8029844:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029848:	9b00      	ldr	r3, [sp, #0]
 802984a:	82e6      	strh	r6, [r4, #22]
 802984c:	82a3      	strh	r3, [r4, #20]
 802984e:	2300      	movs	r3, #0
 8029850:	8323      	strh	r3, [r4, #24]
 8029852:	8363      	strh	r3, [r4, #26]
 8029854:	9900      	ldr	r1, [sp, #0]
 8029856:	eb0e 0307 	add.w	r3, lr, r7
 802985a:	458c      	cmp	ip, r1
 802985c:	d04e      	beq.n	80298fc <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802985e:	9903      	ldr	r1, [sp, #12]
 8029860:	eba2 020a 	sub.w	r2, r2, sl
 8029864:	1ac9      	subs	r1, r1, r3
 8029866:	9201      	str	r2, [sp, #4]
 8029868:	440f      	add	r7, r1
 802986a:	017f      	lsls	r7, r7, #5
 802986c:	fb97 fefa 	sdiv	lr, r7, sl
 8029870:	fb0a 771e 	mls	r7, sl, lr, r7
 8029874:	2f00      	cmp	r7, #0
 8029876:	bfbc      	itt	lt
 8029878:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802987c:	4457      	addlt	r7, sl
 802987e:	f10e 0101 	add.w	r1, lr, #1
 8029882:	9106      	str	r1, [sp, #24]
 8029884:	9a01      	ldr	r2, [sp, #4]
 8029886:	8b20      	ldrh	r0, [r4, #24]
 8029888:	19d2      	adds	r2, r2, r7
 802988a:	8b61      	ldrh	r1, [r4, #26]
 802988c:	9d02      	ldr	r5, [sp, #8]
 802988e:	9201      	str	r2, [sp, #4]
 8029890:	bf5b      	ittet	pl
 8029892:	eba2 020a 	subpl.w	r2, r2, sl
 8029896:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802989a:	46f0      	movmi	r8, lr
 802989c:	9201      	strpl	r2, [sp, #4]
 802989e:	9a00      	ldr	r2, [sp, #0]
 80298a0:	4440      	add	r0, r8
 80298a2:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80298a6:	4443      	add	r3, r8
 80298a8:	442a      	add	r2, r5
 80298aa:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80298ae:	9d05      	ldr	r5, [sp, #20]
 80298b0:	b200      	sxth	r0, r0
 80298b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80298b6:	b209      	sxth	r1, r1
 80298b8:	4415      	add	r5, r2
 80298ba:	8320      	strh	r0, [r4, #24]
 80298bc:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80298c0:	8361      	strh	r1, [r4, #26]
 80298c2:	9200      	str	r2, [sp, #0]
 80298c4:	454d      	cmp	r5, r9
 80298c6:	d016      	beq.n	80298f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80298c8:	4301      	orrs	r1, r0
 80298ca:	d00d      	beq.n	80298e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298cc:	f1b8 0f00 	cmp.w	r8, #0
 80298d0:	db0a      	blt.n	80298e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80298d4:	4541      	cmp	r1, r8
 80298d6:	dd07      	ble.n	80298e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298d8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80298dc:	4288      	cmp	r0, r1
 80298de:	d335      	bcc.n	802994c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80298e0:	f04f 0101 	mov.w	r1, #1
 80298e4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80298e8:	9900      	ldr	r1, [sp, #0]
 80298ea:	82e6      	strh	r6, [r4, #22]
 80298ec:	82a1      	strh	r1, [r4, #20]
 80298ee:	f04f 0100 	mov.w	r1, #0
 80298f2:	8321      	strh	r1, [r4, #24]
 80298f4:	8361      	strh	r1, [r4, #26]
 80298f6:	9a00      	ldr	r2, [sp, #0]
 80298f8:	4594      	cmp	ip, r2
 80298fa:	d1c3      	bne.n	8029884 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80298fc:	9a03      	ldr	r2, [sp, #12]
 80298fe:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8029902:	1ad3      	subs	r3, r2, r3
 8029904:	8b22      	ldrh	r2, [r4, #24]
 8029906:	441a      	add	r2, r3
 8029908:	8322      	strh	r2, [r4, #24]
 802990a:	9a04      	ldr	r2, [sp, #16]
 802990c:	3220      	adds	r2, #32
 802990e:	eba2 020b 	sub.w	r2, r2, fp
 8029912:	fb03 c302 	mla	r3, r3, r2, ip
 8029916:	8363      	strh	r3, [r4, #26]
 8029918:	e758      	b.n	80297cc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802991a:	f04f 33ff 	mov.w	r3, #4294967295
 802991e:	434a      	muls	r2, r1
 8029920:	f1ca 0a00 	rsb	sl, sl, #0
 8029924:	f04f 0b00 	mov.w	fp, #0
 8029928:	9302      	str	r3, [sp, #8]
 802992a:	e75d      	b.n	80297e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802992c:	f104 0314 	add.w	r3, r4, #20
 8029930:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8029934:	cb03      	ldmia	r3!, {r0, r1}
 8029936:	f8c8 0000 	str.w	r0, [r8]
 802993a:	f8c8 1004 	str.w	r1, [r8, #4]
 802993e:	6923      	ldr	r3, [r4, #16]
 8029940:	3308      	adds	r3, #8
 8029942:	6123      	str	r3, [r4, #16]
 8029944:	68a3      	ldr	r3, [r4, #8]
 8029946:	3301      	adds	r3, #1
 8029948:	60a3      	str	r3, [r4, #8]
 802994a:	e77d      	b.n	8029848 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802994c:	f104 0814 	add.w	r8, r4, #20
 8029950:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029954:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029958:	f8c9 0000 	str.w	r0, [r9]
 802995c:	f8c9 1004 	str.w	r1, [r9, #4]
 8029960:	6921      	ldr	r1, [r4, #16]
 8029962:	3108      	adds	r1, #8
 8029964:	6121      	str	r1, [r4, #16]
 8029966:	68a1      	ldr	r1, [r4, #8]
 8029968:	3101      	adds	r1, #1
 802996a:	60a1      	str	r1, [r4, #8]
 802996c:	e7bc      	b.n	80298e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802996e:	1a83      	subs	r3, r0, r2
 8029970:	9301      	str	r3, [sp, #4]
 8029972:	f1ba 0f00 	cmp.w	sl, #0
 8029976:	f040 8094 	bne.w	8029aa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802997a:	9a01      	ldr	r2, [sp, #4]
 802997c:	0049      	lsls	r1, r1, #1
 802997e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8029982:	2a00      	cmp	r2, #0
 8029984:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8029988:	8b62      	ldrh	r2, [r4, #26]
 802998a:	bfaa      	itet	ge
 802998c:	f04f 0a20 	movge.w	sl, #32
 8029990:	f04f 38ff 	movlt.w	r8, #4294967295
 8029994:	f04f 0801 	movge.w	r8, #1
 8029998:	8b21      	ldrh	r1, [r4, #24]
 802999a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802999e:	4471      	add	r1, lr
 80299a0:	fb0e 2e03 	mla	lr, lr, r3, r2
 80299a4:	eb08 0206 	add.w	r2, r8, r6
 80299a8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80299ac:	b209      	sxth	r1, r1
 80299ae:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80299b2:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80299b6:	8321      	strh	r1, [r4, #24]
 80299b8:	fa0f fe8e 	sxth.w	lr, lr
 80299bc:	42b7      	cmp	r7, r6
 80299be:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80299c2:	d013      	beq.n	80299ec <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80299c4:	ea51 010e 	orrs.w	r1, r1, lr
 80299c8:	d00b      	beq.n	80299e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299ca:	2800      	cmp	r0, #0
 80299cc:	db09      	blt.n	80299e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80299d0:	4281      	cmp	r1, r0
 80299d2:	dd06      	ble.n	80299e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299d4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80299d8:	4288      	cmp	r0, r1
 80299da:	d339      	bcc.n	8029a50 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80299dc:	2101      	movs	r1, #1
 80299de:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80299e2:	2100      	movs	r1, #0
 80299e4:	82a5      	strh	r5, [r4, #20]
 80299e6:	82e2      	strh	r2, [r4, #22]
 80299e8:	8321      	strh	r1, [r4, #24]
 80299ea:	8361      	strh	r1, [r4, #26]
 80299ec:	f1aa 0610 	sub.w	r6, sl, #16
 80299f0:	f04f 0e00 	mov.w	lr, #0
 80299f4:	f04f 0b01 	mov.w	fp, #1
 80299f8:	0076      	lsls	r6, r6, #1
 80299fa:	fb06 f703 	mul.w	r7, r6, r3
 80299fe:	b236      	sxth	r6, r6
 8029a00:	b23f      	sxth	r7, r7
 8029a02:	ea46 0107 	orr.w	r1, r6, r7
 8029a06:	9100      	str	r1, [sp, #0]
 8029a08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029a0a:	428a      	cmp	r2, r1
 8029a0c:	d03e      	beq.n	8029a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8029a0e:	4442      	add	r2, r8
 8029a10:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029a14:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8029a18:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8029a1c:	8326      	strh	r6, [r4, #24]
 8029a1e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8029a22:	8367      	strh	r7, [r4, #26]
 8029a24:	4584      	cmp	ip, r0
 8029a26:	d0ef      	beq.n	8029a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029a28:	9800      	ldr	r0, [sp, #0]
 8029a2a:	b150      	cbz	r0, 8029a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a2c:	2900      	cmp	r1, #0
 8029a2e:	db08      	blt.n	8029a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a30:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8029a32:	4288      	cmp	r0, r1
 8029a34:	dd05      	ble.n	8029a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a36:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029a3a:	4288      	cmp	r0, r1
 8029a3c:	d315      	bcc.n	8029a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8029a3e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8029a42:	82a5      	strh	r5, [r4, #20]
 8029a44:	82e2      	strh	r2, [r4, #22]
 8029a46:	f8a4 e018 	strh.w	lr, [r4, #24]
 8029a4a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8029a4e:	e7db      	b.n	8029a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029a50:	f104 0614 	add.w	r6, r4, #20
 8029a54:	6927      	ldr	r7, [r4, #16]
 8029a56:	ce03      	ldmia	r6!, {r0, r1}
 8029a58:	6038      	str	r0, [r7, #0]
 8029a5a:	6079      	str	r1, [r7, #4]
 8029a5c:	6921      	ldr	r1, [r4, #16]
 8029a5e:	3108      	adds	r1, #8
 8029a60:	6121      	str	r1, [r4, #16]
 8029a62:	68a1      	ldr	r1, [r4, #8]
 8029a64:	3101      	adds	r1, #1
 8029a66:	60a1      	str	r1, [r4, #8]
 8029a68:	e7bb      	b.n	80299e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029a6a:	f104 0c14 	add.w	ip, r4, #20
 8029a6e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029a72:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8029a76:	f8c9 0000 	str.w	r0, [r9]
 8029a7a:	f8c9 1004 	str.w	r1, [r9, #4]
 8029a7e:	6921      	ldr	r1, [r4, #16]
 8029a80:	3108      	adds	r1, #8
 8029a82:	6121      	str	r1, [r4, #16]
 8029a84:	68a1      	ldr	r1, [r4, #8]
 8029a86:	3101      	adds	r1, #1
 8029a88:	60a1      	str	r1, [r4, #8]
 8029a8a:	e7da      	b.n	8029a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a8c:	9a03      	ldr	r2, [sp, #12]
 8029a8e:	8b61      	ldrh	r1, [r4, #26]
 8029a90:	f1a2 0c20 	sub.w	ip, r2, #32
 8029a94:	8b22      	ldrh	r2, [r4, #24]
 8029a96:	44d4      	add	ip, sl
 8029a98:	4462      	add	r2, ip
 8029a9a:	fb0c 1303 	mla	r3, ip, r3, r1
 8029a9e:	8322      	strh	r2, [r4, #24]
 8029aa0:	e739      	b.n	8029916 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029aa2:	9b01      	ldr	r3, [sp, #4]
 8029aa4:	2b00      	cmp	r3, #0
 8029aa6:	db3f      	blt.n	8029b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8029aa8:	2201      	movs	r2, #1
 8029aaa:	f1ce 0320 	rsb	r3, lr, #32
 8029aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8029ab0:	2220      	movs	r2, #32
 8029ab2:	fb0a f303 	mul.w	r3, sl, r3
 8029ab6:	9202      	str	r2, [sp, #8]
 8029ab8:	9a01      	ldr	r2, [sp, #4]
 8029aba:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029abe:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029ac2:	fb93 f7f2 	sdiv	r7, r3, r2
 8029ac6:	fb02 3317 	mls	r3, r2, r7, r3
 8029aca:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029ace:	2b00      	cmp	r3, #0
 8029ad0:	9308      	str	r3, [sp, #32]
 8029ad2:	bfbc      	itt	lt
 8029ad4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8029ad8:	189b      	addlt	r3, r3, r2
 8029ada:	eb07 0b01 	add.w	fp, r7, r1
 8029ade:	bfb8      	it	lt
 8029ae0:	9308      	strlt	r3, [sp, #32]
 8029ae2:	ea4f 136b 	mov.w	r3, fp, asr #5
 8029ae6:	9304      	str	r3, [sp, #16]
 8029ae8:	9b02      	ldr	r3, [sp, #8]
 8029aea:	4573      	cmp	r3, lr
 8029aec:	d133      	bne.n	8029b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8029aee:	9b04      	ldr	r3, [sp, #16]
 8029af0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8029af4:	454b      	cmp	r3, r9
 8029af6:	d045      	beq.n	8029b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029af8:	8b62      	ldrh	r2, [r4, #26]
 8029afa:	8b23      	ldrh	r3, [r4, #24]
 8029afc:	4313      	orrs	r3, r2
 8029afe:	d00c      	beq.n	8029b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b00:	f1b8 0f00 	cmp.w	r8, #0
 8029b04:	db09      	blt.n	8029b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029b08:	4543      	cmp	r3, r8
 8029b0a:	dd06      	ble.n	8029b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b0c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8029b10:	429a      	cmp	r2, r3
 8029b12:	d313      	bcc.n	8029b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8029b14:	2301      	movs	r3, #1
 8029b16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029b1a:	9b04      	ldr	r3, [sp, #16]
 8029b1c:	82e6      	strh	r6, [r4, #22]
 8029b1e:	82a3      	strh	r3, [r4, #20]
 8029b20:	2300      	movs	r3, #0
 8029b22:	8323      	strh	r3, [r4, #24]
 8029b24:	8363      	strh	r3, [r4, #26]
 8029b26:	e02d      	b.n	8029b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029b28:	9a01      	ldr	r2, [sp, #4]
 8029b2a:	fb0a f30e 	mul.w	r3, sl, lr
 8029b2e:	4252      	negs	r2, r2
 8029b30:	9201      	str	r2, [sp, #4]
 8029b32:	f04f 32ff 	mov.w	r2, #4294967295
 8029b36:	920b      	str	r2, [sp, #44]	; 0x2c
 8029b38:	2200      	movs	r2, #0
 8029b3a:	e7bc      	b.n	8029ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8029b3c:	f104 0314 	add.w	r3, r4, #20
 8029b40:	6922      	ldr	r2, [r4, #16]
 8029b42:	cb03      	ldmia	r3!, {r0, r1}
 8029b44:	6010      	str	r0, [r2, #0]
 8029b46:	6051      	str	r1, [r2, #4]
 8029b48:	6923      	ldr	r3, [r4, #16]
 8029b4a:	3308      	adds	r3, #8
 8029b4c:	6123      	str	r3, [r4, #16]
 8029b4e:	68a3      	ldr	r3, [r4, #8]
 8029b50:	3301      	adds	r3, #1
 8029b52:	60a3      	str	r3, [r4, #8]
 8029b54:	e7e1      	b.n	8029b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b56:	f00b 031f 	and.w	r3, fp, #31
 8029b5a:	f001 011f 	and.w	r1, r1, #31
 8029b5e:	8b20      	ldrh	r0, [r4, #24]
 8029b60:	9309      	str	r3, [sp, #36]	; 0x24
 8029b62:	9b02      	ldr	r3, [sp, #8]
 8029b64:	eba3 020e 	sub.w	r2, r3, lr
 8029b68:	8b63      	ldrh	r3, [r4, #26]
 8029b6a:	9300      	str	r3, [sp, #0]
 8029b6c:	9b04      	ldr	r3, [sp, #16]
 8029b6e:	42ab      	cmp	r3, r5
 8029b70:	f040 80ef 	bne.w	8029d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8029b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b76:	4410      	add	r0, r2
 8029b78:	4419      	add	r1, r3
 8029b7a:	9b00      	ldr	r3, [sp, #0]
 8029b7c:	8320      	strh	r0, [r4, #24]
 8029b7e:	fb02 3101 	mla	r1, r2, r1, r3
 8029b82:	8361      	strh	r1, [r4, #26]
 8029b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029b86:	9904      	ldr	r1, [sp, #16]
 8029b88:	4433      	add	r3, r6
 8029b8a:	9300      	str	r3, [sp, #0]
 8029b8c:	9a00      	ldr	r2, [sp, #0]
 8029b8e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029b92:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8029b96:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029b9a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029b9e:	4288      	cmp	r0, r1
 8029ba0:	d018      	beq.n	8029bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8029ba2:	8b60      	ldrh	r0, [r4, #26]
 8029ba4:	8b21      	ldrh	r1, [r4, #24]
 8029ba6:	ea50 0201 	orrs.w	r2, r0, r1
 8029baa:	d00c      	beq.n	8029bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	db0a      	blt.n	8029bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029bb2:	4299      	cmp	r1, r3
 8029bb4:	dd07      	ble.n	8029bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bb6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029bba:	4299      	cmp	r1, r3
 8029bbc:	f0c0 818b 	bcc.w	8029ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8029bc0:	2301      	movs	r3, #1
 8029bc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029bc6:	9b04      	ldr	r3, [sp, #16]
 8029bc8:	82a3      	strh	r3, [r4, #20]
 8029bca:	9b00      	ldr	r3, [sp, #0]
 8029bcc:	82e3      	strh	r3, [r4, #22]
 8029bce:	2300      	movs	r3, #0
 8029bd0:	8323      	strh	r3, [r4, #24]
 8029bd2:	8363      	strh	r3, [r4, #26]
 8029bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029bd6:	9a00      	ldr	r2, [sp, #0]
 8029bd8:	4293      	cmp	r3, r2
 8029bda:	f000 808d 	beq.w	8029cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8029bde:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8029be2:	9901      	ldr	r1, [sp, #4]
 8029be4:	9801      	ldr	r0, [sp, #4]
 8029be6:	fb93 f1f1 	sdiv	r1, r3, r1
 8029bea:	fb00 3311 	mls	r3, r0, r1, r3
 8029bee:	9106      	str	r1, [sp, #24]
 8029bf0:	2b00      	cmp	r3, #0
 8029bf2:	9307      	str	r3, [sp, #28]
 8029bf4:	da04      	bge.n	8029c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8029bf6:	1e4b      	subs	r3, r1, #1
 8029bf8:	9306      	str	r3, [sp, #24]
 8029bfa:	9b07      	ldr	r3, [sp, #28]
 8029bfc:	4403      	add	r3, r0
 8029bfe:	9307      	str	r3, [sp, #28]
 8029c00:	9b08      	ldr	r3, [sp, #32]
 8029c02:	f04f 0c00 	mov.w	ip, #0
 8029c06:	9901      	ldr	r1, [sp, #4]
 8029c08:	1a5b      	subs	r3, r3, r1
 8029c0a:	4659      	mov	r1, fp
 8029c0c:	9308      	str	r3, [sp, #32]
 8029c0e:	9b02      	ldr	r3, [sp, #8]
 8029c10:	f1c3 0320 	rsb	r3, r3, #32
 8029c14:	930a      	str	r3, [sp, #40]	; 0x28
 8029c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8029c18:	9b02      	ldr	r3, [sp, #8]
 8029c1a:	1a1b      	subs	r3, r3, r0
 8029c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8029c1e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8029c22:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8029c26:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8029c2a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8029c2e:	181b      	adds	r3, r3, r0
 8029c30:	bf58      	it	pl
 8029c32:	9801      	ldrpl	r0, [sp, #4]
 8029c34:	9308      	str	r3, [sp, #32]
 8029c36:	bf54      	ite	pl
 8029c38:	1a1b      	subpl	r3, r3, r0
 8029c3a:	9d06      	ldrmi	r5, [sp, #24]
 8029c3c:	9802      	ldr	r0, [sp, #8]
 8029c3e:	bf5e      	ittt	pl
 8029c40:	9308      	strpl	r3, [sp, #32]
 8029c42:	9b06      	ldrpl	r3, [sp, #24]
 8029c44:	1c5d      	addpl	r5, r3, #1
 8029c46:	44ab      	add	fp, r5
 8029c48:	ea4f 136b 	mov.w	r3, fp, asr #5
 8029c4c:	9304      	str	r3, [sp, #16]
 8029c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029c50:	4283      	cmp	r3, r0
 8029c52:	f040 815a 	bne.w	8029f0a <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8029c56:	9b04      	ldr	r3, [sp, #16]
 8029c58:	9a00      	ldr	r2, [sp, #0]
 8029c5a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8029c5e:	4543      	cmp	r3, r8
 8029c60:	d01a      	beq.n	8029c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8029c62:	8b61      	ldrh	r1, [r4, #26]
 8029c64:	8b23      	ldrh	r3, [r4, #24]
 8029c66:	430b      	orrs	r3, r1
 8029c68:	d00e      	beq.n	8029c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c6a:	f1be 0f00 	cmp.w	lr, #0
 8029c6e:	db0b      	blt.n	8029c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029c72:	4573      	cmp	r3, lr
 8029c74:	dd08      	ble.n	8029c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c76:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029c7a:	4299      	cmp	r1, r3
 8029c7c:	f0c0 8138 	bcc.w	8029ef0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8029c80:	f04f 0301 	mov.w	r3, #1
 8029c84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029c88:	9b04      	ldr	r3, [sp, #16]
 8029c8a:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029c8e:	82a3      	strh	r3, [r4, #20]
 8029c90:	9b00      	ldr	r3, [sp, #0]
 8029c92:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029c96:	82e3      	strh	r3, [r4, #22]
 8029c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029c9a:	9a00      	ldr	r2, [sp, #0]
 8029c9c:	441a      	add	r2, r3
 8029c9e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029ca2:	9200      	str	r2, [sp, #0]
 8029ca4:	9900      	ldr	r1, [sp, #0]
 8029ca6:	9a04      	ldr	r2, [sp, #16]
 8029ca8:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8029cac:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029cb4:	4288      	cmp	r0, r1
 8029cb6:	d01a      	beq.n	8029cee <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8029cb8:	8b60      	ldrh	r0, [r4, #26]
 8029cba:	8b21      	ldrh	r1, [r4, #24]
 8029cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8029cc0:	d00d      	beq.n	8029cde <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029cc2:	2b00      	cmp	r3, #0
 8029cc4:	db0b      	blt.n	8029cde <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029cc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029cc8:	4299      	cmp	r1, r3
 8029cca:	dd08      	ble.n	8029cde <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029ccc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029cd0:	4299      	cmp	r1, r3
 8029cd2:	f0c0 81f9 	bcc.w	802a0c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8029cd6:	f04f 0301 	mov.w	r3, #1
 8029cda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029cde:	9b04      	ldr	r3, [sp, #16]
 8029ce0:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029ce4:	82a3      	strh	r3, [r4, #20]
 8029ce6:	9b00      	ldr	r3, [sp, #0]
 8029ce8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029cec:	82e3      	strh	r3, [r4, #22]
 8029cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029cf0:	4659      	mov	r1, fp
 8029cf2:	9a00      	ldr	r2, [sp, #0]
 8029cf4:	4293      	cmp	r3, r2
 8029cf6:	d192      	bne.n	8029c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8029cf8:	9b02      	ldr	r3, [sp, #8]
 8029cfa:	f1c3 0c20 	rsb	ip, r3, #32
 8029cfe:	9b05      	ldr	r3, [sp, #20]
 8029d00:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8029d04:	9b03      	ldr	r3, [sp, #12]
 8029d06:	459c      	cmp	ip, r3
 8029d08:	f040 81f8 	bne.w	802a0fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8029d0c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029d10:	9a00      	ldr	r2, [sp, #0]
 8029d12:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029d16:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8029d1a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029d1e:	4288      	cmp	r0, r1
 8029d20:	f43f ad54 	beq.w	80297cc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029d24:	8b60      	ldrh	r0, [r4, #26]
 8029d26:	8b21      	ldrh	r1, [r4, #24]
 8029d28:	ea50 0201 	orrs.w	r2, r0, r1
 8029d2c:	d00c      	beq.n	8029d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d2e:	2b00      	cmp	r3, #0
 8029d30:	db0a      	blt.n	8029d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029d34:	4299      	cmp	r1, r3
 8029d36:	dd07      	ble.n	8029d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d38:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029d3c:	4299      	cmp	r1, r3
 8029d3e:	f0c0 81d0 	bcc.w	802a0e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8029d42:	2301      	movs	r3, #1
 8029d44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029d48:	9b00      	ldr	r3, [sp, #0]
 8029d4a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8029d4e:	82e3      	strh	r3, [r4, #22]
 8029d50:	e517      	b.n	8029782 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8029d52:	2f00      	cmp	r7, #0
 8029d54:	f2c0 8097 	blt.w	8029e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8029d58:	2301      	movs	r3, #1
 8029d5a:	f1c1 0c20 	rsb	ip, r1, #32
 8029d5e:	9307      	str	r3, [sp, #28]
 8029d60:	2320      	movs	r3, #32
 8029d62:	fb02 f20c 	mul.w	r2, r2, ip
 8029d66:	9306      	str	r3, [sp, #24]
 8029d68:	9b06      	ldr	r3, [sp, #24]
 8029d6a:	fb92 fcf7 	sdiv	ip, r2, r7
 8029d6e:	fb07 221c 	mls	r2, r7, ip, r2
 8029d72:	4419      	add	r1, r3
 8029d74:	9b00      	ldr	r3, [sp, #0]
 8029d76:	2a00      	cmp	r2, #0
 8029d78:	bfbc      	itt	lt
 8029d7a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8029d7e:	19d2      	addlt	r2, r2, r7
 8029d80:	fb0c 3101 	mla	r1, ip, r1, r3
 8029d84:	9b07      	ldr	r3, [sp, #28]
 8029d86:	4460      	add	r0, ip
 8029d88:	441d      	add	r5, r3
 8029d8a:	0433      	lsls	r3, r6, #16
 8029d8c:	b200      	sxth	r0, r0
 8029d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8029d90:	18eb      	adds	r3, r5, r3
 8029d92:	b209      	sxth	r1, r1
 8029d94:	8320      	strh	r0, [r4, #24]
 8029d96:	454b      	cmp	r3, r9
 8029d98:	8361      	strh	r1, [r4, #26]
 8029d9a:	d014      	beq.n	8029dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8029d9c:	ea50 0301 	orrs.w	r3, r0, r1
 8029da0:	d00c      	beq.n	8029dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029da2:	f1b8 0f00 	cmp.w	r8, #0
 8029da6:	db09      	blt.n	8029dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029daa:	4543      	cmp	r3, r8
 8029dac:	dd06      	ble.n	8029dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029dae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029db2:	4299      	cmp	r1, r3
 8029db4:	d36e      	bcc.n	8029e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8029db6:	2301      	movs	r3, #1
 8029db8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029dbc:	2300      	movs	r3, #0
 8029dbe:	82a5      	strh	r5, [r4, #20]
 8029dc0:	82e6      	strh	r6, [r4, #22]
 8029dc2:	8323      	strh	r3, [r4, #24]
 8029dc4:	8363      	strh	r3, [r4, #26]
 8029dc6:	9904      	ldr	r1, [sp, #16]
 8029dc8:	eb0e 030c 	add.w	r3, lr, ip
 8029dcc:	42a9      	cmp	r1, r5
 8029dce:	d04d      	beq.n	8029e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8029dd0:	9902      	ldr	r1, [sp, #8]
 8029dd2:	1bd2      	subs	r2, r2, r7
 8029dd4:	1ac9      	subs	r1, r1, r3
 8029dd6:	9200      	str	r2, [sp, #0]
 8029dd8:	448c      	add	ip, r1
 8029dda:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8029dde:	fb9c fef7 	sdiv	lr, ip, r7
 8029de2:	fb07 cc1e 	mls	ip, r7, lr, ip
 8029de6:	f1bc 0f00 	cmp.w	ip, #0
 8029dea:	bfbc      	itt	lt
 8029dec:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8029df0:	44bc      	addlt	ip, r7
 8029df2:	f10e 0101 	add.w	r1, lr, #1
 8029df6:	910d      	str	r1, [sp, #52]	; 0x34
 8029df8:	9a00      	ldr	r2, [sp, #0]
 8029dfa:	8b20      	ldrh	r0, [r4, #24]
 8029dfc:	eb12 020c 	adds.w	r2, r2, ip
 8029e00:	8b61      	ldrh	r1, [r4, #26]
 8029e02:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029e06:	9200      	str	r2, [sp, #0]
 8029e08:	bf5b      	ittet	pl
 8029e0a:	1bd2      	subpl	r2, r2, r7
 8029e0c:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8029e10:	46f0      	movmi	r8, lr
 8029e12:	9200      	strpl	r2, [sp, #0]
 8029e14:	9a07      	ldr	r2, [sp, #28]
 8029e16:	4440      	add	r0, r8
 8029e18:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8029e1c:	4443      	add	r3, r8
 8029e1e:	4415      	add	r5, r2
 8029e20:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029e26:	b200      	sxth	r0, r0
 8029e28:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029e2c:	442a      	add	r2, r5
 8029e2e:	b209      	sxth	r1, r1
 8029e30:	8320      	strh	r0, [r4, #24]
 8029e32:	454a      	cmp	r2, r9
 8029e34:	8361      	strh	r1, [r4, #26]
 8029e36:	d016      	beq.n	8029e66 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8029e38:	ea50 0201 	orrs.w	r2, r0, r1
 8029e3c:	d00d      	beq.n	8029e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e3e:	f1b8 0f00 	cmp.w	r8, #0
 8029e42:	db0a      	blt.n	8029e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029e46:	4541      	cmp	r1, r8
 8029e48:	dd07      	ble.n	8029e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e4a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029e4e:	4288      	cmp	r0, r1
 8029e50:	d330      	bcc.n	8029eb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8029e52:	f04f 0201 	mov.w	r2, #1
 8029e56:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029e5a:	f04f 0200 	mov.w	r2, #0
 8029e5e:	82a5      	strh	r5, [r4, #20]
 8029e60:	82e6      	strh	r6, [r4, #22]
 8029e62:	8322      	strh	r2, [r4, #24]
 8029e64:	8362      	strh	r2, [r4, #26]
 8029e66:	9904      	ldr	r1, [sp, #16]
 8029e68:	42a9      	cmp	r1, r5
 8029e6a:	d1c5      	bne.n	8029df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8029e6c:	9a02      	ldr	r2, [sp, #8]
 8029e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029e70:	1ad3      	subs	r3, r2, r3
 8029e72:	8b22      	ldrh	r2, [r4, #24]
 8029e74:	3120      	adds	r1, #32
 8029e76:	441a      	add	r2, r3
 8029e78:	8322      	strh	r2, [r4, #24]
 8029e7a:	9a06      	ldr	r2, [sp, #24]
 8029e7c:	1a89      	subs	r1, r1, r2
 8029e7e:	8b62      	ldrh	r2, [r4, #26]
 8029e80:	fb03 2301 	mla	r3, r3, r1, r2
 8029e84:	e64e      	b.n	8029b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8029e86:	f04f 33ff 	mov.w	r3, #4294967295
 8029e8a:	434a      	muls	r2, r1
 8029e8c:	427f      	negs	r7, r7
 8029e8e:	9307      	str	r3, [sp, #28]
 8029e90:	2300      	movs	r3, #0
 8029e92:	e768      	b.n	8029d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8029e94:	f104 0314 	add.w	r3, r4, #20
 8029e98:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8029e9c:	cb03      	ldmia	r3!, {r0, r1}
 8029e9e:	f8c8 0000 	str.w	r0, [r8]
 8029ea2:	f8c8 1004 	str.w	r1, [r8, #4]
 8029ea6:	6923      	ldr	r3, [r4, #16]
 8029ea8:	3308      	adds	r3, #8
 8029eaa:	6123      	str	r3, [r4, #16]
 8029eac:	68a3      	ldr	r3, [r4, #8]
 8029eae:	3301      	adds	r3, #1
 8029eb0:	60a3      	str	r3, [r4, #8]
 8029eb2:	e783      	b.n	8029dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029eb4:	f104 0814 	add.w	r8, r4, #20
 8029eb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029ebc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029ec0:	f8c9 0000 	str.w	r0, [r9]
 8029ec4:	f8c9 1004 	str.w	r1, [r9, #4]
 8029ec8:	6921      	ldr	r1, [r4, #16]
 8029eca:	3108      	adds	r1, #8
 8029ecc:	6121      	str	r1, [r4, #16]
 8029ece:	68a1      	ldr	r1, [r4, #8]
 8029ed0:	3101      	adds	r1, #1
 8029ed2:	60a1      	str	r1, [r4, #8]
 8029ed4:	e7c1      	b.n	8029e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029ed6:	f104 0314 	add.w	r3, r4, #20
 8029eda:	6925      	ldr	r5, [r4, #16]
 8029edc:	cb03      	ldmia	r3!, {r0, r1}
 8029ede:	6028      	str	r0, [r5, #0]
 8029ee0:	6069      	str	r1, [r5, #4]
 8029ee2:	6923      	ldr	r3, [r4, #16]
 8029ee4:	3308      	adds	r3, #8
 8029ee6:	6123      	str	r3, [r4, #16]
 8029ee8:	68a3      	ldr	r3, [r4, #8]
 8029eea:	3301      	adds	r3, #1
 8029eec:	60a3      	str	r3, [r4, #8]
 8029eee:	e66a      	b.n	8029bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029ef0:	f104 0314 	add.w	r3, r4, #20
 8029ef4:	6925      	ldr	r5, [r4, #16]
 8029ef6:	cb03      	ldmia	r3!, {r0, r1}
 8029ef8:	6028      	str	r0, [r5, #0]
 8029efa:	6069      	str	r1, [r5, #4]
 8029efc:	6923      	ldr	r3, [r4, #16]
 8029efe:	3308      	adds	r3, #8
 8029f00:	6123      	str	r3, [r4, #16]
 8029f02:	68a3      	ldr	r3, [r4, #8]
 8029f04:	3301      	adds	r3, #1
 8029f06:	60a3      	str	r3, [r4, #8]
 8029f08:	e6be      	b.n	8029c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029f0a:	f00b 031f 	and.w	r3, fp, #31
 8029f0e:	114f      	asrs	r7, r1, #5
 8029f10:	8b20      	ldrh	r0, [r4, #24]
 8029f12:	f001 011f 	and.w	r1, r1, #31
 8029f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8029f18:	9b04      	ldr	r3, [sp, #16]
 8029f1a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8029f1e:	429f      	cmp	r7, r3
 8029f20:	d10a      	bne.n	8029f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8029f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f24:	4418      	add	r0, r3
 8029f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029f28:	4419      	add	r1, r3
 8029f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f2c:	8320      	strh	r0, [r4, #24]
 8029f2e:	fb03 9901 	mla	r9, r3, r1, r9
 8029f32:	f8a4 901a 	strh.w	r9, [r4, #26]
 8029f36:	e6af      	b.n	8029c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8029f38:	2d00      	cmp	r5, #0
 8029f3a:	f2c0 809b 	blt.w	802a074 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8029f3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8029f40:	f1c1 0320 	rsb	r3, r1, #32
 8029f44:	4373      	muls	r3, r6
 8029f46:	2601      	movs	r6, #1
 8029f48:	960e      	str	r6, [sp, #56]	; 0x38
 8029f4a:	2620      	movs	r6, #32
 8029f4c:	960d      	str	r6, [sp, #52]	; 0x34
 8029f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029f50:	fb93 f6f5 	sdiv	r6, r3, r5
 8029f54:	4411      	add	r1, r2
 8029f56:	fb05 3316 	mls	r3, r5, r6, r3
 8029f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029f5c:	2b00      	cmp	r3, #0
 8029f5e:	4417      	add	r7, r2
 8029f60:	9a00      	ldr	r2, [sp, #0]
 8029f62:	bfbc      	itt	lt
 8029f64:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8029f68:	195b      	addlt	r3, r3, r5
 8029f6a:	0412      	lsls	r2, r2, #16
 8029f6c:	fb06 9101 	mla	r1, r6, r1, r9
 8029f70:	4430      	add	r0, r6
 8029f72:	eb07 0902 	add.w	r9, r7, r2
 8029f76:	9210      	str	r2, [sp, #64]	; 0x40
 8029f78:	b200      	sxth	r0, r0
 8029f7a:	b209      	sxth	r1, r1
 8029f7c:	45c1      	cmp	r9, r8
 8029f7e:	8320      	strh	r0, [r4, #24]
 8029f80:	8361      	strh	r1, [r4, #26]
 8029f82:	d017      	beq.n	8029fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8029f84:	ea50 0201 	orrs.w	r2, r0, r1
 8029f88:	d00d      	beq.n	8029fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f8a:	f1be 0f00 	cmp.w	lr, #0
 8029f8e:	db0a      	blt.n	8029fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029f92:	4571      	cmp	r1, lr
 8029f94:	dd07      	ble.n	8029fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f96:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029f9a:	4288      	cmp	r0, r1
 8029f9c:	d372      	bcc.n	802a084 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8029f9e:	f04f 0201 	mov.w	r2, #1
 8029fa2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029fa6:	9a00      	ldr	r2, [sp, #0]
 8029fa8:	82a7      	strh	r7, [r4, #20]
 8029faa:	82e2      	strh	r2, [r4, #22]
 8029fac:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029fb0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029fb6:	eb02 0e06 	add.w	lr, r2, r6
 8029fba:	9a04      	ldr	r2, [sp, #16]
 8029fbc:	42ba      	cmp	r2, r7
 8029fbe:	d049      	beq.n	802a054 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8029fc0:	9a02      	ldr	r2, [sp, #8]
 8029fc2:	1b5b      	subs	r3, r3, r5
 8029fc4:	eba2 010e 	sub.w	r1, r2, lr
 8029fc8:	440e      	add	r6, r1
 8029fca:	0176      	lsls	r6, r6, #5
 8029fcc:	fb96 f8f5 	sdiv	r8, r6, r5
 8029fd0:	fb05 6618 	mls	r6, r5, r8, r6
 8029fd4:	2e00      	cmp	r6, #0
 8029fd6:	bfbc      	itt	lt
 8029fd8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8029fdc:	1976      	addlt	r6, r6, r5
 8029fde:	f108 0201 	add.w	r2, r8, #1
 8029fe2:	9211      	str	r2, [sp, #68]	; 0x44
 8029fe4:	199b      	adds	r3, r3, r6
 8029fe6:	8b20      	ldrh	r0, [r4, #24]
 8029fe8:	8b61      	ldrh	r1, [r4, #26]
 8029fea:	bf54      	ite	pl
 8029fec:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8029ff0:	46c1      	movmi	r9, r8
 8029ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029ff4:	bf58      	it	pl
 8029ff6:	1b5b      	subpl	r3, r3, r5
 8029ff8:	4448      	add	r0, r9
 8029ffa:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8029ffe:	4417      	add	r7, r2
 802a000:	44ce      	add	lr, r9
 802a002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a004:	b200      	sxth	r0, r0
 802a006:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a00a:	b209      	sxth	r1, r1
 802a00c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a010:	443a      	add	r2, r7
 802a012:	8320      	strh	r0, [r4, #24]
 802a014:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a018:	8361      	strh	r1, [r4, #26]
 802a01a:	4552      	cmp	r2, sl
 802a01c:	d017      	beq.n	802a04e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802a01e:	ea50 0201 	orrs.w	r2, r0, r1
 802a022:	d00d      	beq.n	802a040 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a024:	f1b9 0f00 	cmp.w	r9, #0
 802a028:	db0a      	blt.n	802a040 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a02a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a02c:	4549      	cmp	r1, r9
 802a02e:	dd07      	ble.n	802a040 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a030:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a034:	4288      	cmp	r0, r1
 802a036:	d336      	bcc.n	802a0a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802a038:	f04f 0201 	mov.w	r2, #1
 802a03c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a040:	9a00      	ldr	r2, [sp, #0]
 802a042:	82a7      	strh	r7, [r4, #20]
 802a044:	82e2      	strh	r2, [r4, #22]
 802a046:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a04a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a04e:	9a04      	ldr	r2, [sp, #16]
 802a050:	42ba      	cmp	r2, r7
 802a052:	d1c7      	bne.n	8029fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802a054:	9b02      	ldr	r3, [sp, #8]
 802a056:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a058:	eba3 0e0e 	sub.w	lr, r3, lr
 802a05c:	8b23      	ldrh	r3, [r4, #24]
 802a05e:	3120      	adds	r1, #32
 802a060:	4473      	add	r3, lr
 802a062:	8323      	strh	r3, [r4, #24]
 802a064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a066:	1ac9      	subs	r1, r1, r3
 802a068:	8b63      	ldrh	r3, [r4, #26]
 802a06a:	fb0e 3e01 	mla	lr, lr, r1, r3
 802a06e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802a072:	e611      	b.n	8029c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a074:	f04f 36ff 	mov.w	r6, #4294967295
 802a078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a07a:	426d      	negs	r5, r5
 802a07c:	960e      	str	r6, [sp, #56]	; 0x38
 802a07e:	2600      	movs	r6, #0
 802a080:	434b      	muls	r3, r1
 802a082:	e763      	b.n	8029f4c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802a084:	f104 0e14 	add.w	lr, r4, #20
 802a088:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a08c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a090:	f8c8 0000 	str.w	r0, [r8]
 802a094:	f8c8 1004 	str.w	r1, [r8, #4]
 802a098:	6921      	ldr	r1, [r4, #16]
 802a09a:	3108      	adds	r1, #8
 802a09c:	6121      	str	r1, [r4, #16]
 802a09e:	68a1      	ldr	r1, [r4, #8]
 802a0a0:	3101      	adds	r1, #1
 802a0a2:	60a1      	str	r1, [r4, #8]
 802a0a4:	e77f      	b.n	8029fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a0a6:	f104 0914 	add.w	r9, r4, #20
 802a0aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a0ae:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a0b2:	f8ca 0000 	str.w	r0, [sl]
 802a0b6:	f8ca 1004 	str.w	r1, [sl, #4]
 802a0ba:	6921      	ldr	r1, [r4, #16]
 802a0bc:	3108      	adds	r1, #8
 802a0be:	6121      	str	r1, [r4, #16]
 802a0c0:	68a1      	ldr	r1, [r4, #8]
 802a0c2:	3101      	adds	r1, #1
 802a0c4:	60a1      	str	r1, [r4, #8]
 802a0c6:	e7bb      	b.n	802a040 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a0c8:	f104 0314 	add.w	r3, r4, #20
 802a0cc:	6925      	ldr	r5, [r4, #16]
 802a0ce:	cb03      	ldmia	r3!, {r0, r1}
 802a0d0:	6028      	str	r0, [r5, #0]
 802a0d2:	6069      	str	r1, [r5, #4]
 802a0d4:	6923      	ldr	r3, [r4, #16]
 802a0d6:	3308      	adds	r3, #8
 802a0d8:	6123      	str	r3, [r4, #16]
 802a0da:	68a3      	ldr	r3, [r4, #8]
 802a0dc:	3301      	adds	r3, #1
 802a0de:	60a3      	str	r3, [r4, #8]
 802a0e0:	e5fd      	b.n	8029cde <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a0e2:	f104 0314 	add.w	r3, r4, #20
 802a0e6:	6925      	ldr	r5, [r4, #16]
 802a0e8:	cb03      	ldmia	r3!, {r0, r1}
 802a0ea:	6028      	str	r0, [r5, #0]
 802a0ec:	6069      	str	r1, [r5, #4]
 802a0ee:	6923      	ldr	r3, [r4, #16]
 802a0f0:	3308      	adds	r3, #8
 802a0f2:	6123      	str	r3, [r4, #16]
 802a0f4:	68a3      	ldr	r3, [r4, #8]
 802a0f6:	3301      	adds	r3, #1
 802a0f8:	60a3      	str	r3, [r4, #8]
 802a0fa:	e625      	b.n	8029d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a0fc:	9b05      	ldr	r3, [sp, #20]
 802a0fe:	ea4f 176b 	mov.w	r7, fp, asr #5
 802a102:	f00b 081f 	and.w	r8, fp, #31
 802a106:	8b20      	ldrh	r0, [r4, #24]
 802a108:	f003 031f 	and.w	r3, r3, #31
 802a10c:	4577      	cmp	r7, lr
 802a10e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802a112:	9302      	str	r3, [sp, #8]
 802a114:	9b03      	ldr	r3, [sp, #12]
 802a116:	eba3 050c 	sub.w	r5, r3, ip
 802a11a:	d108      	bne.n	802a12e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802a11c:	9b02      	ldr	r3, [sp, #8]
 802a11e:	4428      	add	r0, r5
 802a120:	4498      	add	r8, r3
 802a122:	8320      	strh	r0, [r4, #24]
 802a124:	fb05 9508 	mla	r5, r5, r8, r9
 802a128:	8365      	strh	r5, [r4, #26]
 802a12a:	f7ff bb4f 	b.w	80297cc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a12e:	9b05      	ldr	r3, [sp, #20]
 802a130:	ebb3 030b 	subs.w	r3, r3, fp
 802a134:	f100 809c 	bmi.w	802a270 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802a138:	f1c8 0120 	rsb	r1, r8, #32
 802a13c:	2201      	movs	r2, #1
 802a13e:	f04f 0b20 	mov.w	fp, #32
 802a142:	434d      	muls	r5, r1
 802a144:	9201      	str	r2, [sp, #4]
 802a146:	9a01      	ldr	r2, [sp, #4]
 802a148:	44d8      	add	r8, fp
 802a14a:	fb95 f6f3 	sdiv	r6, r5, r3
 802a14e:	fb03 5516 	mls	r5, r3, r6, r5
 802a152:	4417      	add	r7, r2
 802a154:	9a00      	ldr	r2, [sp, #0]
 802a156:	2d00      	cmp	r5, #0
 802a158:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802a15c:	bfbc      	itt	lt
 802a15e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802a162:	18ed      	addlt	r5, r5, r3
 802a164:	eb07 0a02 	add.w	sl, r7, r2
 802a168:	9204      	str	r2, [sp, #16]
 802a16a:	fb06 9808 	mla	r8, r6, r8, r9
 802a16e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a172:	4430      	add	r0, r6
 802a174:	fa0f f188 	sxth.w	r1, r8
 802a178:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a17c:	b200      	sxth	r0, r0
 802a17e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a182:	8361      	strh	r1, [r4, #26]
 802a184:	8320      	strh	r0, [r4, #24]
 802a186:	45ca      	cmp	sl, r9
 802a188:	d015      	beq.n	802a1b6 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802a18a:	ea50 0201 	orrs.w	r2, r0, r1
 802a18e:	d00c      	beq.n	802a1aa <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a190:	f1b8 0f00 	cmp.w	r8, #0
 802a194:	db09      	blt.n	802a1aa <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a196:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a198:	4541      	cmp	r1, r8
 802a19a:	dd06      	ble.n	802a1aa <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a19c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a1a0:	4288      	cmp	r0, r1
 802a1a2:	d36e      	bcc.n	802a282 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802a1a4:	2101      	movs	r1, #1
 802a1a6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a1aa:	2100      	movs	r1, #0
 802a1ac:	9a00      	ldr	r2, [sp, #0]
 802a1ae:	82a7      	strh	r7, [r4, #20]
 802a1b0:	82e2      	strh	r2, [r4, #22]
 802a1b2:	8321      	strh	r1, [r4, #24]
 802a1b4:	8361      	strh	r1, [r4, #26]
 802a1b6:	45be      	cmp	lr, r7
 802a1b8:	44b4      	add	ip, r6
 802a1ba:	d048      	beq.n	802a24e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802a1bc:	9a03      	ldr	r2, [sp, #12]
 802a1be:	1aed      	subs	r5, r5, r3
 802a1c0:	eba2 010c 	sub.w	r1, r2, ip
 802a1c4:	440e      	add	r6, r1
 802a1c6:	0176      	lsls	r6, r6, #5
 802a1c8:	fb96 f8f3 	sdiv	r8, r6, r3
 802a1cc:	fb03 6618 	mls	r6, r3, r8, r6
 802a1d0:	2e00      	cmp	r6, #0
 802a1d2:	bfbc      	itt	lt
 802a1d4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802a1d8:	18f6      	addlt	r6, r6, r3
 802a1da:	f108 0201 	add.w	r2, r8, #1
 802a1de:	9205      	str	r2, [sp, #20]
 802a1e0:	19ad      	adds	r5, r5, r6
 802a1e2:	8b20      	ldrh	r0, [r4, #24]
 802a1e4:	8b61      	ldrh	r1, [r4, #26]
 802a1e6:	bf54      	ite	pl
 802a1e8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802a1ec:	46c1      	movmi	r9, r8
 802a1ee:	9a01      	ldr	r2, [sp, #4]
 802a1f0:	bf58      	it	pl
 802a1f2:	1aed      	subpl	r5, r5, r3
 802a1f4:	4448      	add	r0, r9
 802a1f6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802a1fa:	4417      	add	r7, r2
 802a1fc:	44cc      	add	ip, r9
 802a1fe:	9a04      	ldr	r2, [sp, #16]
 802a200:	b200      	sxth	r0, r0
 802a202:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a206:	b209      	sxth	r1, r1
 802a208:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a20c:	443a      	add	r2, r7
 802a20e:	8320      	strh	r0, [r4, #24]
 802a210:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a214:	8361      	strh	r1, [r4, #26]
 802a216:	4552      	cmp	r2, sl
 802a218:	d017      	beq.n	802a24a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802a21a:	ea50 0201 	orrs.w	r2, r0, r1
 802a21e:	d00d      	beq.n	802a23c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a220:	f1b9 0f00 	cmp.w	r9, #0
 802a224:	db0a      	blt.n	802a23c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a226:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a228:	4549      	cmp	r1, r9
 802a22a:	dd07      	ble.n	802a23c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a22c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a230:	4288      	cmp	r0, r1
 802a232:	d337      	bcc.n	802a2a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802a234:	f04f 0201 	mov.w	r2, #1
 802a238:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a23c:	9a00      	ldr	r2, [sp, #0]
 802a23e:	82a7      	strh	r7, [r4, #20]
 802a240:	82e2      	strh	r2, [r4, #22]
 802a242:	f04f 0200 	mov.w	r2, #0
 802a246:	8322      	strh	r2, [r4, #24]
 802a248:	8362      	strh	r2, [r4, #26]
 802a24a:	45be      	cmp	lr, r7
 802a24c:	d1c8      	bne.n	802a1e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802a24e:	9b03      	ldr	r3, [sp, #12]
 802a250:	8b62      	ldrh	r2, [r4, #26]
 802a252:	eba3 0c0c 	sub.w	ip, r3, ip
 802a256:	8b23      	ldrh	r3, [r4, #24]
 802a258:	4463      	add	r3, ip
 802a25a:	8323      	strh	r3, [r4, #24]
 802a25c:	9b02      	ldr	r3, [sp, #8]
 802a25e:	3320      	adds	r3, #32
 802a260:	eba3 030b 	sub.w	r3, r3, fp
 802a264:	fb0c 2c03 	mla	ip, ip, r3, r2
 802a268:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a26c:	f7ff baae 	b.w	80297cc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a270:	f04f 32ff 	mov.w	r2, #4294967295
 802a274:	fb05 f508 	mul.w	r5, r5, r8
 802a278:	425b      	negs	r3, r3
 802a27a:	f04f 0b00 	mov.w	fp, #0
 802a27e:	9201      	str	r2, [sp, #4]
 802a280:	e761      	b.n	802a146 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802a282:	f104 0814 	add.w	r8, r4, #20
 802a286:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a28a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802a28e:	f8c9 0000 	str.w	r0, [r9]
 802a292:	f8c9 1004 	str.w	r1, [r9, #4]
 802a296:	6921      	ldr	r1, [r4, #16]
 802a298:	3108      	adds	r1, #8
 802a29a:	6121      	str	r1, [r4, #16]
 802a29c:	68a1      	ldr	r1, [r4, #8]
 802a29e:	3101      	adds	r1, #1
 802a2a0:	60a1      	str	r1, [r4, #8]
 802a2a2:	e782      	b.n	802a1aa <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a2a4:	f104 0914 	add.w	r9, r4, #20
 802a2a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a2ac:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a2b0:	f8ca 0000 	str.w	r0, [sl]
 802a2b4:	f8ca 1004 	str.w	r1, [sl, #4]
 802a2b8:	6921      	ldr	r1, [r4, #16]
 802a2ba:	3108      	adds	r1, #8
 802a2bc:	6121      	str	r1, [r4, #16]
 802a2be:	68a1      	ldr	r1, [r4, #8]
 802a2c0:	3101      	adds	r1, #1
 802a2c2:	60a1      	str	r1, [r4, #8]
 802a2c4:	e7ba      	b.n	802a23c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802a2c6 <_ZN8touchgfx7Outline6lineToEii>:
 802a2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a2c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a2ca:	4604      	mov	r4, r0
 802a2cc:	460d      	mov	r5, r1
 802a2ce:	4616      	mov	r6, r2
 802a2d0:	079b      	lsls	r3, r3, #30
 802a2d2:	d526      	bpl.n	802a322 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a2d4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802a2d8:	ea85 0001 	eor.w	r0, r5, r1
 802a2dc:	ea86 0302 	eor.w	r3, r6, r2
 802a2e0:	4303      	orrs	r3, r0
 802a2e2:	d01e      	beq.n	802a322 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a2e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a2e6:	114b      	asrs	r3, r1, #5
 802a2e8:	9600      	str	r6, [sp, #0]
 802a2ea:	4283      	cmp	r3, r0
 802a2ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a2ee:	bfb8      	it	lt
 802a2f0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a2f2:	3301      	adds	r3, #1
 802a2f4:	4283      	cmp	r3, r0
 802a2f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a2f8:	bfc8      	it	gt
 802a2fa:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a2fc:	116b      	asrs	r3, r5, #5
 802a2fe:	4283      	cmp	r3, r0
 802a300:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a302:	bfb8      	it	lt
 802a304:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a306:	3301      	adds	r3, #1
 802a308:	4283      	cmp	r3, r0
 802a30a:	4620      	mov	r0, r4
 802a30c:	bfc8      	it	gt
 802a30e:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a310:	462b      	mov	r3, r5
 802a312:	f7ff f9e3 	bl	80296dc <_ZN8touchgfx7Outline10renderLineEiiii>
 802a316:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a318:	f043 0301 	orr.w	r3, r3, #1
 802a31c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802a320:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a322:	b002      	add	sp, #8
 802a324:	bd70      	pop	{r4, r5, r6, pc}

0802a326 <_ZN8touchgfx7Outline6moveToEii>:
 802a326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a328:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a32a:	4615      	mov	r5, r2
 802a32c:	4604      	mov	r4, r0
 802a32e:	460e      	mov	r6, r1
 802a330:	079a      	lsls	r2, r3, #30
 802a332:	d401      	bmi.n	802a338 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802a334:	f7ff f98c 	bl	8029650 <_ZN8touchgfx7Outline5resetEv>
 802a338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a33a:	07db      	lsls	r3, r3, #31
 802a33c:	d504      	bpl.n	802a348 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802a33e:	4620      	mov	r0, r4
 802a340:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802a344:	f7ff ffbf 	bl	802a2c6 <_ZN8touchgfx7Outline6lineToEii>
 802a348:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802a34c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a350:	116f      	asrs	r7, r5, #5
 802a352:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802a356:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802a35a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802a35e:	4291      	cmp	r1, r2
 802a360:	d015      	beq.n	802a38e <_ZN8touchgfx7Outline6moveToEii+0x68>
 802a362:	8b61      	ldrh	r1, [r4, #26]
 802a364:	8b22      	ldrh	r2, [r4, #24]
 802a366:	430a      	orrs	r2, r1
 802a368:	d00b      	beq.n	802a382 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a36a:	2b00      	cmp	r3, #0
 802a36c:	db09      	blt.n	802a382 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a36e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a370:	429a      	cmp	r2, r3
 802a372:	dd06      	ble.n	802a382 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a374:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802a378:	429a      	cmp	r2, r3
 802a37a:	d30d      	bcc.n	802a398 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802a37c:	2301      	movs	r3, #1
 802a37e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a382:	2300      	movs	r3, #0
 802a384:	f8a4 c014 	strh.w	ip, [r4, #20]
 802a388:	82e7      	strh	r7, [r4, #22]
 802a38a:	8323      	strh	r3, [r4, #24]
 802a38c:	8363      	strh	r3, [r4, #26]
 802a38e:	61e6      	str	r6, [r4, #28]
 802a390:	62a5      	str	r5, [r4, #40]	; 0x28
 802a392:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a398:	f104 0314 	add.w	r3, r4, #20
 802a39c:	6922      	ldr	r2, [r4, #16]
 802a39e:	cb03      	ldmia	r3!, {r0, r1}
 802a3a0:	6010      	str	r0, [r2, #0]
 802a3a2:	6051      	str	r1, [r2, #4]
 802a3a4:	6923      	ldr	r3, [r4, #16]
 802a3a6:	3308      	adds	r3, #8
 802a3a8:	6123      	str	r3, [r4, #16]
 802a3aa:	68a3      	ldr	r3, [r4, #8]
 802a3ac:	3301      	adds	r3, #1
 802a3ae:	60a3      	str	r3, [r4, #8]
 802a3b0:	e7e7      	b.n	802a382 <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802a3b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802a3b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3b6:	b0d1      	sub	sp, #324	; 0x144
 802a3b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802a3bc:	466c      	mov	r4, sp
 802a3be:	1a0d      	subs	r5, r1, r0
 802a3c0:	f100 0208 	add.w	r2, r0, #8
 802a3c4:	2d48      	cmp	r5, #72	; 0x48
 802a3c6:	f340 80ba 	ble.w	802a53e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a3ca:	112d      	asrs	r5, r5, #4
 802a3cc:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802a3d0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802a3d4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802a3d8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802a3dc:	f9b0 8000 	ldrsh.w	r8, [r0]
 802a3e0:	681e      	ldr	r6, [r3, #0]
 802a3e2:	6006      	str	r6, [r0, #0]
 802a3e4:	685e      	ldr	r6, [r3, #4]
 802a3e6:	6046      	str	r6, [r0, #4]
 802a3e8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802a3ec:	f8a3 c004 	strh.w	ip, [r3, #4]
 802a3f0:	f8a3 e002 	strh.w	lr, [r3, #2]
 802a3f4:	80df      	strh	r7, [r3, #6]
 802a3f6:	f1a1 0308 	sub.w	r3, r1, #8
 802a3fa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802a3fe:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802a402:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a406:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a40a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a40e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a412:	45ac      	cmp	ip, r5
 802a414:	dd0f      	ble.n	802a436 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802a416:	681d      	ldr	r5, [r3, #0]
 802a418:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802a41c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802a420:	6015      	str	r5, [r2, #0]
 802a422:	685d      	ldr	r5, [r3, #4]
 802a424:	6055      	str	r5, [r2, #4]
 802a426:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a42a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a42e:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a432:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a436:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802a43a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a43e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a442:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802a446:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802a44a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a44e:	4565      	cmp	r5, ip
 802a450:	dd0d      	ble.n	802a46e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802a452:	6815      	ldr	r5, [r2, #0]
 802a454:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a458:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a45c:	6005      	str	r5, [r0, #0]
 802a45e:	6855      	ldr	r5, [r2, #4]
 802a460:	8107      	strh	r7, [r0, #8]
 802a462:	6045      	str	r5, [r0, #4]
 802a464:	8146      	strh	r6, [r0, #10]
 802a466:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802a46a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802a46e:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a472:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a476:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a47a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a47e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a482:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a486:	45ac      	cmp	ip, r5
 802a488:	dd0f      	ble.n	802a4aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a48a:	681d      	ldr	r5, [r3, #0]
 802a48c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a490:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a494:	6005      	str	r5, [r0, #0]
 802a496:	685d      	ldr	r5, [r3, #4]
 802a498:	6045      	str	r5, [r0, #4]
 802a49a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a49e:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a4a2:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a4a6:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a4aa:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802a4ae:	f102 0508 	add.w	r5, r2, #8
 802a4b2:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802a4b6:	f9b0 e000 	ldrsh.w	lr, [r0]
 802a4ba:	462f      	mov	r7, r5
 802a4bc:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802a4c0:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802a4c4:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802a4c8:	45b2      	cmp	sl, r6
 802a4ca:	dc18      	bgt.n	802a4fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802a4cc:	3b08      	subs	r3, #8
 802a4ce:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802a4d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 802a4d6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802a4da:	45b2      	cmp	sl, r6
 802a4dc:	dbf6      	blt.n	802a4cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802a4de:	42ab      	cmp	r3, r5
 802a4e0:	681e      	ldr	r6, [r3, #0]
 802a4e2:	d30e      	bcc.n	802a502 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802a4e4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802a4e8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802a4ec:	602e      	str	r6, [r5, #0]
 802a4ee:	685e      	ldr	r6, [r3, #4]
 802a4f0:	606e      	str	r6, [r5, #4]
 802a4f2:	f8a3 9000 	strh.w	r9, [r3]
 802a4f6:	f8a3 8002 	strh.w	r8, [r3, #2]
 802a4fa:	809f      	strh	r7, [r3, #4]
 802a4fc:	80da      	strh	r2, [r3, #6]
 802a4fe:	462a      	mov	r2, r5
 802a500:	e7d3      	b.n	802a4aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a502:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802a506:	6006      	str	r6, [r0, #0]
 802a508:	685e      	ldr	r6, [r3, #4]
 802a50a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802a50e:	6046      	str	r6, [r0, #4]
 802a510:	1a1e      	subs	r6, r3, r0
 802a512:	80da      	strh	r2, [r3, #6]
 802a514:	1b4a      	subs	r2, r1, r5
 802a516:	f8a3 e000 	strh.w	lr, [r3]
 802a51a:	10d2      	asrs	r2, r2, #3
 802a51c:	f8a3 c002 	strh.w	ip, [r3, #2]
 802a520:	f8a3 8004 	strh.w	r8, [r3, #4]
 802a524:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802a528:	bfb5      	itete	lt
 802a52a:	e9c4 0300 	strdlt	r0, r3, [r4]
 802a52e:	4607      	movge	r7, r0
 802a530:	460b      	movlt	r3, r1
 802a532:	e9c4 5100 	strdge	r5, r1, [r4]
 802a536:	4638      	mov	r0, r7
 802a538:	3408      	adds	r4, #8
 802a53a:	4619      	mov	r1, r3
 802a53c:	e73f      	b.n	802a3be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802a53e:	4291      	cmp	r1, r2
 802a540:	d925      	bls.n	802a58e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802a542:	f1a2 0310 	sub.w	r3, r2, #16
 802a546:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802a54a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802a54e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802a552:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802a556:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802a55a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802a55e:	42b5      	cmp	r5, r6
 802a560:	dd13      	ble.n	802a58a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802a562:	461d      	mov	r5, r3
 802a564:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802a568:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802a56c:	3b08      	subs	r3, #8
 802a56e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802a572:	619e      	str	r6, [r3, #24]
 802a574:	42a8      	cmp	r0, r5
 802a576:	686e      	ldr	r6, [r5, #4]
 802a578:	f8a3 c010 	strh.w	ip, [r3, #16]
 802a57c:	61de      	str	r6, [r3, #28]
 802a57e:	825f      	strh	r7, [r3, #18]
 802a580:	f8a3 8014 	strh.w	r8, [r3, #20]
 802a584:	f8a3 e016 	strh.w	lr, [r3, #22]
 802a588:	d1dd      	bne.n	802a546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802a58a:	3208      	adds	r2, #8
 802a58c:	e7d7      	b.n	802a53e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a58e:	466b      	mov	r3, sp
 802a590:	429c      	cmp	r4, r3
 802a592:	d903      	bls.n	802a59c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802a594:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802a598:	3c08      	subs	r4, #8
 802a59a:	e710      	b.n	802a3be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802a59c:	b051      	add	sp, #324	; 0x144
 802a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a5a2 <_ZN8touchgfx7Outline9sortCellsEv>:
 802a5a2:	6881      	ldr	r1, [r0, #8]
 802a5a4:	b111      	cbz	r1, 802a5ac <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802a5a6:	68c0      	ldr	r0, [r0, #12]
 802a5a8:	f7ff bf03 	b.w	802a3b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802a5ac:	4770      	bx	lr

0802a5ae <_ZN8touchgfx7Outline8getCellsEv>:
 802a5ae:	b510      	push	{r4, lr}
 802a5b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a5b2:	4604      	mov	r4, r0
 802a5b4:	07da      	lsls	r2, r3, #31
 802a5b6:	d507      	bpl.n	802a5c8 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802a5b8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802a5bc:	f7ff fe83 	bl	802a2c6 <_ZN8touchgfx7Outline6lineToEii>
 802a5c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a5c2:	f023 0301 	bic.w	r3, r3, #1
 802a5c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a5c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a5ca:	079b      	lsls	r3, r3, #30
 802a5cc:	d51a      	bpl.n	802a604 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802a5ce:	8b62      	ldrh	r2, [r4, #26]
 802a5d0:	8b23      	ldrh	r3, [r4, #24]
 802a5d2:	4313      	orrs	r3, r2
 802a5d4:	d00d      	beq.n	802a5f2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5d6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a5da:	2b00      	cmp	r3, #0
 802a5dc:	db09      	blt.n	802a5f2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a5e0:	4293      	cmp	r3, r2
 802a5e2:	da06      	bge.n	802a5f2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5e4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802a5e8:	429a      	cmp	r2, r3
 802a5ea:	d80d      	bhi.n	802a608 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802a5ec:	2301      	movs	r3, #1
 802a5ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a5f2:	68a0      	ldr	r0, [r4, #8]
 802a5f4:	b138      	cbz	r0, 802a606 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802a5f6:	4620      	mov	r0, r4
 802a5f8:	f7ff ffd3 	bl	802a5a2 <_ZN8touchgfx7Outline9sortCellsEv>
 802a5fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a5fe:	f023 0302 	bic.w	r3, r3, #2
 802a602:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a604:	68e0      	ldr	r0, [r4, #12]
 802a606:	bd10      	pop	{r4, pc}
 802a608:	f104 0314 	add.w	r3, r4, #20
 802a60c:	6922      	ldr	r2, [r4, #16]
 802a60e:	cb03      	ldmia	r3!, {r0, r1}
 802a610:	6010      	str	r0, [r2, #0]
 802a612:	6051      	str	r1, [r2, #4]
 802a614:	6923      	ldr	r3, [r4, #16]
 802a616:	3308      	adds	r3, #8
 802a618:	6123      	str	r3, [r4, #16]
 802a61a:	68a3      	ldr	r3, [r4, #8]
 802a61c:	3301      	adds	r3, #1
 802a61e:	60a3      	str	r3, [r4, #8]
 802a620:	e7e7      	b.n	802a5f2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802a622 <_ZN8touchgfx8ScanlineD1Ev>:
 802a622:	4770      	bx	lr

0802a624 <_ZN8touchgfx8ScanlineD0Ev>:
 802a624:	b510      	push	{r4, lr}
 802a626:	4604      	mov	r4, r0
 802a628:	2124      	movs	r1, #36	; 0x24
 802a62a:	f000 f884 	bl	802a736 <_ZdlPvj>
 802a62e:	4620      	mov	r0, r4
 802a630:	bd10      	pop	{r4, pc}

0802a632 <_ZN8touchgfx8Scanline5resetEv>:
 802a632:	b510      	push	{r4, lr}
 802a634:	4604      	mov	r4, r0
 802a636:	f7ee f9fd 	bl	8018a34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802a63a:	61a0      	str	r0, [r4, #24]
 802a63c:	f7ee fa00 	bl	8018a40 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802a640:	61e0      	str	r0, [r4, #28]
 802a642:	f7ee fa03 	bl	8018a4c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802a646:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a64a:	6220      	str	r0, [r4, #32]
 802a64c:	6160      	str	r0, [r4, #20]
 802a64e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802a652:	69e3      	ldr	r3, [r4, #28]
 802a654:	6123      	str	r3, [r4, #16]
 802a656:	2300      	movs	r3, #0
 802a658:	60e3      	str	r3, [r4, #12]
 802a65a:	bd10      	pop	{r4, pc}

0802a65c <_ZN8touchgfx8ScanlineC1Ev>:
 802a65c:	4b07      	ldr	r3, [pc, #28]	; (802a67c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802a65e:	b510      	push	{r4, lr}
 802a660:	6003      	str	r3, [r0, #0]
 802a662:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a666:	4604      	mov	r4, r0
 802a668:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a66c:	2300      	movs	r3, #0
 802a66e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a672:	6143      	str	r3, [r0, #20]
 802a674:	f7ff ffdd 	bl	802a632 <_ZN8touchgfx8Scanline5resetEv>
 802a678:	4620      	mov	r0, r4
 802a67a:	bd10      	pop	{r4, pc}
 802a67c:	08030f4c 	.word	0x08030f4c

0802a680 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a684:	1e0c      	subs	r4, r1, #0
 802a686:	4605      	mov	r5, r0
 802a688:	4617      	mov	r7, r2
 802a68a:	461e      	mov	r6, r3
 802a68c:	da03      	bge.n	802a696 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802a68e:	4426      	add	r6, r4
 802a690:	2e01      	cmp	r6, #1
 802a692:	d421      	bmi.n	802a6d8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802a694:	2400      	movs	r4, #0
 802a696:	f7ee f9c7 	bl	8018a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a69a:	42a0      	cmp	r0, r4
 802a69c:	d91c      	bls.n	802a6d8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802a69e:	eb04 0806 	add.w	r8, r4, r6
 802a6a2:	f7ee f9c1 	bl	8018a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6a6:	4580      	cmp	r8, r0
 802a6a8:	d902      	bls.n	802a6b0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802a6aa:	f7ee f9bd 	bl	8018a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6ae:	1b06      	subs	r6, r0, r4
 802a6b0:	69a8      	ldr	r0, [r5, #24]
 802a6b2:	4632      	mov	r2, r6
 802a6b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802a6b8:	4420      	add	r0, r4
 802a6ba:	f7f0 fe43 	bl	801b344 <_ZN8touchgfx6memsetEPvhm>
 802a6be:	686b      	ldr	r3, [r5, #4]
 802a6c0:	b2b2      	uxth	r2, r6
 802a6c2:	3301      	adds	r3, #1
 802a6c4:	42a3      	cmp	r3, r4
 802a6c6:	696b      	ldr	r3, [r5, #20]
 802a6c8:	d108      	bne.n	802a6dc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802a6ca:	8819      	ldrh	r1, [r3, #0]
 802a6cc:	440a      	add	r2, r1
 802a6ce:	801a      	strh	r2, [r3, #0]
 802a6d0:	3c01      	subs	r4, #1
 802a6d2:	4434      	add	r4, r6
 802a6d4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6dc:	1c99      	adds	r1, r3, #2
 802a6de:	6169      	str	r1, [r5, #20]
 802a6e0:	805a      	strh	r2, [r3, #2]
 802a6e2:	692b      	ldr	r3, [r5, #16]
 802a6e4:	1c9a      	adds	r2, r3, #2
 802a6e6:	612a      	str	r2, [r5, #16]
 802a6e8:	805c      	strh	r4, [r3, #2]
 802a6ea:	68eb      	ldr	r3, [r5, #12]
 802a6ec:	3301      	adds	r3, #1
 802a6ee:	60eb      	str	r3, [r5, #12]
 802a6f0:	e7ee      	b.n	802a6d0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802a6f2 <_ZN8touchgfx15RenderingBufferD1Ev>:
 802a6f2:	4770      	bx	lr

0802a6f4 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802a6f4:	b510      	push	{r4, lr}
 802a6f6:	4604      	mov	r4, r0
 802a6f8:	2118      	movs	r1, #24
 802a6fa:	f000 f81c 	bl	802a736 <_ZdlPvj>
 802a6fe:	4620      	mov	r0, r4
 802a700:	bd10      	pop	{r4, pc}
	...

0802a704 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802a704:	4a04      	ldr	r2, [pc, #16]	; (802a718 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802a706:	6002      	str	r2, [r0, #0]
 802a708:	2200      	movs	r2, #0
 802a70a:	6042      	str	r2, [r0, #4]
 802a70c:	7202      	strb	r2, [r0, #8]
 802a70e:	6142      	str	r2, [r0, #20]
 802a710:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802a714:	4770      	bx	lr
 802a716:	bf00      	nop
 802a718:	08030f5c 	.word	0x08030f5c

0802a71c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802a71c:	60c3      	str	r3, [r0, #12]
 802a71e:	9b00      	ldr	r3, [sp, #0]
 802a720:	6041      	str	r1, [r0, #4]
 802a722:	6103      	str	r3, [r0, #16]
 802a724:	9b01      	ldr	r3, [sp, #4]
 802a726:	7202      	strb	r2, [r0, #8]
 802a728:	6143      	str	r3, [r0, #20]
 802a72a:	4770      	bx	lr

0802a72c <__aeabi_atexit>:
 802a72c:	460b      	mov	r3, r1
 802a72e:	4601      	mov	r1, r0
 802a730:	4618      	mov	r0, r3
 802a732:	f000 b853 	b.w	802a7dc <__cxa_atexit>

0802a736 <_ZdlPvj>:
 802a736:	f000 b812 	b.w	802a75e <_ZdlPv>

0802a73a <__cxa_guard_acquire>:
 802a73a:	6803      	ldr	r3, [r0, #0]
 802a73c:	07db      	lsls	r3, r3, #31
 802a73e:	d406      	bmi.n	802a74e <__cxa_guard_acquire+0x14>
 802a740:	7843      	ldrb	r3, [r0, #1]
 802a742:	b103      	cbz	r3, 802a746 <__cxa_guard_acquire+0xc>
 802a744:	deff      	udf	#255	; 0xff
 802a746:	2301      	movs	r3, #1
 802a748:	7043      	strb	r3, [r0, #1]
 802a74a:	4618      	mov	r0, r3
 802a74c:	4770      	bx	lr
 802a74e:	2000      	movs	r0, #0
 802a750:	4770      	bx	lr

0802a752 <__cxa_guard_release>:
 802a752:	2301      	movs	r3, #1
 802a754:	6003      	str	r3, [r0, #0]
 802a756:	4770      	bx	lr

0802a758 <__cxa_pure_virtual>:
 802a758:	b508      	push	{r3, lr}
 802a75a:	f000 f80f 	bl	802a77c <_ZSt9terminatev>

0802a75e <_ZdlPv>:
 802a75e:	f000 b88f 	b.w	802a880 <free>

0802a762 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a762:	b508      	push	{r3, lr}
 802a764:	4780      	blx	r0
 802a766:	f000 f80e 	bl	802a786 <abort>
	...

0802a76c <_ZSt13get_terminatev>:
 802a76c:	4b02      	ldr	r3, [pc, #8]	; (802a778 <_ZSt13get_terminatev+0xc>)
 802a76e:	6818      	ldr	r0, [r3, #0]
 802a770:	f3bf 8f5b 	dmb	ish
 802a774:	4770      	bx	lr
 802a776:	bf00      	nop
 802a778:	20000090 	.word	0x20000090

0802a77c <_ZSt9terminatev>:
 802a77c:	b508      	push	{r3, lr}
 802a77e:	f7ff fff5 	bl	802a76c <_ZSt13get_terminatev>
 802a782:	f7ff ffee 	bl	802a762 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a786 <abort>:
 802a786:	b508      	push	{r3, lr}
 802a788:	2006      	movs	r0, #6
 802a78a:	f000 fc67 	bl	802b05c <raise>
 802a78e:	2001      	movs	r0, #1
 802a790:	f7d6 ff9c 	bl	80016cc <_exit>

0802a794 <__assert_func>:
 802a794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a796:	4614      	mov	r4, r2
 802a798:	461a      	mov	r2, r3
 802a79a:	4b09      	ldr	r3, [pc, #36]	; (802a7c0 <__assert_func+0x2c>)
 802a79c:	681b      	ldr	r3, [r3, #0]
 802a79e:	4605      	mov	r5, r0
 802a7a0:	68d8      	ldr	r0, [r3, #12]
 802a7a2:	b14c      	cbz	r4, 802a7b8 <__assert_func+0x24>
 802a7a4:	4b07      	ldr	r3, [pc, #28]	; (802a7c4 <__assert_func+0x30>)
 802a7a6:	9100      	str	r1, [sp, #0]
 802a7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a7ac:	4906      	ldr	r1, [pc, #24]	; (802a7c8 <__assert_func+0x34>)
 802a7ae:	462b      	mov	r3, r5
 802a7b0:	f000 f828 	bl	802a804 <fiprintf>
 802a7b4:	f7ff ffe7 	bl	802a786 <abort>
 802a7b8:	4b04      	ldr	r3, [pc, #16]	; (802a7cc <__assert_func+0x38>)
 802a7ba:	461c      	mov	r4, r3
 802a7bc:	e7f3      	b.n	802a7a6 <__assert_func+0x12>
 802a7be:	bf00      	nop
 802a7c0:	20000094 	.word	0x20000094
 802a7c4:	08030f64 	.word	0x08030f64
 802a7c8:	08030f71 	.word	0x08030f71
 802a7cc:	08030f9f 	.word	0x08030f9f

0802a7d0 <atexit>:
 802a7d0:	2300      	movs	r3, #0
 802a7d2:	4601      	mov	r1, r0
 802a7d4:	461a      	mov	r2, r3
 802a7d6:	4618      	mov	r0, r3
 802a7d8:	f000 bd1c 	b.w	802b214 <__register_exitproc>

0802a7dc <__cxa_atexit>:
 802a7dc:	b510      	push	{r4, lr}
 802a7de:	4c05      	ldr	r4, [pc, #20]	; (802a7f4 <__cxa_atexit+0x18>)
 802a7e0:	4613      	mov	r3, r2
 802a7e2:	b12c      	cbz	r4, 802a7f0 <__cxa_atexit+0x14>
 802a7e4:	460a      	mov	r2, r1
 802a7e6:	4601      	mov	r1, r0
 802a7e8:	2002      	movs	r0, #2
 802a7ea:	f000 fd13 	bl	802b214 <__register_exitproc>
 802a7ee:	bd10      	pop	{r4, pc}
 802a7f0:	4620      	mov	r0, r4
 802a7f2:	e7fc      	b.n	802a7ee <__cxa_atexit+0x12>
 802a7f4:	0802b215 	.word	0x0802b215

0802a7f8 <__errno>:
 802a7f8:	4b01      	ldr	r3, [pc, #4]	; (802a800 <__errno+0x8>)
 802a7fa:	6818      	ldr	r0, [r3, #0]
 802a7fc:	4770      	bx	lr
 802a7fe:	bf00      	nop
 802a800:	20000094 	.word	0x20000094

0802a804 <fiprintf>:
 802a804:	b40e      	push	{r1, r2, r3}
 802a806:	b503      	push	{r0, r1, lr}
 802a808:	4601      	mov	r1, r0
 802a80a:	ab03      	add	r3, sp, #12
 802a80c:	4805      	ldr	r0, [pc, #20]	; (802a824 <fiprintf+0x20>)
 802a80e:	f853 2b04 	ldr.w	r2, [r3], #4
 802a812:	6800      	ldr	r0, [r0, #0]
 802a814:	9301      	str	r3, [sp, #4]
 802a816:	f000 f925 	bl	802aa64 <_vfiprintf_r>
 802a81a:	b002      	add	sp, #8
 802a81c:	f85d eb04 	ldr.w	lr, [sp], #4
 802a820:	b003      	add	sp, #12
 802a822:	4770      	bx	lr
 802a824:	20000094 	.word	0x20000094

0802a828 <__libc_init_array>:
 802a828:	b570      	push	{r4, r5, r6, lr}
 802a82a:	4d0d      	ldr	r5, [pc, #52]	; (802a860 <__libc_init_array+0x38>)
 802a82c:	4c0d      	ldr	r4, [pc, #52]	; (802a864 <__libc_init_array+0x3c>)
 802a82e:	1b64      	subs	r4, r4, r5
 802a830:	10a4      	asrs	r4, r4, #2
 802a832:	2600      	movs	r6, #0
 802a834:	42a6      	cmp	r6, r4
 802a836:	d109      	bne.n	802a84c <__libc_init_array+0x24>
 802a838:	4d0b      	ldr	r5, [pc, #44]	; (802a868 <__libc_init_array+0x40>)
 802a83a:	4c0c      	ldr	r4, [pc, #48]	; (802a86c <__libc_init_array+0x44>)
 802a83c:	f001 f824 	bl	802b888 <_init>
 802a840:	1b64      	subs	r4, r4, r5
 802a842:	10a4      	asrs	r4, r4, #2
 802a844:	2600      	movs	r6, #0
 802a846:	42a6      	cmp	r6, r4
 802a848:	d105      	bne.n	802a856 <__libc_init_array+0x2e>
 802a84a:	bd70      	pop	{r4, r5, r6, pc}
 802a84c:	f855 3b04 	ldr.w	r3, [r5], #4
 802a850:	4798      	blx	r3
 802a852:	3601      	adds	r6, #1
 802a854:	e7ee      	b.n	802a834 <__libc_init_array+0xc>
 802a856:	f855 3b04 	ldr.w	r3, [r5], #4
 802a85a:	4798      	blx	r3
 802a85c:	3601      	adds	r6, #1
 802a85e:	e7f2      	b.n	802a846 <__libc_init_array+0x1e>
 802a860:	0805fbf8 	.word	0x0805fbf8
 802a864:	0805fbf8 	.word	0x0805fbf8
 802a868:	0805fbf8 	.word	0x0805fbf8
 802a86c:	0805fc0c 	.word	0x0805fc0c

0802a870 <malloc>:
 802a870:	4b02      	ldr	r3, [pc, #8]	; (802a87c <malloc+0xc>)
 802a872:	4601      	mov	r1, r0
 802a874:	6818      	ldr	r0, [r3, #0]
 802a876:	f000 b871 	b.w	802a95c <_malloc_r>
 802a87a:	bf00      	nop
 802a87c:	20000094 	.word	0x20000094

0802a880 <free>:
 802a880:	4b02      	ldr	r3, [pc, #8]	; (802a88c <free+0xc>)
 802a882:	4601      	mov	r1, r0
 802a884:	6818      	ldr	r0, [r3, #0]
 802a886:	f000 b819 	b.w	802a8bc <_free_r>
 802a88a:	bf00      	nop
 802a88c:	20000094 	.word	0x20000094

0802a890 <memcpy>:
 802a890:	440a      	add	r2, r1
 802a892:	4291      	cmp	r1, r2
 802a894:	f100 33ff 	add.w	r3, r0, #4294967295
 802a898:	d100      	bne.n	802a89c <memcpy+0xc>
 802a89a:	4770      	bx	lr
 802a89c:	b510      	push	{r4, lr}
 802a89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a8a6:	4291      	cmp	r1, r2
 802a8a8:	d1f9      	bne.n	802a89e <memcpy+0xe>
 802a8aa:	bd10      	pop	{r4, pc}

0802a8ac <memset>:
 802a8ac:	4402      	add	r2, r0
 802a8ae:	4603      	mov	r3, r0
 802a8b0:	4293      	cmp	r3, r2
 802a8b2:	d100      	bne.n	802a8b6 <memset+0xa>
 802a8b4:	4770      	bx	lr
 802a8b6:	f803 1b01 	strb.w	r1, [r3], #1
 802a8ba:	e7f9      	b.n	802a8b0 <memset+0x4>

0802a8bc <_free_r>:
 802a8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a8be:	2900      	cmp	r1, #0
 802a8c0:	d048      	beq.n	802a954 <_free_r+0x98>
 802a8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a8c6:	9001      	str	r0, [sp, #4]
 802a8c8:	2b00      	cmp	r3, #0
 802a8ca:	f1a1 0404 	sub.w	r4, r1, #4
 802a8ce:	bfb8      	it	lt
 802a8d0:	18e4      	addlt	r4, r4, r3
 802a8d2:	f000 ff21 	bl	802b718 <__malloc_lock>
 802a8d6:	4a20      	ldr	r2, [pc, #128]	; (802a958 <_free_r+0x9c>)
 802a8d8:	9801      	ldr	r0, [sp, #4]
 802a8da:	6813      	ldr	r3, [r2, #0]
 802a8dc:	4615      	mov	r5, r2
 802a8de:	b933      	cbnz	r3, 802a8ee <_free_r+0x32>
 802a8e0:	6063      	str	r3, [r4, #4]
 802a8e2:	6014      	str	r4, [r2, #0]
 802a8e4:	b003      	add	sp, #12
 802a8e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a8ea:	f000 bf1b 	b.w	802b724 <__malloc_unlock>
 802a8ee:	42a3      	cmp	r3, r4
 802a8f0:	d90b      	bls.n	802a90a <_free_r+0x4e>
 802a8f2:	6821      	ldr	r1, [r4, #0]
 802a8f4:	1862      	adds	r2, r4, r1
 802a8f6:	4293      	cmp	r3, r2
 802a8f8:	bf04      	itt	eq
 802a8fa:	681a      	ldreq	r2, [r3, #0]
 802a8fc:	685b      	ldreq	r3, [r3, #4]
 802a8fe:	6063      	str	r3, [r4, #4]
 802a900:	bf04      	itt	eq
 802a902:	1852      	addeq	r2, r2, r1
 802a904:	6022      	streq	r2, [r4, #0]
 802a906:	602c      	str	r4, [r5, #0]
 802a908:	e7ec      	b.n	802a8e4 <_free_r+0x28>
 802a90a:	461a      	mov	r2, r3
 802a90c:	685b      	ldr	r3, [r3, #4]
 802a90e:	b10b      	cbz	r3, 802a914 <_free_r+0x58>
 802a910:	42a3      	cmp	r3, r4
 802a912:	d9fa      	bls.n	802a90a <_free_r+0x4e>
 802a914:	6811      	ldr	r1, [r2, #0]
 802a916:	1855      	adds	r5, r2, r1
 802a918:	42a5      	cmp	r5, r4
 802a91a:	d10b      	bne.n	802a934 <_free_r+0x78>
 802a91c:	6824      	ldr	r4, [r4, #0]
 802a91e:	4421      	add	r1, r4
 802a920:	1854      	adds	r4, r2, r1
 802a922:	42a3      	cmp	r3, r4
 802a924:	6011      	str	r1, [r2, #0]
 802a926:	d1dd      	bne.n	802a8e4 <_free_r+0x28>
 802a928:	681c      	ldr	r4, [r3, #0]
 802a92a:	685b      	ldr	r3, [r3, #4]
 802a92c:	6053      	str	r3, [r2, #4]
 802a92e:	4421      	add	r1, r4
 802a930:	6011      	str	r1, [r2, #0]
 802a932:	e7d7      	b.n	802a8e4 <_free_r+0x28>
 802a934:	d902      	bls.n	802a93c <_free_r+0x80>
 802a936:	230c      	movs	r3, #12
 802a938:	6003      	str	r3, [r0, #0]
 802a93a:	e7d3      	b.n	802a8e4 <_free_r+0x28>
 802a93c:	6825      	ldr	r5, [r4, #0]
 802a93e:	1961      	adds	r1, r4, r5
 802a940:	428b      	cmp	r3, r1
 802a942:	bf04      	itt	eq
 802a944:	6819      	ldreq	r1, [r3, #0]
 802a946:	685b      	ldreq	r3, [r3, #4]
 802a948:	6063      	str	r3, [r4, #4]
 802a94a:	bf04      	itt	eq
 802a94c:	1949      	addeq	r1, r1, r5
 802a94e:	6021      	streq	r1, [r4, #0]
 802a950:	6054      	str	r4, [r2, #4]
 802a952:	e7c7      	b.n	802a8e4 <_free_r+0x28>
 802a954:	b003      	add	sp, #12
 802a956:	bd30      	pop	{r4, r5, pc}
 802a958:	20014c50 	.word	0x20014c50

0802a95c <_malloc_r>:
 802a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a95e:	1ccd      	adds	r5, r1, #3
 802a960:	f025 0503 	bic.w	r5, r5, #3
 802a964:	3508      	adds	r5, #8
 802a966:	2d0c      	cmp	r5, #12
 802a968:	bf38      	it	cc
 802a96a:	250c      	movcc	r5, #12
 802a96c:	2d00      	cmp	r5, #0
 802a96e:	4606      	mov	r6, r0
 802a970:	db01      	blt.n	802a976 <_malloc_r+0x1a>
 802a972:	42a9      	cmp	r1, r5
 802a974:	d903      	bls.n	802a97e <_malloc_r+0x22>
 802a976:	230c      	movs	r3, #12
 802a978:	6033      	str	r3, [r6, #0]
 802a97a:	2000      	movs	r0, #0
 802a97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a97e:	f000 fecb 	bl	802b718 <__malloc_lock>
 802a982:	4921      	ldr	r1, [pc, #132]	; (802aa08 <_malloc_r+0xac>)
 802a984:	680a      	ldr	r2, [r1, #0]
 802a986:	4614      	mov	r4, r2
 802a988:	b99c      	cbnz	r4, 802a9b2 <_malloc_r+0x56>
 802a98a:	4f20      	ldr	r7, [pc, #128]	; (802aa0c <_malloc_r+0xb0>)
 802a98c:	683b      	ldr	r3, [r7, #0]
 802a98e:	b923      	cbnz	r3, 802a99a <_malloc_r+0x3e>
 802a990:	4621      	mov	r1, r4
 802a992:	4630      	mov	r0, r6
 802a994:	f000 fb2a 	bl	802afec <_sbrk_r>
 802a998:	6038      	str	r0, [r7, #0]
 802a99a:	4629      	mov	r1, r5
 802a99c:	4630      	mov	r0, r6
 802a99e:	f000 fb25 	bl	802afec <_sbrk_r>
 802a9a2:	1c43      	adds	r3, r0, #1
 802a9a4:	d123      	bne.n	802a9ee <_malloc_r+0x92>
 802a9a6:	230c      	movs	r3, #12
 802a9a8:	6033      	str	r3, [r6, #0]
 802a9aa:	4630      	mov	r0, r6
 802a9ac:	f000 feba 	bl	802b724 <__malloc_unlock>
 802a9b0:	e7e3      	b.n	802a97a <_malloc_r+0x1e>
 802a9b2:	6823      	ldr	r3, [r4, #0]
 802a9b4:	1b5b      	subs	r3, r3, r5
 802a9b6:	d417      	bmi.n	802a9e8 <_malloc_r+0x8c>
 802a9b8:	2b0b      	cmp	r3, #11
 802a9ba:	d903      	bls.n	802a9c4 <_malloc_r+0x68>
 802a9bc:	6023      	str	r3, [r4, #0]
 802a9be:	441c      	add	r4, r3
 802a9c0:	6025      	str	r5, [r4, #0]
 802a9c2:	e004      	b.n	802a9ce <_malloc_r+0x72>
 802a9c4:	6863      	ldr	r3, [r4, #4]
 802a9c6:	42a2      	cmp	r2, r4
 802a9c8:	bf0c      	ite	eq
 802a9ca:	600b      	streq	r3, [r1, #0]
 802a9cc:	6053      	strne	r3, [r2, #4]
 802a9ce:	4630      	mov	r0, r6
 802a9d0:	f000 fea8 	bl	802b724 <__malloc_unlock>
 802a9d4:	f104 000b 	add.w	r0, r4, #11
 802a9d8:	1d23      	adds	r3, r4, #4
 802a9da:	f020 0007 	bic.w	r0, r0, #7
 802a9de:	1ac2      	subs	r2, r0, r3
 802a9e0:	d0cc      	beq.n	802a97c <_malloc_r+0x20>
 802a9e2:	1a1b      	subs	r3, r3, r0
 802a9e4:	50a3      	str	r3, [r4, r2]
 802a9e6:	e7c9      	b.n	802a97c <_malloc_r+0x20>
 802a9e8:	4622      	mov	r2, r4
 802a9ea:	6864      	ldr	r4, [r4, #4]
 802a9ec:	e7cc      	b.n	802a988 <_malloc_r+0x2c>
 802a9ee:	1cc4      	adds	r4, r0, #3
 802a9f0:	f024 0403 	bic.w	r4, r4, #3
 802a9f4:	42a0      	cmp	r0, r4
 802a9f6:	d0e3      	beq.n	802a9c0 <_malloc_r+0x64>
 802a9f8:	1a21      	subs	r1, r4, r0
 802a9fa:	4630      	mov	r0, r6
 802a9fc:	f000 faf6 	bl	802afec <_sbrk_r>
 802aa00:	3001      	adds	r0, #1
 802aa02:	d1dd      	bne.n	802a9c0 <_malloc_r+0x64>
 802aa04:	e7cf      	b.n	802a9a6 <_malloc_r+0x4a>
 802aa06:	bf00      	nop
 802aa08:	20014c50 	.word	0x20014c50
 802aa0c:	20014c54 	.word	0x20014c54

0802aa10 <__sfputc_r>:
 802aa10:	6893      	ldr	r3, [r2, #8]
 802aa12:	3b01      	subs	r3, #1
 802aa14:	2b00      	cmp	r3, #0
 802aa16:	b410      	push	{r4}
 802aa18:	6093      	str	r3, [r2, #8]
 802aa1a:	da08      	bge.n	802aa2e <__sfputc_r+0x1e>
 802aa1c:	6994      	ldr	r4, [r2, #24]
 802aa1e:	42a3      	cmp	r3, r4
 802aa20:	db01      	blt.n	802aa26 <__sfputc_r+0x16>
 802aa22:	290a      	cmp	r1, #10
 802aa24:	d103      	bne.n	802aa2e <__sfputc_r+0x1e>
 802aa26:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aa2a:	f000 bb33 	b.w	802b094 <__swbuf_r>
 802aa2e:	6813      	ldr	r3, [r2, #0]
 802aa30:	1c58      	adds	r0, r3, #1
 802aa32:	6010      	str	r0, [r2, #0]
 802aa34:	7019      	strb	r1, [r3, #0]
 802aa36:	4608      	mov	r0, r1
 802aa38:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aa3c:	4770      	bx	lr

0802aa3e <__sfputs_r>:
 802aa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aa40:	4606      	mov	r6, r0
 802aa42:	460f      	mov	r7, r1
 802aa44:	4614      	mov	r4, r2
 802aa46:	18d5      	adds	r5, r2, r3
 802aa48:	42ac      	cmp	r4, r5
 802aa4a:	d101      	bne.n	802aa50 <__sfputs_r+0x12>
 802aa4c:	2000      	movs	r0, #0
 802aa4e:	e007      	b.n	802aa60 <__sfputs_r+0x22>
 802aa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa54:	463a      	mov	r2, r7
 802aa56:	4630      	mov	r0, r6
 802aa58:	f7ff ffda 	bl	802aa10 <__sfputc_r>
 802aa5c:	1c43      	adds	r3, r0, #1
 802aa5e:	d1f3      	bne.n	802aa48 <__sfputs_r+0xa>
 802aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802aa64 <_vfiprintf_r>:
 802aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa68:	460d      	mov	r5, r1
 802aa6a:	b09d      	sub	sp, #116	; 0x74
 802aa6c:	4614      	mov	r4, r2
 802aa6e:	4698      	mov	r8, r3
 802aa70:	4606      	mov	r6, r0
 802aa72:	b118      	cbz	r0, 802aa7c <_vfiprintf_r+0x18>
 802aa74:	6983      	ldr	r3, [r0, #24]
 802aa76:	b90b      	cbnz	r3, 802aa7c <_vfiprintf_r+0x18>
 802aa78:	f000 fd48 	bl	802b50c <__sinit>
 802aa7c:	4b89      	ldr	r3, [pc, #548]	; (802aca4 <_vfiprintf_r+0x240>)
 802aa7e:	429d      	cmp	r5, r3
 802aa80:	d11b      	bne.n	802aaba <_vfiprintf_r+0x56>
 802aa82:	6875      	ldr	r5, [r6, #4]
 802aa84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802aa86:	07d9      	lsls	r1, r3, #31
 802aa88:	d405      	bmi.n	802aa96 <_vfiprintf_r+0x32>
 802aa8a:	89ab      	ldrh	r3, [r5, #12]
 802aa8c:	059a      	lsls	r2, r3, #22
 802aa8e:	d402      	bmi.n	802aa96 <_vfiprintf_r+0x32>
 802aa90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802aa92:	f000 fdd9 	bl	802b648 <__retarget_lock_acquire_recursive>
 802aa96:	89ab      	ldrh	r3, [r5, #12]
 802aa98:	071b      	lsls	r3, r3, #28
 802aa9a:	d501      	bpl.n	802aaa0 <_vfiprintf_r+0x3c>
 802aa9c:	692b      	ldr	r3, [r5, #16]
 802aa9e:	b9eb      	cbnz	r3, 802aadc <_vfiprintf_r+0x78>
 802aaa0:	4629      	mov	r1, r5
 802aaa2:	4630      	mov	r0, r6
 802aaa4:	f000 fb48 	bl	802b138 <__swsetup_r>
 802aaa8:	b1c0      	cbz	r0, 802aadc <_vfiprintf_r+0x78>
 802aaaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802aaac:	07dc      	lsls	r4, r3, #31
 802aaae:	d50e      	bpl.n	802aace <_vfiprintf_r+0x6a>
 802aab0:	f04f 30ff 	mov.w	r0, #4294967295
 802aab4:	b01d      	add	sp, #116	; 0x74
 802aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aaba:	4b7b      	ldr	r3, [pc, #492]	; (802aca8 <_vfiprintf_r+0x244>)
 802aabc:	429d      	cmp	r5, r3
 802aabe:	d101      	bne.n	802aac4 <_vfiprintf_r+0x60>
 802aac0:	68b5      	ldr	r5, [r6, #8]
 802aac2:	e7df      	b.n	802aa84 <_vfiprintf_r+0x20>
 802aac4:	4b79      	ldr	r3, [pc, #484]	; (802acac <_vfiprintf_r+0x248>)
 802aac6:	429d      	cmp	r5, r3
 802aac8:	bf08      	it	eq
 802aaca:	68f5      	ldreq	r5, [r6, #12]
 802aacc:	e7da      	b.n	802aa84 <_vfiprintf_r+0x20>
 802aace:	89ab      	ldrh	r3, [r5, #12]
 802aad0:	0598      	lsls	r0, r3, #22
 802aad2:	d4ed      	bmi.n	802aab0 <_vfiprintf_r+0x4c>
 802aad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802aad6:	f000 fdb9 	bl	802b64c <__retarget_lock_release_recursive>
 802aada:	e7e9      	b.n	802aab0 <_vfiprintf_r+0x4c>
 802aadc:	2300      	movs	r3, #0
 802aade:	9309      	str	r3, [sp, #36]	; 0x24
 802aae0:	2320      	movs	r3, #32
 802aae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802aae6:	f8cd 800c 	str.w	r8, [sp, #12]
 802aaea:	2330      	movs	r3, #48	; 0x30
 802aaec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802acb0 <_vfiprintf_r+0x24c>
 802aaf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802aaf4:	f04f 0901 	mov.w	r9, #1
 802aaf8:	4623      	mov	r3, r4
 802aafa:	469a      	mov	sl, r3
 802aafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ab00:	b10a      	cbz	r2, 802ab06 <_vfiprintf_r+0xa2>
 802ab02:	2a25      	cmp	r2, #37	; 0x25
 802ab04:	d1f9      	bne.n	802aafa <_vfiprintf_r+0x96>
 802ab06:	ebba 0b04 	subs.w	fp, sl, r4
 802ab0a:	d00b      	beq.n	802ab24 <_vfiprintf_r+0xc0>
 802ab0c:	465b      	mov	r3, fp
 802ab0e:	4622      	mov	r2, r4
 802ab10:	4629      	mov	r1, r5
 802ab12:	4630      	mov	r0, r6
 802ab14:	f7ff ff93 	bl	802aa3e <__sfputs_r>
 802ab18:	3001      	adds	r0, #1
 802ab1a:	f000 80aa 	beq.w	802ac72 <_vfiprintf_r+0x20e>
 802ab1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ab20:	445a      	add	r2, fp
 802ab22:	9209      	str	r2, [sp, #36]	; 0x24
 802ab24:	f89a 3000 	ldrb.w	r3, [sl]
 802ab28:	2b00      	cmp	r3, #0
 802ab2a:	f000 80a2 	beq.w	802ac72 <_vfiprintf_r+0x20e>
 802ab2e:	2300      	movs	r3, #0
 802ab30:	f04f 32ff 	mov.w	r2, #4294967295
 802ab34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ab38:	f10a 0a01 	add.w	sl, sl, #1
 802ab3c:	9304      	str	r3, [sp, #16]
 802ab3e:	9307      	str	r3, [sp, #28]
 802ab40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ab44:	931a      	str	r3, [sp, #104]	; 0x68
 802ab46:	4654      	mov	r4, sl
 802ab48:	2205      	movs	r2, #5
 802ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ab4e:	4858      	ldr	r0, [pc, #352]	; (802acb0 <_vfiprintf_r+0x24c>)
 802ab50:	f7d5 fb5e 	bl	8000210 <memchr>
 802ab54:	9a04      	ldr	r2, [sp, #16]
 802ab56:	b9d8      	cbnz	r0, 802ab90 <_vfiprintf_r+0x12c>
 802ab58:	06d1      	lsls	r1, r2, #27
 802ab5a:	bf44      	itt	mi
 802ab5c:	2320      	movmi	r3, #32
 802ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ab62:	0713      	lsls	r3, r2, #28
 802ab64:	bf44      	itt	mi
 802ab66:	232b      	movmi	r3, #43	; 0x2b
 802ab68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 802ab70:	2b2a      	cmp	r3, #42	; 0x2a
 802ab72:	d015      	beq.n	802aba0 <_vfiprintf_r+0x13c>
 802ab74:	9a07      	ldr	r2, [sp, #28]
 802ab76:	4654      	mov	r4, sl
 802ab78:	2000      	movs	r0, #0
 802ab7a:	f04f 0c0a 	mov.w	ip, #10
 802ab7e:	4621      	mov	r1, r4
 802ab80:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ab84:	3b30      	subs	r3, #48	; 0x30
 802ab86:	2b09      	cmp	r3, #9
 802ab88:	d94e      	bls.n	802ac28 <_vfiprintf_r+0x1c4>
 802ab8a:	b1b0      	cbz	r0, 802abba <_vfiprintf_r+0x156>
 802ab8c:	9207      	str	r2, [sp, #28]
 802ab8e:	e014      	b.n	802abba <_vfiprintf_r+0x156>
 802ab90:	eba0 0308 	sub.w	r3, r0, r8
 802ab94:	fa09 f303 	lsl.w	r3, r9, r3
 802ab98:	4313      	orrs	r3, r2
 802ab9a:	9304      	str	r3, [sp, #16]
 802ab9c:	46a2      	mov	sl, r4
 802ab9e:	e7d2      	b.n	802ab46 <_vfiprintf_r+0xe2>
 802aba0:	9b03      	ldr	r3, [sp, #12]
 802aba2:	1d19      	adds	r1, r3, #4
 802aba4:	681b      	ldr	r3, [r3, #0]
 802aba6:	9103      	str	r1, [sp, #12]
 802aba8:	2b00      	cmp	r3, #0
 802abaa:	bfbb      	ittet	lt
 802abac:	425b      	neglt	r3, r3
 802abae:	f042 0202 	orrlt.w	r2, r2, #2
 802abb2:	9307      	strge	r3, [sp, #28]
 802abb4:	9307      	strlt	r3, [sp, #28]
 802abb6:	bfb8      	it	lt
 802abb8:	9204      	strlt	r2, [sp, #16]
 802abba:	7823      	ldrb	r3, [r4, #0]
 802abbc:	2b2e      	cmp	r3, #46	; 0x2e
 802abbe:	d10c      	bne.n	802abda <_vfiprintf_r+0x176>
 802abc0:	7863      	ldrb	r3, [r4, #1]
 802abc2:	2b2a      	cmp	r3, #42	; 0x2a
 802abc4:	d135      	bne.n	802ac32 <_vfiprintf_r+0x1ce>
 802abc6:	9b03      	ldr	r3, [sp, #12]
 802abc8:	1d1a      	adds	r2, r3, #4
 802abca:	681b      	ldr	r3, [r3, #0]
 802abcc:	9203      	str	r2, [sp, #12]
 802abce:	2b00      	cmp	r3, #0
 802abd0:	bfb8      	it	lt
 802abd2:	f04f 33ff 	movlt.w	r3, #4294967295
 802abd6:	3402      	adds	r4, #2
 802abd8:	9305      	str	r3, [sp, #20]
 802abda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802acc0 <_vfiprintf_r+0x25c>
 802abde:	7821      	ldrb	r1, [r4, #0]
 802abe0:	2203      	movs	r2, #3
 802abe2:	4650      	mov	r0, sl
 802abe4:	f7d5 fb14 	bl	8000210 <memchr>
 802abe8:	b140      	cbz	r0, 802abfc <_vfiprintf_r+0x198>
 802abea:	2340      	movs	r3, #64	; 0x40
 802abec:	eba0 000a 	sub.w	r0, r0, sl
 802abf0:	fa03 f000 	lsl.w	r0, r3, r0
 802abf4:	9b04      	ldr	r3, [sp, #16]
 802abf6:	4303      	orrs	r3, r0
 802abf8:	3401      	adds	r4, #1
 802abfa:	9304      	str	r3, [sp, #16]
 802abfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ac00:	482c      	ldr	r0, [pc, #176]	; (802acb4 <_vfiprintf_r+0x250>)
 802ac02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ac06:	2206      	movs	r2, #6
 802ac08:	f7d5 fb02 	bl	8000210 <memchr>
 802ac0c:	2800      	cmp	r0, #0
 802ac0e:	d03f      	beq.n	802ac90 <_vfiprintf_r+0x22c>
 802ac10:	4b29      	ldr	r3, [pc, #164]	; (802acb8 <_vfiprintf_r+0x254>)
 802ac12:	bb1b      	cbnz	r3, 802ac5c <_vfiprintf_r+0x1f8>
 802ac14:	9b03      	ldr	r3, [sp, #12]
 802ac16:	3307      	adds	r3, #7
 802ac18:	f023 0307 	bic.w	r3, r3, #7
 802ac1c:	3308      	adds	r3, #8
 802ac1e:	9303      	str	r3, [sp, #12]
 802ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac22:	443b      	add	r3, r7
 802ac24:	9309      	str	r3, [sp, #36]	; 0x24
 802ac26:	e767      	b.n	802aaf8 <_vfiprintf_r+0x94>
 802ac28:	fb0c 3202 	mla	r2, ip, r2, r3
 802ac2c:	460c      	mov	r4, r1
 802ac2e:	2001      	movs	r0, #1
 802ac30:	e7a5      	b.n	802ab7e <_vfiprintf_r+0x11a>
 802ac32:	2300      	movs	r3, #0
 802ac34:	3401      	adds	r4, #1
 802ac36:	9305      	str	r3, [sp, #20]
 802ac38:	4619      	mov	r1, r3
 802ac3a:	f04f 0c0a 	mov.w	ip, #10
 802ac3e:	4620      	mov	r0, r4
 802ac40:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ac44:	3a30      	subs	r2, #48	; 0x30
 802ac46:	2a09      	cmp	r2, #9
 802ac48:	d903      	bls.n	802ac52 <_vfiprintf_r+0x1ee>
 802ac4a:	2b00      	cmp	r3, #0
 802ac4c:	d0c5      	beq.n	802abda <_vfiprintf_r+0x176>
 802ac4e:	9105      	str	r1, [sp, #20]
 802ac50:	e7c3      	b.n	802abda <_vfiprintf_r+0x176>
 802ac52:	fb0c 2101 	mla	r1, ip, r1, r2
 802ac56:	4604      	mov	r4, r0
 802ac58:	2301      	movs	r3, #1
 802ac5a:	e7f0      	b.n	802ac3e <_vfiprintf_r+0x1da>
 802ac5c:	ab03      	add	r3, sp, #12
 802ac5e:	9300      	str	r3, [sp, #0]
 802ac60:	462a      	mov	r2, r5
 802ac62:	4b16      	ldr	r3, [pc, #88]	; (802acbc <_vfiprintf_r+0x258>)
 802ac64:	a904      	add	r1, sp, #16
 802ac66:	4630      	mov	r0, r6
 802ac68:	f3af 8000 	nop.w
 802ac6c:	4607      	mov	r7, r0
 802ac6e:	1c78      	adds	r0, r7, #1
 802ac70:	d1d6      	bne.n	802ac20 <_vfiprintf_r+0x1bc>
 802ac72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ac74:	07d9      	lsls	r1, r3, #31
 802ac76:	d405      	bmi.n	802ac84 <_vfiprintf_r+0x220>
 802ac78:	89ab      	ldrh	r3, [r5, #12]
 802ac7a:	059a      	lsls	r2, r3, #22
 802ac7c:	d402      	bmi.n	802ac84 <_vfiprintf_r+0x220>
 802ac7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ac80:	f000 fce4 	bl	802b64c <__retarget_lock_release_recursive>
 802ac84:	89ab      	ldrh	r3, [r5, #12]
 802ac86:	065b      	lsls	r3, r3, #25
 802ac88:	f53f af12 	bmi.w	802aab0 <_vfiprintf_r+0x4c>
 802ac8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ac8e:	e711      	b.n	802aab4 <_vfiprintf_r+0x50>
 802ac90:	ab03      	add	r3, sp, #12
 802ac92:	9300      	str	r3, [sp, #0]
 802ac94:	462a      	mov	r2, r5
 802ac96:	4b09      	ldr	r3, [pc, #36]	; (802acbc <_vfiprintf_r+0x258>)
 802ac98:	a904      	add	r1, sp, #16
 802ac9a:	4630      	mov	r0, r6
 802ac9c:	f000 f880 	bl	802ada0 <_printf_i>
 802aca0:	e7e4      	b.n	802ac6c <_vfiprintf_r+0x208>
 802aca2:	bf00      	nop
 802aca4:	08030ffc 	.word	0x08030ffc
 802aca8:	0803101c 	.word	0x0803101c
 802acac:	08030fdc 	.word	0x08030fdc
 802acb0:	08030fa4 	.word	0x08030fa4
 802acb4:	08030fae 	.word	0x08030fae
 802acb8:	00000000 	.word	0x00000000
 802acbc:	0802aa3f 	.word	0x0802aa3f
 802acc0:	08030faa 	.word	0x08030faa

0802acc4 <_printf_common>:
 802acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802acc8:	4616      	mov	r6, r2
 802acca:	4699      	mov	r9, r3
 802accc:	688a      	ldr	r2, [r1, #8]
 802acce:	690b      	ldr	r3, [r1, #16]
 802acd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802acd4:	4293      	cmp	r3, r2
 802acd6:	bfb8      	it	lt
 802acd8:	4613      	movlt	r3, r2
 802acda:	6033      	str	r3, [r6, #0]
 802acdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ace0:	4607      	mov	r7, r0
 802ace2:	460c      	mov	r4, r1
 802ace4:	b10a      	cbz	r2, 802acea <_printf_common+0x26>
 802ace6:	3301      	adds	r3, #1
 802ace8:	6033      	str	r3, [r6, #0]
 802acea:	6823      	ldr	r3, [r4, #0]
 802acec:	0699      	lsls	r1, r3, #26
 802acee:	bf42      	ittt	mi
 802acf0:	6833      	ldrmi	r3, [r6, #0]
 802acf2:	3302      	addmi	r3, #2
 802acf4:	6033      	strmi	r3, [r6, #0]
 802acf6:	6825      	ldr	r5, [r4, #0]
 802acf8:	f015 0506 	ands.w	r5, r5, #6
 802acfc:	d106      	bne.n	802ad0c <_printf_common+0x48>
 802acfe:	f104 0a19 	add.w	sl, r4, #25
 802ad02:	68e3      	ldr	r3, [r4, #12]
 802ad04:	6832      	ldr	r2, [r6, #0]
 802ad06:	1a9b      	subs	r3, r3, r2
 802ad08:	42ab      	cmp	r3, r5
 802ad0a:	dc26      	bgt.n	802ad5a <_printf_common+0x96>
 802ad0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802ad10:	1e13      	subs	r3, r2, #0
 802ad12:	6822      	ldr	r2, [r4, #0]
 802ad14:	bf18      	it	ne
 802ad16:	2301      	movne	r3, #1
 802ad18:	0692      	lsls	r2, r2, #26
 802ad1a:	d42b      	bmi.n	802ad74 <_printf_common+0xb0>
 802ad1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802ad20:	4649      	mov	r1, r9
 802ad22:	4638      	mov	r0, r7
 802ad24:	47c0      	blx	r8
 802ad26:	3001      	adds	r0, #1
 802ad28:	d01e      	beq.n	802ad68 <_printf_common+0xa4>
 802ad2a:	6823      	ldr	r3, [r4, #0]
 802ad2c:	68e5      	ldr	r5, [r4, #12]
 802ad2e:	6832      	ldr	r2, [r6, #0]
 802ad30:	f003 0306 	and.w	r3, r3, #6
 802ad34:	2b04      	cmp	r3, #4
 802ad36:	bf08      	it	eq
 802ad38:	1aad      	subeq	r5, r5, r2
 802ad3a:	68a3      	ldr	r3, [r4, #8]
 802ad3c:	6922      	ldr	r2, [r4, #16]
 802ad3e:	bf0c      	ite	eq
 802ad40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ad44:	2500      	movne	r5, #0
 802ad46:	4293      	cmp	r3, r2
 802ad48:	bfc4      	itt	gt
 802ad4a:	1a9b      	subgt	r3, r3, r2
 802ad4c:	18ed      	addgt	r5, r5, r3
 802ad4e:	2600      	movs	r6, #0
 802ad50:	341a      	adds	r4, #26
 802ad52:	42b5      	cmp	r5, r6
 802ad54:	d11a      	bne.n	802ad8c <_printf_common+0xc8>
 802ad56:	2000      	movs	r0, #0
 802ad58:	e008      	b.n	802ad6c <_printf_common+0xa8>
 802ad5a:	2301      	movs	r3, #1
 802ad5c:	4652      	mov	r2, sl
 802ad5e:	4649      	mov	r1, r9
 802ad60:	4638      	mov	r0, r7
 802ad62:	47c0      	blx	r8
 802ad64:	3001      	adds	r0, #1
 802ad66:	d103      	bne.n	802ad70 <_printf_common+0xac>
 802ad68:	f04f 30ff 	mov.w	r0, #4294967295
 802ad6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ad70:	3501      	adds	r5, #1
 802ad72:	e7c6      	b.n	802ad02 <_printf_common+0x3e>
 802ad74:	18e1      	adds	r1, r4, r3
 802ad76:	1c5a      	adds	r2, r3, #1
 802ad78:	2030      	movs	r0, #48	; 0x30
 802ad7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ad7e:	4422      	add	r2, r4
 802ad80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ad84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ad88:	3302      	adds	r3, #2
 802ad8a:	e7c7      	b.n	802ad1c <_printf_common+0x58>
 802ad8c:	2301      	movs	r3, #1
 802ad8e:	4622      	mov	r2, r4
 802ad90:	4649      	mov	r1, r9
 802ad92:	4638      	mov	r0, r7
 802ad94:	47c0      	blx	r8
 802ad96:	3001      	adds	r0, #1
 802ad98:	d0e6      	beq.n	802ad68 <_printf_common+0xa4>
 802ad9a:	3601      	adds	r6, #1
 802ad9c:	e7d9      	b.n	802ad52 <_printf_common+0x8e>
	...

0802ada0 <_printf_i>:
 802ada0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ada4:	460c      	mov	r4, r1
 802ada6:	4691      	mov	r9, r2
 802ada8:	7e27      	ldrb	r7, [r4, #24]
 802adaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 802adac:	2f78      	cmp	r7, #120	; 0x78
 802adae:	4680      	mov	r8, r0
 802adb0:	469a      	mov	sl, r3
 802adb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802adb6:	d807      	bhi.n	802adc8 <_printf_i+0x28>
 802adb8:	2f62      	cmp	r7, #98	; 0x62
 802adba:	d80a      	bhi.n	802add2 <_printf_i+0x32>
 802adbc:	2f00      	cmp	r7, #0
 802adbe:	f000 80d8 	beq.w	802af72 <_printf_i+0x1d2>
 802adc2:	2f58      	cmp	r7, #88	; 0x58
 802adc4:	f000 80a3 	beq.w	802af0e <_printf_i+0x16e>
 802adc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802adcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802add0:	e03a      	b.n	802ae48 <_printf_i+0xa8>
 802add2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802add6:	2b15      	cmp	r3, #21
 802add8:	d8f6      	bhi.n	802adc8 <_printf_i+0x28>
 802adda:	a001      	add	r0, pc, #4	; (adr r0, 802ade0 <_printf_i+0x40>)
 802addc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802ade0:	0802ae39 	.word	0x0802ae39
 802ade4:	0802ae4d 	.word	0x0802ae4d
 802ade8:	0802adc9 	.word	0x0802adc9
 802adec:	0802adc9 	.word	0x0802adc9
 802adf0:	0802adc9 	.word	0x0802adc9
 802adf4:	0802adc9 	.word	0x0802adc9
 802adf8:	0802ae4d 	.word	0x0802ae4d
 802adfc:	0802adc9 	.word	0x0802adc9
 802ae00:	0802adc9 	.word	0x0802adc9
 802ae04:	0802adc9 	.word	0x0802adc9
 802ae08:	0802adc9 	.word	0x0802adc9
 802ae0c:	0802af59 	.word	0x0802af59
 802ae10:	0802ae7d 	.word	0x0802ae7d
 802ae14:	0802af3b 	.word	0x0802af3b
 802ae18:	0802adc9 	.word	0x0802adc9
 802ae1c:	0802adc9 	.word	0x0802adc9
 802ae20:	0802af7b 	.word	0x0802af7b
 802ae24:	0802adc9 	.word	0x0802adc9
 802ae28:	0802ae7d 	.word	0x0802ae7d
 802ae2c:	0802adc9 	.word	0x0802adc9
 802ae30:	0802adc9 	.word	0x0802adc9
 802ae34:	0802af43 	.word	0x0802af43
 802ae38:	680b      	ldr	r3, [r1, #0]
 802ae3a:	1d1a      	adds	r2, r3, #4
 802ae3c:	681b      	ldr	r3, [r3, #0]
 802ae3e:	600a      	str	r2, [r1, #0]
 802ae40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802ae44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ae48:	2301      	movs	r3, #1
 802ae4a:	e0a3      	b.n	802af94 <_printf_i+0x1f4>
 802ae4c:	6825      	ldr	r5, [r4, #0]
 802ae4e:	6808      	ldr	r0, [r1, #0]
 802ae50:	062e      	lsls	r6, r5, #24
 802ae52:	f100 0304 	add.w	r3, r0, #4
 802ae56:	d50a      	bpl.n	802ae6e <_printf_i+0xce>
 802ae58:	6805      	ldr	r5, [r0, #0]
 802ae5a:	600b      	str	r3, [r1, #0]
 802ae5c:	2d00      	cmp	r5, #0
 802ae5e:	da03      	bge.n	802ae68 <_printf_i+0xc8>
 802ae60:	232d      	movs	r3, #45	; 0x2d
 802ae62:	426d      	negs	r5, r5
 802ae64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ae68:	485e      	ldr	r0, [pc, #376]	; (802afe4 <_printf_i+0x244>)
 802ae6a:	230a      	movs	r3, #10
 802ae6c:	e019      	b.n	802aea2 <_printf_i+0x102>
 802ae6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 802ae72:	6805      	ldr	r5, [r0, #0]
 802ae74:	600b      	str	r3, [r1, #0]
 802ae76:	bf18      	it	ne
 802ae78:	b22d      	sxthne	r5, r5
 802ae7a:	e7ef      	b.n	802ae5c <_printf_i+0xbc>
 802ae7c:	680b      	ldr	r3, [r1, #0]
 802ae7e:	6825      	ldr	r5, [r4, #0]
 802ae80:	1d18      	adds	r0, r3, #4
 802ae82:	6008      	str	r0, [r1, #0]
 802ae84:	0628      	lsls	r0, r5, #24
 802ae86:	d501      	bpl.n	802ae8c <_printf_i+0xec>
 802ae88:	681d      	ldr	r5, [r3, #0]
 802ae8a:	e002      	b.n	802ae92 <_printf_i+0xf2>
 802ae8c:	0669      	lsls	r1, r5, #25
 802ae8e:	d5fb      	bpl.n	802ae88 <_printf_i+0xe8>
 802ae90:	881d      	ldrh	r5, [r3, #0]
 802ae92:	4854      	ldr	r0, [pc, #336]	; (802afe4 <_printf_i+0x244>)
 802ae94:	2f6f      	cmp	r7, #111	; 0x6f
 802ae96:	bf0c      	ite	eq
 802ae98:	2308      	moveq	r3, #8
 802ae9a:	230a      	movne	r3, #10
 802ae9c:	2100      	movs	r1, #0
 802ae9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802aea2:	6866      	ldr	r6, [r4, #4]
 802aea4:	60a6      	str	r6, [r4, #8]
 802aea6:	2e00      	cmp	r6, #0
 802aea8:	bfa2      	ittt	ge
 802aeaa:	6821      	ldrge	r1, [r4, #0]
 802aeac:	f021 0104 	bicge.w	r1, r1, #4
 802aeb0:	6021      	strge	r1, [r4, #0]
 802aeb2:	b90d      	cbnz	r5, 802aeb8 <_printf_i+0x118>
 802aeb4:	2e00      	cmp	r6, #0
 802aeb6:	d04d      	beq.n	802af54 <_printf_i+0x1b4>
 802aeb8:	4616      	mov	r6, r2
 802aeba:	fbb5 f1f3 	udiv	r1, r5, r3
 802aebe:	fb03 5711 	mls	r7, r3, r1, r5
 802aec2:	5dc7      	ldrb	r7, [r0, r7]
 802aec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802aec8:	462f      	mov	r7, r5
 802aeca:	42bb      	cmp	r3, r7
 802aecc:	460d      	mov	r5, r1
 802aece:	d9f4      	bls.n	802aeba <_printf_i+0x11a>
 802aed0:	2b08      	cmp	r3, #8
 802aed2:	d10b      	bne.n	802aeec <_printf_i+0x14c>
 802aed4:	6823      	ldr	r3, [r4, #0]
 802aed6:	07df      	lsls	r7, r3, #31
 802aed8:	d508      	bpl.n	802aeec <_printf_i+0x14c>
 802aeda:	6923      	ldr	r3, [r4, #16]
 802aedc:	6861      	ldr	r1, [r4, #4]
 802aede:	4299      	cmp	r1, r3
 802aee0:	bfde      	ittt	le
 802aee2:	2330      	movle	r3, #48	; 0x30
 802aee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 802aee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 802aeec:	1b92      	subs	r2, r2, r6
 802aeee:	6122      	str	r2, [r4, #16]
 802aef0:	f8cd a000 	str.w	sl, [sp]
 802aef4:	464b      	mov	r3, r9
 802aef6:	aa03      	add	r2, sp, #12
 802aef8:	4621      	mov	r1, r4
 802aefa:	4640      	mov	r0, r8
 802aefc:	f7ff fee2 	bl	802acc4 <_printf_common>
 802af00:	3001      	adds	r0, #1
 802af02:	d14c      	bne.n	802af9e <_printf_i+0x1fe>
 802af04:	f04f 30ff 	mov.w	r0, #4294967295
 802af08:	b004      	add	sp, #16
 802af0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802af0e:	4835      	ldr	r0, [pc, #212]	; (802afe4 <_printf_i+0x244>)
 802af10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802af14:	6823      	ldr	r3, [r4, #0]
 802af16:	680e      	ldr	r6, [r1, #0]
 802af18:	061f      	lsls	r7, r3, #24
 802af1a:	f856 5b04 	ldr.w	r5, [r6], #4
 802af1e:	600e      	str	r6, [r1, #0]
 802af20:	d514      	bpl.n	802af4c <_printf_i+0x1ac>
 802af22:	07d9      	lsls	r1, r3, #31
 802af24:	bf44      	itt	mi
 802af26:	f043 0320 	orrmi.w	r3, r3, #32
 802af2a:	6023      	strmi	r3, [r4, #0]
 802af2c:	b91d      	cbnz	r5, 802af36 <_printf_i+0x196>
 802af2e:	6823      	ldr	r3, [r4, #0]
 802af30:	f023 0320 	bic.w	r3, r3, #32
 802af34:	6023      	str	r3, [r4, #0]
 802af36:	2310      	movs	r3, #16
 802af38:	e7b0      	b.n	802ae9c <_printf_i+0xfc>
 802af3a:	6823      	ldr	r3, [r4, #0]
 802af3c:	f043 0320 	orr.w	r3, r3, #32
 802af40:	6023      	str	r3, [r4, #0]
 802af42:	2378      	movs	r3, #120	; 0x78
 802af44:	4828      	ldr	r0, [pc, #160]	; (802afe8 <_printf_i+0x248>)
 802af46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802af4a:	e7e3      	b.n	802af14 <_printf_i+0x174>
 802af4c:	065e      	lsls	r6, r3, #25
 802af4e:	bf48      	it	mi
 802af50:	b2ad      	uxthmi	r5, r5
 802af52:	e7e6      	b.n	802af22 <_printf_i+0x182>
 802af54:	4616      	mov	r6, r2
 802af56:	e7bb      	b.n	802aed0 <_printf_i+0x130>
 802af58:	680b      	ldr	r3, [r1, #0]
 802af5a:	6826      	ldr	r6, [r4, #0]
 802af5c:	6960      	ldr	r0, [r4, #20]
 802af5e:	1d1d      	adds	r5, r3, #4
 802af60:	600d      	str	r5, [r1, #0]
 802af62:	0635      	lsls	r5, r6, #24
 802af64:	681b      	ldr	r3, [r3, #0]
 802af66:	d501      	bpl.n	802af6c <_printf_i+0x1cc>
 802af68:	6018      	str	r0, [r3, #0]
 802af6a:	e002      	b.n	802af72 <_printf_i+0x1d2>
 802af6c:	0671      	lsls	r1, r6, #25
 802af6e:	d5fb      	bpl.n	802af68 <_printf_i+0x1c8>
 802af70:	8018      	strh	r0, [r3, #0]
 802af72:	2300      	movs	r3, #0
 802af74:	6123      	str	r3, [r4, #16]
 802af76:	4616      	mov	r6, r2
 802af78:	e7ba      	b.n	802aef0 <_printf_i+0x150>
 802af7a:	680b      	ldr	r3, [r1, #0]
 802af7c:	1d1a      	adds	r2, r3, #4
 802af7e:	600a      	str	r2, [r1, #0]
 802af80:	681e      	ldr	r6, [r3, #0]
 802af82:	6862      	ldr	r2, [r4, #4]
 802af84:	2100      	movs	r1, #0
 802af86:	4630      	mov	r0, r6
 802af88:	f7d5 f942 	bl	8000210 <memchr>
 802af8c:	b108      	cbz	r0, 802af92 <_printf_i+0x1f2>
 802af8e:	1b80      	subs	r0, r0, r6
 802af90:	6060      	str	r0, [r4, #4]
 802af92:	6863      	ldr	r3, [r4, #4]
 802af94:	6123      	str	r3, [r4, #16]
 802af96:	2300      	movs	r3, #0
 802af98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802af9c:	e7a8      	b.n	802aef0 <_printf_i+0x150>
 802af9e:	6923      	ldr	r3, [r4, #16]
 802afa0:	4632      	mov	r2, r6
 802afa2:	4649      	mov	r1, r9
 802afa4:	4640      	mov	r0, r8
 802afa6:	47d0      	blx	sl
 802afa8:	3001      	adds	r0, #1
 802afaa:	d0ab      	beq.n	802af04 <_printf_i+0x164>
 802afac:	6823      	ldr	r3, [r4, #0]
 802afae:	079b      	lsls	r3, r3, #30
 802afb0:	d413      	bmi.n	802afda <_printf_i+0x23a>
 802afb2:	68e0      	ldr	r0, [r4, #12]
 802afb4:	9b03      	ldr	r3, [sp, #12]
 802afb6:	4298      	cmp	r0, r3
 802afb8:	bfb8      	it	lt
 802afba:	4618      	movlt	r0, r3
 802afbc:	e7a4      	b.n	802af08 <_printf_i+0x168>
 802afbe:	2301      	movs	r3, #1
 802afc0:	4632      	mov	r2, r6
 802afc2:	4649      	mov	r1, r9
 802afc4:	4640      	mov	r0, r8
 802afc6:	47d0      	blx	sl
 802afc8:	3001      	adds	r0, #1
 802afca:	d09b      	beq.n	802af04 <_printf_i+0x164>
 802afcc:	3501      	adds	r5, #1
 802afce:	68e3      	ldr	r3, [r4, #12]
 802afd0:	9903      	ldr	r1, [sp, #12]
 802afd2:	1a5b      	subs	r3, r3, r1
 802afd4:	42ab      	cmp	r3, r5
 802afd6:	dcf2      	bgt.n	802afbe <_printf_i+0x21e>
 802afd8:	e7eb      	b.n	802afb2 <_printf_i+0x212>
 802afda:	2500      	movs	r5, #0
 802afdc:	f104 0619 	add.w	r6, r4, #25
 802afe0:	e7f5      	b.n	802afce <_printf_i+0x22e>
 802afe2:	bf00      	nop
 802afe4:	08030fb5 	.word	0x08030fb5
 802afe8:	08030fc6 	.word	0x08030fc6

0802afec <_sbrk_r>:
 802afec:	b538      	push	{r3, r4, r5, lr}
 802afee:	4d06      	ldr	r5, [pc, #24]	; (802b008 <_sbrk_r+0x1c>)
 802aff0:	2300      	movs	r3, #0
 802aff2:	4604      	mov	r4, r0
 802aff4:	4608      	mov	r0, r1
 802aff6:	602b      	str	r3, [r5, #0]
 802aff8:	f7d6 fbc4 	bl	8001784 <_sbrk>
 802affc:	1c43      	adds	r3, r0, #1
 802affe:	d102      	bne.n	802b006 <_sbrk_r+0x1a>
 802b000:	682b      	ldr	r3, [r5, #0]
 802b002:	b103      	cbz	r3, 802b006 <_sbrk_r+0x1a>
 802b004:	6023      	str	r3, [r4, #0]
 802b006:	bd38      	pop	{r3, r4, r5, pc}
 802b008:	200150f0 	.word	0x200150f0

0802b00c <_raise_r>:
 802b00c:	291f      	cmp	r1, #31
 802b00e:	b538      	push	{r3, r4, r5, lr}
 802b010:	4604      	mov	r4, r0
 802b012:	460d      	mov	r5, r1
 802b014:	d904      	bls.n	802b020 <_raise_r+0x14>
 802b016:	2316      	movs	r3, #22
 802b018:	6003      	str	r3, [r0, #0]
 802b01a:	f04f 30ff 	mov.w	r0, #4294967295
 802b01e:	bd38      	pop	{r3, r4, r5, pc}
 802b020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b022:	b112      	cbz	r2, 802b02a <_raise_r+0x1e>
 802b024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b028:	b94b      	cbnz	r3, 802b03e <_raise_r+0x32>
 802b02a:	4620      	mov	r0, r4
 802b02c:	f000 f830 	bl	802b090 <_getpid_r>
 802b030:	462a      	mov	r2, r5
 802b032:	4601      	mov	r1, r0
 802b034:	4620      	mov	r0, r4
 802b036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b03a:	f000 b817 	b.w	802b06c <_kill_r>
 802b03e:	2b01      	cmp	r3, #1
 802b040:	d00a      	beq.n	802b058 <_raise_r+0x4c>
 802b042:	1c59      	adds	r1, r3, #1
 802b044:	d103      	bne.n	802b04e <_raise_r+0x42>
 802b046:	2316      	movs	r3, #22
 802b048:	6003      	str	r3, [r0, #0]
 802b04a:	2001      	movs	r0, #1
 802b04c:	e7e7      	b.n	802b01e <_raise_r+0x12>
 802b04e:	2400      	movs	r4, #0
 802b050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b054:	4628      	mov	r0, r5
 802b056:	4798      	blx	r3
 802b058:	2000      	movs	r0, #0
 802b05a:	e7e0      	b.n	802b01e <_raise_r+0x12>

0802b05c <raise>:
 802b05c:	4b02      	ldr	r3, [pc, #8]	; (802b068 <raise+0xc>)
 802b05e:	4601      	mov	r1, r0
 802b060:	6818      	ldr	r0, [r3, #0]
 802b062:	f7ff bfd3 	b.w	802b00c <_raise_r>
 802b066:	bf00      	nop
 802b068:	20000094 	.word	0x20000094

0802b06c <_kill_r>:
 802b06c:	b538      	push	{r3, r4, r5, lr}
 802b06e:	4d07      	ldr	r5, [pc, #28]	; (802b08c <_kill_r+0x20>)
 802b070:	2300      	movs	r3, #0
 802b072:	4604      	mov	r4, r0
 802b074:	4608      	mov	r0, r1
 802b076:	4611      	mov	r1, r2
 802b078:	602b      	str	r3, [r5, #0]
 802b07a:	f7d6 fb17 	bl	80016ac <_kill>
 802b07e:	1c43      	adds	r3, r0, #1
 802b080:	d102      	bne.n	802b088 <_kill_r+0x1c>
 802b082:	682b      	ldr	r3, [r5, #0]
 802b084:	b103      	cbz	r3, 802b088 <_kill_r+0x1c>
 802b086:	6023      	str	r3, [r4, #0]
 802b088:	bd38      	pop	{r3, r4, r5, pc}
 802b08a:	bf00      	nop
 802b08c:	200150f0 	.word	0x200150f0

0802b090 <_getpid_r>:
 802b090:	f7d6 bb04 	b.w	800169c <_getpid>

0802b094 <__swbuf_r>:
 802b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b096:	460e      	mov	r6, r1
 802b098:	4614      	mov	r4, r2
 802b09a:	4605      	mov	r5, r0
 802b09c:	b118      	cbz	r0, 802b0a6 <__swbuf_r+0x12>
 802b09e:	6983      	ldr	r3, [r0, #24]
 802b0a0:	b90b      	cbnz	r3, 802b0a6 <__swbuf_r+0x12>
 802b0a2:	f000 fa33 	bl	802b50c <__sinit>
 802b0a6:	4b21      	ldr	r3, [pc, #132]	; (802b12c <__swbuf_r+0x98>)
 802b0a8:	429c      	cmp	r4, r3
 802b0aa:	d12b      	bne.n	802b104 <__swbuf_r+0x70>
 802b0ac:	686c      	ldr	r4, [r5, #4]
 802b0ae:	69a3      	ldr	r3, [r4, #24]
 802b0b0:	60a3      	str	r3, [r4, #8]
 802b0b2:	89a3      	ldrh	r3, [r4, #12]
 802b0b4:	071a      	lsls	r2, r3, #28
 802b0b6:	d52f      	bpl.n	802b118 <__swbuf_r+0x84>
 802b0b8:	6923      	ldr	r3, [r4, #16]
 802b0ba:	b36b      	cbz	r3, 802b118 <__swbuf_r+0x84>
 802b0bc:	6923      	ldr	r3, [r4, #16]
 802b0be:	6820      	ldr	r0, [r4, #0]
 802b0c0:	1ac0      	subs	r0, r0, r3
 802b0c2:	6963      	ldr	r3, [r4, #20]
 802b0c4:	b2f6      	uxtb	r6, r6
 802b0c6:	4283      	cmp	r3, r0
 802b0c8:	4637      	mov	r7, r6
 802b0ca:	dc04      	bgt.n	802b0d6 <__swbuf_r+0x42>
 802b0cc:	4621      	mov	r1, r4
 802b0ce:	4628      	mov	r0, r5
 802b0d0:	f000 f988 	bl	802b3e4 <_fflush_r>
 802b0d4:	bb30      	cbnz	r0, 802b124 <__swbuf_r+0x90>
 802b0d6:	68a3      	ldr	r3, [r4, #8]
 802b0d8:	3b01      	subs	r3, #1
 802b0da:	60a3      	str	r3, [r4, #8]
 802b0dc:	6823      	ldr	r3, [r4, #0]
 802b0de:	1c5a      	adds	r2, r3, #1
 802b0e0:	6022      	str	r2, [r4, #0]
 802b0e2:	701e      	strb	r6, [r3, #0]
 802b0e4:	6963      	ldr	r3, [r4, #20]
 802b0e6:	3001      	adds	r0, #1
 802b0e8:	4283      	cmp	r3, r0
 802b0ea:	d004      	beq.n	802b0f6 <__swbuf_r+0x62>
 802b0ec:	89a3      	ldrh	r3, [r4, #12]
 802b0ee:	07db      	lsls	r3, r3, #31
 802b0f0:	d506      	bpl.n	802b100 <__swbuf_r+0x6c>
 802b0f2:	2e0a      	cmp	r6, #10
 802b0f4:	d104      	bne.n	802b100 <__swbuf_r+0x6c>
 802b0f6:	4621      	mov	r1, r4
 802b0f8:	4628      	mov	r0, r5
 802b0fa:	f000 f973 	bl	802b3e4 <_fflush_r>
 802b0fe:	b988      	cbnz	r0, 802b124 <__swbuf_r+0x90>
 802b100:	4638      	mov	r0, r7
 802b102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b104:	4b0a      	ldr	r3, [pc, #40]	; (802b130 <__swbuf_r+0x9c>)
 802b106:	429c      	cmp	r4, r3
 802b108:	d101      	bne.n	802b10e <__swbuf_r+0x7a>
 802b10a:	68ac      	ldr	r4, [r5, #8]
 802b10c:	e7cf      	b.n	802b0ae <__swbuf_r+0x1a>
 802b10e:	4b09      	ldr	r3, [pc, #36]	; (802b134 <__swbuf_r+0xa0>)
 802b110:	429c      	cmp	r4, r3
 802b112:	bf08      	it	eq
 802b114:	68ec      	ldreq	r4, [r5, #12]
 802b116:	e7ca      	b.n	802b0ae <__swbuf_r+0x1a>
 802b118:	4621      	mov	r1, r4
 802b11a:	4628      	mov	r0, r5
 802b11c:	f000 f80c 	bl	802b138 <__swsetup_r>
 802b120:	2800      	cmp	r0, #0
 802b122:	d0cb      	beq.n	802b0bc <__swbuf_r+0x28>
 802b124:	f04f 37ff 	mov.w	r7, #4294967295
 802b128:	e7ea      	b.n	802b100 <__swbuf_r+0x6c>
 802b12a:	bf00      	nop
 802b12c:	08030ffc 	.word	0x08030ffc
 802b130:	0803101c 	.word	0x0803101c
 802b134:	08030fdc 	.word	0x08030fdc

0802b138 <__swsetup_r>:
 802b138:	4b32      	ldr	r3, [pc, #200]	; (802b204 <__swsetup_r+0xcc>)
 802b13a:	b570      	push	{r4, r5, r6, lr}
 802b13c:	681d      	ldr	r5, [r3, #0]
 802b13e:	4606      	mov	r6, r0
 802b140:	460c      	mov	r4, r1
 802b142:	b125      	cbz	r5, 802b14e <__swsetup_r+0x16>
 802b144:	69ab      	ldr	r3, [r5, #24]
 802b146:	b913      	cbnz	r3, 802b14e <__swsetup_r+0x16>
 802b148:	4628      	mov	r0, r5
 802b14a:	f000 f9df 	bl	802b50c <__sinit>
 802b14e:	4b2e      	ldr	r3, [pc, #184]	; (802b208 <__swsetup_r+0xd0>)
 802b150:	429c      	cmp	r4, r3
 802b152:	d10f      	bne.n	802b174 <__swsetup_r+0x3c>
 802b154:	686c      	ldr	r4, [r5, #4]
 802b156:	89a3      	ldrh	r3, [r4, #12]
 802b158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b15c:	0719      	lsls	r1, r3, #28
 802b15e:	d42c      	bmi.n	802b1ba <__swsetup_r+0x82>
 802b160:	06dd      	lsls	r5, r3, #27
 802b162:	d411      	bmi.n	802b188 <__swsetup_r+0x50>
 802b164:	2309      	movs	r3, #9
 802b166:	6033      	str	r3, [r6, #0]
 802b168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b16c:	81a3      	strh	r3, [r4, #12]
 802b16e:	f04f 30ff 	mov.w	r0, #4294967295
 802b172:	e03e      	b.n	802b1f2 <__swsetup_r+0xba>
 802b174:	4b25      	ldr	r3, [pc, #148]	; (802b20c <__swsetup_r+0xd4>)
 802b176:	429c      	cmp	r4, r3
 802b178:	d101      	bne.n	802b17e <__swsetup_r+0x46>
 802b17a:	68ac      	ldr	r4, [r5, #8]
 802b17c:	e7eb      	b.n	802b156 <__swsetup_r+0x1e>
 802b17e:	4b24      	ldr	r3, [pc, #144]	; (802b210 <__swsetup_r+0xd8>)
 802b180:	429c      	cmp	r4, r3
 802b182:	bf08      	it	eq
 802b184:	68ec      	ldreq	r4, [r5, #12]
 802b186:	e7e6      	b.n	802b156 <__swsetup_r+0x1e>
 802b188:	0758      	lsls	r0, r3, #29
 802b18a:	d512      	bpl.n	802b1b2 <__swsetup_r+0x7a>
 802b18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b18e:	b141      	cbz	r1, 802b1a2 <__swsetup_r+0x6a>
 802b190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b194:	4299      	cmp	r1, r3
 802b196:	d002      	beq.n	802b19e <__swsetup_r+0x66>
 802b198:	4630      	mov	r0, r6
 802b19a:	f7ff fb8f 	bl	802a8bc <_free_r>
 802b19e:	2300      	movs	r3, #0
 802b1a0:	6363      	str	r3, [r4, #52]	; 0x34
 802b1a2:	89a3      	ldrh	r3, [r4, #12]
 802b1a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b1a8:	81a3      	strh	r3, [r4, #12]
 802b1aa:	2300      	movs	r3, #0
 802b1ac:	6063      	str	r3, [r4, #4]
 802b1ae:	6923      	ldr	r3, [r4, #16]
 802b1b0:	6023      	str	r3, [r4, #0]
 802b1b2:	89a3      	ldrh	r3, [r4, #12]
 802b1b4:	f043 0308 	orr.w	r3, r3, #8
 802b1b8:	81a3      	strh	r3, [r4, #12]
 802b1ba:	6923      	ldr	r3, [r4, #16]
 802b1bc:	b94b      	cbnz	r3, 802b1d2 <__swsetup_r+0x9a>
 802b1be:	89a3      	ldrh	r3, [r4, #12]
 802b1c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b1c8:	d003      	beq.n	802b1d2 <__swsetup_r+0x9a>
 802b1ca:	4621      	mov	r1, r4
 802b1cc:	4630      	mov	r0, r6
 802b1ce:	f000 fa63 	bl	802b698 <__smakebuf_r>
 802b1d2:	89a0      	ldrh	r0, [r4, #12]
 802b1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b1d8:	f010 0301 	ands.w	r3, r0, #1
 802b1dc:	d00a      	beq.n	802b1f4 <__swsetup_r+0xbc>
 802b1de:	2300      	movs	r3, #0
 802b1e0:	60a3      	str	r3, [r4, #8]
 802b1e2:	6963      	ldr	r3, [r4, #20]
 802b1e4:	425b      	negs	r3, r3
 802b1e6:	61a3      	str	r3, [r4, #24]
 802b1e8:	6923      	ldr	r3, [r4, #16]
 802b1ea:	b943      	cbnz	r3, 802b1fe <__swsetup_r+0xc6>
 802b1ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b1f0:	d1ba      	bne.n	802b168 <__swsetup_r+0x30>
 802b1f2:	bd70      	pop	{r4, r5, r6, pc}
 802b1f4:	0781      	lsls	r1, r0, #30
 802b1f6:	bf58      	it	pl
 802b1f8:	6963      	ldrpl	r3, [r4, #20]
 802b1fa:	60a3      	str	r3, [r4, #8]
 802b1fc:	e7f4      	b.n	802b1e8 <__swsetup_r+0xb0>
 802b1fe:	2000      	movs	r0, #0
 802b200:	e7f7      	b.n	802b1f2 <__swsetup_r+0xba>
 802b202:	bf00      	nop
 802b204:	20000094 	.word	0x20000094
 802b208:	08030ffc 	.word	0x08030ffc
 802b20c:	0803101c 	.word	0x0803101c
 802b210:	08030fdc 	.word	0x08030fdc

0802b214 <__register_exitproc>:
 802b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b218:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b2d4 <__register_exitproc+0xc0>
 802b21c:	4606      	mov	r6, r0
 802b21e:	f8d8 0000 	ldr.w	r0, [r8]
 802b222:	461f      	mov	r7, r3
 802b224:	460d      	mov	r5, r1
 802b226:	4691      	mov	r9, r2
 802b228:	f000 fa0e 	bl	802b648 <__retarget_lock_acquire_recursive>
 802b22c:	4b25      	ldr	r3, [pc, #148]	; (802b2c4 <__register_exitproc+0xb0>)
 802b22e:	681c      	ldr	r4, [r3, #0]
 802b230:	b934      	cbnz	r4, 802b240 <__register_exitproc+0x2c>
 802b232:	4c25      	ldr	r4, [pc, #148]	; (802b2c8 <__register_exitproc+0xb4>)
 802b234:	601c      	str	r4, [r3, #0]
 802b236:	4b25      	ldr	r3, [pc, #148]	; (802b2cc <__register_exitproc+0xb8>)
 802b238:	b113      	cbz	r3, 802b240 <__register_exitproc+0x2c>
 802b23a:	681b      	ldr	r3, [r3, #0]
 802b23c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b240:	6863      	ldr	r3, [r4, #4]
 802b242:	2b1f      	cmp	r3, #31
 802b244:	dd07      	ble.n	802b256 <__register_exitproc+0x42>
 802b246:	f8d8 0000 	ldr.w	r0, [r8]
 802b24a:	f000 f9ff 	bl	802b64c <__retarget_lock_release_recursive>
 802b24e:	f04f 30ff 	mov.w	r0, #4294967295
 802b252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b256:	b34e      	cbz	r6, 802b2ac <__register_exitproc+0x98>
 802b258:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b25c:	b988      	cbnz	r0, 802b282 <__register_exitproc+0x6e>
 802b25e:	4b1c      	ldr	r3, [pc, #112]	; (802b2d0 <__register_exitproc+0xbc>)
 802b260:	b923      	cbnz	r3, 802b26c <__register_exitproc+0x58>
 802b262:	f8d8 0000 	ldr.w	r0, [r8]
 802b266:	f000 f9f0 	bl	802b64a <__retarget_lock_release>
 802b26a:	e7f0      	b.n	802b24e <__register_exitproc+0x3a>
 802b26c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b270:	f7ff fafe 	bl	802a870 <malloc>
 802b274:	2800      	cmp	r0, #0
 802b276:	d0f4      	beq.n	802b262 <__register_exitproc+0x4e>
 802b278:	2300      	movs	r3, #0
 802b27a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b27e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b282:	6863      	ldr	r3, [r4, #4]
 802b284:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b288:	2201      	movs	r2, #1
 802b28a:	409a      	lsls	r2, r3
 802b28c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b290:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b294:	4313      	orrs	r3, r2
 802b296:	2e02      	cmp	r6, #2
 802b298:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b29c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b2a0:	bf02      	ittt	eq
 802b2a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b2a6:	431a      	orreq	r2, r3
 802b2a8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802b2ac:	6863      	ldr	r3, [r4, #4]
 802b2ae:	f8d8 0000 	ldr.w	r0, [r8]
 802b2b2:	1c5a      	adds	r2, r3, #1
 802b2b4:	3302      	adds	r3, #2
 802b2b6:	6062      	str	r2, [r4, #4]
 802b2b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b2bc:	f000 f9c6 	bl	802b64c <__retarget_lock_release_recursive>
 802b2c0:	2000      	movs	r0, #0
 802b2c2:	e7c6      	b.n	802b252 <__register_exitproc+0x3e>
 802b2c4:	20014dec 	.word	0x20014dec
 802b2c8:	20014d60 	.word	0x20014d60
 802b2cc:	08030fd8 	.word	0x08030fd8
 802b2d0:	0802a871 	.word	0x0802a871
 802b2d4:	200000f8 	.word	0x200000f8

0802b2d8 <__sflush_r>:
 802b2d8:	898a      	ldrh	r2, [r1, #12]
 802b2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b2de:	4605      	mov	r5, r0
 802b2e0:	0710      	lsls	r0, r2, #28
 802b2e2:	460c      	mov	r4, r1
 802b2e4:	d458      	bmi.n	802b398 <__sflush_r+0xc0>
 802b2e6:	684b      	ldr	r3, [r1, #4]
 802b2e8:	2b00      	cmp	r3, #0
 802b2ea:	dc05      	bgt.n	802b2f8 <__sflush_r+0x20>
 802b2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b2ee:	2b00      	cmp	r3, #0
 802b2f0:	dc02      	bgt.n	802b2f8 <__sflush_r+0x20>
 802b2f2:	2000      	movs	r0, #0
 802b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b2fa:	2e00      	cmp	r6, #0
 802b2fc:	d0f9      	beq.n	802b2f2 <__sflush_r+0x1a>
 802b2fe:	2300      	movs	r3, #0
 802b300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b304:	682f      	ldr	r7, [r5, #0]
 802b306:	602b      	str	r3, [r5, #0]
 802b308:	d032      	beq.n	802b370 <__sflush_r+0x98>
 802b30a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b30c:	89a3      	ldrh	r3, [r4, #12]
 802b30e:	075a      	lsls	r2, r3, #29
 802b310:	d505      	bpl.n	802b31e <__sflush_r+0x46>
 802b312:	6863      	ldr	r3, [r4, #4]
 802b314:	1ac0      	subs	r0, r0, r3
 802b316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b318:	b10b      	cbz	r3, 802b31e <__sflush_r+0x46>
 802b31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b31c:	1ac0      	subs	r0, r0, r3
 802b31e:	2300      	movs	r3, #0
 802b320:	4602      	mov	r2, r0
 802b322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b324:	6a21      	ldr	r1, [r4, #32]
 802b326:	4628      	mov	r0, r5
 802b328:	47b0      	blx	r6
 802b32a:	1c43      	adds	r3, r0, #1
 802b32c:	89a3      	ldrh	r3, [r4, #12]
 802b32e:	d106      	bne.n	802b33e <__sflush_r+0x66>
 802b330:	6829      	ldr	r1, [r5, #0]
 802b332:	291d      	cmp	r1, #29
 802b334:	d82c      	bhi.n	802b390 <__sflush_r+0xb8>
 802b336:	4a2a      	ldr	r2, [pc, #168]	; (802b3e0 <__sflush_r+0x108>)
 802b338:	40ca      	lsrs	r2, r1
 802b33a:	07d6      	lsls	r6, r2, #31
 802b33c:	d528      	bpl.n	802b390 <__sflush_r+0xb8>
 802b33e:	2200      	movs	r2, #0
 802b340:	6062      	str	r2, [r4, #4]
 802b342:	04d9      	lsls	r1, r3, #19
 802b344:	6922      	ldr	r2, [r4, #16]
 802b346:	6022      	str	r2, [r4, #0]
 802b348:	d504      	bpl.n	802b354 <__sflush_r+0x7c>
 802b34a:	1c42      	adds	r2, r0, #1
 802b34c:	d101      	bne.n	802b352 <__sflush_r+0x7a>
 802b34e:	682b      	ldr	r3, [r5, #0]
 802b350:	b903      	cbnz	r3, 802b354 <__sflush_r+0x7c>
 802b352:	6560      	str	r0, [r4, #84]	; 0x54
 802b354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b356:	602f      	str	r7, [r5, #0]
 802b358:	2900      	cmp	r1, #0
 802b35a:	d0ca      	beq.n	802b2f2 <__sflush_r+0x1a>
 802b35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b360:	4299      	cmp	r1, r3
 802b362:	d002      	beq.n	802b36a <__sflush_r+0x92>
 802b364:	4628      	mov	r0, r5
 802b366:	f7ff faa9 	bl	802a8bc <_free_r>
 802b36a:	2000      	movs	r0, #0
 802b36c:	6360      	str	r0, [r4, #52]	; 0x34
 802b36e:	e7c1      	b.n	802b2f4 <__sflush_r+0x1c>
 802b370:	6a21      	ldr	r1, [r4, #32]
 802b372:	2301      	movs	r3, #1
 802b374:	4628      	mov	r0, r5
 802b376:	47b0      	blx	r6
 802b378:	1c41      	adds	r1, r0, #1
 802b37a:	d1c7      	bne.n	802b30c <__sflush_r+0x34>
 802b37c:	682b      	ldr	r3, [r5, #0]
 802b37e:	2b00      	cmp	r3, #0
 802b380:	d0c4      	beq.n	802b30c <__sflush_r+0x34>
 802b382:	2b1d      	cmp	r3, #29
 802b384:	d001      	beq.n	802b38a <__sflush_r+0xb2>
 802b386:	2b16      	cmp	r3, #22
 802b388:	d101      	bne.n	802b38e <__sflush_r+0xb6>
 802b38a:	602f      	str	r7, [r5, #0]
 802b38c:	e7b1      	b.n	802b2f2 <__sflush_r+0x1a>
 802b38e:	89a3      	ldrh	r3, [r4, #12]
 802b390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b394:	81a3      	strh	r3, [r4, #12]
 802b396:	e7ad      	b.n	802b2f4 <__sflush_r+0x1c>
 802b398:	690f      	ldr	r7, [r1, #16]
 802b39a:	2f00      	cmp	r7, #0
 802b39c:	d0a9      	beq.n	802b2f2 <__sflush_r+0x1a>
 802b39e:	0793      	lsls	r3, r2, #30
 802b3a0:	680e      	ldr	r6, [r1, #0]
 802b3a2:	bf08      	it	eq
 802b3a4:	694b      	ldreq	r3, [r1, #20]
 802b3a6:	600f      	str	r7, [r1, #0]
 802b3a8:	bf18      	it	ne
 802b3aa:	2300      	movne	r3, #0
 802b3ac:	eba6 0807 	sub.w	r8, r6, r7
 802b3b0:	608b      	str	r3, [r1, #8]
 802b3b2:	f1b8 0f00 	cmp.w	r8, #0
 802b3b6:	dd9c      	ble.n	802b2f2 <__sflush_r+0x1a>
 802b3b8:	6a21      	ldr	r1, [r4, #32]
 802b3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b3bc:	4643      	mov	r3, r8
 802b3be:	463a      	mov	r2, r7
 802b3c0:	4628      	mov	r0, r5
 802b3c2:	47b0      	blx	r6
 802b3c4:	2800      	cmp	r0, #0
 802b3c6:	dc06      	bgt.n	802b3d6 <__sflush_r+0xfe>
 802b3c8:	89a3      	ldrh	r3, [r4, #12]
 802b3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b3ce:	81a3      	strh	r3, [r4, #12]
 802b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 802b3d4:	e78e      	b.n	802b2f4 <__sflush_r+0x1c>
 802b3d6:	4407      	add	r7, r0
 802b3d8:	eba8 0800 	sub.w	r8, r8, r0
 802b3dc:	e7e9      	b.n	802b3b2 <__sflush_r+0xda>
 802b3de:	bf00      	nop
 802b3e0:	20400001 	.word	0x20400001

0802b3e4 <_fflush_r>:
 802b3e4:	b538      	push	{r3, r4, r5, lr}
 802b3e6:	690b      	ldr	r3, [r1, #16]
 802b3e8:	4605      	mov	r5, r0
 802b3ea:	460c      	mov	r4, r1
 802b3ec:	b913      	cbnz	r3, 802b3f4 <_fflush_r+0x10>
 802b3ee:	2500      	movs	r5, #0
 802b3f0:	4628      	mov	r0, r5
 802b3f2:	bd38      	pop	{r3, r4, r5, pc}
 802b3f4:	b118      	cbz	r0, 802b3fe <_fflush_r+0x1a>
 802b3f6:	6983      	ldr	r3, [r0, #24]
 802b3f8:	b90b      	cbnz	r3, 802b3fe <_fflush_r+0x1a>
 802b3fa:	f000 f887 	bl	802b50c <__sinit>
 802b3fe:	4b14      	ldr	r3, [pc, #80]	; (802b450 <_fflush_r+0x6c>)
 802b400:	429c      	cmp	r4, r3
 802b402:	d11b      	bne.n	802b43c <_fflush_r+0x58>
 802b404:	686c      	ldr	r4, [r5, #4]
 802b406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b40a:	2b00      	cmp	r3, #0
 802b40c:	d0ef      	beq.n	802b3ee <_fflush_r+0xa>
 802b40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b410:	07d0      	lsls	r0, r2, #31
 802b412:	d404      	bmi.n	802b41e <_fflush_r+0x3a>
 802b414:	0599      	lsls	r1, r3, #22
 802b416:	d402      	bmi.n	802b41e <_fflush_r+0x3a>
 802b418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b41a:	f000 f915 	bl	802b648 <__retarget_lock_acquire_recursive>
 802b41e:	4628      	mov	r0, r5
 802b420:	4621      	mov	r1, r4
 802b422:	f7ff ff59 	bl	802b2d8 <__sflush_r>
 802b426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b428:	07da      	lsls	r2, r3, #31
 802b42a:	4605      	mov	r5, r0
 802b42c:	d4e0      	bmi.n	802b3f0 <_fflush_r+0xc>
 802b42e:	89a3      	ldrh	r3, [r4, #12]
 802b430:	059b      	lsls	r3, r3, #22
 802b432:	d4dd      	bmi.n	802b3f0 <_fflush_r+0xc>
 802b434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b436:	f000 f909 	bl	802b64c <__retarget_lock_release_recursive>
 802b43a:	e7d9      	b.n	802b3f0 <_fflush_r+0xc>
 802b43c:	4b05      	ldr	r3, [pc, #20]	; (802b454 <_fflush_r+0x70>)
 802b43e:	429c      	cmp	r4, r3
 802b440:	d101      	bne.n	802b446 <_fflush_r+0x62>
 802b442:	68ac      	ldr	r4, [r5, #8]
 802b444:	e7df      	b.n	802b406 <_fflush_r+0x22>
 802b446:	4b04      	ldr	r3, [pc, #16]	; (802b458 <_fflush_r+0x74>)
 802b448:	429c      	cmp	r4, r3
 802b44a:	bf08      	it	eq
 802b44c:	68ec      	ldreq	r4, [r5, #12]
 802b44e:	e7da      	b.n	802b406 <_fflush_r+0x22>
 802b450:	08030ffc 	.word	0x08030ffc
 802b454:	0803101c 	.word	0x0803101c
 802b458:	08030fdc 	.word	0x08030fdc

0802b45c <std>:
 802b45c:	2300      	movs	r3, #0
 802b45e:	b510      	push	{r4, lr}
 802b460:	4604      	mov	r4, r0
 802b462:	e9c0 3300 	strd	r3, r3, [r0]
 802b466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b46a:	6083      	str	r3, [r0, #8]
 802b46c:	8181      	strh	r1, [r0, #12]
 802b46e:	6643      	str	r3, [r0, #100]	; 0x64
 802b470:	81c2      	strh	r2, [r0, #14]
 802b472:	6183      	str	r3, [r0, #24]
 802b474:	4619      	mov	r1, r3
 802b476:	2208      	movs	r2, #8
 802b478:	305c      	adds	r0, #92	; 0x5c
 802b47a:	f7ff fa17 	bl	802a8ac <memset>
 802b47e:	4b05      	ldr	r3, [pc, #20]	; (802b494 <std+0x38>)
 802b480:	6263      	str	r3, [r4, #36]	; 0x24
 802b482:	4b05      	ldr	r3, [pc, #20]	; (802b498 <std+0x3c>)
 802b484:	62a3      	str	r3, [r4, #40]	; 0x28
 802b486:	4b05      	ldr	r3, [pc, #20]	; (802b49c <std+0x40>)
 802b488:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b48a:	4b05      	ldr	r3, [pc, #20]	; (802b4a0 <std+0x44>)
 802b48c:	6224      	str	r4, [r4, #32]
 802b48e:	6323      	str	r3, [r4, #48]	; 0x30
 802b490:	bd10      	pop	{r4, pc}
 802b492:	bf00      	nop
 802b494:	0802b731 	.word	0x0802b731
 802b498:	0802b753 	.word	0x0802b753
 802b49c:	0802b78b 	.word	0x0802b78b
 802b4a0:	0802b7af 	.word	0x0802b7af

0802b4a4 <_cleanup_r>:
 802b4a4:	4901      	ldr	r1, [pc, #4]	; (802b4ac <_cleanup_r+0x8>)
 802b4a6:	f000 b8af 	b.w	802b608 <_fwalk_reent>
 802b4aa:	bf00      	nop
 802b4ac:	0802b3e5 	.word	0x0802b3e5

0802b4b0 <__sfmoreglue>:
 802b4b0:	b570      	push	{r4, r5, r6, lr}
 802b4b2:	1e4a      	subs	r2, r1, #1
 802b4b4:	2568      	movs	r5, #104	; 0x68
 802b4b6:	4355      	muls	r5, r2
 802b4b8:	460e      	mov	r6, r1
 802b4ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b4be:	f7ff fa4d 	bl	802a95c <_malloc_r>
 802b4c2:	4604      	mov	r4, r0
 802b4c4:	b140      	cbz	r0, 802b4d8 <__sfmoreglue+0x28>
 802b4c6:	2100      	movs	r1, #0
 802b4c8:	e9c0 1600 	strd	r1, r6, [r0]
 802b4cc:	300c      	adds	r0, #12
 802b4ce:	60a0      	str	r0, [r4, #8]
 802b4d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b4d4:	f7ff f9ea 	bl	802a8ac <memset>
 802b4d8:	4620      	mov	r0, r4
 802b4da:	bd70      	pop	{r4, r5, r6, pc}

0802b4dc <__sfp_lock_acquire>:
 802b4dc:	4801      	ldr	r0, [pc, #4]	; (802b4e4 <__sfp_lock_acquire+0x8>)
 802b4de:	f000 b8b3 	b.w	802b648 <__retarget_lock_acquire_recursive>
 802b4e2:	bf00      	nop
 802b4e4:	200150ec 	.word	0x200150ec

0802b4e8 <__sfp_lock_release>:
 802b4e8:	4801      	ldr	r0, [pc, #4]	; (802b4f0 <__sfp_lock_release+0x8>)
 802b4ea:	f000 b8af 	b.w	802b64c <__retarget_lock_release_recursive>
 802b4ee:	bf00      	nop
 802b4f0:	200150ec 	.word	0x200150ec

0802b4f4 <__sinit_lock_acquire>:
 802b4f4:	4801      	ldr	r0, [pc, #4]	; (802b4fc <__sinit_lock_acquire+0x8>)
 802b4f6:	f000 b8a7 	b.w	802b648 <__retarget_lock_acquire_recursive>
 802b4fa:	bf00      	nop
 802b4fc:	200150e7 	.word	0x200150e7

0802b500 <__sinit_lock_release>:
 802b500:	4801      	ldr	r0, [pc, #4]	; (802b508 <__sinit_lock_release+0x8>)
 802b502:	f000 b8a3 	b.w	802b64c <__retarget_lock_release_recursive>
 802b506:	bf00      	nop
 802b508:	200150e7 	.word	0x200150e7

0802b50c <__sinit>:
 802b50c:	b510      	push	{r4, lr}
 802b50e:	4604      	mov	r4, r0
 802b510:	f7ff fff0 	bl	802b4f4 <__sinit_lock_acquire>
 802b514:	69a3      	ldr	r3, [r4, #24]
 802b516:	b11b      	cbz	r3, 802b520 <__sinit+0x14>
 802b518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b51c:	f7ff bff0 	b.w	802b500 <__sinit_lock_release>
 802b520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802b524:	6523      	str	r3, [r4, #80]	; 0x50
 802b526:	4b13      	ldr	r3, [pc, #76]	; (802b574 <__sinit+0x68>)
 802b528:	4a13      	ldr	r2, [pc, #76]	; (802b578 <__sinit+0x6c>)
 802b52a:	681b      	ldr	r3, [r3, #0]
 802b52c:	62a2      	str	r2, [r4, #40]	; 0x28
 802b52e:	42a3      	cmp	r3, r4
 802b530:	bf04      	itt	eq
 802b532:	2301      	moveq	r3, #1
 802b534:	61a3      	streq	r3, [r4, #24]
 802b536:	4620      	mov	r0, r4
 802b538:	f000 f820 	bl	802b57c <__sfp>
 802b53c:	6060      	str	r0, [r4, #4]
 802b53e:	4620      	mov	r0, r4
 802b540:	f000 f81c 	bl	802b57c <__sfp>
 802b544:	60a0      	str	r0, [r4, #8]
 802b546:	4620      	mov	r0, r4
 802b548:	f000 f818 	bl	802b57c <__sfp>
 802b54c:	2200      	movs	r2, #0
 802b54e:	60e0      	str	r0, [r4, #12]
 802b550:	2104      	movs	r1, #4
 802b552:	6860      	ldr	r0, [r4, #4]
 802b554:	f7ff ff82 	bl	802b45c <std>
 802b558:	68a0      	ldr	r0, [r4, #8]
 802b55a:	2201      	movs	r2, #1
 802b55c:	2109      	movs	r1, #9
 802b55e:	f7ff ff7d 	bl	802b45c <std>
 802b562:	68e0      	ldr	r0, [r4, #12]
 802b564:	2202      	movs	r2, #2
 802b566:	2112      	movs	r1, #18
 802b568:	f7ff ff78 	bl	802b45c <std>
 802b56c:	2301      	movs	r3, #1
 802b56e:	61a3      	str	r3, [r4, #24]
 802b570:	e7d2      	b.n	802b518 <__sinit+0xc>
 802b572:	bf00      	nop
 802b574:	08030fa0 	.word	0x08030fa0
 802b578:	0802b4a5 	.word	0x0802b4a5

0802b57c <__sfp>:
 802b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b57e:	4607      	mov	r7, r0
 802b580:	f7ff ffac 	bl	802b4dc <__sfp_lock_acquire>
 802b584:	4b1e      	ldr	r3, [pc, #120]	; (802b600 <__sfp+0x84>)
 802b586:	681e      	ldr	r6, [r3, #0]
 802b588:	69b3      	ldr	r3, [r6, #24]
 802b58a:	b913      	cbnz	r3, 802b592 <__sfp+0x16>
 802b58c:	4630      	mov	r0, r6
 802b58e:	f7ff ffbd 	bl	802b50c <__sinit>
 802b592:	3648      	adds	r6, #72	; 0x48
 802b594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b598:	3b01      	subs	r3, #1
 802b59a:	d503      	bpl.n	802b5a4 <__sfp+0x28>
 802b59c:	6833      	ldr	r3, [r6, #0]
 802b59e:	b30b      	cbz	r3, 802b5e4 <__sfp+0x68>
 802b5a0:	6836      	ldr	r6, [r6, #0]
 802b5a2:	e7f7      	b.n	802b594 <__sfp+0x18>
 802b5a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b5a8:	b9d5      	cbnz	r5, 802b5e0 <__sfp+0x64>
 802b5aa:	4b16      	ldr	r3, [pc, #88]	; (802b604 <__sfp+0x88>)
 802b5ac:	60e3      	str	r3, [r4, #12]
 802b5ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b5b2:	6665      	str	r5, [r4, #100]	; 0x64
 802b5b4:	f000 f847 	bl	802b646 <__retarget_lock_init_recursive>
 802b5b8:	f7ff ff96 	bl	802b4e8 <__sfp_lock_release>
 802b5bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802b5c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b5c4:	6025      	str	r5, [r4, #0]
 802b5c6:	61a5      	str	r5, [r4, #24]
 802b5c8:	2208      	movs	r2, #8
 802b5ca:	4629      	mov	r1, r5
 802b5cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b5d0:	f7ff f96c 	bl	802a8ac <memset>
 802b5d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b5d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b5dc:	4620      	mov	r0, r4
 802b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b5e0:	3468      	adds	r4, #104	; 0x68
 802b5e2:	e7d9      	b.n	802b598 <__sfp+0x1c>
 802b5e4:	2104      	movs	r1, #4
 802b5e6:	4638      	mov	r0, r7
 802b5e8:	f7ff ff62 	bl	802b4b0 <__sfmoreglue>
 802b5ec:	4604      	mov	r4, r0
 802b5ee:	6030      	str	r0, [r6, #0]
 802b5f0:	2800      	cmp	r0, #0
 802b5f2:	d1d5      	bne.n	802b5a0 <__sfp+0x24>
 802b5f4:	f7ff ff78 	bl	802b4e8 <__sfp_lock_release>
 802b5f8:	230c      	movs	r3, #12
 802b5fa:	603b      	str	r3, [r7, #0]
 802b5fc:	e7ee      	b.n	802b5dc <__sfp+0x60>
 802b5fe:	bf00      	nop
 802b600:	08030fa0 	.word	0x08030fa0
 802b604:	ffff0001 	.word	0xffff0001

0802b608 <_fwalk_reent>:
 802b608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b60c:	4606      	mov	r6, r0
 802b60e:	4688      	mov	r8, r1
 802b610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b614:	2700      	movs	r7, #0
 802b616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b61a:	f1b9 0901 	subs.w	r9, r9, #1
 802b61e:	d505      	bpl.n	802b62c <_fwalk_reent+0x24>
 802b620:	6824      	ldr	r4, [r4, #0]
 802b622:	2c00      	cmp	r4, #0
 802b624:	d1f7      	bne.n	802b616 <_fwalk_reent+0xe>
 802b626:	4638      	mov	r0, r7
 802b628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b62c:	89ab      	ldrh	r3, [r5, #12]
 802b62e:	2b01      	cmp	r3, #1
 802b630:	d907      	bls.n	802b642 <_fwalk_reent+0x3a>
 802b632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b636:	3301      	adds	r3, #1
 802b638:	d003      	beq.n	802b642 <_fwalk_reent+0x3a>
 802b63a:	4629      	mov	r1, r5
 802b63c:	4630      	mov	r0, r6
 802b63e:	47c0      	blx	r8
 802b640:	4307      	orrs	r7, r0
 802b642:	3568      	adds	r5, #104	; 0x68
 802b644:	e7e9      	b.n	802b61a <_fwalk_reent+0x12>

0802b646 <__retarget_lock_init_recursive>:
 802b646:	4770      	bx	lr

0802b648 <__retarget_lock_acquire_recursive>:
 802b648:	4770      	bx	lr

0802b64a <__retarget_lock_release>:
 802b64a:	4770      	bx	lr

0802b64c <__retarget_lock_release_recursive>:
 802b64c:	4770      	bx	lr

0802b64e <__swhatbuf_r>:
 802b64e:	b570      	push	{r4, r5, r6, lr}
 802b650:	460e      	mov	r6, r1
 802b652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b656:	2900      	cmp	r1, #0
 802b658:	b096      	sub	sp, #88	; 0x58
 802b65a:	4614      	mov	r4, r2
 802b65c:	461d      	mov	r5, r3
 802b65e:	da07      	bge.n	802b670 <__swhatbuf_r+0x22>
 802b660:	2300      	movs	r3, #0
 802b662:	602b      	str	r3, [r5, #0]
 802b664:	89b3      	ldrh	r3, [r6, #12]
 802b666:	061a      	lsls	r2, r3, #24
 802b668:	d410      	bmi.n	802b68c <__swhatbuf_r+0x3e>
 802b66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b66e:	e00e      	b.n	802b68e <__swhatbuf_r+0x40>
 802b670:	466a      	mov	r2, sp
 802b672:	f000 f8c3 	bl	802b7fc <_fstat_r>
 802b676:	2800      	cmp	r0, #0
 802b678:	dbf2      	blt.n	802b660 <__swhatbuf_r+0x12>
 802b67a:	9a01      	ldr	r2, [sp, #4]
 802b67c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b684:	425a      	negs	r2, r3
 802b686:	415a      	adcs	r2, r3
 802b688:	602a      	str	r2, [r5, #0]
 802b68a:	e7ee      	b.n	802b66a <__swhatbuf_r+0x1c>
 802b68c:	2340      	movs	r3, #64	; 0x40
 802b68e:	2000      	movs	r0, #0
 802b690:	6023      	str	r3, [r4, #0]
 802b692:	b016      	add	sp, #88	; 0x58
 802b694:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b698 <__smakebuf_r>:
 802b698:	898b      	ldrh	r3, [r1, #12]
 802b69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b69c:	079d      	lsls	r5, r3, #30
 802b69e:	4606      	mov	r6, r0
 802b6a0:	460c      	mov	r4, r1
 802b6a2:	d507      	bpl.n	802b6b4 <__smakebuf_r+0x1c>
 802b6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b6a8:	6023      	str	r3, [r4, #0]
 802b6aa:	6123      	str	r3, [r4, #16]
 802b6ac:	2301      	movs	r3, #1
 802b6ae:	6163      	str	r3, [r4, #20]
 802b6b0:	b002      	add	sp, #8
 802b6b2:	bd70      	pop	{r4, r5, r6, pc}
 802b6b4:	ab01      	add	r3, sp, #4
 802b6b6:	466a      	mov	r2, sp
 802b6b8:	f7ff ffc9 	bl	802b64e <__swhatbuf_r>
 802b6bc:	9900      	ldr	r1, [sp, #0]
 802b6be:	4605      	mov	r5, r0
 802b6c0:	4630      	mov	r0, r6
 802b6c2:	f7ff f94b 	bl	802a95c <_malloc_r>
 802b6c6:	b948      	cbnz	r0, 802b6dc <__smakebuf_r+0x44>
 802b6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b6cc:	059a      	lsls	r2, r3, #22
 802b6ce:	d4ef      	bmi.n	802b6b0 <__smakebuf_r+0x18>
 802b6d0:	f023 0303 	bic.w	r3, r3, #3
 802b6d4:	f043 0302 	orr.w	r3, r3, #2
 802b6d8:	81a3      	strh	r3, [r4, #12]
 802b6da:	e7e3      	b.n	802b6a4 <__smakebuf_r+0xc>
 802b6dc:	4b0d      	ldr	r3, [pc, #52]	; (802b714 <__smakebuf_r+0x7c>)
 802b6de:	62b3      	str	r3, [r6, #40]	; 0x28
 802b6e0:	89a3      	ldrh	r3, [r4, #12]
 802b6e2:	6020      	str	r0, [r4, #0]
 802b6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b6e8:	81a3      	strh	r3, [r4, #12]
 802b6ea:	9b00      	ldr	r3, [sp, #0]
 802b6ec:	6163      	str	r3, [r4, #20]
 802b6ee:	9b01      	ldr	r3, [sp, #4]
 802b6f0:	6120      	str	r0, [r4, #16]
 802b6f2:	b15b      	cbz	r3, 802b70c <__smakebuf_r+0x74>
 802b6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b6f8:	4630      	mov	r0, r6
 802b6fa:	f000 f891 	bl	802b820 <_isatty_r>
 802b6fe:	b128      	cbz	r0, 802b70c <__smakebuf_r+0x74>
 802b700:	89a3      	ldrh	r3, [r4, #12]
 802b702:	f023 0303 	bic.w	r3, r3, #3
 802b706:	f043 0301 	orr.w	r3, r3, #1
 802b70a:	81a3      	strh	r3, [r4, #12]
 802b70c:	89a0      	ldrh	r0, [r4, #12]
 802b70e:	4305      	orrs	r5, r0
 802b710:	81a5      	strh	r5, [r4, #12]
 802b712:	e7cd      	b.n	802b6b0 <__smakebuf_r+0x18>
 802b714:	0802b4a5 	.word	0x0802b4a5

0802b718 <__malloc_lock>:
 802b718:	4801      	ldr	r0, [pc, #4]	; (802b720 <__malloc_lock+0x8>)
 802b71a:	f7ff bf95 	b.w	802b648 <__retarget_lock_acquire_recursive>
 802b71e:	bf00      	nop
 802b720:	200150e8 	.word	0x200150e8

0802b724 <__malloc_unlock>:
 802b724:	4801      	ldr	r0, [pc, #4]	; (802b72c <__malloc_unlock+0x8>)
 802b726:	f7ff bf91 	b.w	802b64c <__retarget_lock_release_recursive>
 802b72a:	bf00      	nop
 802b72c:	200150e8 	.word	0x200150e8

0802b730 <__sread>:
 802b730:	b510      	push	{r4, lr}
 802b732:	460c      	mov	r4, r1
 802b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b738:	f000 f894 	bl	802b864 <_read_r>
 802b73c:	2800      	cmp	r0, #0
 802b73e:	bfab      	itete	ge
 802b740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b742:	89a3      	ldrhlt	r3, [r4, #12]
 802b744:	181b      	addge	r3, r3, r0
 802b746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b74a:	bfac      	ite	ge
 802b74c:	6563      	strge	r3, [r4, #84]	; 0x54
 802b74e:	81a3      	strhlt	r3, [r4, #12]
 802b750:	bd10      	pop	{r4, pc}

0802b752 <__swrite>:
 802b752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b756:	461f      	mov	r7, r3
 802b758:	898b      	ldrh	r3, [r1, #12]
 802b75a:	05db      	lsls	r3, r3, #23
 802b75c:	4605      	mov	r5, r0
 802b75e:	460c      	mov	r4, r1
 802b760:	4616      	mov	r6, r2
 802b762:	d505      	bpl.n	802b770 <__swrite+0x1e>
 802b764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b768:	2302      	movs	r3, #2
 802b76a:	2200      	movs	r2, #0
 802b76c:	f000 f868 	bl	802b840 <_lseek_r>
 802b770:	89a3      	ldrh	r3, [r4, #12]
 802b772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b77a:	81a3      	strh	r3, [r4, #12]
 802b77c:	4632      	mov	r2, r6
 802b77e:	463b      	mov	r3, r7
 802b780:	4628      	mov	r0, r5
 802b782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b786:	f000 b817 	b.w	802b7b8 <_write_r>

0802b78a <__sseek>:
 802b78a:	b510      	push	{r4, lr}
 802b78c:	460c      	mov	r4, r1
 802b78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b792:	f000 f855 	bl	802b840 <_lseek_r>
 802b796:	1c43      	adds	r3, r0, #1
 802b798:	89a3      	ldrh	r3, [r4, #12]
 802b79a:	bf15      	itete	ne
 802b79c:	6560      	strne	r0, [r4, #84]	; 0x54
 802b79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b7a6:	81a3      	strheq	r3, [r4, #12]
 802b7a8:	bf18      	it	ne
 802b7aa:	81a3      	strhne	r3, [r4, #12]
 802b7ac:	bd10      	pop	{r4, pc}

0802b7ae <__sclose>:
 802b7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b7b2:	f000 b813 	b.w	802b7dc <_close_r>
	...

0802b7b8 <_write_r>:
 802b7b8:	b538      	push	{r3, r4, r5, lr}
 802b7ba:	4d07      	ldr	r5, [pc, #28]	; (802b7d8 <_write_r+0x20>)
 802b7bc:	4604      	mov	r4, r0
 802b7be:	4608      	mov	r0, r1
 802b7c0:	4611      	mov	r1, r2
 802b7c2:	2200      	movs	r2, #0
 802b7c4:	602a      	str	r2, [r5, #0]
 802b7c6:	461a      	mov	r2, r3
 802b7c8:	f7d4 ff3e 	bl	8000648 <_write>
 802b7cc:	1c43      	adds	r3, r0, #1
 802b7ce:	d102      	bne.n	802b7d6 <_write_r+0x1e>
 802b7d0:	682b      	ldr	r3, [r5, #0]
 802b7d2:	b103      	cbz	r3, 802b7d6 <_write_r+0x1e>
 802b7d4:	6023      	str	r3, [r4, #0]
 802b7d6:	bd38      	pop	{r3, r4, r5, pc}
 802b7d8:	200150f0 	.word	0x200150f0

0802b7dc <_close_r>:
 802b7dc:	b538      	push	{r3, r4, r5, lr}
 802b7de:	4d06      	ldr	r5, [pc, #24]	; (802b7f8 <_close_r+0x1c>)
 802b7e0:	2300      	movs	r3, #0
 802b7e2:	4604      	mov	r4, r0
 802b7e4:	4608      	mov	r0, r1
 802b7e6:	602b      	str	r3, [r5, #0]
 802b7e8:	f7d5 ff97 	bl	800171a <_close>
 802b7ec:	1c43      	adds	r3, r0, #1
 802b7ee:	d102      	bne.n	802b7f6 <_close_r+0x1a>
 802b7f0:	682b      	ldr	r3, [r5, #0]
 802b7f2:	b103      	cbz	r3, 802b7f6 <_close_r+0x1a>
 802b7f4:	6023      	str	r3, [r4, #0]
 802b7f6:	bd38      	pop	{r3, r4, r5, pc}
 802b7f8:	200150f0 	.word	0x200150f0

0802b7fc <_fstat_r>:
 802b7fc:	b538      	push	{r3, r4, r5, lr}
 802b7fe:	4d07      	ldr	r5, [pc, #28]	; (802b81c <_fstat_r+0x20>)
 802b800:	2300      	movs	r3, #0
 802b802:	4604      	mov	r4, r0
 802b804:	4608      	mov	r0, r1
 802b806:	4611      	mov	r1, r2
 802b808:	602b      	str	r3, [r5, #0]
 802b80a:	f7d5 ff92 	bl	8001732 <_fstat>
 802b80e:	1c43      	adds	r3, r0, #1
 802b810:	d102      	bne.n	802b818 <_fstat_r+0x1c>
 802b812:	682b      	ldr	r3, [r5, #0]
 802b814:	b103      	cbz	r3, 802b818 <_fstat_r+0x1c>
 802b816:	6023      	str	r3, [r4, #0]
 802b818:	bd38      	pop	{r3, r4, r5, pc}
 802b81a:	bf00      	nop
 802b81c:	200150f0 	.word	0x200150f0

0802b820 <_isatty_r>:
 802b820:	b538      	push	{r3, r4, r5, lr}
 802b822:	4d06      	ldr	r5, [pc, #24]	; (802b83c <_isatty_r+0x1c>)
 802b824:	2300      	movs	r3, #0
 802b826:	4604      	mov	r4, r0
 802b828:	4608      	mov	r0, r1
 802b82a:	602b      	str	r3, [r5, #0]
 802b82c:	f7d5 ff91 	bl	8001752 <_isatty>
 802b830:	1c43      	adds	r3, r0, #1
 802b832:	d102      	bne.n	802b83a <_isatty_r+0x1a>
 802b834:	682b      	ldr	r3, [r5, #0]
 802b836:	b103      	cbz	r3, 802b83a <_isatty_r+0x1a>
 802b838:	6023      	str	r3, [r4, #0]
 802b83a:	bd38      	pop	{r3, r4, r5, pc}
 802b83c:	200150f0 	.word	0x200150f0

0802b840 <_lseek_r>:
 802b840:	b538      	push	{r3, r4, r5, lr}
 802b842:	4d07      	ldr	r5, [pc, #28]	; (802b860 <_lseek_r+0x20>)
 802b844:	4604      	mov	r4, r0
 802b846:	4608      	mov	r0, r1
 802b848:	4611      	mov	r1, r2
 802b84a:	2200      	movs	r2, #0
 802b84c:	602a      	str	r2, [r5, #0]
 802b84e:	461a      	mov	r2, r3
 802b850:	f7d5 ff8a 	bl	8001768 <_lseek>
 802b854:	1c43      	adds	r3, r0, #1
 802b856:	d102      	bne.n	802b85e <_lseek_r+0x1e>
 802b858:	682b      	ldr	r3, [r5, #0]
 802b85a:	b103      	cbz	r3, 802b85e <_lseek_r+0x1e>
 802b85c:	6023      	str	r3, [r4, #0]
 802b85e:	bd38      	pop	{r3, r4, r5, pc}
 802b860:	200150f0 	.word	0x200150f0

0802b864 <_read_r>:
 802b864:	b538      	push	{r3, r4, r5, lr}
 802b866:	4d07      	ldr	r5, [pc, #28]	; (802b884 <_read_r+0x20>)
 802b868:	4604      	mov	r4, r0
 802b86a:	4608      	mov	r0, r1
 802b86c:	4611      	mov	r1, r2
 802b86e:	2200      	movs	r2, #0
 802b870:	602a      	str	r2, [r5, #0]
 802b872:	461a      	mov	r2, r3
 802b874:	f7d5 ff34 	bl	80016e0 <_read>
 802b878:	1c43      	adds	r3, r0, #1
 802b87a:	d102      	bne.n	802b882 <_read_r+0x1e>
 802b87c:	682b      	ldr	r3, [r5, #0]
 802b87e:	b103      	cbz	r3, 802b882 <_read_r+0x1e>
 802b880:	6023      	str	r3, [r4, #0]
 802b882:	bd38      	pop	{r3, r4, r5, pc}
 802b884:	200150f0 	.word	0x200150f0

0802b888 <_init>:
 802b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b88a:	bf00      	nop
 802b88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b88e:	bc08      	pop	{r3}
 802b890:	469e      	mov	lr, r3
 802b892:	4770      	bx	lr

0802b894 <_fini>:
 802b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b896:	bf00      	nop
 802b898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b89a:	bc08      	pop	{r3}
 802b89c:	469e      	mov	lr, r3
 802b89e:	4770      	bx	lr
